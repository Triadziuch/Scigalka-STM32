
Scigalka - STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e9d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c0  0801eb68  0801eb68  0002eb68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f428  0801f428  00030390  2**0
                  CONTENTS
  4 .ARM          00000008  0801f428  0801f428  0002f428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f430  0801f430  00030390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f430  0801f430  0002f430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f434  0801f434  0002f434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000390  20000000  0801f438  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cb4  20000390  0801f7c8  00030390  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002044  0801f7c8  00032044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000303c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00041287  00000000  00000000  00030453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000659d  00000000  00000000  000716da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003950  00000000  00000000  00077c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002c11  00000000  00000000  0007b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f0ca  00000000  00000000  0007e1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035963  00000000  00000000  000ad2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001137c4  00000000  00000000  000e2c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00010be0  00000000  00000000  001f63cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00206fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000390 	.word	0x20000390
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801eb50 	.word	0x0801eb50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000394 	.word	0x20000394
 80001cc:	0801eb50 	.word	0x0801eb50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <BSP_I2C1_Init+0x70>)
 8000f50:	4a19      	ldr	r2, [pc, #100]	; (8000fb8 <BSP_I2C1_Init+0x74>)
 8000f52:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <BSP_I2C1_Init+0x78>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	4918      	ldr	r1, [pc, #96]	; (8000fbc <BSP_I2C1_Init+0x78>)
 8000f5c:	600a      	str	r2, [r1, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d122      	bne.n	8000fa8 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000f62:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <BSP_I2C1_Init+0x70>)
 8000f64:	f009 ff5e 	bl	800ae24 <HAL_I2C_GetState>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d11c      	bne.n	8000fa8 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <BSP_I2C1_Init+0x70>)
 8000f70:	f000 f8fe 	bl	8001170 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d116      	bne.n	8000fa8 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000f7a:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <BSP_I2C1_Init+0x70>)
 8000f7c:	f000 f8b4 	bl	80010e8 <MX_I2C1_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f86:	f06f 0307 	mvn.w	r3, #7
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	e00c      	b.n	8000fa8 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <BSP_I2C1_Init+0x70>)
 8000f92:	f00a fa19 	bl	800b3c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000f9c:	f06f 0307 	mvn.w	r3, #7
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	e001      	b.n	8000fa8 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000c08 	.word	0x20000c08
 8000fb8:	40005400 	.word	0x40005400
 8000fbc:	20000c5c 	.word	0x20000c5c

08000fc0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <BSP_I2C1_DeInit+0x48>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d014      	beq.n	8000ffc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <BSP_I2C1_DeInit+0x48>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <BSP_I2C1_DeInit+0x48>)
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <BSP_I2C1_DeInit+0x48>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d10b      	bne.n	8000ffc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <BSP_I2C1_DeInit+0x4c>)
 8000fe6:	f000 f923 	bl	8001230 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000fea:	4808      	ldr	r0, [pc, #32]	; (800100c <BSP_I2C1_DeInit+0x4c>)
 8000fec:	f009 fca9 	bl	800a942 <HAL_I2C_DeInit>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000ff6:	f06f 0307 	mvn.w	r3, #7
 8000ffa:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ffc:	687b      	ldr	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000c5c 	.word	0x20000c5c
 800100c:	20000c08 	.word	0x20000c08

08001010 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af04      	add	r7, sp, #16
 8001016:	60ba      	str	r2, [r7, #8]
 8001018:	461a      	mov	r2, r3
 800101a:	4603      	mov	r3, r0
 800101c:	81fb      	strh	r3, [r7, #14]
 800101e:	460b      	mov	r3, r1
 8001020:	81bb      	strh	r3, [r7, #12]
 8001022:	4613      	mov	r3, r2
 8001024:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800102a:	89ba      	ldrh	r2, [r7, #12]
 800102c:	89f9      	ldrh	r1, [r7, #14]
 800102e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <BSP_I2C1_WriteReg+0x60>)
 8001040:	f009 fcc2 	bl	800a9c8 <HAL_I2C_Mem_Write>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00c      	beq.n	8001064 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <BSP_I2C1_WriteReg+0x60>)
 800104c:	f009 fef8 	bl	800ae40 <HAL_I2C_GetError>
 8001050:	4603      	mov	r3, r0
 8001052:	2b04      	cmp	r3, #4
 8001054:	d103      	bne.n	800105e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001056:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e002      	b.n	8001064 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800105e:	f06f 0303 	mvn.w	r3, #3
 8001062:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001064:	697b      	ldr	r3, [r7, #20]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000c08 	.word	0x20000c08

08001074 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af04      	add	r7, sp, #16
 800107a:	60ba      	str	r2, [r7, #8]
 800107c:	461a      	mov	r2, r3
 800107e:	4603      	mov	r3, r0
 8001080:	81fb      	strh	r3, [r7, #14]
 8001082:	460b      	mov	r3, r1
 8001084:	81bb      	strh	r3, [r7, #12]
 8001086:	4613      	mov	r3, r2
 8001088:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800108e:	89ba      	ldrh	r2, [r7, #12]
 8001090:	89f9      	ldrh	r1, [r7, #14]
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	480c      	ldr	r0, [pc, #48]	; (80010d4 <BSP_I2C1_ReadReg+0x60>)
 80010a4:	f009 fda4 	bl	800abf0 <HAL_I2C_Mem_Read>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00c      	beq.n	80010c8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <BSP_I2C1_ReadReg+0x60>)
 80010b0:	f009 fec6 	bl	800ae40 <HAL_I2C_GetError>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d103      	bne.n	80010c2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80010ba:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e002      	b.n	80010c8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80010c2:	f06f 0303 	mvn.w	r3, #3
 80010c6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80010c8:	697b      	ldr	r3, [r7, #20]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000c08 	.word	0x20000c08

080010d8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010dc:	f008 fd26 	bl	8009b2c <HAL_GetTick>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a1d      	ldr	r2, [pc, #116]	; (800116c <MX_I2C1_Init+0x84>)
 80010f8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00000E14;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f640 6214 	movw	r2, #3604	; 0xe14
 8001100:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f009 fb6d 	bl	800a80c <HAL_I2C_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800113c:	2100      	movs	r1, #0
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f00a f942 	bl	800b3c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_I2C1_Init+0x66>
  {
    ret = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800114e:	2100      	movs	r1, #0
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f00a f984 	bl	800b45e <HAL_I2CEx_ConfigDigitalFilter>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_I2C1_Init+0x78>
  {
    ret = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40005400 	.word	0x40005400

08001170 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0ac      	sub	sp, #176	; 0xb0
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2288      	movs	r2, #136	; 0x88
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f019 fd02 	bl	801ab8a <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001186:	2340      	movs	r3, #64	; 0x40
 8001188:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800118a:	2300      	movs	r3, #0
 800118c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4618      	mov	r0, r3
 8001194:	f00b f824 	bl	800c1e0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <I2C1_MspInit+0xb8>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a22      	ldr	r2, [pc, #136]	; (8001228 <I2C1_MspInit+0xb8>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <I2C1_MspInit+0xb8>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80011b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b8:	2312      	movs	r3, #18
 80011ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80011ca:	2304      	movs	r3, #4
 80011cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80011d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d4:	4619      	mov	r1, r3
 80011d6:	4815      	ldr	r0, [pc, #84]	; (800122c <I2C1_MspInit+0xbc>)
 80011d8:	f009 f84a 	bl	800a270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80011dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e4:	2312      	movs	r3, #18
 80011e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80011f6:	2304      	movs	r3, #4
 80011f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80011fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001200:	4619      	mov	r1, r3
 8001202:	480a      	ldr	r0, [pc, #40]	; (800122c <I2C1_MspInit+0xbc>)
 8001204:	f009 f834 	bl	800a270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <I2C1_MspInit+0xb8>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	4a06      	ldr	r2, [pc, #24]	; (8001228 <I2C1_MspInit+0xb8>)
 800120e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001212:	6593      	str	r3, [r2, #88]	; 0x58
 8001214:	4b04      	ldr	r3, [pc, #16]	; (8001228 <I2C1_MspInit+0xb8>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	37b0      	adds	r7, #176	; 0xb0
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	48000400 	.word	0x48000400

08001230 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <I2C1_MspDeInit+0x30>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	4a08      	ldr	r2, [pc, #32]	; (8001260 <I2C1_MspDeInit+0x30>)
 800123e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001242:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001248:	4806      	ldr	r0, [pc, #24]	; (8001264 <I2C1_MspDeInit+0x34>)
 800124a:	f009 f9bb 	bl	800a5c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800124e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <I2C1_MspDeInit+0x34>)
 8001254:	f009 f9b6 	bl	800a5c4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	48000400 	.word	0x48000400

08001268 <Delay>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8001270:	e002      	b.n	8001278 <Delay+0x10>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3b01      	subs	r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <Delay+0xa>
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <lcd_delay>:
void lcd_delay(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	Delay(200);
 8001290:	20c8      	movs	r0, #200	; 0xc8
 8001292:	f7ff ffe9 	bl	8001268 <Delay>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <lcd_cmd>:

void lcd_cmd(char out_char)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 80012a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ae:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80012b0:	4b5e      	ldr	r3, [pc, #376]	; (800142c <lcd_cmd+0x190>)
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80012b6:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <lcd_cmd+0x194>)
 80012b8:	2220      	movs	r2, #32
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80012bc:	4b5c      	ldr	r3, [pc, #368]	; (8001430 <lcd_cmd+0x194>)
 80012be:	2210      	movs	r2, #16
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80012c2:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <lcd_cmd+0x194>)
 80012c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80012ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80012d4:	f7ff ffda 	bl	800128c <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80012d8:	4b54      	ldr	r3, [pc, #336]	; (800142c <lcd_cmd+0x190>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	4a53      	ldr	r2, [pc, #332]	; (800142c <lcd_cmd+0x190>)
 80012de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e2:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <lcd_cmd+0x5a>
 80012ee:	4b50      	ldr	r3, [pc, #320]	; (8001430 <lcd_cmd+0x194>)
 80012f0:	2220      	movs	r2, #32
 80012f2:	619a      	str	r2, [r3, #24]
 80012f4:	e003      	b.n	80012fe <lcd_cmd+0x62>
 80012f6:	4b4e      	ldr	r3, [pc, #312]	; (8001430 <lcd_cmd+0x194>)
 80012f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80012fc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 0320 	and.w	r3, r3, #32
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <lcd_cmd+0x74>
 8001308:	4b49      	ldr	r3, [pc, #292]	; (8001430 <lcd_cmd+0x194>)
 800130a:	2210      	movs	r2, #16
 800130c:	619a      	str	r2, [r3, #24]
 800130e:	e003      	b.n	8001318 <lcd_cmd+0x7c>
 8001310:	4b47      	ldr	r3, [pc, #284]	; (8001430 <lcd_cmd+0x194>)
 8001312:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001316:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <lcd_cmd+0x90>
 8001322:	4b43      	ldr	r3, [pc, #268]	; (8001430 <lcd_cmd+0x194>)
 8001324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001328:	619a      	str	r2, [r3, #24]
 800132a:	e003      	b.n	8001334 <lcd_cmd+0x98>
 800132c:	4b40      	ldr	r3, [pc, #256]	; (8001430 <lcd_cmd+0x194>)
 800132e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001332:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	da05      	bge.n	8001348 <lcd_cmd+0xac>
 800133c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001340:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001344:	619a      	str	r2, [r3, #24]
 8001346:	e004      	b.n	8001352 <lcd_cmd+0xb6>
 8001348:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800134c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001350:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8001352:	f7ff ff9b 	bl	800128c <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8001356:	4b35      	ldr	r3, [pc, #212]	; (800142c <lcd_cmd+0x190>)
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800135c:	4b34      	ldr	r3, [pc, #208]	; (8001430 <lcd_cmd+0x194>)
 800135e:	2220      	movs	r2, #32
 8001360:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8001362:	4b33      	ldr	r3, [pc, #204]	; (8001430 <lcd_cmd+0x194>)
 8001364:	2210      	movs	r2, #16
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <lcd_cmd+0x194>)
 800136a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8001370:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001378:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800137a:	f7ff ff87 	bl	800128c <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <lcd_cmd+0x190>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	4a2a      	ldr	r2, [pc, #168]	; (800142c <lcd_cmd+0x190>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001388:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <lcd_cmd+0x100>
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <lcd_cmd+0x194>)
 8001396:	2220      	movs	r2, #32
 8001398:	619a      	str	r2, [r3, #24]
 800139a:	e003      	b.n	80013a4 <lcd_cmd+0x108>
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <lcd_cmd+0x194>)
 800139e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013a2:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <lcd_cmd+0x11a>
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <lcd_cmd+0x194>)
 80013b0:	2210      	movs	r2, #16
 80013b2:	619a      	str	r2, [r3, #24]
 80013b4:	e003      	b.n	80013be <lcd_cmd+0x122>
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <lcd_cmd+0x194>)
 80013b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013bc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <lcd_cmd+0x136>
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <lcd_cmd+0x194>)
 80013ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ce:	619a      	str	r2, [r3, #24]
 80013d0:	e003      	b.n	80013da <lcd_cmd+0x13e>
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <lcd_cmd+0x194>)
 80013d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013d8:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <lcd_cmd+0x154>
 80013e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ec:	619a      	str	r2, [r3, #24]
 80013ee:	e004      	b.n	80013fa <lcd_cmd+0x15e>
 80013f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013f8:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80013fa:	f7ff ff47 	bl	800128c <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <lcd_cmd+0x190>)
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <lcd_cmd+0x194>)
 8001406:	2220      	movs	r2, #32
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <lcd_cmd+0x194>)
 800140c:	2210      	movs	r2, #16
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <lcd_cmd+0x194>)
 8001412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8001418:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800141c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	48000800 	.word	0x48000800
 8001430:	48000400 	.word	0x48000400

08001434 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800143e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144c:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800144e:	4b5e      	ldr	r3, [pc, #376]	; (80015c8 <lcd_char_cp+0x194>)
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8001454:	4b5d      	ldr	r3, [pc, #372]	; (80015cc <lcd_char_cp+0x198>)
 8001456:	2220      	movs	r2, #32
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800145a:	4b5c      	ldr	r3, [pc, #368]	; (80015cc <lcd_char_cp+0x198>)
 800145c:	2210      	movs	r2, #16
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8001460:	4b5a      	ldr	r3, [pc, #360]	; (80015cc <lcd_char_cp+0x198>)
 8001462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8001468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800146c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001470:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8001472:	f7ff ff0b 	bl	800128c <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8001476:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <lcd_char_cp+0x194>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	4a53      	ldr	r2, [pc, #332]	; (80015c8 <lcd_char_cp+0x194>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001480:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <lcd_char_cp+0x60>
 800148c:	4b4f      	ldr	r3, [pc, #316]	; (80015cc <lcd_char_cp+0x198>)
 800148e:	2220      	movs	r2, #32
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	e003      	b.n	800149c <lcd_char_cp+0x68>
 8001494:	4b4d      	ldr	r3, [pc, #308]	; (80015cc <lcd_char_cp+0x198>)
 8001496:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800149a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <lcd_char_cp+0x7a>
 80014a6:	4b49      	ldr	r3, [pc, #292]	; (80015cc <lcd_char_cp+0x198>)
 80014a8:	2210      	movs	r2, #16
 80014aa:	619a      	str	r2, [r3, #24]
 80014ac:	e003      	b.n	80014b6 <lcd_char_cp+0x82>
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <lcd_char_cp+0x198>)
 80014b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014b4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <lcd_char_cp+0x96>
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <lcd_char_cp+0x198>)
 80014c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c6:	619a      	str	r2, [r3, #24]
 80014c8:	e003      	b.n	80014d2 <lcd_char_cp+0x9e>
 80014ca:	4b40      	ldr	r3, [pc, #256]	; (80015cc <lcd_char_cp+0x198>)
 80014cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014d0:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da05      	bge.n	80014e6 <lcd_char_cp+0xb2>
 80014da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e2:	619a      	str	r2, [r3, #24]
 80014e4:	e004      	b.n	80014f0 <lcd_char_cp+0xbc>
 80014e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014ee:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80014f0:	f7ff fecc 	bl	800128c <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80014f4:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <lcd_char_cp+0x194>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <lcd_char_cp+0x198>)
 80014fc:	2220      	movs	r2, #32
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8001500:	4b32      	ldr	r3, [pc, #200]	; (80015cc <lcd_char_cp+0x198>)
 8001502:	2210      	movs	r2, #16
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8001506:	4b31      	ldr	r3, [pc, #196]	; (80015cc <lcd_char_cp+0x198>)
 8001508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800150e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001516:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8001518:	f7ff feb8 	bl	800128c <lcd_delay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800151c:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <lcd_char_cp+0x194>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	4a29      	ldr	r2, [pc, #164]	; (80015c8 <lcd_char_cp+0x194>)
 8001522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001526:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <lcd_char_cp+0x106>
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <lcd_char_cp+0x198>)
 8001534:	2220      	movs	r2, #32
 8001536:	619a      	str	r2, [r3, #24]
 8001538:	e003      	b.n	8001542 <lcd_char_cp+0x10e>
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <lcd_char_cp+0x198>)
 800153c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001540:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <lcd_char_cp+0x120>
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <lcd_char_cp+0x198>)
 800154e:	2210      	movs	r2, #16
 8001550:	619a      	str	r2, [r3, #24]
 8001552:	e003      	b.n	800155c <lcd_char_cp+0x128>
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <lcd_char_cp+0x198>)
 8001556:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800155a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <lcd_char_cp+0x13c>
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <lcd_char_cp+0x198>)
 8001568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800156c:	619a      	str	r2, [r3, #24]
 800156e:	e003      	b.n	8001578 <lcd_char_cp+0x144>
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <lcd_char_cp+0x198>)
 8001572:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001576:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <lcd_char_cp+0x15a>
 8001582:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	e004      	b.n	8001598 <lcd_char_cp+0x164>
 800158e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001592:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001596:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8001598:	f7ff fe78 	bl	800128c <lcd_delay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <lcd_char_cp+0x194>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <lcd_char_cp+0x198>)
 80015a4:	2220      	movs	r2, #32
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <lcd_char_cp+0x198>)
 80015aa:	2210      	movs	r2, #16
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <lcd_char_cp+0x198>)
 80015b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80015b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	48000800 	.word	0x48000800
 80015cc:	48000400 	.word	0x48000400

080015d0 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	while(*out_char)
 80015d8:	e008      	b.n	80015ec <lcd_out_cp+0x1c>
	{
		lcd_char_cp(*out_char++);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff26 	bl	8001434 <lcd_char_cp>
        lcd_delay();
 80015e8:	f7ff fe50 	bl	800128c <lcd_delay>
	while(*out_char)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f2      	bne.n	80015da <lcd_out_cp+0xa>
	}

}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
 8001608:	460b      	mov	r3, r1
 800160a:	71bb      	strb	r3, [r7, #6]
 800160c:	4613      	mov	r3, r2
 800160e:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8001610:	20fa      	movs	r0, #250	; 0xfa
 8001612:	f008 fa97 	bl	8009b44 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff fe40 	bl	800129c <lcd_cmd>
    HAL_Delay(50);
 800161c:	2032      	movs	r0, #50	; 0x32
 800161e:	f008 fa91 	bl	8009b44 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	79bb      	ldrb	r3, [r7, #6]
 8001626:	4313      	orrs	r3, r2
 8001628:	b2da      	uxtb	r2, r3
 800162a:	797b      	ldrb	r3, [r7, #5]
 800162c:	4313      	orrs	r3, r2
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f043 0320 	orr.w	r3, r3, #32
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fe30 	bl	800129c <lcd_cmd>
    HAL_Delay(50);
 800163c:	2032      	movs	r0, #50	; 0x32
 800163e:	f008 fa81 	bl	8009b44 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8001642:	2006      	movs	r0, #6
 8001644:	f7ff fe2a 	bl	800129c <lcd_cmd>
    HAL_Delay(50);
 8001648:	2032      	movs	r0, #50	; 0x32
 800164a:	f008 fa7b 	bl	8009b44 <HAL_Delay>
    lcd_cmd(0x0E);
 800164e:	200e      	movs	r0, #14
 8001650:	f7ff fe24 	bl	800129c <lcd_cmd>
    HAL_Delay(50);
 8001654:	2032      	movs	r0, #50	; 0x32
 8001656:	f008 fa75 	bl	8009b44 <HAL_Delay>
    lcd_cmd(0x0C);
 800165a:	200c      	movs	r0, #12
 800165c:	f7ff fe1e 	bl	800129c <lcd_cmd>
    HAL_Delay(50);
 8001660:	2032      	movs	r0, #50	; 0x32
 8001662:	f008 fa6f 	bl	8009b44 <HAL_Delay>
    lcd_cmd(0x01);
 8001666:	2001      	movs	r0, #1
 8001668:	f7ff fe18 	bl	800129c <lcd_cmd>
    HAL_Delay(100);
 800166c:	2064      	movs	r0, #100	; 0x64
 800166e:	f008 fa69 	bl	8009b44 <HAL_Delay>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	460a      	mov	r2, r1
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	4613      	mov	r3, r2
 8001688:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d106      	bne.n	800169e <lcd_gotoxy+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	337f      	adds	r3, #127	; 0x7f
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fe00 	bl	800129c <lcd_cmd>
 800169c:	e008      	b.n	80016b0 <lcd_gotoxy+0x36>
	}
	else if(row == 2)
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d105      	bne.n	80016b0 <lcd_gotoxy+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	3b41      	subs	r3, #65	; 0x41
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fdf6 	bl	800129c <lcd_cmd>
	}
    HAL_Delay(5);
 80016b0:	2005      	movs	r0, #5
 80016b2:	f008 fa47 	bl	8009b44 <HAL_Delay>

}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <lcd_print>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	603a      	str	r2, [r7, #0]
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	460b      	mov	r3, r1
 80016cc:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80016ce:	79ba      	ldrb	r2, [r7, #6]
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ffd0 	bl	800167a <lcd_gotoxy>
	lcd_out_cp(out_char);
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f7ff ff78 	bl	80015d0 <lcd_out_cp>
    HAL_Delay(5);
 80016e0:	2005      	movs	r0, #5
 80016e2:	f008 fa2f 	bl	8009b44 <HAL_Delay>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <lcd_clear>:
void lcd_clear(void) {
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff fdd2 	bl	800129c <lcd_cmd>
    HAL_Delay(5);
 80016f8:	2005      	movs	r0, #5
 80016fa:	f008 fa23 	bl	8009b44 <HAL_Delay>

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}

08001702 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001706:	f008 f9a9 	bl	8009a5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800170a:	f000 f80b 	bl	8001724 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800170e:	f000 f931 	bl	8001974 <MX_GPIO_Init>
	MX_RTC_Init();
 8001712:	f000 f87f 	bl	8001814 <MX_RTC_Init>
	MX_CRC_Init();
 8001716:	f000 f85b 	bl	80017d0 <MX_CRC_Init>
	MX_MEMS_Init();
 800171a:	f00e f817 	bl	800f74c <MX_MEMS_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		MX_MEMS_Process();
 800171e:	f00e f82f 	bl	800f780 <MX_MEMS_Process>
 8001722:	e7fc      	b.n	800171e <main+0x1c>

08001724 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b096      	sub	sp, #88	; 0x58
 8001728:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2244      	movs	r2, #68	; 0x44
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f019 fa29 	bl	801ab8a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001738:	463b      	mov	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001746:	f44f 7000 	mov.w	r0, #512	; 0x200
 800174a:	f009 fef3 	bl	800b534 <HAL_PWREx_ControlVoltageScaling>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001754:	f000 f99a 	bl	8001a8c <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001758:	f009 fece 	bl	800b4f8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <SystemClock_Config+0xa8>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001762:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <SystemClock_Config+0xa8>)
 8001764:	f023 0318 	bic.w	r3, r3, #24
 8001768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800176c:	2314      	movs	r3, #20
 800176e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001774:	2301      	movs	r3, #1
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800177c:	2360      	movs	r3, #96	; 0x60
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001780:	2300      	movs	r3, #0
 8001782:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4618      	mov	r0, r3
 800178a:	f009 ff29 	bl	800b5e0 <HAL_RCC_OscConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x74>
	{
		Error_Handler();
 8001794:	f000 f97a 	bl	8001a8c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00a faf1 	bl	800bd98 <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80017bc:	f000 f966 	bl	8001a8c <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80017c0:	f00a fff8 	bl	800c7b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 80017c4:	bf00      	nop
 80017c6:	3758      	adds	r7, #88	; 0x58
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000

080017d0 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <MX_CRC_Init+0x3c>)
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <MX_CRC_Init+0x40>)
 80017d8:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_CRC_Init+0x3c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_CRC_Init+0x3c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_CRC_Init+0x3c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_CRC_Init+0x3c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_CRC_Init+0x3c>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_CRC_Init+0x3c>)
 80017fa:	f008 fad9 	bl	8009db0 <HAL_CRC_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8001804:	f000 f942 	bl	8001a8c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000c60 	.word	0x20000c60
 8001810:	40023000 	.word	0x40023000

08001814 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001828:	2300      	movs	r3, #0
 800182a:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <MX_RTC_Init+0xb0>)
 800182e:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <MX_RTC_Init+0xb4>)
 8001830:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <MX_RTC_Init+0xb0>)
 8001834:	2200      	movs	r2, #0
 8001836:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <MX_RTC_Init+0xb0>)
 800183a:	227f      	movs	r2, #127	; 0x7f
 800183c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <MX_RTC_Init+0xb0>)
 8001840:	22ff      	movs	r2, #255	; 0xff
 8001842:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <MX_RTC_Init+0xb0>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <MX_RTC_Init+0xb0>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <MX_RTC_Init+0xb0>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <MX_RTC_Init+0xb0>)
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800185c:	4819      	ldr	r0, [pc, #100]	; (80018c4 <MX_RTC_Init+0xb0>)
 800185e:	f00b f98b 	bl	800cb78 <HAL_RTC_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_RTC_Init+0x58>
	{
		Error_Handler();
 8001868:	f000 f910 	bl	8001a8c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 800186c:	2300      	movs	r3, #0
 800186e:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 8001870:	2300      	movs	r3, #0
 8001872:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8001874:	2300      	movs	r3, #0
 8001876:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2201      	movs	r2, #1
 8001884:	4619      	mov	r1, r3
 8001886:	480f      	ldr	r0, [pc, #60]	; (80018c4 <MX_RTC_Init+0xb0>)
 8001888:	f00b f9fe 	bl	800cc88 <HAL_RTC_SetTime>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_RTC_Init+0x82>
	{
		Error_Handler();
 8001892:	f000 f8fb 	bl	8001a8c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001896:	2301      	movs	r3, #1
 8001898:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 800189a:	2301      	movs	r3, #1
 800189c:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 800189e:	2301      	movs	r3, #1
 80018a0:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018a6:	463b      	mov	r3, r7
 80018a8:	2201      	movs	r2, #1
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_RTC_Init+0xb0>)
 80018ae:	f00b fae4 	bl	800ce7a <HAL_RTC_SetDate>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_RTC_Init+0xa8>
	{
		Error_Handler();
 80018b8:	f000 f8e8 	bl	8001a8c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000c84 	.word	0x20000c84
 80018c8:	40002800 	.word	0x40002800

080018cc <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <MX_TIM1_Init+0xa0>)
 80018ec:	4a20      	ldr	r2, [pc, #128]	; (8001970 <MX_TIM1_Init+0xa4>)
 80018ee:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <MX_TIM1_Init+0xa0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <MX_TIM1_Init+0xa0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <MX_TIM1_Init+0xa0>)
 80018fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001902:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <MX_TIM1_Init+0xa0>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_TIM1_Init+0xa0>)
 800190c:	2200      	movs	r2, #0
 800190e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <MX_TIM1_Init+0xa0>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001916:	4815      	ldr	r0, [pc, #84]	; (800196c <MX_TIM1_Init+0xa0>)
 8001918:	f00b fc54 	bl	800d1c4 <HAL_TIM_Base_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 8001922:	f000 f8b3 	bl	8001a8c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	480e      	ldr	r0, [pc, #56]	; (800196c <MX_TIM1_Init+0xa0>)
 8001934:	f00b fd9f 	bl	800d476 <HAL_TIM_ConfigClockSource>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 800193e:	f000 f8a5 	bl	8001a8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4619      	mov	r1, r3
 8001952:	4806      	ldr	r0, [pc, #24]	; (800196c <MX_TIM1_Init+0xa0>)
 8001954:	f00b ffb4 	bl	800d8c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 800195e:	f000 f895 	bl	8001a8c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000ca8 	.word	0x20000ca8
 8001970:	40012c00 	.word	0x40012c00

08001974 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	4b3d      	ldr	r3, [pc, #244]	; (8001a80 <MX_GPIO_Init+0x10c>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	4a3c      	ldr	r2, [pc, #240]	; (8001a80 <MX_GPIO_Init+0x10c>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <MX_GPIO_Init+0x10c>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <MX_GPIO_Init+0x10c>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a36      	ldr	r2, [pc, #216]	; (8001a80 <MX_GPIO_Init+0x10c>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <MX_GPIO_Init+0x10c>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <MX_GPIO_Init+0x10c>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	4a30      	ldr	r2, [pc, #192]	; (8001a80 <MX_GPIO_Init+0x10c>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <MX_GPIO_Init+0x10c>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <MX_GPIO_Init+0x10c>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	4a2a      	ldr	r2, [pc, #168]	; (8001a80 <MX_GPIO_Init+0x10c>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019de:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <MX_GPIO_Init+0x10c>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80019f0:	4824      	ldr	r0, [pc, #144]	; (8001a84 <MX_GPIO_Init+0x110>)
 80019f2:	f008 fef3 	bl	800a7dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	4823      	ldr	r0, [pc, #140]	; (8001a88 <MX_GPIO_Init+0x114>)
 80019fc:	f008 feee 	bl	800a7dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f008 fee7 	bl	800a7dc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
	GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 8001a0e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001a12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4817      	ldr	r0, [pc, #92]	; (8001a84 <MX_GPIO_Init+0x110>)
 8001a28:	f008 fc22 	bl	800a270 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_EN_Pin */
	GPIO_InitStruct.Pin = LCD_EN_Pin;
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4811      	ldr	r0, [pc, #68]	; (8001a88 <MX_GPIO_Init+0x114>)
 8001a44:	f008 fc14 	bl	800a270 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
	GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8001a48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a64:	f008 fc04 	bl	800a270 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	2028      	movs	r0, #40	; 0x28
 8001a6e:	f008 f968 	bl	8009d42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a72:	2028      	movs	r0, #40	; 0x28
 8001a74:	f008 f981 	bl	8009d7a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000400 	.word	0x48000400
 8001a88:	48000800 	.word	0x48000800

08001a8c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a94:	e7fe      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_MspInit+0x88>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_MspInit+0x88>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_MspInit+0x88>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_MspInit+0x88>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_MspInit+0x88>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_MspInit+0x88>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	f06f 000b 	mvn.w	r0, #11
 8001ad6:	f008 f934 	bl	8009d42 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2101      	movs	r1, #1
 8001ade:	f06f 000a 	mvn.w	r0, #10
 8001ae2:	f008 f92e 	bl	8009d42 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2101      	movs	r1, #1
 8001aea:	f06f 0009 	mvn.w	r0, #9
 8001aee:	f008 f928 	bl	8009d42 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2101      	movs	r1, #1
 8001af6:	f06f 0004 	mvn.w	r0, #4
 8001afa:	f008 f922 	bl	8009d42 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2101      	movs	r1, #1
 8001b02:	f06f 0003 	mvn.w	r0, #3
 8001b06:	f008 f91c 	bl	8009d42 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	f06f 0001 	mvn.w	r0, #1
 8001b12:	f008 f916 	bl	8009d42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_CRC_MspInit+0x38>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d10b      	bne.n	8001b4e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_CRC_MspInit+0x3c>)
 8001b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_CRC_MspInit+0x3c>)
 8001b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b40:	6493      	str	r3, [r2, #72]	; 0x48
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <HAL_CRC_MspInit+0x3c>)
 8001b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023000 	.word	0x40023000
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b0a4      	sub	sp, #144	; 0x90
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	2288      	movs	r2, #136	; 0x88
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f019 f808 	bl	801ab8a <memset>
  if(hrtc->Instance==RTC)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <HAL_RTC_MspInit+0x5c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d118      	bne.n	8001bb6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	4618      	mov	r0, r3
 8001b98:	f00a fb22 	bl	800c1e0 <HAL_RCCEx_PeriphCLKConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001ba2:	f7ff ff73 	bl	8001a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_RTC_MspInit+0x60>)
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bac:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <HAL_RTC_MspInit+0x60>)
 8001bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3790      	adds	r7, #144	; 0x90
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40002800 	.word	0x40002800
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_TIM_Base_MspInit+0x74>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12b      	bne.n	8001c32 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_TIM_Base_MspInit+0x78>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	4a18      	ldr	r2, [pc, #96]	; (8001c40 <HAL_TIM_Base_MspInit+0x78>)
 8001be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be4:	6613      	str	r3, [r2, #96]	; 0x60
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_TIM_Base_MspInit+0x78>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2018      	movs	r0, #24
 8001bf8:	f008 f8a3 	bl	8009d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001bfc:	2018      	movs	r0, #24
 8001bfe:	f008 f8bc 	bl	8009d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	2019      	movs	r0, #25
 8001c08:	f008 f89b 	bl	8009d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c0c:	2019      	movs	r0, #25
 8001c0e:	f008 f8b4 	bl	8009d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	201a      	movs	r0, #26
 8001c18:	f008 f893 	bl	8009d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001c1c:	201a      	movs	r0, #26
 8001c1e:	f008 f8ac 	bl	8009d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	201b      	movs	r0, #27
 8001c28:	f008 f88b 	bl	8009d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c2c:	201b      	movs	r0, #27
 8001c2e:	f008 f8a4 	bl	8009d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40012c00 	.word	0x40012c00
 8001c40:	40021000 	.word	0x40021000

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c48:	e7fe      	b.n	8001c48 <NMI_Handler+0x4>

08001c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <HardFault_Handler+0x4>

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c90:	f007 ff38 	bl	8009b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001c9e:	f00b fae8 	bl	800d272 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000ca8 	.word	0x20000ca8

08001cac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001cb2:	f00b fade 	bl	800d272 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000ca8 	.word	0x20000ca8

08001cc0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001cc6:	f00b fad4 	bl	800d272 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000ca8 	.word	0x20000ca8

08001cd4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <TIM1_CC_IRQHandler+0x10>)
 8001cda:	f00b faca 	bl	800d272 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000ca8 	.word	0x20000ca8

08001ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <USART2_IRQHandler+0x10>)
 8001cee:	f00c f807 	bl	800dd00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000edc 	.word	0x20000edc

08001cfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <EXTI15_10_IRQHandler+0x10>)
 8001d02:	f008 fa85 	bl	800a210 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000019c 	.word	0x2000019c

08001d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_kill>:

int _kill(int pid, int sig)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d2a:	f018 ff81 	bl	801ac30 <__errno>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2216      	movs	r2, #22
 8001d32:	601a      	str	r2, [r3, #0]
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_exit>:

void _exit (int status)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffe7 	bl	8001d20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d52:	e7fe      	b.n	8001d52 <_exit+0x12>

08001d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e00a      	b.n	8001d7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d66:	f3af 8000 	nop.w
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	60ba      	str	r2, [r7, #8]
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbf0      	blt.n	8001d66 <_read+0x12>
  }

  return len;
 8001d84:	687b      	ldr	r3, [r7, #4]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e009      	b.n	8001db4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f007 fdc7 	bl	800993c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf1      	blt.n	8001da0 <_write+0x12>
  }
  return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_close>:

int _close(int file)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dee:	605a      	str	r2, [r3, #4]
  return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <_isatty>:

int _isatty(int file)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f018 fee6 	bl	801ac30 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20018000 	.word	0x20018000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	20000cf4 	.word	0x20000cf4
 8001e98:	20002048 	.word	0x20002048

08001e9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <SystemInit+0x20>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <SystemInit+0x20>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec4:	f7ff ffea 	bl	8001e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <LoopForever+0x6>)
  ldr r1, =_edata
 8001eca:	490d      	ldr	r1, [pc, #52]	; (8001f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <LoopForever+0xe>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee0:	4c0a      	ldr	r4, [pc, #40]	; (8001f0c <LoopForever+0x16>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eee:	f018 fea5 	bl	801ac3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ef2:	f7ff fc06 	bl	8001702 <main>

08001ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ef6:	e7fe      	b.n	8001ef6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8001f04:	0801f438 	.word	0x0801f438
  ldr r2, =_sbss
 8001f08:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8001f0c:	20002044 	.word	0x20002044

08001f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC1_2_IRQHandler>
	...

08001f14 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d103      	bne.n	8001f2c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e034      	b.n	8001f96 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	7b1a      	ldrb	r2, [r3, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <HTS221_RegisterBusIO+0x8c>)
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <HTS221_RegisterBusIO+0x90>)
 8001f6e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	69da      	ldr	r2, [r3, #28]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4798      	blx	r3
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	e002      	b.n	8001f96 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
 8001f94:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	080025e3 	.word	0x080025e3
 8001fa4:	08002645 	.word	0x08002645

08001fa8 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d108      	bne.n	8001fcc <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 faac 	bl	8002518 <HTS221_Initialize>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e004      	b.n	8001fd6 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d111      	bne.n	8002014 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f880 	bl	80020f6 <HTS221_HUM_Disable>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8002000:	e00d      	b.n	800201e <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f967 	bl	80022d6 <HTS221_TEMP_Disable>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
 8002012:	e004      	b.n	800201e <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3320      	adds	r3, #32
 8002034:	6839      	ldr	r1, [r7, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fc30 	bl	800289c <hts221_device_id_get>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e000      	b.n	800204a <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2201      	movs	r2, #1
 8002062:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2200      	movs	r2, #0
 8002074:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2200      	movs	r2, #0
 800207a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 12.5f;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HTS221_GetCapabilities+0x54>)
 8002080:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 12.5f;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HTS221_GetCapabilities+0x54>)
 8002086:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  return HTS221_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	41480000 	.word	0x41480000

080020ac <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e015      	b.n	80020ee <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10b      	bne.n	80020e4 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3320      	adds	r3, #32
 80020d0:	2101      	movs	r1, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fbf3 	bl	80028be <hts221_power_on_set>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e004      	b.n	80020ee <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e015      	b.n	8002138 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10b      	bne.n	800212e <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3320      	adds	r3, #32
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fbce 	bl	80028be <hts221_power_on_set>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8002128:	f04f 33ff 	mov.w	r3, #4294967295
 800212c:	e004      	b.n	8002138 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800214a:	6839      	ldr	r1, [r7, #0]
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f96f 	bl	8002430 <HTS221_GetOutputDataRate>
 8002152:	4603      	mov	r3, r0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002168:	ed97 0a00 	vldr	s0, [r7]
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f9a3 	bl	80024b8 <HTS221_SetOutputDataRate>
 8002172:	4603      	mov	r3, r0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3320      	adds	r3, #32
 800218a:	f107 020c 	add.w	r2, r7, #12
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fc58 	bl	8002a46 <hts221_hum_adc_point_0_get>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
 80021a0:	e06b      	b.n	800227a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f103 0220 	add.w	r2, r3, #32
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	3304      	adds	r3, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4610      	mov	r0, r2
 80021b2:	f000 fbaa 	bl	800290a <hts221_hum_rh_point_0_get>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
 80021c0:	e05b      	b.n	800227a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f103 0220 	add.w	r2, r3, #32
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	3308      	adds	r3, #8
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f000 fc5c 	bl	8002a8e <hts221_hum_adc_point_1_get>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
 80021e0:	e04b      	b.n	800227a <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f103 0220 	add.w	r2, r3, #32
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	330c      	adds	r3, #12
 80021ee:	4619      	mov	r1, r3
 80021f0:	4610      	mov	r0, r2
 80021f2:	f000 fba8 	bl	8002946 <hts221_hum_rh_point_1_get>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002200:	e03b      	b.n	800227a <HTS221_HUM_GetHumidity+0xfe>
 8002202:	2300      	movs	r3, #0
 8002204:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3320      	adds	r3, #32
 800220a:	f107 021c 	add.w	r2, r7, #28
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f000 fafd 	bl	8002810 <hts221_humidity_raw_get>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295
 8002220:	e02b      	b.n	800227a <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002222:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	eeb0 0a67 	vmov.f32	s0, s15
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f99a 	bl	8002570 <Linear_Interpolation>
 800223c:	eef0 7a40 	vmov.f32	s15, s0
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002254:	d503      	bpl.n	800225e <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002284 <HTS221_HUM_GetHumidity+0x108>
 8002268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002270:	dd02      	ble.n	8002278 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <HTS221_HUM_GetHumidity+0x10c>)
 8002276:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	42c80000 	.word	0x42c80000
 8002288:	42c80000 	.word	0x42c80000

0800228c <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e015      	b.n	80022ce <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3320      	adds	r3, #32
 80022b0:	2101      	movs	r1, #1
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fb03 	bl	80028be <hts221_power_on_set>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	e004      	b.n	80022ce <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b082      	sub	sp, #8
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e015      	b.n	8002318 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10b      	bne.n	800230e <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3320      	adds	r3, #32
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fade 	bl	80028be <hts221_power_on_set>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	e004      	b.n	8002318 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800232a:	6839      	ldr	r1, [r7, #0]
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f87f 	bl	8002430 <HTS221_GetOutputDataRate>
 8002332:	4603      	mov	r3, r0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8002348:	ed97 0a00 	vldr	s0, [r7]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f8b3 	bl	80024b8 <HTS221_SetOutputDataRate>
 8002352:	4603      	mov	r3, r0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3320      	adds	r3, #32
 800236a:	f107 020c 	add.w	r2, r7, #12
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f000 fbb0 	bl	8002ad6 <hts221_temp_adc_point_0_get>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
 8002380:	e052      	b.n	8002428 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f103 0220 	add.w	r2, r3, #32
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	3304      	adds	r3, #4
 800238e:	4619      	mov	r1, r3
 8002390:	4610      	mov	r0, r2
 8002392:	f000 faf6 	bl	8002982 <hts221_temp_deg_point_0_get>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	e042      	b.n	8002428 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f103 0220 	add.w	r2, r3, #32
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	3308      	adds	r3, #8
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f000 fbb4 	bl	8002b1e <hts221_temp_adc_point_1_get>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
 80023c0:	e032      	b.n	8002428 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f103 0220 	add.w	r2, r3, #32
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	330c      	adds	r3, #12
 80023ce:	4619      	mov	r1, r3
 80023d0:	4610      	mov	r0, r2
 80023d2:	f000 fb07 	bl	80029e4 <hts221_temp_deg_point_1_get>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295
 80023e0:	e022      	b.n	8002428 <HTS221_TEMP_GetTemperature+0xcc>
 80023e2:	2300      	movs	r3, #0
 80023e4:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3320      	adds	r3, #32
 80023ea:	f107 021c 	add.w	r2, r7, #28
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fa30 	bl	8002856 <hts221_temperature_raw_get>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	e012      	b.n	8002428 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002402:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	eeb0 0a67 	vmov.f32	s0, s15
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f8aa 	bl	8002570 <Linear_Interpolation>
 800241c:	eef0 7a40 	vmov.f32	s15, s0
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3320      	adds	r3, #32
 8002442:	f107 020b 	add.w	r2, r7, #11
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f983 	bl	8002754 <hts221_data_rate_get>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8002454:	f04f 33ff 	mov.w	r3, #4294967295
 8002458:	e025      	b.n	80024a6 <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d81d      	bhi.n	800249c <HTS221_GetOutputDataRate+0x6c>
 8002460:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <HTS221_GetOutputDataRate+0x38>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	08002479 	.word	0x08002479
 800246c:	08002483 	.word	0x08002483
 8002470:	0800248d 	.word	0x0800248d
 8002474:	08002495 	.word	0x08002495
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
      break;
 8002480:	e010      	b.n	80024a4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002488:	601a      	str	r2, [r3, #0]
      break;
 800248a:	e00b      	b.n	80024a4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HTS221_GetOutputDataRate+0x80>)
 8002490:	601a      	str	r2, [r3, #0]
      break;
 8002492:	e007      	b.n	80024a4 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <HTS221_GetOutputDataRate+0x84>)
 8002498:	601a      	str	r2, [r3, #0]
      break;
 800249a:	e003      	b.n	80024a4 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	60fb      	str	r3, [r7, #12]
      break;
 80024a2:	bf00      	nop
  }

  return ret;
 80024a4:	68fb      	ldr	r3, [r7, #12]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40e00000 	.word	0x40e00000
 80024b4:	41480000 	.word	0x41480000

080024b8 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80024c4:	edd7 7a00 	vldr	s15, [r7]
 80024c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d4:	d801      	bhi.n	80024da <HTS221_SetOutputDataRate+0x22>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00b      	b.n	80024f2 <HTS221_SetOutputDataRate+0x3a>
 80024da:	edd7 7a00 	vldr	s15, [r7]
 80024de:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80024e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ea:	d801      	bhi.n	80024f0 <HTS221_SetOutputDataRate+0x38>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e000      	b.n	80024f2 <HTS221_SetOutputDataRate+0x3a>
 80024f0:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80024f2:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3320      	adds	r3, #32
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f902 	bl	8002706 <hts221_data_rate_set>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8002508:	f04f 33ff 	mov.w	r3, #4294967295
 800250c:	e000      	b.n	8002510 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3320      	adds	r3, #32
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f9c9 	bl	80028be <hts221_power_on_set>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	e017      	b.n	8002568 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3320      	adds	r3, #32
 800253c:	2101      	movs	r1, #1
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f940 	bl	80027c4 <hts221_block_data_update_set>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	e00b      	b.n	8002568 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002550:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ffaf 	bl	80024b8 <HTS221_SetOutputDataRate>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	e000      	b.n	8002568 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	edd3 7a01 	vldr	s15, [r3, #4]
 8002588:	ee37 7a67 	vsub.f32	s14, s14, s15
 800258c:	edd7 7a00 	vldr	s15, [r7]
 8002590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	edd3 6a02 	vldr	s13, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	edd3 7a01 	vldr	s15, [r3, #4]
 80025a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	ed93 6a00 	vldr	s12, [r3]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80025b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	edd3 6a02 	vldr	s13, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80025d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80025d4:	eeb0 0a67 	vmov.f32	s0, s15
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80025e2:	b590      	push	{r4, r7, lr}
 80025e4:	b087      	sub	sp, #28
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	461a      	mov	r2, r3
 80025ee:	460b      	mov	r3, r1
 80025f0:	72fb      	strb	r3, [r7, #11]
 80025f2:	4613      	mov	r3, r2
 80025f4:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10e      	bne.n	8002620 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	695c      	ldr	r4, [r3, #20]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	7b1b      	ldrb	r3, [r3, #12]
 800260a:	b298      	uxth	r0, r3
 800260c:	7afb      	ldrb	r3, [r7, #11]
 800260e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002612:	b2db      	uxtb	r3, r3
 8002614:	b299      	uxth	r1, r3
 8002616:	893b      	ldrh	r3, [r7, #8]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	47a0      	blx	r4
 800261c:	4603      	mov	r3, r0
 800261e:	e00d      	b.n	800263c <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	695c      	ldr	r4, [r3, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	7b1b      	ldrb	r3, [r3, #12]
 8002628:	b298      	uxth	r0, r3
 800262a:	7afb      	ldrb	r3, [r7, #11]
 800262c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002630:	b2db      	uxtb	r3, r3
 8002632:	b299      	uxth	r1, r3
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	47a0      	blx	r4
 800263a:	4603      	mov	r3, r0
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}

08002644 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	461a      	mov	r2, r3
 8002650:	460b      	mov	r3, r1
 8002652:	72fb      	strb	r3, [r7, #11]
 8002654:	4613      	mov	r3, r2
 8002656:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10e      	bne.n	8002682 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	691c      	ldr	r4, [r3, #16]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	7b1b      	ldrb	r3, [r3, #12]
 800266c:	b298      	uxth	r0, r3
 800266e:	7afb      	ldrb	r3, [r7, #11]
 8002670:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002674:	b2db      	uxtb	r3, r3
 8002676:	b299      	uxth	r1, r3
 8002678:	893b      	ldrh	r3, [r7, #8]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	47a0      	blx	r4
 800267e:	4603      	mov	r3, r0
 8002680:	e00d      	b.n	800269e <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	691c      	ldr	r4, [r3, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	7b1b      	ldrb	r3, [r3, #12]
 800268a:	b298      	uxth	r0, r3
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002692:	b2db      	uxtb	r3, r3
 8002694:	b299      	uxth	r1, r3
 8002696:	893b      	ldrh	r3, [r7, #8]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	47a0      	blx	r4
 800269c:	4603      	mov	r3, r0
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd90      	pop	{r4, r7, pc}

080026a6 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80026a6:	b590      	push	{r4, r7, lr}
 80026a8:	b087      	sub	sp, #28
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	461a      	mov	r2, r3
 80026b2:	460b      	mov	r3, r1
 80026b4:	72fb      	strb	r3, [r7, #11]
 80026b6:	4613      	mov	r3, r2
 80026b8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685c      	ldr	r4, [r3, #4]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	68d8      	ldr	r0, [r3, #12]
 80026c2:	893b      	ldrh	r3, [r7, #8]
 80026c4:	7af9      	ldrb	r1, [r7, #11]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	47a0      	blx	r4
 80026ca:	6178      	str	r0, [r7, #20]

  return ret;
 80026cc:	697b      	ldr	r3, [r7, #20]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}

080026d6 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80026d6:	b590      	push	{r4, r7, lr}
 80026d8:	b087      	sub	sp, #28
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	461a      	mov	r2, r3
 80026e2:	460b      	mov	r3, r1
 80026e4:	72fb      	strb	r3, [r7, #11]
 80026e6:	4613      	mov	r3, r2
 80026e8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681c      	ldr	r4, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68d8      	ldr	r0, [r3, #12]
 80026f2:	893b      	ldrh	r3, [r7, #8]
 80026f4:	7af9      	ldrb	r1, [r7, #11]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	47a0      	blx	r4
 80026fa:	6178      	str	r0, [r7, #20]

  return ret;
 80026fc:	697b      	ldr	r3, [r7, #20]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}

08002706 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002712:	f107 0208 	add.w	r2, r7, #8
 8002716:	2301      	movs	r3, #1
 8002718:	2120      	movs	r1, #32
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffc3 	bl	80026a6 <hts221_read_reg>
 8002720:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10f      	bne.n	8002748 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	b2da      	uxtb	r2, r3
 8002730:	7a3b      	ldrb	r3, [r7, #8]
 8002732:	f362 0301 	bfi	r3, r2, #0, #2
 8002736:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002738:	f107 0208 	add.w	r2, r7, #8
 800273c:	2301      	movs	r3, #1
 800273e:	2120      	movs	r1, #32
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ffc8 	bl	80026d6 <hts221_write_reg>
 8002746:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002748:	68fb      	ldr	r3, [r7, #12]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800275e:	f107 0208 	add.w	r2, r7, #8
 8002762:	2301      	movs	r3, #1
 8002764:	2120      	movs	r1, #32
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ff9d 	bl	80026a6 <hts221_read_reg>
 800276c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800276e:	7a3b      	ldrb	r3, [r7, #8]
 8002770:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b03      	cmp	r3, #3
 8002778:	d81a      	bhi.n	80027b0 <hts221_data_rate_get+0x5c>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <hts221_data_rate_get+0x2c>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	08002791 	.word	0x08002791
 8002784:	08002799 	.word	0x08002799
 8002788:	080027a1 	.word	0x080027a1
 800278c:	080027a9 	.word	0x080027a9
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
      break;
 8002796:	e00f      	b.n	80027b8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
      break;
 800279e:	e00b      	b.n	80027b8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2202      	movs	r2, #2
 80027a4:	701a      	strb	r2, [r3, #0]
      break;
 80027a6:	e007      	b.n	80027b8 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2203      	movs	r2, #3
 80027ac:	701a      	strb	r2, [r3, #0]
      break;
 80027ae:	e003      	b.n	80027b8 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2204      	movs	r2, #4
 80027b4:	701a      	strb	r2, [r3, #0]
      break;
 80027b6:	bf00      	nop
  }

  return ret;
 80027b8:	68fb      	ldr	r3, [r7, #12]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop

080027c4 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80027d0:	f107 0208 	add.w	r2, r7, #8
 80027d4:	2301      	movs	r3, #1
 80027d6:	2120      	movs	r1, #32
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff64 	bl	80026a6 <hts221_read_reg>
 80027de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	7a3b      	ldrb	r3, [r7, #8]
 80027f0:	f362 0382 	bfi	r3, r2, #2, #1
 80027f4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80027f6:	f107 0208 	add.w	r2, r7, #8
 80027fa:	2301      	movs	r3, #1
 80027fc:	2120      	movs	r1, #32
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ff69 	bl	80026d6 <hts221_write_reg>
 8002804:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002806:	68fb      	ldr	r3, [r7, #12]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800281a:	f107 0208 	add.w	r2, r7, #8
 800281e:	2302      	movs	r3, #2
 8002820:	2128      	movs	r1, #40	; 0x28
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ff3f 	bl	80026a6 <hts221_read_reg>
 8002828:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800282a:	7a7b      	ldrb	r3, [r7, #9]
 800282c:	b21a      	sxth	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002838:	b29b      	uxth	r3, r3
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	b29a      	uxth	r2, r3
 800283e:	7a3b      	ldrb	r3, [r7, #8]
 8002840:	b29b      	uxth	r3, r3
 8002842:	4413      	add	r3, r2
 8002844:	b29b      	uxth	r3, r3
 8002846:	b21a      	sxth	r2, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	801a      	strh	r2, [r3, #0]

  return ret;
 800284c:	68fb      	ldr	r3, [r7, #12]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8002860:	f107 0208 	add.w	r2, r7, #8
 8002864:	2302      	movs	r3, #2
 8002866:	212a      	movs	r1, #42	; 0x2a
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff1c 	bl	80026a6 <hts221_read_reg>
 800286e:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002870:	7a7b      	ldrb	r3, [r7, #9]
 8002872:	b21a      	sxth	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287e:	b29b      	uxth	r3, r3
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	b29a      	uxth	r2, r3
 8002884:	7a3b      	ldrb	r3, [r7, #8]
 8002886:	b29b      	uxth	r3, r3
 8002888:	4413      	add	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	b21a      	sxth	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	801a      	strh	r2, [r3, #0]

  return ret;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80028a6:	2301      	movs	r3, #1
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	210f      	movs	r1, #15
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fefa 	bl	80026a6 <hts221_read_reg>
 80028b2:	60f8      	str	r0, [r7, #12]

  return ret;
 80028b4:	68fb      	ldr	r3, [r7, #12]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80028ca:	f107 0208 	add.w	r2, r7, #8
 80028ce:	2301      	movs	r3, #1
 80028d0:	2120      	movs	r1, #32
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff fee7 	bl	80026a6 <hts221_read_reg>
 80028d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10f      	bne.n	8002900 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	7a3b      	ldrb	r3, [r7, #8]
 80028ea:	f362 13c7 	bfi	r3, r2, #7, #1
 80028ee:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80028f0:	f107 0208 	add.w	r2, r7, #8
 80028f4:	2301      	movs	r3, #1
 80028f6:	2120      	movs	r1, #32
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff feec 	bl	80026d6 <hts221_write_reg>
 80028fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002900:	68fb      	ldr	r3, [r7, #12]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8002914:	f107 020b 	add.w	r2, r7, #11
 8002918:	2301      	movs	r3, #1
 800291a:	2130      	movs	r1, #48	; 0x30
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fec2 	bl	80026a6 <hts221_read_reg>
 8002922:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002924:	7afb      	ldrb	r3, [r7, #11]
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8002950:	f107 020b 	add.w	r2, r7, #11
 8002954:	2301      	movs	r3, #1
 8002956:	2131      	movs	r1, #49	; 0x31
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fea4 	bl	80026a6 <hts221_read_reg>
 800295e:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800296a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800296e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002978:	68fb      	ldr	r3, [r7, #12]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800298c:	f107 020f 	add.w	r2, r7, #15
 8002990:	2301      	movs	r3, #1
 8002992:	2132      	movs	r1, #50	; 0x32
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff fe86 	bl	80026a6 <hts221_read_reg>
 800299a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d11b      	bne.n	80029da <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80029a2:	f107 0210 	add.w	r2, r7, #16
 80029a6:	2301      	movs	r3, #1
 80029a8:	2135      	movs	r1, #53	; 0x35
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fe7b 	bl	80026a6 <hts221_read_reg>
 80029b0:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80029b2:	7c3b      	ldrb	r3, [r7, #16]
 80029b4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	4413      	add	r3, r2
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029cc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80029d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80029da:	697b      	ldr	r3, [r7, #20]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80029ee:	f107 020f 	add.w	r2, r7, #15
 80029f2:	2301      	movs	r3, #1
 80029f4:	2133      	movs	r1, #51	; 0x33
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fe55 	bl	80026a6 <hts221_read_reg>
 80029fc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d11b      	bne.n	8002a3c <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002a04:	f107 0210 	add.w	r2, r7, #16
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2135      	movs	r1, #53	; 0x35
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fe4a 	bl	80026a6 <hts221_read_reg>
 8002a12:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8002a14:	7c3b      	ldrb	r3, [r7, #16]
 8002a16:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002a1e:	7cfb      	ldrb	r3, [r7, #19]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	4413      	add	r3, r2
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a2e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002a3c:	697b      	ldr	r3, [r7, #20]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8002a50:	f107 0208 	add.w	r2, r7, #8
 8002a54:	2302      	movs	r3, #2
 8002a56:	2136      	movs	r1, #54	; 0x36
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff fe24 	bl	80026a6 <hts221_read_reg>
 8002a5e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002a60:	7a7b      	ldrb	r3, [r7, #9]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	7a3b      	ldrb	r3, [r7, #8]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002a72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002a84:	68fb      	ldr	r3, [r7, #12]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8002a98:	f107 0208 	add.w	r2, r7, #8
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	213a      	movs	r1, #58	; 0x3a
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fe00 	bl	80026a6 <hts221_read_reg>
 8002aa6:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002aa8:	7a7b      	ldrb	r3, [r7, #9]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	7a3b      	ldrb	r3, [r7, #8]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002aba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002ae0:	f107 0208 	add.w	r2, r7, #8
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	213c      	movs	r1, #60	; 0x3c
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fddc 	bl	80026a6 <hts221_read_reg>
 8002aee:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002af0:	7a7b      	ldrb	r3, [r7, #9]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	7a3b      	ldrb	r3, [r7, #8]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002b02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002b14:	68fb      	ldr	r3, [r7, #12]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8002b28:	f107 0208 	add.w	r2, r7, #8
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	213e      	movs	r1, #62	; 0x3e
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff fdb8 	bl	80026a6 <hts221_read_reg>
 8002b36:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002b38:	7a7b      	ldrb	r3, [r7, #9]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	7a3b      	ldrb	r3, [r7, #8]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002b4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8002b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	e051      	b.n	8002c28 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	7b1a      	ldrb	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a1d      	ldr	r2, [pc, #116]	; (8002c34 <LIS2DW12_RegisterBusIO+0xcc>)
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <LIS2DW12_RegisterBusIO+0xd0>)
 8002bc6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8002bde:	f04f 33ff 	mov.w	r3, #4294967295
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e020      	b.n	8002c28 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4798      	blx	r3
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e016      	b.n	8002c28 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d112      	bne.n	8002c28 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10d      	bne.n	8002c28 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8002c0c:	2305      	movs	r3, #5
 8002c0e:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8002c10:	7afb      	ldrb	r3, [r7, #11]
 8002c12:	461a      	mov	r2, r3
 8002c14:	2121      	movs	r1, #33	; 0x21
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fcc1 	bl	800359e <LIS2DW12_Write_Reg>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002c28:	68fb      	ldr	r3, [r7, #12]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	08003931 	.word	0x08003931
 8002c38:	08003967 	.word	0x08003967

08002c3c <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3320      	adds	r3, #32
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f9ce 	bl	8003fec <lis2dw12_auto_increment_set>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8002c56:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5a:	e04b      	b.n	8002cf4 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3320      	adds	r3, #32
 8002c60:	2101      	movs	r1, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f8e2 	bl	8003e2c <lis2dw12_block_data_update_set>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c72:	e03f      	b.n	8002cf4 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3320      	adds	r3, #32
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 f9dc 	bl	8004038 <lis2dw12_fifo_mode_set>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	e033      	b.n	8002cf4 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3320      	adds	r3, #32
 8002c90:	2104      	movs	r1, #4
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 feb2 	bl	80039fc <lis2dw12_power_mode_set>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	e027      	b.n	8002cf4 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <LIS2DW12_Init+0xc0>)
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3320      	adds	r3, #32
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 ffa3 	bl	8003c0c <lis2dw12_data_rate_set>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	e010      	b.n	8002cf4 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3320      	adds	r3, #32
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 f8cd 	bl	8003e78 <lis2dw12_full_scale_set>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	e004      	b.n	8002cf4 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	42c80000 	.word	0x42c80000

08002d00 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f888 	bl	8002e1e <LIS2DW12_ACC_Disable>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8002d14:	f04f 33ff 	mov.w	r3, #4294967295
 8002d18:	e010      	b.n	8002d3c <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3320      	adds	r3, #32
 8002d52:	6839      	ldr	r1, [r7, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 f938 	bl	8003fca <lis2dw12_device_id_get>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	e000      	b.n	8002d68 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4a06      	ldr	r2, [pc, #24]	; (8002dc8 <LIS2DW12_GetCapabilities+0x58>)
 8002db0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	44c80000 	.word	0x44c80000

08002dcc <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e019      	b.n	8002e16 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002df4:	461a      	mov	r2, r3
 8002df6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fbea 	bl	80035d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0a:	e004      	b.n	8002e16 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e010      	b.n	8002e56 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3320      	adds	r3, #32
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fee6 	bl	8003c0c <lis2dw12_data_rate_set>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	e004      	b.n	8002e56 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3320      	adds	r3, #32
 8002e72:	f107 020b 	add.w	r2, r7, #11
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f001 f823 	bl	8003ec4 <lis2dw12_full_scale_get>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8002e84:	f04f 33ff 	mov.w	r3, #4294967295
 8002e88:	e080      	b.n	8002f8c <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3320      	adds	r3, #32
 8002e8e:	f107 020a 	add.w	r2, r7, #10
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fdff 	bl	8003a98 <lis2dw12_power_mode_get>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea4:	e072      	b.n	8002f8c <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8002ea6:	7abb      	ldrb	r3, [r7, #10]
 8002ea8:	2b1b      	cmp	r3, #27
 8002eaa:	bf8c      	ite	hi
 8002eac:	2201      	movhi	r2, #1
 8002eae:	2200      	movls	r2, #0
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	2a00      	cmp	r2, #0
 8002eb4:	d162      	bne.n	8002f7c <LIS2DW12_ACC_GetSensitivity+0x11c>
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 8002ebe:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d12f      	bne.n	8002f30 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8002ed0:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d04c      	beq.n	8002f7c <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002ee2:	7afb      	ldrb	r3, [r7, #11]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d81b      	bhi.n	8002f20 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8002ee8:	a201      	add	r2, pc, #4	; (adr r2, 8002ef0 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	08002f09 	.word	0x08002f09
 8002ef8:	08002f11 	.word	0x08002f11
 8002efc:	08002f19 	.word	0x08002f19
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4a24      	ldr	r2, [pc, #144]	; (8002f94 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8002f04:	601a      	str	r2, [r3, #0]
          break;
 8002f06:	e012      	b.n	8002f2e <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8002f0c:	601a      	str	r2, [r3, #0]
          break;
 8002f0e:	e00e      	b.n	8002f2e <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8002f14:	601a      	str	r2, [r3, #0]
          break;
 8002f16:	e00a      	b.n	8002f2e <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4a21      	ldr	r2, [pc, #132]	; (8002fa0 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8002f1c:	601a      	str	r2, [r3, #0]
          break;
 8002f1e:	e006      	b.n	8002f2e <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4a20      	ldr	r2, [pc, #128]	; (8002fa4 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002f24:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	60fb      	str	r3, [r7, #12]
          break;
 8002f2c:	bf00      	nop
      }
      break;
 8002f2e:	e02c      	b.n	8002f8a <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002f30:	7afb      	ldrb	r3, [r7, #11]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d81a      	bhi.n	8002f6c <LIS2DW12_ACC_GetSensitivity+0x10c>
 8002f36:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f55 	.word	0x08002f55
 8002f44:	08002f5d 	.word	0x08002f5d
 8002f48:	08002f65 	.word	0x08002f65
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8002f50:	601a      	str	r2, [r3, #0]
          break;
 8002f52:	e012      	b.n	8002f7a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4a15      	ldr	r2, [pc, #84]	; (8002fac <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8002f58:	601a      	str	r2, [r3, #0]
          break;
 8002f5a:	e00e      	b.n	8002f7a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8002f60:	601a      	str	r2, [r3, #0]
          break;
 8002f62:	e00a      	b.n	8002f7a <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8002f68:	601a      	str	r2, [r3, #0]
          break;
 8002f6a:	e006      	b.n	8002f7a <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4a0d      	ldr	r2, [pc, #52]	; (8002fa4 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002f70:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295
 8002f76:	60fb      	str	r3, [r7, #12]
          break;
 8002f78:	bf00      	nop
      }
      break;
 8002f7a:	e006      	b.n	8002f8a <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8002f80:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295
 8002f86:	60fb      	str	r3, [r7, #12]
      break;
 8002f88:	bf00      	nop
  }

  return ret;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	3f79db23 	.word	0x3f79db23
 8002f98:	3ff9db23 	.word	0x3ff9db23
 8002f9c:	4079db23 	.word	0x4079db23
 8002fa0:	40f9db23 	.word	0x40f9db23
 8002fa4:	bf800000 	.word	0xbf800000
 8002fa8:	3e79db23 	.word	0x3e79db23
 8002fac:	3ef9db23 	.word	0x3ef9db23

08002fb0 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3320      	adds	r3, #32
 8002fc2:	f107 020b 	add.w	r2, r7, #11
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fe65 	bl	8003c98 <lis2dw12_data_rate_get>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd8:	e14f      	b.n	800327a <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3320      	adds	r3, #32
 8002fde:	f107 020a 	add.w	r2, r7, #10
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fd57 	bl	8003a98 <lis2dw12_power_mode_get>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff4:	e141      	b.n	800327a <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8002ff6:	7afb      	ldrb	r3, [r7, #11]
 8002ff8:	2b32      	cmp	r3, #50	; 0x32
 8002ffa:	f200 8136 	bhi.w	800326a <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	080030d1 	.word	0x080030d1
 8003008:	080030db 	.word	0x080030db
 800300c:	08003135 	.word	0x08003135
 8003010:	0800313d 	.word	0x0800313d
 8003014:	08003145 	.word	0x08003145
 8003018:	0800314d 	.word	0x0800314d
 800301c:	08003155 	.word	0x08003155
 8003020:	0800315d 	.word	0x0800315d
 8003024:	080031b7 	.word	0x080031b7
 8003028:	08003211 	.word	0x08003211
 800302c:	0800326b 	.word	0x0800326b
 8003030:	0800326b 	.word	0x0800326b
 8003034:	0800326b 	.word	0x0800326b
 8003038:	0800326b 	.word	0x0800326b
 800303c:	0800326b 	.word	0x0800326b
 8003040:	0800326b 	.word	0x0800326b
 8003044:	0800326b 	.word	0x0800326b
 8003048:	0800326b 	.word	0x0800326b
 800304c:	080030d1 	.word	0x080030d1
 8003050:	0800326b 	.word	0x0800326b
 8003054:	0800326b 	.word	0x0800326b
 8003058:	0800326b 	.word	0x0800326b
 800305c:	0800326b 	.word	0x0800326b
 8003060:	0800326b 	.word	0x0800326b
 8003064:	0800326b 	.word	0x0800326b
 8003068:	0800326b 	.word	0x0800326b
 800306c:	0800326b 	.word	0x0800326b
 8003070:	0800326b 	.word	0x0800326b
 8003074:	0800326b 	.word	0x0800326b
 8003078:	0800326b 	.word	0x0800326b
 800307c:	0800326b 	.word	0x0800326b
 8003080:	0800326b 	.word	0x0800326b
 8003084:	0800326b 	.word	0x0800326b
 8003088:	0800326b 	.word	0x0800326b
 800308c:	0800326b 	.word	0x0800326b
 8003090:	0800326b 	.word	0x0800326b
 8003094:	0800326b 	.word	0x0800326b
 8003098:	0800326b 	.word	0x0800326b
 800309c:	0800326b 	.word	0x0800326b
 80030a0:	0800326b 	.word	0x0800326b
 80030a4:	0800326b 	.word	0x0800326b
 80030a8:	0800326b 	.word	0x0800326b
 80030ac:	0800326b 	.word	0x0800326b
 80030b0:	0800326b 	.word	0x0800326b
 80030b4:	0800326b 	.word	0x0800326b
 80030b8:	0800326b 	.word	0x0800326b
 80030bc:	0800326b 	.word	0x0800326b
 80030c0:	0800326b 	.word	0x0800326b
 80030c4:	0800326b 	.word	0x0800326b
 80030c8:	0800326b 	.word	0x0800326b
 80030cc:	080030d1 	.word	0x080030d1
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
      break;
 80030d8:	e0ce      	b.n	8003278 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 80030da:	7abb      	ldrb	r3, [r7, #10]
 80030dc:	2b1b      	cmp	r3, #27
 80030de:	bf8c      	ite	hi
 80030e0:	2201      	movhi	r2, #1
 80030e2:	2200      	movls	r2, #0
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	2a00      	cmp	r2, #0
 80030e8:	d11c      	bne.n	8003124 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 80030ea:	2201      	movs	r2, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80030f4:	2a00      	cmp	r2, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2201      	movne	r2, #1
 80030fa:	2200      	moveq	r2, #0
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	2a00      	cmp	r2, #0
 8003100:	d10c      	bne.n	800311c <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003102:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4a5b      	ldr	r2, [pc, #364]	; (8003284 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003118:	601a      	str	r2, [r3, #0]
          break;
 800311a:	e00a      	b.n	8003132 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4a5a      	ldr	r2, [pc, #360]	; (8003288 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003120:	601a      	str	r2, [r3, #0]
          break;
 8003122:	e006      	b.n	8003132 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4a59      	ldr	r2, [pc, #356]	; (800328c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003128:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
 800312e:	60fb      	str	r3, [r7, #12]
          break;
 8003130:	bf00      	nop
      }
      break;
 8003132:	e0a1      	b.n	8003278 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4a53      	ldr	r2, [pc, #332]	; (8003284 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003138:	601a      	str	r2, [r3, #0]
      break;
 800313a:	e09d      	b.n	8003278 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4a54      	ldr	r2, [pc, #336]	; (8003290 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8003140:	601a      	str	r2, [r3, #0]
      break;
 8003142:	e099      	b.n	8003278 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4a53      	ldr	r2, [pc, #332]	; (8003294 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8003148:	601a      	str	r2, [r3, #0]
      break;
 800314a:	e095      	b.n	8003278 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4a52      	ldr	r2, [pc, #328]	; (8003298 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8003150:	601a      	str	r2, [r3, #0]
      break;
 8003152:	e091      	b.n	8003278 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4a51      	ldr	r2, [pc, #324]	; (800329c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003158:	601a      	str	r2, [r3, #0]
      break;
 800315a:	e08d      	b.n	8003278 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 800315c:	7abb      	ldrb	r3, [r7, #10]
 800315e:	2b1b      	cmp	r3, #27
 8003160:	bf8c      	ite	hi
 8003162:	2201      	movhi	r2, #1
 8003164:	2200      	movls	r2, #0
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	2a00      	cmp	r2, #0
 800316a:	d11c      	bne.n	80031a6 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 800316c:	2201      	movs	r2, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 8003176:	2a00      	cmp	r2, #0
 8003178:	bf14      	ite	ne
 800317a:	2201      	movne	r2, #1
 800317c:	2200      	moveq	r2, #0
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	2a00      	cmp	r2, #0
 8003182:	d10c      	bne.n	800319e <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8003184:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	4a41      	ldr	r2, [pc, #260]	; (80032a0 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 800319a:	601a      	str	r2, [r3, #0]
          break;
 800319c:	e00a      	b.n	80031b4 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	4a3e      	ldr	r2, [pc, #248]	; (800329c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80031a2:	601a      	str	r2, [r3, #0]
          break;
 80031a4:	e006      	b.n	80031b4 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	4a38      	ldr	r2, [pc, #224]	; (800328c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80031aa:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80031ac:	f04f 33ff 	mov.w	r3, #4294967295
 80031b0:	60fb      	str	r3, [r7, #12]
          break;
 80031b2:	bf00      	nop
      }
      break;
 80031b4:	e060      	b.n	8003278 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80031b6:	7abb      	ldrb	r3, [r7, #10]
 80031b8:	2b1b      	cmp	r3, #27
 80031ba:	bf8c      	ite	hi
 80031bc:	2201      	movhi	r2, #1
 80031be:	2200      	movls	r2, #0
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	2a00      	cmp	r2, #0
 80031c4:	d11c      	bne.n	8003200 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 80031c6:	2201      	movs	r2, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 80031d0:	2a00      	cmp	r2, #0
 80031d2:	bf14      	ite	ne
 80031d4:	2201      	movne	r2, #1
 80031d6:	2200      	moveq	r2, #0
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	2a00      	cmp	r2, #0
 80031dc:	d10c      	bne.n	80031f8 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 80031de:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4a2c      	ldr	r2, [pc, #176]	; (80032a4 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 80031f4:	601a      	str	r2, [r3, #0]
          break;
 80031f6:	e00a      	b.n	800320e <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4a28      	ldr	r2, [pc, #160]	; (800329c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80031fc:	601a      	str	r2, [r3, #0]
          break;
 80031fe:	e006      	b.n	800320e <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4a22      	ldr	r2, [pc, #136]	; (800328c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003204:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003206:	f04f 33ff 	mov.w	r3, #4294967295
 800320a:	60fb      	str	r3, [r7, #12]
          break;
 800320c:	bf00      	nop
      }
      break;
 800320e:	e033      	b.n	8003278 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003210:	7abb      	ldrb	r3, [r7, #10]
 8003212:	2b1b      	cmp	r3, #27
 8003214:	bf8c      	ite	hi
 8003216:	2201      	movhi	r2, #1
 8003218:	2200      	movls	r2, #0
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	2a00      	cmp	r2, #0
 800321e:	d11c      	bne.n	800325a <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8003220:	2201      	movs	r2, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800322a:	2a00      	cmp	r2, #0
 800322c:	bf14      	ite	ne
 800322e:	2201      	movne	r2, #1
 8003230:	2200      	moveq	r2, #0
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	2a00      	cmp	r2, #0
 8003236:	d10c      	bne.n	8003252 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8003238:	f003 1310 	and.w	r3, r3, #1048592	; 0x100010
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	4a16      	ldr	r2, [pc, #88]	; (80032a8 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 800324e:	601a      	str	r2, [r3, #0]
          break;
 8003250:	e00a      	b.n	8003268 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	4a11      	ldr	r2, [pc, #68]	; (800329c <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003256:	601a      	str	r2, [r3, #0]
          break;
 8003258:	e006      	b.n	8003268 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	4a0b      	ldr	r2, [pc, #44]	; (800328c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800325e:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	60fb      	str	r3, [r7, #12]
          break;
 8003266:	bf00      	nop
      }
      break;
 8003268:	e006      	b.n	8003278 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800326e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003270:	f04f 33ff 	mov.w	r3, #4294967295
 8003274:	60fb      	str	r3, [r7, #12]
      break;
 8003276:	bf00      	nop
  }

  return ret;
 8003278:	68fb      	ldr	r3, [r7, #12]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	41480000 	.word	0x41480000
 8003288:	3fcccccd 	.word	0x3fcccccd
 800328c:	bf800000 	.word	0xbf800000
 8003290:	41c80000 	.word	0x41c80000
 8003294:	42480000 	.word	0x42480000
 8003298:	42c80000 	.word	0x42c80000
 800329c:	43480000 	.word	0x43480000
 80032a0:	43c80000 	.word	0x43c80000
 80032a4:	44480000 	.word	0x44480000
 80032a8:	44c80000 	.word	0x44c80000

080032ac <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80032b8:	2200      	movs	r2, #0
 80032ba:	2100      	movs	r1, #0
 80032bc:	ed97 0a00 	vldr	s0, [r7]
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f805 	bl	80032d0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80032c6:	4603      	mov	r3, r0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80032dc:	460b      	mov	r3, r1
 80032de:	71fb      	strb	r3, [r7, #7]
 80032e0:	4613      	mov	r3, r2
 80032e2:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d109      	bne.n	8003302 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80032ee:	79ba      	ldrb	r2, [r7, #6]
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	4619      	mov	r1, r3
 80032f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f96b 	bl	80035d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80032fe:	4603      	mov	r3, r0
 8003300:	e008      	b.n	8003314 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8003302:	79ba      	ldrb	r2, [r7, #6]
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	4619      	mov	r1, r3
 8003308:	ed97 0a02 	vldr	s0, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fa7d 	bl	800380c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003312:	4603      	mov	r3, r0
  }
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3320      	adds	r3, #32
 800332e:	f107 020b 	add.w	r2, r7, #11
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fdc5 	bl	8003ec4 <lis2dw12_full_scale_get>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003340:	f04f 33ff 	mov.w	r3, #4294967295
 8003344:	e027      	b.n	8003396 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	2b03      	cmp	r3, #3
 800334a:	d81b      	bhi.n	8003384 <LIS2DW12_ACC_GetFullScale+0x68>
 800334c:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <LIS2DW12_ACC_GetFullScale+0x38>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	08003365 	.word	0x08003365
 8003358:	0800336d 	.word	0x0800336d
 800335c:	08003375 	.word	0x08003375
 8003360:	0800337d 	.word	0x0800337d
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2202      	movs	r2, #2
 8003368:	601a      	str	r2, [r3, #0]
      break;
 800336a:	e013      	b.n	8003394 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2204      	movs	r2, #4
 8003370:	601a      	str	r2, [r3, #0]
      break;
 8003372:	e00f      	b.n	8003394 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2208      	movs	r2, #8
 8003378:	601a      	str	r2, [r3, #0]
      break;
 800337a:	e00b      	b.n	8003394 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2210      	movs	r2, #16
 8003380:	601a      	str	r2, [r3, #0]
      break;
 8003382:	e007      	b.n	8003394 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f04f 32ff 	mov.w	r2, #4294967295
 800338a:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	60fb      	str	r3, [r7, #12]
      break;
 8003392:	bf00      	nop
  }

  return ret;
 8003394:	68fb      	ldr	r3, [r7, #12]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop

080033a0 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	dd0b      	ble.n	80033c8 <LIS2DW12_ACC_SetFullScale+0x28>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	dd06      	ble.n	80033c4 <LIS2DW12_ACC_SetFullScale+0x24>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	dc01      	bgt.n	80033c0 <LIS2DW12_ACC_SetFullScale+0x20>
 80033bc:	2302      	movs	r3, #2
 80033be:	e004      	b.n	80033ca <LIS2DW12_ACC_SetFullScale+0x2a>
 80033c0:	2303      	movs	r3, #3
 80033c2:	e002      	b.n	80033ca <LIS2DW12_ACC_SetFullScale+0x2a>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <LIS2DW12_ACC_SetFullScale+0x2a>
 80033c8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80033ca:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3320      	adds	r3, #32
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fd4f 	bl	8003e78 <lis2dw12_full_scale_set>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80033e0:	f04f 33ff 	mov.w	r3, #4294967295
 80033e4:	e000      	b.n	80033e8 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3320      	adds	r3, #32
 8003402:	f107 020b 	add.w	r2, r7, #11
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fb45 	bl	8003a98 <lis2dw12_power_mode_get>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003414:	f04f 33ff 	mov.w	r3, #4294967295
 8003418:	e068      	b.n	80034ec <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3320      	adds	r3, #32
 800341e:	f107 020c 	add.w	r2, r7, #12
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fd85 	bl	8003f34 <lis2dw12_acceleration_raw_get>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003430:	f04f 33ff 	mov.w	r3, #4294967295
 8003434:	e05a      	b.n	80034ec <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 8003436:	7afb      	ldrb	r3, [r7, #11]
 8003438:	2b1b      	cmp	r3, #27
 800343a:	bf8c      	ite	hi
 800343c:	2201      	movhi	r2, #1
 800343e:	2200      	movls	r2, #0
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	2a00      	cmp	r2, #0
 8003444:	d14d      	bne.n	80034e2 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8003446:	2201      	movs	r2, #1
 8003448:	409a      	lsls	r2, r3
 800344a:	f002 331e 	and.w	r3, r2, #505290270	; 0x1e1e1e1e
 800344e:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d124      	bne.n	80034aa <LIS2DW12_ACC_GetAxesRaw+0xba>
 8003460:	f002 3301 	and.w	r3, r2, #16843009	; 0x1010101
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d037      	beq.n	80034e2 <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003472:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	da00      	bge.n	800347c <LIS2DW12_ACC_GetAxesRaw+0x8c>
 800347a:	330f      	adds	r3, #15
 800347c:	111b      	asrs	r3, r3, #4
 800347e:	b21a      	sxth	r2, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8003484:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003488:	2b00      	cmp	r3, #0
 800348a:	da00      	bge.n	800348e <LIS2DW12_ACC_GetAxesRaw+0x9e>
 800348c:	330f      	adds	r3, #15
 800348e:	111b      	asrs	r3, r3, #4
 8003490:	b21a      	sxth	r2, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8003496:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	da00      	bge.n	80034a0 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 800349e:	330f      	adds	r3, #15
 80034a0:	111b      	asrs	r3, r3, #4
 80034a2:	b21a      	sxth	r2, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	809a      	strh	r2, [r3, #4]
      break;
 80034a8:	e01f      	b.n	80034ea <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80034aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da00      	bge.n	80034b4 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 80034b2:	3303      	adds	r3, #3
 80034b4:	109b      	asrs	r3, r3, #2
 80034b6:	b21a      	sxth	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80034bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	da00      	bge.n	80034c6 <LIS2DW12_ACC_GetAxesRaw+0xd6>
 80034c4:	3303      	adds	r3, #3
 80034c6:	109b      	asrs	r3, r3, #2
 80034c8:	b21a      	sxth	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80034ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	da00      	bge.n	80034d8 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 80034d6:	3303      	adds	r3, #3
 80034d8:	109b      	asrs	r3, r3, #2
 80034da:	b21a      	sxth	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	809a      	strh	r2, [r3, #4]
      break;
 80034e0:	e003      	b.n	80034ea <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295
 80034e6:	617b      	str	r3, [r7, #20]
      break;
 80034e8:	bf00      	nop
  }

  return ret;
 80034ea:	697b      	ldr	r3, [r7, #20]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8003504:	f107 0310 	add.w	r3, r7, #16
 8003508:	4619      	mov	r1, r3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ff70 	bl	80033f0 <LIS2DW12_ACC_GetAxesRaw>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	e03c      	b.n	8003596 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	4619      	mov	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fc9c 	bl	8002e60 <LIS2DW12_ACC_GetSensitivity>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	e030      	b.n	8003596 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003534:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003540:	edd7 7a03 	vldr	s15, [r7, #12]
 8003544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003548:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800354c:	ee17 2a90 	vmov	r2, s15
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003554:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003560:	edd7 7a03 	vldr	s15, [r7, #12]
 8003564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800356c:	ee17 2a90 	vmov	r2, s15
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003574:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003580:	edd7 7a03 	vldr	s15, [r7, #12]
 8003584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800358c:	ee17 2a90 	vmov	r2, s15
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	460b      	mov	r3, r1
 80035a8:	70fb      	strb	r3, [r7, #3]
 80035aa:	4613      	mov	r3, r2
 80035ac:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f103 0020 	add.w	r0, r3, #32
 80035b4:	1cba      	adds	r2, r7, #2
 80035b6:	78f9      	ldrb	r1, [r7, #3]
 80035b8:	2301      	movs	r3, #1
 80035ba:	f000 fa07 	bl	80039cc <lis2dw12_write_reg>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295
 80035c8:	e000      	b.n	80035cc <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80035e0:	460b      	mov	r3, r1
 80035e2:	71fb      	strb	r3, [r7, #7]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d80b      	bhi.n	8003608 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80035f0:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80035f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f6:	bf00      	nop
 80035f8:	08003635 	.word	0x08003635
 80035fc:	08003661 	.word	0x08003661
 8003600:	0800368d 	.word	0x0800368d
 8003604:	080036b9 	.word	0x080036b9
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8003608:	79bb      	ldrb	r3, [r7, #6]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d002      	beq.n	8003614 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 800360e:	2304      	movs	r3, #4
 8003610:	75fb      	strb	r3, [r7, #23]
          break;
 8003612:	e002      	b.n	800361a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003614:	2314      	movs	r3, #20
 8003616:	75fb      	strb	r3, [r7, #23]
          break;
 8003618:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 800361a:	edd7 7a02 	vldr	s15, [r7, #8]
 800361e:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362a:	d400      	bmi.n	800362e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 800362c:	e05a      	b.n	80036e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 800362e:	4b6f      	ldr	r3, [pc, #444]	; (80037ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8003630:	60bb      	str	r3, [r7, #8]
      break;
 8003632:	e057      	b.n	80036e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8003634:	79bb      	ldrb	r3, [r7, #6]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d002      	beq.n	8003640 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 800363a:	2303      	movs	r3, #3
 800363c:	75fb      	strb	r3, [r7, #23]
          break;
 800363e:	e002      	b.n	8003646 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003640:	2313      	movs	r3, #19
 8003642:	75fb      	strb	r3, [r7, #23]
          break;
 8003644:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003646:	edd7 7a02 	vldr	s15, [r7, #8]
 800364a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80037f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800364e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003656:	dc00      	bgt.n	800365a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8003658:	e044      	b.n	80036e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800365a:	4b66      	ldr	r3, [pc, #408]	; (80037f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800365c:	60bb      	str	r3, [r7, #8]
      break;
 800365e:	e041      	b.n	80036e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8003660:	79bb      	ldrb	r3, [r7, #6]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d002      	beq.n	800366c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8003666:	2302      	movs	r3, #2
 8003668:	75fb      	strb	r3, [r7, #23]
          break;
 800366a:	e002      	b.n	8003672 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 800366c:	2312      	movs	r3, #18
 800366e:	75fb      	strb	r3, [r7, #23]
          break;
 8003670:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003672:	edd7 7a02 	vldr	s15, [r7, #8]
 8003676:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80037f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800367a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003682:	dc00      	bgt.n	8003686 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8003684:	e02e      	b.n	80036e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003686:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003688:	60bb      	str	r3, [r7, #8]
      break;
 800368a:	e02b      	b.n	80036e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 800368c:	79bb      	ldrb	r3, [r7, #6]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d002      	beq.n	8003698 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
          break;
 8003696:	e002      	b.n	800369e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003698:	2311      	movs	r3, #17
 800369a:	75fb      	strb	r3, [r7, #23]
          break;
 800369c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800369e:	edd7 7a02 	vldr	s15, [r7, #8]
 80036a2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80037f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80036a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ae:	dc00      	bgt.n	80036b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 80036b0:	e018      	b.n	80036e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80036b2:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80036b4:	60bb      	str	r3, [r7, #8]
      break;
 80036b6:	e015      	b.n	80036e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80036b8:	79bb      	ldrb	r3, [r7, #6]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d002      	beq.n	80036c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]
          break;
 80036c2:	e002      	b.n	80036ca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80036c4:	2310      	movs	r3, #16
 80036c6:	75fb      	strb	r3, [r7, #23]
          break;
 80036c8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80036ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ce:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80037f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80036d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036da:	dc00      	bgt.n	80036de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80036dc:	e001      	b.n	80036e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80036de:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80036e0:	60bb      	str	r3, [r7, #8]
      break;
 80036e2:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80036e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80036e8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80037f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80036ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f4:	d801      	bhi.n	80036fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e04d      	b.n	8003796 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80036fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80036fe:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370a:	d801      	bhi.n	8003710 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 800370c:	2302      	movs	r3, #2
 800370e:	e042      	b.n	8003796 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003710:	edd7 7a02 	vldr	s15, [r7, #8]
 8003714:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003720:	d801      	bhi.n	8003726 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8003722:	2303      	movs	r3, #3
 8003724:	e037      	b.n	8003796 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003726:	edd7 7a02 	vldr	s15, [r7, #8]
 800372a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80037fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 800372e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003736:	d801      	bhi.n	800373c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003738:	2304      	movs	r3, #4
 800373a:	e02c      	b.n	8003796 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800373c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003740:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003800 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8003744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374c:	d801      	bhi.n	8003752 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 800374e:	2305      	movs	r3, #5
 8003750:	e021      	b.n	8003796 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003752:	edd7 7a02 	vldr	s15, [r7, #8]
 8003756:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80037f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800375a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	d801      	bhi.n	8003768 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8003764:	2306      	movs	r3, #6
 8003766:	e016      	b.n	8003796 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003768:	edd7 7a02 	vldr	s15, [r7, #8]
 800376c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003804 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8003770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003778:	d801      	bhi.n	800377e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800377a:	2307      	movs	r3, #7
 800377c:	e00b      	b.n	8003796 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800377e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003782:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003808 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8003786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	d801      	bhi.n	8003794 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8003790:	2308      	movs	r3, #8
 8003792:	e000      	b.n	8003796 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003794:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8003796:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3320      	adds	r3, #32
 800379c:	7dba      	ldrb	r2, [r7, #22]
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fa33 	bl	8003c0c <lis2dw12_data_rate_set>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
 80037b0:	e018      	b.n	80037e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3320      	adds	r3, #32
 80037b6:	7dfa      	ldrb	r2, [r7, #23]
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f91e 	bl	80039fc <lis2dw12_power_mode_set>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ca:	e00b      	b.n	80037e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	79fa      	ldrb	r2, [r7, #7]
 80037d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	79ba      	ldrb	r2, [r7, #6]
 80037de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	41480000 	.word	0x41480000
 80037f0:	43480000 	.word	0x43480000
 80037f4:	43480000 	.word	0x43480000
 80037f8:	3fcccccd 	.word	0x3fcccccd
 80037fc:	42480000 	.word	0x42480000
 8003800:	42c80000 	.word	0x42c80000
 8003804:	43c80000 	.word	0x43c80000
 8003808:	44480000 	.word	0x44480000

0800380c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	ed87 0a02 	vstr	s0, [r7, #8]
 8003818:	460b      	mov	r3, r1
 800381a:	71fb      	strb	r3, [r7, #7]
 800381c:	4613      	mov	r3, r2
 800381e:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	79fa      	ldrb	r2, [r7, #7]
 8003824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	79ba      	ldrb	r2, [r7, #6]
 800382c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8003830:	edd7 7a02 	vldr	s15, [r7, #8]
 8003834:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80038f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003840:	d801      	bhi.n	8003846 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8003842:	4b2d      	ldr	r3, [pc, #180]	; (80038f8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8003844:	e04d      	b.n	80038e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8003846:	edd7 7a02 	vldr	s15, [r7, #8]
 800384a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800384e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003856:	d801      	bhi.n	800385c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8003858:	4b28      	ldr	r3, [pc, #160]	; (80038fc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 800385a:	e042      	b.n	80038e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 800385c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003860:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386c:	d801      	bhi.n	8003872 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 800386e:	4b24      	ldr	r3, [pc, #144]	; (8003900 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8003870:	e037      	b.n	80038e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8003872:	edd7 7a02 	vldr	s15, [r7, #8]
 8003876:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003904 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800387a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	d801      	bhi.n	8003888 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8003884:	4b20      	ldr	r3, [pc, #128]	; (8003908 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8003886:	e02c      	b.n	80038e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8003888:	edd7 7a02 	vldr	s15, [r7, #8]
 800388c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800390c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003898:	d801      	bhi.n	800389e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 800389c:	e021      	b.n	80038e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 800389e:	edd7 7a02 	vldr	s15, [r7, #8]
 80038a2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003914 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 80038a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	d801      	bhi.n	80038b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 80038b2:	e016      	b.n	80038e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 80038b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80038b8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800391c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 80038bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c4:	d801      	bhi.n	80038ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80038c6:	4b16      	ldr	r3, [pc, #88]	; (8003920 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80038c8:	e00b      	b.n	80038e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 80038ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80038ce:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003924 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 80038d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	d801      	bhi.n	80038e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80038de:	e000      	b.n	80038e2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	3fcccccd 	.word	0x3fcccccd
 80038f8:	3fcccccd 	.word	0x3fcccccd
 80038fc:	41480000 	.word	0x41480000
 8003900:	41c80000 	.word	0x41c80000
 8003904:	42480000 	.word	0x42480000
 8003908:	42480000 	.word	0x42480000
 800390c:	42c80000 	.word	0x42c80000
 8003910:	42c80000 	.word	0x42c80000
 8003914:	43480000 	.word	0x43480000
 8003918:	43480000 	.word	0x43480000
 800391c:	43c80000 	.word	0x43c80000
 8003920:	43c80000 	.word	0x43c80000
 8003924:	44480000 	.word	0x44480000
 8003928:	44480000 	.word	0x44480000
 800392c:	44c80000 	.word	0x44c80000

08003930 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	461a      	mov	r2, r3
 800393c:	460b      	mov	r3, r1
 800393e:	72fb      	strb	r3, [r7, #11]
 8003940:	4613      	mov	r3, r2
 8003942:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	695c      	ldr	r4, [r3, #20]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	7b1b      	ldrb	r3, [r3, #12]
 8003950:	b298      	uxth	r0, r3
 8003952:	7afb      	ldrb	r3, [r7, #11]
 8003954:	b299      	uxth	r1, r3
 8003956:	893b      	ldrh	r3, [r7, #8]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	47a0      	blx	r4
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}

08003966 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003966:	b590      	push	{r4, r7, lr}
 8003968:	b087      	sub	sp, #28
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	461a      	mov	r2, r3
 8003972:	460b      	mov	r3, r1
 8003974:	72fb      	strb	r3, [r7, #11]
 8003976:	4613      	mov	r3, r2
 8003978:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	691c      	ldr	r4, [r3, #16]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	7b1b      	ldrb	r3, [r3, #12]
 8003986:	b298      	uxth	r0, r3
 8003988:	7afb      	ldrb	r3, [r7, #11]
 800398a:	b299      	uxth	r1, r3
 800398c:	893b      	ldrh	r3, [r7, #8]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	47a0      	blx	r4
 8003992:	4603      	mov	r3, r0
}
 8003994:	4618      	mov	r0, r3
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}

0800399c <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	461a      	mov	r2, r3
 80039a8:	460b      	mov	r3, r1
 80039aa:	72fb      	strb	r3, [r7, #11]
 80039ac:	4613      	mov	r3, r2
 80039ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685c      	ldr	r4, [r3, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68d8      	ldr	r0, [r3, #12]
 80039b8:	893b      	ldrh	r3, [r7, #8]
 80039ba:	7af9      	ldrb	r1, [r7, #11]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	47a0      	blx	r4
 80039c0:	6178      	str	r0, [r7, #20]

  return ret;
 80039c2:	697b      	ldr	r3, [r7, #20]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}

080039cc <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	461a      	mov	r2, r3
 80039d8:	460b      	mov	r3, r1
 80039da:	72fb      	strb	r3, [r7, #11]
 80039dc:	4613      	mov	r3, r2
 80039de:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681c      	ldr	r4, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	68d8      	ldr	r0, [r3, #12]
 80039e8:	893b      	ldrh	r3, [r7, #8]
 80039ea:	7af9      	ldrb	r1, [r7, #11]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	47a0      	blx	r4
 80039f0:	6178      	str	r0, [r7, #20]

  return ret;
 80039f2:	697b      	ldr	r3, [r7, #20]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd90      	pop	{r4, r7, pc}

080039fc <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003a08:	f107 0210 	add.w	r2, r7, #16
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	2120      	movs	r1, #32
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ffc3 	bl	800399c <lis2dw12_read_reg>
 8003a16:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d118      	bne.n	8003a50 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	7c3b      	ldrb	r3, [r7, #16]
 8003a2a:	f362 0383 	bfi	r3, r2, #2, #2
 8003a2e:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	7c3b      	ldrb	r3, [r7, #16]
 8003a3a:	f362 0301 	bfi	r3, r2, #0, #2
 8003a3e:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003a40:	f107 0210 	add.w	r2, r7, #16
 8003a44:	2301      	movs	r3, #1
 8003a46:	2120      	movs	r1, #32
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ffbf 	bl	80039cc <lis2dw12_write_reg>
 8003a4e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d107      	bne.n	8003a66 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003a56:	f107 020c 	add.w	r2, r7, #12
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	2125      	movs	r1, #37	; 0x25
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff9c 	bl	800399c <lis2dw12_read_reg>
 8003a64:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d110      	bne.n	8003a8e <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	7b3b      	ldrb	r3, [r7, #12]
 8003a78:	f362 0382 	bfi	r3, r2, #2, #1
 8003a7c:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003a7e:	f107 020c 	add.w	r2, r7, #12
 8003a82:	2301      	movs	r3, #1
 8003a84:	2125      	movs	r1, #37	; 0x25
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ffa0 	bl	80039cc <lis2dw12_write_reg>
 8003a8c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003a8e:	697b      	ldr	r3, [r7, #20]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003aa2:	f107 0210 	add.w	r2, r7, #16
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	2120      	movs	r1, #32
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ff76 	bl	800399c <lis2dw12_read_reg>
 8003ab0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f040 80a3 	bne.w	8003c00 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003aba:	f107 020c 	add.w	r2, r7, #12
 8003abe:	2301      	movs	r3, #1
 8003ac0:	2125      	movs	r1, #37	; 0x25
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ff6a 	bl	800399c <lis2dw12_read_reg>
 8003ac8:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003aca:	7b3b      	ldrb	r3, [r7, #12]
 8003acc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	011a      	lsls	r2, r3, #4
 8003ad4:	7c3b      	ldrb	r3, [r7, #16]
 8003ad6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8003ae0:	7c3a      	ldrb	r2, [r7, #16]
 8003ae2:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8003ae6:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8003ae8:	4413      	add	r3, r2
 8003aea:	2b1b      	cmp	r3, #27
 8003aec:	f200 8084 	bhi.w	8003bf8 <lis2dw12_power_mode_get+0x160>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <lis2dw12_power_mode_get+0x60>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b89 	.word	0x08003b89
 8003afc:	08003b81 	.word	0x08003b81
 8003b00:	08003b79 	.word	0x08003b79
 8003b04:	08003b71 	.word	0x08003b71
 8003b08:	08003b69 	.word	0x08003b69
 8003b0c:	08003bf9 	.word	0x08003bf9
 8003b10:	08003bf9 	.word	0x08003bf9
 8003b14:	08003bf9 	.word	0x08003bf9
 8003b18:	08003ba9 	.word	0x08003ba9
 8003b1c:	08003ba1 	.word	0x08003ba1
 8003b20:	08003b99 	.word	0x08003b99
 8003b24:	08003b91 	.word	0x08003b91
 8003b28:	08003bf9 	.word	0x08003bf9
 8003b2c:	08003bf9 	.word	0x08003bf9
 8003b30:	08003bf9 	.word	0x08003bf9
 8003b34:	08003bf9 	.word	0x08003bf9
 8003b38:	08003bd1 	.word	0x08003bd1
 8003b3c:	08003bc9 	.word	0x08003bc9
 8003b40:	08003bc1 	.word	0x08003bc1
 8003b44:	08003bb9 	.word	0x08003bb9
 8003b48:	08003bb1 	.word	0x08003bb1
 8003b4c:	08003bf9 	.word	0x08003bf9
 8003b50:	08003bf9 	.word	0x08003bf9
 8003b54:	08003bf9 	.word	0x08003bf9
 8003b58:	08003bf1 	.word	0x08003bf1
 8003b5c:	08003be9 	.word	0x08003be9
 8003b60:	08003be1 	.word	0x08003be1
 8003b64:	08003bd9 	.word	0x08003bd9
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	701a      	strb	r2, [r3, #0]
        break;
 8003b6e:	e047      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2203      	movs	r2, #3
 8003b74:	701a      	strb	r2, [r3, #0]
        break;
 8003b76:	e043      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
        break;
 8003b7e:	e03f      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]
        break;
 8003b86:	e03b      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
        break;
 8003b8e:	e037      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	220b      	movs	r2, #11
 8003b94:	701a      	strb	r2, [r3, #0]
        break;
 8003b96:	e033      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	220a      	movs	r2, #10
 8003b9c:	701a      	strb	r2, [r3, #0]
        break;
 8003b9e:	e02f      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2209      	movs	r2, #9
 8003ba4:	701a      	strb	r2, [r3, #0]
        break;
 8003ba6:	e02b      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2208      	movs	r2, #8
 8003bac:	701a      	strb	r2, [r3, #0]
        break;
 8003bae:	e027      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2214      	movs	r2, #20
 8003bb4:	701a      	strb	r2, [r3, #0]
        break;
 8003bb6:	e023      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2213      	movs	r2, #19
 8003bbc:	701a      	strb	r2, [r3, #0]
        break;
 8003bbe:	e01f      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2212      	movs	r2, #18
 8003bc4:	701a      	strb	r2, [r3, #0]
        break;
 8003bc6:	e01b      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2211      	movs	r2, #17
 8003bcc:	701a      	strb	r2, [r3, #0]
        break;
 8003bce:	e017      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	701a      	strb	r2, [r3, #0]
        break;
 8003bd6:	e013      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	221b      	movs	r2, #27
 8003bdc:	701a      	strb	r2, [r3, #0]
        break;
 8003bde:	e00f      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	221a      	movs	r2, #26
 8003be4:	701a      	strb	r2, [r3, #0]
        break;
 8003be6:	e00b      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2219      	movs	r2, #25
 8003bec:	701a      	strb	r2, [r3, #0]
        break;
 8003bee:	e007      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2218      	movs	r2, #24
 8003bf4:	701a      	strb	r2, [r3, #0]
        break;
 8003bf6:	e003      	b.n	8003c00 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	701a      	strb	r2, [r3, #0]
        break;
 8003bfe:	bf00      	nop
    }
  }

  return ret;
 8003c00:	697b      	ldr	r3, [r7, #20]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop

08003c0c <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003c18:	f107 0210 	add.w	r2, r7, #16
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	2120      	movs	r1, #32
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff febb 	bl	800399c <lis2dw12_read_reg>
 8003c26:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10f      	bne.n	8003c4e <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	7c3b      	ldrb	r3, [r7, #16]
 8003c38:	f362 1307 	bfi	r3, r2, #4, #4
 8003c3c:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003c3e:	f107 0210 	add.w	r2, r7, #16
 8003c42:	2301      	movs	r3, #1
 8003c44:	2120      	movs	r1, #32
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fec0 	bl	80039cc <lis2dw12_write_reg>
 8003c4c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d107      	bne.n	8003c64 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003c54:	f107 020c 	add.w	r2, r7, #12
 8003c58:	2301      	movs	r3, #1
 8003c5a:	2122      	movs	r1, #34	; 0x22
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fe9d 	bl	800399c <lis2dw12_read_reg>
 8003c62:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d110      	bne.n	8003c8c <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	7b3b      	ldrb	r3, [r7, #12]
 8003c76:	f362 0301 	bfi	r3, r2, #0, #2
 8003c7a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003c7c:	f107 020c 	add.w	r2, r7, #12
 8003c80:	2301      	movs	r3, #1
 8003c82:	2122      	movs	r1, #34	; 0x22
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff fea1 	bl	80039cc <lis2dw12_write_reg>
 8003c8a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8003c8c:	697b      	ldr	r3, [r7, #20]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003ca2:	f107 0210 	add.w	r2, r7, #16
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	2120      	movs	r1, #32
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fe76 	bl	800399c <lis2dw12_read_reg>
 8003cb0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f040 80b3 	bne.w	8003e20 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003cba:	f107 020c 	add.w	r2, r7, #12
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	2122      	movs	r1, #34	; 0x22
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff fe6a 	bl	800399c <lis2dw12_read_reg>
 8003cc8:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8003cca:	7b3b      	ldrb	r3, [r7, #12]
 8003ccc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	7c3a      	ldrb	r2, [r7, #16]
 8003cd6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	4413      	add	r3, r2
 8003cde:	2b32      	cmp	r3, #50	; 0x32
 8003ce0:	f200 809a 	bhi.w	8003e18 <lis2dw12_data_rate_get+0x180>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <lis2dw12_data_rate_get+0x54>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003db9 	.word	0x08003db9
 8003cf0:	08003dc1 	.word	0x08003dc1
 8003cf4:	08003dc9 	.word	0x08003dc9
 8003cf8:	08003dd1 	.word	0x08003dd1
 8003cfc:	08003dd9 	.word	0x08003dd9
 8003d00:	08003de1 	.word	0x08003de1
 8003d04:	08003de9 	.word	0x08003de9
 8003d08:	08003df1 	.word	0x08003df1
 8003d0c:	08003df9 	.word	0x08003df9
 8003d10:	08003e01 	.word	0x08003e01
 8003d14:	08003e19 	.word	0x08003e19
 8003d18:	08003e19 	.word	0x08003e19
 8003d1c:	08003e19 	.word	0x08003e19
 8003d20:	08003e19 	.word	0x08003e19
 8003d24:	08003e19 	.word	0x08003e19
 8003d28:	08003e19 	.word	0x08003e19
 8003d2c:	08003e19 	.word	0x08003e19
 8003d30:	08003e19 	.word	0x08003e19
 8003d34:	08003e11 	.word	0x08003e11
 8003d38:	08003e19 	.word	0x08003e19
 8003d3c:	08003e19 	.word	0x08003e19
 8003d40:	08003e19 	.word	0x08003e19
 8003d44:	08003e19 	.word	0x08003e19
 8003d48:	08003e19 	.word	0x08003e19
 8003d4c:	08003e19 	.word	0x08003e19
 8003d50:	08003e19 	.word	0x08003e19
 8003d54:	08003e19 	.word	0x08003e19
 8003d58:	08003e19 	.word	0x08003e19
 8003d5c:	08003e19 	.word	0x08003e19
 8003d60:	08003e19 	.word	0x08003e19
 8003d64:	08003e19 	.word	0x08003e19
 8003d68:	08003e19 	.word	0x08003e19
 8003d6c:	08003e19 	.word	0x08003e19
 8003d70:	08003e19 	.word	0x08003e19
 8003d74:	08003e19 	.word	0x08003e19
 8003d78:	08003e19 	.word	0x08003e19
 8003d7c:	08003e19 	.word	0x08003e19
 8003d80:	08003e19 	.word	0x08003e19
 8003d84:	08003e19 	.word	0x08003e19
 8003d88:	08003e19 	.word	0x08003e19
 8003d8c:	08003e19 	.word	0x08003e19
 8003d90:	08003e19 	.word	0x08003e19
 8003d94:	08003e19 	.word	0x08003e19
 8003d98:	08003e19 	.word	0x08003e19
 8003d9c:	08003e19 	.word	0x08003e19
 8003da0:	08003e19 	.word	0x08003e19
 8003da4:	08003e19 	.word	0x08003e19
 8003da8:	08003e19 	.word	0x08003e19
 8003dac:	08003e19 	.word	0x08003e19
 8003db0:	08003e19 	.word	0x08003e19
 8003db4:	08003e09 	.word	0x08003e09
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
        break;
 8003dbe:	e02f      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	701a      	strb	r2, [r3, #0]
        break;
 8003dc6:	e02b      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	701a      	strb	r2, [r3, #0]
        break;
 8003dce:	e027      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	701a      	strb	r2, [r3, #0]
        break;
 8003dd6:	e023      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	701a      	strb	r2, [r3, #0]
        break;
 8003dde:	e01f      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2205      	movs	r2, #5
 8003de4:	701a      	strb	r2, [r3, #0]
        break;
 8003de6:	e01b      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2206      	movs	r2, #6
 8003dec:	701a      	strb	r2, [r3, #0]
        break;
 8003dee:	e017      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2207      	movs	r2, #7
 8003df4:	701a      	strb	r2, [r3, #0]
        break;
 8003df6:	e013      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2208      	movs	r2, #8
 8003dfc:	701a      	strb	r2, [r3, #0]
        break;
 8003dfe:	e00f      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2209      	movs	r2, #9
 8003e04:	701a      	strb	r2, [r3, #0]
        break;
 8003e06:	e00b      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2232      	movs	r2, #50	; 0x32
 8003e0c:	701a      	strb	r2, [r3, #0]
        break;
 8003e0e:	e007      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2212      	movs	r2, #18
 8003e14:	701a      	strb	r2, [r3, #0]
        break;
 8003e16:	e003      	b.n	8003e20 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
        break;
 8003e1e:	bf00      	nop
    }
  }

  return ret;
 8003e20:	697b      	ldr	r3, [r7, #20]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop

08003e2c <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003e38:	f107 0208 	add.w	r2, r7, #8
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	2121      	movs	r1, #33	; 0x21
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fdab 	bl	800399c <lis2dw12_read_reg>
 8003e46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	7a3b      	ldrb	r3, [r7, #8]
 8003e58:	f362 03c3 	bfi	r3, r2, #3, #1
 8003e5c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003e5e:	f107 0208 	add.w	r2, r7, #8
 8003e62:	2301      	movs	r3, #1
 8003e64:	2121      	movs	r1, #33	; 0x21
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fdb0 	bl	80039cc <lis2dw12_write_reg>
 8003e6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003e84:	f107 0208 	add.w	r2, r7, #8
 8003e88:	2301      	movs	r3, #1
 8003e8a:	2125      	movs	r1, #37	; 0x25
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff fd85 	bl	800399c <lis2dw12_read_reg>
 8003e92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	7a3b      	ldrb	r3, [r7, #8]
 8003ea4:	f362 1305 	bfi	r3, r2, #4, #2
 8003ea8:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003eaa:	f107 0208 	add.w	r2, r7, #8
 8003eae:	2301      	movs	r3, #1
 8003eb0:	2125      	movs	r1, #37	; 0x25
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff fd8a 	bl	80039cc <lis2dw12_write_reg>
 8003eb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003eba:	68fb      	ldr	r3, [r7, #12]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003ece:	f107 0208 	add.w	r2, r7, #8
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	2125      	movs	r1, #37	; 0x25
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff fd60 	bl	800399c <lis2dw12_read_reg>
 8003edc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8003ede:	7a3b      	ldrb	r3, [r7, #8]
 8003ee0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d81a      	bhi.n	8003f20 <lis2dw12_full_scale_get+0x5c>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <lis2dw12_full_scale_get+0x2c>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f09 	.word	0x08003f09
 8003ef8:	08003f11 	.word	0x08003f11
 8003efc:	08003f19 	.word	0x08003f19
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
      break;
 8003f06:	e00f      	b.n	8003f28 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
      break;
 8003f0e:	e00b      	b.n	8003f28 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2202      	movs	r2, #2
 8003f14:	701a      	strb	r2, [r3, #0]
      break;
 8003f16:	e007      	b.n	8003f28 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	701a      	strb	r2, [r3, #0]
      break;
 8003f1e:	e003      	b.n	8003f28 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
      break;
 8003f26:	bf00      	nop
  }

  return ret;
 8003f28:	68fb      	ldr	r3, [r7, #12]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop

08003f34 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003f3e:	f107 020c 	add.w	r2, r7, #12
 8003f42:	2306      	movs	r3, #6
 8003f44:	2128      	movs	r1, #40	; 0x28
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff fd28 	bl	800399c <lis2dw12_read_reg>
 8003f4c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003f4e:	7b7b      	ldrb	r3, [r7, #13]
 8003f50:	b21a      	sxth	r2, r3
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	7b3b      	ldrb	r3, [r7, #12]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4413      	add	r3, r2
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	b21a      	sxth	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003f70:	7bfa      	ldrb	r2, [r7, #15]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	3302      	adds	r3, #2
 8003f76:	b212      	sxth	r2, r2
 8003f78:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	7bbb      	ldrb	r3, [r7, #14]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	3302      	adds	r3, #2
 8003f94:	b212      	sxth	r2, r2
 8003f96:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003f98:	7c7a      	ldrb	r2, [r7, #17]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	b212      	sxth	r2, r2
 8003fa0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	7c3b      	ldrb	r3, [r7, #16]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	b212      	sxth	r2, r2
 8003fbe:	801a      	strh	r2, [r3, #0]

  return ret;
 8003fc0:	697b      	ldr	r3, [r7, #20]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	210f      	movs	r1, #15
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff fcde 	bl	800399c <lis2dw12_read_reg>
 8003fe0:	60f8      	str	r0, [r7, #12]

  return ret;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003ff8:	f107 0208 	add.w	r2, r7, #8
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	2121      	movs	r1, #33	; 0x21
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fccb 	bl	800399c <lis2dw12_read_reg>
 8004006:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10f      	bne.n	800402e <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	b2da      	uxtb	r2, r3
 8004016:	7a3b      	ldrb	r3, [r7, #8]
 8004018:	f362 0382 	bfi	r3, r2, #2, #1
 800401c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800401e:	f107 0208 	add.w	r2, r7, #8
 8004022:	2301      	movs	r3, #1
 8004024:	2121      	movs	r1, #33	; 0x21
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fcd0 	bl	80039cc <lis2dw12_write_reg>
 800402c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800402e:	68fb      	ldr	r3, [r7, #12]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004044:	f107 0208 	add.w	r2, r7, #8
 8004048:	2301      	movs	r3, #1
 800404a:	212e      	movs	r1, #46	; 0x2e
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff fca5 	bl	800399c <lis2dw12_read_reg>
 8004052:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10f      	bne.n	800407a <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	b2da      	uxtb	r2, r3
 8004062:	7a3b      	ldrb	r3, [r7, #8]
 8004064:	f362 1347 	bfi	r3, r2, #5, #3
 8004068:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800406a:	f107 0208 	add.w	r2, r7, #8
 800406e:	2301      	movs	r3, #1
 8004070:	212e      	movs	r1, #46	; 0x2e
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff fcaa 	bl	80039cc <lis2dw12_write_reg>
 8004078:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800407a:	68fb      	ldr	r3, [r7, #12]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e067      	b.n	8004170 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	7b1a      	ldrb	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	699a      	ldr	r2, [r3, #24]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a28      	ldr	r2, [pc, #160]	; (800417c <LIS2MDL_RegisterBusIO+0xf8>)
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a27      	ldr	r2, [pc, #156]	; (8004180 <LIS2MDL_RegisterBusIO+0xfc>)
 80040e2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e036      	b.n	8004170 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4798      	blx	r3
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e02c      	b.n	8004170 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d028      	beq.n	8004170 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004124:	2b00      	cmp	r3, #0
 8004126:	d123      	bne.n	8004170 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10d      	bne.n	800414c <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004130:	2334      	movs	r3, #52	; 0x34
 8004132:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004134:	7afb      	ldrb	r3, [r7, #11]
 8004136:	461a      	mov	r2, r3
 8004138:	2162      	movs	r1, #98	; 0x62
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fb1b 	bl	8004776 <LIS2MDL_Write_Reg>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d014      	beq.n	8004170 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004146:	f04f 33ff 	mov.w	r3, #4294967295
 800414a:	e012      	b.n	8004172 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d101      	bne.n	8004158 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	e00c      	b.n	8004172 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3320      	adds	r3, #32
 800415c:	2101      	movs	r1, #1
 800415e:	4618      	mov	r0, r3
 8004160:	f000 ff70 	bl	8005044 <lis2mdl_i2c_interface_set>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	e000      	b.n	8004172 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004170:	68fb      	ldr	r3, [r7, #12]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	080047cd 	.word	0x080047cd
 8004180:	0800484f 	.word	0x0800484f

08004184 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d144      	bne.n	800421e <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004194:	f107 0208 	add.w	r2, r7, #8
 8004198:	2301      	movs	r3, #1
 800419a:	2162      	movs	r1, #98	; 0x62
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fb97 	bl	80048d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80041a8:	f04f 33ff 	mov.w	r3, #4294967295
 80041ac:	e06c      	b.n	8004288 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80041ae:	f107 020c 	add.w	r2, r7, #12
 80041b2:	2301      	movs	r3, #1
 80041b4:	2160      	movs	r1, #96	; 0x60
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fb8a 	bl	80048d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	e05f      	b.n	8004288 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80041c8:	7a3b      	ldrb	r3, [r7, #8]
 80041ca:	f043 0310 	orr.w	r3, r3, #16
 80041ce:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80041d0:	7a3b      	ldrb	r3, [r7, #8]
 80041d2:	f36f 0341 	bfc	r3, #1, #1
 80041d6:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80041d8:	7b3b      	ldrb	r3, [r7, #12]
 80041da:	2202      	movs	r2, #2
 80041dc:	f362 0301 	bfi	r3, r2, #0, #2
 80041e0:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80041e2:	7b3b      	ldrb	r3, [r7, #12]
 80041e4:	f043 030c 	orr.w	r3, r3, #12
 80041e8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80041ea:	f107 0208 	add.w	r2, r7, #8
 80041ee:	2301      	movs	r3, #1
 80041f0:	2162      	movs	r1, #98	; 0x62
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fcab 	bl	8004b4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e041      	b.n	8004288 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004204:	f107 020c 	add.w	r2, r7, #12
 8004208:	2301      	movs	r3, #1
 800420a:	2160      	movs	r1, #96	; 0x60
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fc9e 	bl	8004b4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d032      	beq.n	800427e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
 800421c:	e034      	b.n	8004288 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3320      	adds	r3, #32
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fe65 	bl	8004ef4 <lis2mdl_block_data_update_set>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004230:	f04f 33ff 	mov.w	r3, #4294967295
 8004234:	e028      	b.n	8004288 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3320      	adds	r3, #32
 800423a:	2102      	movs	r1, #2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fdd4 	bl	8004dea <lis2mdl_operating_mode_set>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004248:	f04f 33ff 	mov.w	r3, #4294967295
 800424c:	e01c      	b.n	8004288 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3320      	adds	r3, #32
 8004252:	2103      	movs	r1, #3
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fdee 	bl	8004e36 <lis2mdl_data_rate_set>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295
 8004264:	e010      	b.n	8004288 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3320      	adds	r3, #32
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fec3 	bl	8004ff8 <lis2mdl_self_test_set>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	e004      	b.n	8004288 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f8a5 	bl	80043e8 <LIS2MDL_MAG_Disable>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295
 80042a8:	e004      	b.n	80042b4 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d10b      	bne.n	80042e6 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80042ce:	2301      	movs	r3, #1
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	214f      	movs	r1, #79	; 0x4f
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fafb 	bl	80048d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
 80042e4:	e00c      	b.n	8004300 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3320      	adds	r3, #32
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fe72 	bl	8004fd6 <lis2mdl_device_id_get>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80042f8:	f04f 33ff 	mov.w	r3, #4294967295
 80042fc:	e000      	b.n	8004300 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2200      	movs	r2, #0
 800431c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2201      	movs	r2, #1
 8004322:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2200      	movs	r2, #0
 800432e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2232      	movs	r2, #50	; 0x32
 800433a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4a04      	ldr	r2, [pc, #16]	; (8004360 <LIS2MDL_GetCapabilities+0x58>)
 8004350:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	42c80000 	.word	0x42c80000

08004364 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e032      	b.n	80043e0 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d11d      	bne.n	80043be <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004382:	f107 020c 	add.w	r2, r7, #12
 8004386:	2301      	movs	r3, #1
 8004388:	2160      	movs	r1, #96	; 0x60
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 faa0 	bl	80048d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	e021      	b.n	80043e0 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 800439c:	7b3b      	ldrb	r3, [r7, #12]
 800439e:	f36f 0301 	bfc	r3, #0, #2
 80043a2:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80043a4:	f107 020c 	add.w	r2, r7, #12
 80043a8:	2301      	movs	r3, #1
 80043aa:	2160      	movs	r1, #96	; 0x60
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fbce 	bl	8004b4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80043b8:	f04f 33ff 	mov.w	r3, #4294967295
 80043bc:	e010      	b.n	80043e0 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3320      	adds	r3, #32
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fd10 	bl	8004dea <lis2mdl_operating_mode_set>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80043d0:	f04f 33ff 	mov.w	r3, #4294967295
 80043d4:	e004      	b.n	80043e0 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e033      	b.n	8004466 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b03      	cmp	r3, #3
 8004404:	d11e      	bne.n	8004444 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004406:	f107 020c 	add.w	r2, r7, #12
 800440a:	2301      	movs	r3, #1
 800440c:	2160      	movs	r1, #96	; 0x60
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa5e 	bl	80048d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800441a:	f04f 33ff 	mov.w	r3, #4294967295
 800441e:	e022      	b.n	8004466 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004420:	7b3b      	ldrb	r3, [r7, #12]
 8004422:	2202      	movs	r2, #2
 8004424:	f362 0301 	bfi	r3, r2, #0, #2
 8004428:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800442a:	f107 020c 	add.w	r2, r7, #12
 800442e:	2301      	movs	r3, #1
 8004430:	2160      	movs	r1, #96	; 0x60
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fb8b 	bl	8004b4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00e      	beq.n	800445c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800443e:	f04f 33ff 	mov.w	r3, #4294967295
 8004442:	e010      	b.n	8004466 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3320      	adds	r3, #32
 8004448:	2102      	movs	r1, #2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fccd 	bl	8004dea <lis2mdl_operating_mode_set>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
 800445a:	e004      	b.n	8004466 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800447e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3320      	adds	r3, #32
 80044a2:	f107 020b 	add.w	r2, r7, #11
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fceb 	bl	8004e84 <lis2mdl_data_rate_get>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80044b4:	f04f 33ff 	mov.w	r3, #4294967295
 80044b8:	e023      	b.n	8004502 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80044ba:	7afb      	ldrb	r3, [r7, #11]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d81b      	bhi.n	80044f8 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044e1 	.word	0x080044e1
 80044d0:	080044e9 	.word	0x080044e9
 80044d4:	080044f1 	.word	0x080044f1
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	4a0c      	ldr	r2, [pc, #48]	; (800450c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80044dc:	601a      	str	r2, [r3, #0]
      break;
 80044de:	e00f      	b.n	8004500 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80044e4:	601a      	str	r2, [r3, #0]
      break;
 80044e6:	e00b      	b.n	8004500 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4a0a      	ldr	r2, [pc, #40]	; (8004514 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80044ec:	601a      	str	r2, [r3, #0]
      break;
 80044ee:	e007      	b.n	8004500 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	4a09      	ldr	r2, [pc, #36]	; (8004518 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80044f4:	601a      	str	r2, [r3, #0]
      break;
 80044f6:	e003      	b.n	8004500 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80044f8:	f04f 33ff 	mov.w	r3, #4294967295
 80044fc:	60fb      	str	r3, [r7, #12]
      break;
 80044fe:	bf00      	nop
  }

  return ret;
 8004500:	68fb      	ldr	r3, [r7, #12]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	41200000 	.word	0x41200000
 8004510:	41a00000 	.word	0x41a00000
 8004514:	42480000 	.word	0x42480000
 8004518:	42c80000 	.word	0x42c80000

0800451c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004528:	edd7 7a00 	vldr	s15, [r7]
 800452c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004538:	d801      	bhi.n	800453e <LIS2MDL_MAG_SetOutputDataRate+0x22>
 800453a:	2300      	movs	r3, #0
 800453c:	e016      	b.n	800456c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800453e:	edd7 7a00 	vldr	s15, [r7]
 8004542:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454e:	d801      	bhi.n	8004554 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004550:	2301      	movs	r3, #1
 8004552:	e00b      	b.n	800456c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004554:	edd7 7a00 	vldr	s15, [r7]
 8004558:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80045e0 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 800455c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004564:	d801      	bhi.n	800456a <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8004566:	2302      	movs	r3, #2
 8004568:	e000      	b.n	800456c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800456a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 800456c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d121      	bne.n	80045ba <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004576:	f107 020c 	add.w	r2, r7, #12
 800457a:	2301      	movs	r3, #1
 800457c:	2160      	movs	r1, #96	; 0x60
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9a6 	bl	80048d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	e022      	b.n	80045d6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	b2da      	uxtb	r2, r3
 8004598:	7b3b      	ldrb	r3, [r7, #12]
 800459a:	f362 0383 	bfi	r3, r2, #2, #2
 800459e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80045a0:	f107 020c 	add.w	r2, r7, #12
 80045a4:	2301      	movs	r3, #1
 80045a6:	2160      	movs	r1, #96	; 0x60
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fad0 	bl	8004b4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00f      	beq.n	80045d4 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80045b4:	f04f 33ff 	mov.w	r3, #4294967295
 80045b8:	e00d      	b.n	80045d6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3320      	adds	r3, #32
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fc37 	bl	8004e36 <lis2mdl_data_rate_set>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	e000      	b.n	80045d6 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	42480000 	.word	0x42480000

080045e4 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2232      	movs	r2, #50	; 0x32
 80045f2:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3320      	adds	r3, #32
 8004628:	f107 0208 	add.w	r2, r7, #8
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fc86 	bl	8004f40 <lis2mdl_magnetic_raw_get>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800463a:	f04f 33ff 	mov.w	r3, #4294967295
 800463e:	e00c      	b.n	800465a <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004640:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004648:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004650:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b088      	sub	sp, #32
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d137      	bne.n	80046e4 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8004674:	f107 0218 	add.w	r2, r7, #24
 8004678:	2306      	movs	r3, #6
 800467a:	2168      	movs	r1, #104	; 0x68
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f927 	bl	80048d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8004688:	f04f 33ff 	mov.w	r3, #4294967295
 800468c:	e06f      	b.n	800476e <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800468e:	7e7b      	ldrb	r3, [r7, #25]
 8004690:	b21b      	sxth	r3, r3
 8004692:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8004694:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004698:	b29b      	uxth	r3, r3
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	b29a      	uxth	r2, r3
 800469e:	7e3b      	ldrb	r3, [r7, #24]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	4413      	add	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	b21b      	sxth	r3, r3
 80046a8:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80046aa:	7efb      	ldrb	r3, [r7, #27]
 80046ac:	b21b      	sxth	r3, r3
 80046ae:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80046b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	7ebb      	ldrb	r3, [r7, #26]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	4413      	add	r3, r2
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	b21b      	sxth	r3, r3
 80046c4:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80046c6:	7f7b      	ldrb	r3, [r7, #29]
 80046c8:	b21b      	sxth	r3, r3
 80046ca:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80046cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	7f3b      	ldrb	r3, [r7, #28]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	4413      	add	r3, r2
 80046dc:	b29b      	uxth	r3, r3
 80046de:	b21b      	sxth	r3, r3
 80046e0:	82bb      	strh	r3, [r7, #20]
 80046e2:	e00d      	b.n	8004700 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3320      	adds	r3, #32
 80046e8:	f107 0210 	add.w	r2, r7, #16
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fc26 	bl	8004f40 <lis2mdl_magnetic_raw_get>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	e036      	b.n	800476e <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004700:	f107 030c 	add.w	r3, r7, #12
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff feb1 	bl	800446e <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800470c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004718:	edd7 7a03 	vldr	s15, [r7, #12]
 800471c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004724:	ee17 2a90 	vmov	r2, s15
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800472c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004730:	ee07 3a90 	vmov	s15, r3
 8004734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004738:	edd7 7a03 	vldr	s15, [r7, #12]
 800473c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004744:	ee17 2a90 	vmov	r2, s15
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800474c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004750:	ee07 3a90 	vmov	s15, r3
 8004754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004758:	edd7 7a03 	vldr	s15, [r7, #12]
 800475c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004764:	ee17 2a90 	vmov	r2, s15
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	70fb      	strb	r3, [r7, #3]
 8004782:	4613      	mov	r3, r2
 8004784:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b03      	cmp	r3, #3
 800478c:	d10b      	bne.n	80047a6 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800478e:	1cba      	adds	r2, r7, #2
 8004790:	78f9      	ldrb	r1, [r7, #3]
 8004792:	2301      	movs	r3, #1
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f9da 	bl	8004b4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d010      	beq.n	80047c2 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80047a0:	f04f 33ff 	mov.w	r3, #4294967295
 80047a4:	e00e      	b.n	80047c4 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f103 0020 	add.w	r0, r3, #32
 80047ac:	1cba      	adds	r2, r7, #2
 80047ae:	78f9      	ldrb	r1, [r7, #3]
 80047b0:	2301      	movs	r3, #1
 80047b2:	f000 fb02 	bl	8004dba <lis2mdl_write_reg>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80047bc:	f04f 33ff 	mov.w	r3, #4294967295
 80047c0:	e000      	b.n	80047c4 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	461a      	mov	r2, r3
 80047d8:	460b      	mov	r3, r1
 80047da:	72fb      	strb	r3, [r7, #11]
 80047dc:	4613      	mov	r3, r2
 80047de:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10e      	bne.n	800480a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	695c      	ldr	r4, [r3, #20]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	7b1b      	ldrb	r3, [r3, #12]
 80047f4:	b298      	uxth	r0, r3
 80047f6:	7afb      	ldrb	r3, [r7, #11]
 80047f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	b299      	uxth	r1, r3
 8004800:	893b      	ldrh	r3, [r7, #8]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	47a0      	blx	r4
 8004806:	4603      	mov	r3, r0
 8004808:	e01d      	b.n	8004846 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b03      	cmp	r3, #3
 8004810:	d10b      	bne.n	800482a <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	695c      	ldr	r4, [r3, #20]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	7b1b      	ldrb	r3, [r3, #12]
 800481a:	b298      	uxth	r0, r3
 800481c:	7afb      	ldrb	r3, [r7, #11]
 800481e:	b299      	uxth	r1, r3
 8004820:	893b      	ldrh	r3, [r7, #8]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	47a0      	blx	r4
 8004826:	4603      	mov	r3, r0
 8004828:	e00d      	b.n	8004846 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	695c      	ldr	r4, [r3, #20]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	7b1b      	ldrb	r3, [r3, #12]
 8004832:	b298      	uxth	r0, r3
 8004834:	7afb      	ldrb	r3, [r7, #11]
 8004836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800483a:	b2db      	uxtb	r3, r3
 800483c:	b299      	uxth	r1, r3
 800483e:	893b      	ldrh	r3, [r7, #8]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	47a0      	blx	r4
 8004844:	4603      	mov	r3, r0
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	bd90      	pop	{r4, r7, pc}

0800484e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800484e:	b590      	push	{r4, r7, lr}
 8004850:	b087      	sub	sp, #28
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	461a      	mov	r2, r3
 800485a:	460b      	mov	r3, r1
 800485c:	72fb      	strb	r3, [r7, #11]
 800485e:	4613      	mov	r3, r2
 8004860:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10e      	bne.n	800488c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	691c      	ldr	r4, [r3, #16]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	7b1b      	ldrb	r3, [r3, #12]
 8004876:	b298      	uxth	r0, r3
 8004878:	7afb      	ldrb	r3, [r7, #11]
 800487a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800487e:	b2db      	uxtb	r3, r3
 8004880:	b299      	uxth	r1, r3
 8004882:	893b      	ldrh	r3, [r7, #8]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	47a0      	blx	r4
 8004888:	4603      	mov	r3, r0
 800488a:	e01d      	b.n	80048c8 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d10b      	bne.n	80048ac <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	691c      	ldr	r4, [r3, #16]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	7b1b      	ldrb	r3, [r3, #12]
 800489c:	b298      	uxth	r0, r3
 800489e:	7afb      	ldrb	r3, [r7, #11]
 80048a0:	b299      	uxth	r1, r3
 80048a2:	893b      	ldrh	r3, [r7, #8]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	47a0      	blx	r4
 80048a8:	4603      	mov	r3, r0
 80048aa:	e00d      	b.n	80048c8 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	691c      	ldr	r4, [r3, #16]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	7b1b      	ldrb	r3, [r3, #12]
 80048b4:	b298      	uxth	r0, r3
 80048b6:	7afb      	ldrb	r3, [r7, #11]
 80048b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	b299      	uxth	r1, r3
 80048c0:	893b      	ldrh	r3, [r7, #8]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	47a0      	blx	r4
 80048c6:	4603      	mov	r3, r0
  }
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd90      	pop	{r4, r7, pc}

080048d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	; 0x30
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	461a      	mov	r2, r3
 80048dc:	460b      	mov	r3, r1
 80048de:	72fb      	strb	r3, [r7, #11]
 80048e0:	4613      	mov	r3, r2
 80048e2:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80048ea:	2340      	movs	r3, #64	; 0x40
 80048ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80048f6:	233d      	movs	r3, #61	; 0x3d
 80048f8:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80048fa:	2315      	movs	r3, #21
 80048fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004900:	2316      	movs	r3, #22
 8004902:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8004906:	2317      	movs	r3, #23
 8004908:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 800490c:	2314      	movs	r3, #20
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004912:	2344      	movs	r3, #68	; 0x44
 8004914:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004916:	2302      	movs	r3, #2
 8004918:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 800491c:	2339      	movs	r3, #57	; 0x39
 800491e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004928:	2329      	movs	r3, #41	; 0x29
 800492a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800492e:	231e      	movs	r3, #30
 8004930:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8004934:	2301      	movs	r3, #1
 8004936:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 800493a:	893b      	ldrh	r3, [r7, #8]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004940:	2310      	movs	r3, #16
 8004942:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004946:	2300      	movs	r3, #0
 8004948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800494c:	2340      	movs	r3, #64	; 0x40
 800494e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f103 0020 	add.w	r0, r3, #32
 8004958:	f107 0221 	add.w	r2, r7, #33	; 0x21
 800495c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004960:	2301      	movs	r3, #1
 8004962:	f000 fa2a 	bl	8004dba <lis2mdl_write_reg>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 800496c:	f04f 33ff 	mov.w	r3, #4294967295
 8004970:	e0e9      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f103 0020 	add.w	r0, r3, #32
 8004978:	f107 021f 	add.w	r2, r7, #31
 800497c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004980:	2301      	movs	r3, #1
 8004982:	f000 fa1a 	bl	8004dba <lis2mdl_write_reg>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800498c:	f04f 33ff 	mov.w	r3, #4294967295
 8004990:	e0d9      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f103 0020 	add.w	r0, r3, #32
 8004998:	f107 020b 	add.w	r2, r7, #11
 800499c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80049a0:	2301      	movs	r3, #1
 80049a2:	f000 fa0a 	bl	8004dba <lis2mdl_write_reg>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 80049ac:	f04f 33ff 	mov.w	r3, #4294967295
 80049b0:	e0c9      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f103 0020 	add.w	r0, r3, #32
 80049b8:	f107 021d 	add.w	r2, r7, #29
 80049bc:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80049c0:	2301      	movs	r3, #1
 80049c2:	f000 f9fa 	bl	8004dba <lis2mdl_write_reg>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80049cc:	f04f 33ff 	mov.w	r3, #4294967295
 80049d0:	e0b9      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f103 0020 	add.w	r0, r3, #32
 80049d8:	f107 021e 	add.w	r2, r7, #30
 80049dc:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80049e0:	2301      	movs	r3, #1
 80049e2:	f000 f9ea 	bl	8004dba <lis2mdl_write_reg>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
 80049f0:	e0a9      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f103 0020 	add.w	r0, r3, #32
 80049f8:	f107 0220 	add.w	r2, r7, #32
 80049fc:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004a00:	2301      	movs	r3, #1
 8004a02:	f000 f9da 	bl	8004dba <lis2mdl_write_reg>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8004a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a10:	e099      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f103 0020 	add.w	r0, r3, #32
 8004a18:	f107 021c 	add.w	r2, r7, #28
 8004a1c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004a20:	2301      	movs	r3, #1
 8004a22:	f000 f9b2 	bl	8004d8a <lis2mdl_read_reg>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a30:	e089      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004a32:	7f3b      	ldrb	r3, [r7, #28]
 8004a34:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d102      	bne.n	8004a42 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004a3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004a40:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f103 0020 	add.w	r0, r3, #32
 8004a48:	f107 021c 	add.w	r2, r7, #28
 8004a4c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004a50:	2301      	movs	r3, #1
 8004a52:	f000 f9b2 	bl	8004dba <lis2mdl_write_reg>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8004a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a60:	e071      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f103 0020 	add.w	r0, r3, #32
 8004a68:	f107 0214 	add.w	r2, r7, #20
 8004a6c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004a70:	2306      	movs	r3, #6
 8004a72:	f000 f98a 	bl	8004d8a <lis2mdl_read_reg>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a80:	e061      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f103 0020 	add.w	r0, r3, #32
 8004a88:	f107 021b 	add.w	r2, r7, #27
 8004a8c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8004a90:	2301      	movs	r3, #1
 8004a92:	f000 f97a 	bl	8004d8a <lis2mdl_read_reg>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8004a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa0:	e051      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8004aa2:	7efa      	ldrb	r2, [r7, #27]
 8004aa4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1e6      	bne.n	8004a82 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f103 0020 	add.w	r0, r3, #32
 8004aba:	f107 021b 	add.w	r2, r7, #27
 8004abe:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f000 f961 	bl	8004d8a <lis2mdl_read_reg>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	e038      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004ad4:	7efa      	ldrb	r2, [r7, #27]
 8004ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ada:	4013      	ands	r3, r2
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d1e6      	bne.n	8004ab4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f103 0020 	add.w	r0, r3, #32
 8004aec:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004af0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004af4:	2301      	movs	r3, #1
 8004af6:	f000 f960 	bl	8004dba <lis2mdl_write_reg>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004b00:	f04f 33ff 	mov.w	r3, #4294967295
 8004b04:	e01f      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f103 0020 	add.w	r0, r3, #32
 8004b0c:	893b      	ldrh	r3, [r7, #8]
 8004b0e:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	f000 f939 	bl	8004d8a <lis2mdl_read_reg>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8004b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b22:	e010      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f103 0020 	add.w	r0, r3, #32
 8004b2a:	f107 0220 	add.w	r2, r7, #32
 8004b2e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004b32:	2301      	movs	r3, #1
 8004b34:	f000 f941 	bl	8004dba <lis2mdl_write_reg>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8004b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b42:	e000      	b.n	8004b46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3730      	adds	r7, #48	; 0x30
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b08c      	sub	sp, #48	; 0x30
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	72fb      	strb	r3, [r7, #11]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004b68:	2340      	movs	r3, #64	; 0x40
 8004b6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004b74:	233c      	movs	r3, #60	; 0x3c
 8004b76:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004b78:	2315      	movs	r3, #21
 8004b7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004b7e:	2316      	movs	r3, #22
 8004b80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8004b84:	2317      	movs	r3, #23
 8004b86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004b8e:	2314      	movs	r3, #20
 8004b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004b94:	2344      	movs	r3, #68	; 0x44
 8004b96:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004b98:	2339      	movs	r3, #57	; 0x39
 8004b9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 8004b9e:	2380      	movs	r3, #128	; 0x80
 8004ba0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004ba4:	2329      	movs	r3, #41	; 0x29
 8004ba6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004baa:	231e      	movs	r3, #30
 8004bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004bb6:	2310      	movs	r3, #16
 8004bb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004bc2:	2340      	movs	r3, #64	; 0x40
 8004bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004bc8:	230e      	movs	r3, #14
 8004bca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f103 0020 	add.w	r0, r3, #32
 8004bd4:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8004bd8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f000 f8ec 	bl	8004dba <lis2mdl_write_reg>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004be8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bec:	e0c9      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f103 0020 	add.w	r0, r3, #32
 8004bf4:	f107 021f 	add.w	r2, r7, #31
 8004bf8:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f000 f8dc 	bl	8004dba <lis2mdl_write_reg>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0c:	e0b9      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f103 0020 	add.w	r0, r3, #32
 8004c14:	f107 020b 	add.w	r2, r7, #11
 8004c18:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f000 f8cc 	bl	8004dba <lis2mdl_write_reg>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004c28:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2c:	e0a9      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f103 0020 	add.w	r0, r3, #32
 8004c34:	f107 021e 	add.w	r2, r7, #30
 8004c38:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f000 f8bc 	bl	8004dba <lis2mdl_write_reg>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004c48:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4c:	e099      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f103 0020 	add.w	r0, r3, #32
 8004c54:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8004c58:	2301      	movs	r3, #1
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	f000 f8ad 	bl	8004dba <lis2mdl_write_reg>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	e08a      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f103 0020 	add.w	r0, r3, #32
 8004c72:	f107 021d 	add.w	r2, r7, #29
 8004c76:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f000 f89d 	bl	8004dba <lis2mdl_write_reg>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8a:	e07a      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f103 0020 	add.w	r0, r3, #32
 8004c92:	f107 0220 	add.w	r2, r7, #32
 8004c96:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f000 f88d 	bl	8004dba <lis2mdl_write_reg>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	e06a      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f103 0020 	add.w	r0, r3, #32
 8004cb2:	f107 021c 	add.w	r2, r7, #28
 8004cb6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f000 f865 	bl	8004d8a <lis2mdl_read_reg>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cca:	e05a      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004ccc:	7f3b      	ldrb	r3, [r7, #28]
 8004cce:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d102      	bne.n	8004cdc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004cd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cda:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f103 0020 	add.w	r0, r3, #32
 8004ce2:	f107 021c 	add.w	r2, r7, #28
 8004ce6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8004cea:	2301      	movs	r3, #1
 8004cec:	f000 f865 	bl	8004dba <lis2mdl_write_reg>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfa:	e042      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f103 0020 	add.w	r0, r3, #32
 8004d02:	f107 0214 	add.w	r2, r7, #20
 8004d06:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004d0a:	2306      	movs	r3, #6
 8004d0c:	f000 f83d 	bl	8004d8a <lis2mdl_read_reg>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004d16:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1a:	e032      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f103 0020 	add.w	r0, r3, #32
 8004d22:	f107 021b 	add.w	r2, r7, #27
 8004d26:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f000 f82d 	bl	8004d8a <lis2mdl_read_reg>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004d36:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3a:	e022      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8004d3c:	7efa      	ldrb	r2, [r7, #27]
 8004d3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d42:	4013      	ands	r3, r2
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d1e6      	bne.n	8004d1c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f103 0020 	add.w	r0, r3, #32
 8004d54:	f107 021b 	add.w	r2, r7, #27
 8004d58:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f000 f814 	bl	8004d8a <lis2mdl_read_reg>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004d68:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6c:	e009      	b.n	8004d82 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004d6e:	7efa      	ldrb	r2, [r7, #27]
 8004d70:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004d74:	4013      	ands	r3, r2
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d1e6      	bne.n	8004d4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3730      	adds	r7, #48	; 0x30
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004d8a:	b590      	push	{r4, r7, lr}
 8004d8c:	b087      	sub	sp, #28
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	461a      	mov	r2, r3
 8004d96:	460b      	mov	r3, r1
 8004d98:	72fb      	strb	r3, [r7, #11]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685c      	ldr	r4, [r3, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68d8      	ldr	r0, [r3, #12]
 8004da6:	893b      	ldrh	r3, [r7, #8]
 8004da8:	7af9      	ldrb	r1, [r7, #11]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	47a0      	blx	r4
 8004dae:	6178      	str	r0, [r7, #20]

  return ret;
 8004db0:	697b      	ldr	r3, [r7, #20]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd90      	pop	{r4, r7, pc}

08004dba <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004dba:	b590      	push	{r4, r7, lr}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	72fb      	strb	r3, [r7, #11]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681c      	ldr	r4, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	68d8      	ldr	r0, [r3, #12]
 8004dd6:	893b      	ldrh	r3, [r7, #8]
 8004dd8:	7af9      	ldrb	r1, [r7, #11]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	47a0      	blx	r4
 8004dde:	6178      	str	r0, [r7, #20]

  return ret;
 8004de0:	697b      	ldr	r3, [r7, #20]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd90      	pop	{r4, r7, pc}

08004dea <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	460b      	mov	r3, r1
 8004df4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004df6:	f107 0208 	add.w	r2, r7, #8
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	2160      	movs	r1, #96	; 0x60
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff ffc3 	bl	8004d8a <lis2mdl_read_reg>
 8004e04:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10f      	bne.n	8004e2c <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	7a3b      	ldrb	r3, [r7, #8]
 8004e16:	f362 0301 	bfi	r3, r2, #0, #2
 8004e1a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004e1c:	f107 0208 	add.w	r2, r7, #8
 8004e20:	2301      	movs	r3, #1
 8004e22:	2160      	movs	r1, #96	; 0x60
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ffc8 	bl	8004dba <lis2mdl_write_reg>
 8004e2a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004e42:	f107 0208 	add.w	r2, r7, #8
 8004e46:	2301      	movs	r3, #1
 8004e48:	2160      	movs	r1, #96	; 0x60
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff ff9d 	bl	8004d8a <lis2mdl_read_reg>
 8004e50:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10f      	bne.n	8004e78 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	7a3b      	ldrb	r3, [r7, #8]
 8004e62:	f362 0383 	bfi	r3, r2, #2, #2
 8004e66:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004e68:	f107 0208 	add.w	r2, r7, #8
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	2160      	movs	r1, #96	; 0x60
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ffa2 	bl	8004dba <lis2mdl_write_reg>
 8004e76:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e78:	68fb      	ldr	r3, [r7, #12]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004e8e:	f107 0208 	add.w	r2, r7, #8
 8004e92:	2301      	movs	r3, #1
 8004e94:	2160      	movs	r1, #96	; 0x60
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff ff77 	bl	8004d8a <lis2mdl_read_reg>
 8004e9c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004e9e:	7a3b      	ldrb	r3, [r7, #8]
 8004ea0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d81a      	bhi.n	8004ee0 <lis2mdl_data_rate_get+0x5c>
 8004eaa:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <lis2mdl_data_rate_get+0x2c>)
 8004eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb0:	08004ec1 	.word	0x08004ec1
 8004eb4:	08004ec9 	.word	0x08004ec9
 8004eb8:	08004ed1 	.word	0x08004ed1
 8004ebc:	08004ed9 	.word	0x08004ed9
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
      break;
 8004ec6:	e00f      	b.n	8004ee8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
      break;
 8004ece:	e00b      	b.n	8004ee8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	701a      	strb	r2, [r3, #0]
      break;
 8004ed6:	e007      	b.n	8004ee8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2203      	movs	r2, #3
 8004edc:	701a      	strb	r2, [r3, #0]
      break;
 8004ede:	e003      	b.n	8004ee8 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
      break;
 8004ee6:	bf00      	nop
  }

  return ret;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop

08004ef4 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004f00:	f107 0208 	add.w	r2, r7, #8
 8004f04:	2301      	movs	r3, #1
 8004f06:	2162      	movs	r1, #98	; 0x62
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ff3e 	bl	8004d8a <lis2mdl_read_reg>
 8004f0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	7a3b      	ldrb	r3, [r7, #8]
 8004f20:	f362 1304 	bfi	r3, r2, #4, #1
 8004f24:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004f26:	f107 0208 	add.w	r2, r7, #8
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	2162      	movs	r1, #98	; 0x62
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff ff43 	bl	8004dba <lis2mdl_write_reg>
 8004f34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f36:	68fb      	ldr	r3, [r7, #12]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004f4a:	f107 020c 	add.w	r2, r7, #12
 8004f4e:	2306      	movs	r3, #6
 8004f50:	2168      	movs	r1, #104	; 0x68
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff ff19 	bl	8004d8a <lis2mdl_read_reg>
 8004f58:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004f5a:	7b7b      	ldrb	r3, [r7, #13]
 8004f5c:	b21a      	sxth	r2, r3
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	7b3b      	ldrb	r3, [r7, #12]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	b21a      	sxth	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004f7c:	7bfa      	ldrb	r2, [r7, #15]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	3302      	adds	r3, #2
 8004f82:	b212      	sxth	r2, r2
 8004f84:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	3302      	adds	r3, #2
 8004f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	7bbb      	ldrb	r3, [r7, #14]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	4413      	add	r3, r2
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	3302      	adds	r3, #2
 8004fa0:	b212      	sxth	r2, r2
 8004fa2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004fa4:	7c7a      	ldrb	r2, [r7, #17]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	b212      	sxth	r2, r2
 8004fac:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	7c3b      	ldrb	r3, [r7, #16]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	4413      	add	r3, r2
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	b212      	sxth	r2, r2
 8004fca:	801a      	strh	r2, [r3, #0]

  return ret;
 8004fcc:	697b      	ldr	r3, [r7, #20]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	214f      	movs	r1, #79	; 0x4f
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff fecf 	bl	8004d8a <lis2mdl_read_reg>
 8004fec:	60f8      	str	r0, [r7, #12]

  return ret;
 8004fee:	68fb      	ldr	r3, [r7, #12]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005004:	f107 0208 	add.w	r2, r7, #8
 8005008:	2301      	movs	r3, #1
 800500a:	2162      	movs	r1, #98	; 0x62
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff febc 	bl	8004d8a <lis2mdl_read_reg>
 8005012:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10f      	bne.n	800503a <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	b2da      	uxtb	r2, r3
 8005022:	7a3b      	ldrb	r3, [r7, #8]
 8005024:	f362 0341 	bfi	r3, r2, #1, #1
 8005028:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800502a:	f107 0208 	add.w	r2, r7, #8
 800502e:	2301      	movs	r3, #1
 8005030:	2162      	movs	r1, #98	; 0x62
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fec1 	bl	8004dba <lis2mdl_write_reg>
 8005038:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005050:	f107 0208 	add.w	r2, r7, #8
 8005054:	2301      	movs	r3, #1
 8005056:	2162      	movs	r1, #98	; 0x62
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff fe96 	bl	8004d8a <lis2mdl_read_reg>
 800505e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10f      	bne.n	8005086 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	b2da      	uxtb	r2, r3
 800506e:	7a3b      	ldrb	r3, [r7, #8]
 8005070:	f362 1345 	bfi	r3, r2, #5, #1
 8005074:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005076:	f107 0208 	add.w	r2, r7, #8
 800507a:	2301      	movs	r3, #1
 800507c:	2162      	movs	r1, #98	; 0x62
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fe9b 	bl	8004dba <lis2mdl_write_reg>
 8005084:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005086:	68fb      	ldr	r3, [r7, #12]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e051      	b.n	8005150 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	7b1a      	ldrb	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	699a      	ldr	r2, [r3, #24]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a1d      	ldr	r2, [pc, #116]	; (800515c <LPS22HH_RegisterBusIO+0xcc>)
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <LPS22HH_RegisterBusIO+0xd0>)
 80050ee:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d103      	bne.n	800510e <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e020      	b.n	8005150 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4798      	blx	r3
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 800511a:	f04f 33ff 	mov.w	r3, #4294967295
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	e016      	b.n	8005150 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d112      	bne.n	8005150 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10d      	bne.n	8005150 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8005134:	2301      	movs	r3, #1
 8005136:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 8005138:	7afb      	ldrb	r3, [r7, #11]
 800513a:	461a      	mov	r2, r3
 800513c:	2110      	movs	r1, #16
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f9e7 	bl	8005512 <LPS22HH_Write_Reg>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
 800514e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	08005843 	.word	0x08005843
 8005160:	08005879 	.word	0x08005879

08005164 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fb16 	bl	80057a8 <LPS22HH_Initialize>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8005182:	f04f 33ff 	mov.w	r3, #4294967295
 8005186:	e004      	b.n	8005192 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d111      	bne.n	80051d0 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f87f 	bl	80052b0 <LPS22HH_PRESS_Disable>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 80051b8:	f04f 33ff 	mov.w	r3, #4294967295
 80051bc:	e00d      	b.n	80051da <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f920 	bl	8005404 <LPS22HH_TEMP_Disable>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 80051ca:	f04f 33ff 	mov.w	r3, #4294967295
 80051ce:	e004      	b.n	80051da <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3320      	adds	r3, #32
 80051f0:	6839      	ldr	r1, [r7, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fd26 	bl	8005c44 <lps22hh_device_id_get>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	e000      	b.n	8005206 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
	...

08005210 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2201      	movs	r2, #1
 8005224:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2201      	movs	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2200      	movs	r2, #0
 8005236:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	4a08      	ldr	r2, [pc, #32]	; (8005264 <LPS22HH_GetCapabilities+0x54>)
 8005244:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	4a06      	ldr	r2, [pc, #24]	; (8005264 <LPS22HH_GetCapabilities+0x54>)
 800524a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	615a      	str	r2, [r3, #20]
  return LPS22HH_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	43480000 	.word	0x43480000

08005268 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	e014      	b.n	80052a8 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f103 0220 	add.w	r2, r3, #32
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f000 fb97 	bl	80059c0 <lps22hh_data_rate_set>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005298:	f04f 33ff 	mov.w	r3, #4294967295
 800529c:	e004      	b.n	80052a8 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e024      	b.n	8005310 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d11a      	bne.n	8005306 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f103 0220 	add.w	r2, r3, #32
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3333      	adds	r3, #51	; 0x33
 80052da:	4619      	mov	r1, r3
 80052dc:	4610      	mov	r0, r2
 80052de:	f000 fbbd 	bl	8005a5c <lps22hh_data_rate_get>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 80052e8:	f04f 33ff 	mov.w	r3, #4294967295
 80052ec:	e010      	b.n	8005310 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3320      	adds	r3, #32
 80052f2:	2100      	movs	r1, #0
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fb63 	bl	80059c0 <lps22hh_data_rate_set>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005300:	f04f 33ff 	mov.w	r3, #4294967295
 8005304:	e004      	b.n	8005310 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f90f 	bl	8005548 <LPS22HH_GetOutputDataRate>
 800532a:	4603      	mov	r3, r0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005346:	2b01      	cmp	r3, #1
 8005348:	d106      	bne.n	8005358 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800534a:	ed97 0a00 	vldr	s0, [r7]
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f95e 	bl	8005610 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005354:	4603      	mov	r3, r0
 8005356:	e005      	b.n	8005364 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005358:	ed97 0a00 	vldr	s0, [r7]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f9c9 	bl	80056f4 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005362:	4603      	mov	r3, r0
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005376:	f107 030c 	add.w	r3, r7, #12
 800537a:	2204      	movs	r2, #4
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f015 fc03 	bl	801ab8a <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3320      	adds	r3, #32
 8005388:	f107 020c 	add.w	r2, r7, #12
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fc0c 	bl	8005bac <lps22hh_pressure_raw_get>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 800539a:	f04f 33ff 	mov.w	r3, #4294967295
 800539e:	e009      	b.n	80053b4 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fab4 	bl	8005910 <lps22hh_from_lsb_to_hpa>
 80053a8:	eef0 7a40 	vmov.f32	s15, s0
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	e014      	b.n	80053fc <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f103 0220 	add.w	r2, r3, #32
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80053de:	4619      	mov	r1, r3
 80053e0:	4610      	mov	r0, r2
 80053e2:	f000 faed 	bl	80059c0 <lps22hh_data_rate_set>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295
 80053f0:	e004      	b.n	80053fc <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e024      	b.n	8005464 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005420:	2b00      	cmp	r3, #0
 8005422:	d11a      	bne.n	800545a <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f103 0220 	add.w	r2, r3, #32
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3333      	adds	r3, #51	; 0x33
 800542e:	4619      	mov	r1, r3
 8005430:	4610      	mov	r0, r2
 8005432:	f000 fb13 	bl	8005a5c <lps22hh_data_rate_get>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 800543c:	f04f 33ff 	mov.w	r3, #4294967295
 8005440:	e010      	b.n	8005464 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3320      	adds	r3, #32
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fab9 	bl	80059c0 <lps22hh_data_rate_set>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d002      	beq.n	800545a <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005454:	f04f 33ff 	mov.w	r3, #4294967295
 8005458:	e004      	b.n	8005464 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f865 	bl	8005548 <LPS22HH_GetOutputDataRate>
 800547e:	4603      	mov	r3, r0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800549a:	2b01      	cmp	r3, #1
 800549c:	d106      	bne.n	80054ac <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 800549e:	ed97 0a00 	vldr	s0, [r7]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f8b4 	bl	8005610 <LPS22HH_SetOutputDataRate_When_Enabled>
 80054a8:	4603      	mov	r3, r0
 80054aa:	e005      	b.n	80054b8 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80054ac:	ed97 0a00 	vldr	s0, [r7]
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f91f 	bl	80056f4 <LPS22HH_SetOutputDataRate_When_Disabled>
 80054b6:	4603      	mov	r3, r0
  }
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80054ca:	f107 030c 	add.w	r3, r7, #12
 80054ce:	2202      	movs	r2, #2
 80054d0:	2100      	movs	r1, #0
 80054d2:	4618      	mov	r0, r3
 80054d4:	f015 fb59 	bl	801ab8a <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3320      	adds	r3, #32
 80054dc:	f107 020c 	add.w	r2, r7, #12
 80054e0:	4611      	mov	r1, r2
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 fb8b 	bl	8005bfe <lps22hh_temperature_raw_get>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	e00a      	b.n	800550a <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 80054f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fa21 	bl	8005940 <lps22hh_from_lsb_to_celsius>
 80054fe:	eef0 7a40 	vmov.f32	s15, s0
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	70fb      	strb	r3, [r7, #3]
 800551e:	4613      	mov	r3, r2
 8005520:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f103 0020 	add.w	r0, r3, #32
 8005528:	1cba      	adds	r2, r7, #2
 800552a:	78f9      	ldrb	r1, [r7, #3]
 800552c:	2301      	movs	r3, #1
 800552e:	f000 f9d6 	bl	80058de <lps22hh_write_reg>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	e000      	b.n	8005540 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3320      	adds	r3, #32
 800555a:	f107 020b 	add.w	r2, r7, #11
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fa7b 	bl	8005a5c <lps22hh_data_rate_get>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
 8005570:	e03d      	b.n	80055ee <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8005572:	7afb      	ldrb	r3, [r7, #11]
 8005574:	2b07      	cmp	r3, #7
 8005576:	d835      	bhi.n	80055e4 <LPS22HH_GetOutputDataRate+0x9c>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <LPS22HH_GetOutputDataRate+0x38>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055a1 	.word	0x080055a1
 8005584:	080055ab 	.word	0x080055ab
 8005588:	080055b5 	.word	0x080055b5
 800558c:	080055bd 	.word	0x080055bd
 8005590:	080055c5 	.word	0x080055c5
 8005594:	080055cd 	.word	0x080055cd
 8005598:	080055d5 	.word	0x080055d5
 800559c:	080055dd 	.word	0x080055dd
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
      break;
 80055a8:	e020      	b.n	80055ec <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80055b0:	601a      	str	r2, [r3, #0]
      break;
 80055b2:	e01b      	b.n	80055ec <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	4a10      	ldr	r2, [pc, #64]	; (80055f8 <LPS22HH_GetOutputDataRate+0xb0>)
 80055b8:	601a      	str	r2, [r3, #0]
      break;
 80055ba:	e017      	b.n	80055ec <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	4a0f      	ldr	r2, [pc, #60]	; (80055fc <LPS22HH_GetOutputDataRate+0xb4>)
 80055c0:	601a      	str	r2, [r3, #0]
      break;
 80055c2:	e013      	b.n	80055ec <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <LPS22HH_GetOutputDataRate+0xb8>)
 80055c8:	601a      	str	r2, [r3, #0]
      break;
 80055ca:	e00f      	b.n	80055ec <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	4a0d      	ldr	r2, [pc, #52]	; (8005604 <LPS22HH_GetOutputDataRate+0xbc>)
 80055d0:	601a      	str	r2, [r3, #0]
      break;
 80055d2:	e00b      	b.n	80055ec <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <LPS22HH_GetOutputDataRate+0xc0>)
 80055d8:	601a      	str	r2, [r3, #0]
      break;
 80055da:	e007      	b.n	80055ec <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	4a0b      	ldr	r2, [pc, #44]	; (800560c <LPS22HH_GetOutputDataRate+0xc4>)
 80055e0:	601a      	str	r2, [r3, #0]
      break;
 80055e2:	e003      	b.n	80055ec <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 80055e4:	f04f 33ff 	mov.w	r3, #4294967295
 80055e8:	60fb      	str	r3, [r7, #12]
      break;
 80055ea:	bf00      	nop
  }

  return ret;
 80055ec:	68fb      	ldr	r3, [r7, #12]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	41200000 	.word	0x41200000
 80055fc:	41c80000 	.word	0x41c80000
 8005600:	42480000 	.word	0x42480000
 8005604:	42960000 	.word	0x42960000
 8005608:	42c80000 	.word	0x42c80000
 800560c:	43480000 	.word	0x43480000

08005610 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800561c:	edd7 7a00 	vldr	s15, [r7]
 8005620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562c:	d801      	bhi.n	8005632 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 800562e:	2301      	movs	r3, #1
 8005630:	e037      	b.n	80056a2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005632:	edd7 7a00 	vldr	s15, [r7]
 8005636:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800563a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800563e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005642:	d801      	bhi.n	8005648 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8005644:	2302      	movs	r3, #2
 8005646:	e02c      	b.n	80056a2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005648:	edd7 7a00 	vldr	s15, [r7]
 800564c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005658:	d801      	bhi.n	800565e <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 800565a:	2303      	movs	r3, #3
 800565c:	e021      	b.n	80056a2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800565e:	edd7 7a00 	vldr	s15, [r7]
 8005662:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80056e8 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8005666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800566e:	d801      	bhi.n	8005674 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8005670:	2304      	movs	r3, #4
 8005672:	e016      	b.n	80056a2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005674:	edd7 7a00 	vldr	s15, [r7]
 8005678:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80056ec <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 800567c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005684:	d801      	bhi.n	800568a <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8005686:	2305      	movs	r3, #5
 8005688:	e00b      	b.n	80056a2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 800568a:	edd7 7a00 	vldr	s15, [r7]
 800568e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80056f0 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8005692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800569a:	d801      	bhi.n	80056a0 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 800569c:	2306      	movs	r3, #6
 800569e:	e000      	b.n	80056a2 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 80056a0:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80056a2:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3320      	adds	r3, #32
 80056a8:	7bfa      	ldrb	r2, [r7, #15]
 80056aa:	4611      	mov	r1, r2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f987 	bl	80059c0 <lps22hh_data_rate_set>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 80056b8:	f04f 33ff 	mov.w	r3, #4294967295
 80056bc:	e00f      	b.n	80056de <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f103 0220 	add.w	r2, r3, #32
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3333      	adds	r3, #51	; 0x33
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f000 f9c6 	bl	8005a5c <lps22hh_data_rate_get>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 80056d6:	f04f 33ff 	mov.w	r3, #4294967295
 80056da:	e000      	b.n	80056de <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	42480000 	.word	0x42480000
 80056ec:	42960000 	.word	0x42960000
 80056f0:	42c80000 	.word	0x42c80000

080056f4 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005700:	edd7 7a00 	vldr	s15, [r7]
 8005704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005710:	d801      	bhi.n	8005716 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8005712:	2301      	movs	r3, #1
 8005714:	e037      	b.n	8005786 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005716:	edd7 7a00 	vldr	s15, [r7]
 800571a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800571e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005726:	d801      	bhi.n	800572c <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8005728:	2302      	movs	r3, #2
 800572a:	e02c      	b.n	8005786 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800572c:	edd7 7a00 	vldr	s15, [r7]
 8005730:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573c:	d801      	bhi.n	8005742 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 800573e:	2303      	movs	r3, #3
 8005740:	e021      	b.n	8005786 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005742:	edd7 7a00 	vldr	s15, [r7]
 8005746:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800579c <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 800574a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005752:	d801      	bhi.n	8005758 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8005754:	2304      	movs	r3, #4
 8005756:	e016      	b.n	8005786 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005758:	edd7 7a00 	vldr	s15, [r7]
 800575c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80057a0 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8005760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005768:	d801      	bhi.n	800576e <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 800576a:	2305      	movs	r3, #5
 800576c:	e00b      	b.n	8005786 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 800576e:	edd7 7a00 	vldr	s15, [r7]
 8005772:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80057a4 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8005776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800577a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577e:	d801      	bhi.n	8005784 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8005780:	2306      	movs	r3, #6
 8005782:	e000      	b.n	8005786 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005784:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	42480000 	.word	0x42480000
 80057a0:	42960000 	.word	0x42960000
 80057a4:	42c80000 	.word	0x42c80000

080057a8 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LPS22HH_I3C_BUS)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d00b      	beq.n	80057d0 <LPS22HH_Initialize+0x28>
  {
    /* Disable MIPI I3C(SM) interface */
    if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3320      	adds	r3, #32
 80057bc:	2111      	movs	r1, #17
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fa9d 	bl	8005cfe <lps22hh_i3c_interface_set>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <LPS22HH_Initialize+0x28>
    {
      return LPS22HH_ERROR;
 80057ca:	f04f 33ff 	mov.w	r3, #4294967295
 80057ce:	e034      	b.n	800583a <LPS22HH_Initialize+0x92>
    }
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3320      	adds	r3, #32
 80057d4:	2110      	movs	r1, #16
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 f8f2 	bl	80059c0 <lps22hh_data_rate_set>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <LPS22HH_Initialize+0x40>
  {
    return LPS22HH_ERROR;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
 80057e6:	e028      	b.n	800583a <LPS22HH_Initialize+0x92>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3320      	adds	r3, #32
 80057ec:	2100      	movs	r1, #0
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fa5f 	bl	8005cb2 <lps22hh_lp_bandwidth_set>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <LPS22HH_Initialize+0x58>
  {
    return LPS22HH_ERROR;
 80057fa:	f04f 33ff 	mov.w	r3, #4294967295
 80057fe:	e01c      	b.n	800583a <LPS22HH_Initialize+0x92>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3320      	adds	r3, #32
 8005804:	2101      	movs	r1, #1
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f8b4 	bl	8005974 <lps22hh_block_data_update_set>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <LPS22HH_Initialize+0x70>
  {
    return LPS22HH_ERROR;
 8005812:	f04f 33ff 	mov.w	r3, #4294967295
 8005816:	e010      	b.n	800583a <LPS22HH_Initialize+0x92>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3320      	adds	r3, #32
 800581c:	2101      	movs	r1, #1
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fa21 	bl	8005c66 <lps22hh_auto_increment_set>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d002      	beq.n	8005830 <LPS22HH_Initialize+0x88>
  {
    return LPS22HH_ERROR;
 800582a:	f04f 33ff 	mov.w	r3, #4294967295
 800582e:	e004      	b.n	800583a <LPS22HH_Initialize+0x92>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2203      	movs	r2, #3
 8005834:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005842:	b590      	push	{r4, r7, lr}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	461a      	mov	r2, r3
 800584e:	460b      	mov	r3, r1
 8005850:	72fb      	strb	r3, [r7, #11]
 8005852:	4613      	mov	r3, r2
 8005854:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	695c      	ldr	r4, [r3, #20]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	7b1b      	ldrb	r3, [r3, #12]
 8005862:	b298      	uxth	r0, r3
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	b299      	uxth	r1, r3
 8005868:	893b      	ldrh	r3, [r7, #8]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	47a0      	blx	r4
 800586e:	4603      	mov	r3, r0
}
 8005870:	4618      	mov	r0, r3
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	bd90      	pop	{r4, r7, pc}

08005878 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005878:	b590      	push	{r4, r7, lr}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	607a      	str	r2, [r7, #4]
 8005882:	461a      	mov	r2, r3
 8005884:	460b      	mov	r3, r1
 8005886:	72fb      	strb	r3, [r7, #11]
 8005888:	4613      	mov	r3, r2
 800588a:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	691c      	ldr	r4, [r3, #16]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	7b1b      	ldrb	r3, [r3, #12]
 8005898:	b298      	uxth	r0, r3
 800589a:	7afb      	ldrb	r3, [r7, #11]
 800589c:	b299      	uxth	r1, r3
 800589e:	893b      	ldrh	r3, [r7, #8]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	47a0      	blx	r4
 80058a4:	4603      	mov	r3, r0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd90      	pop	{r4, r7, pc}

080058ae <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80058ae:	b590      	push	{r4, r7, lr}
 80058b0:	b087      	sub	sp, #28
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	60f8      	str	r0, [r7, #12]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	461a      	mov	r2, r3
 80058ba:	460b      	mov	r3, r1
 80058bc:	72fb      	strb	r3, [r7, #11]
 80058be:	4613      	mov	r3, r2
 80058c0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685c      	ldr	r4, [r3, #4]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	68d8      	ldr	r0, [r3, #12]
 80058ca:	893b      	ldrh	r3, [r7, #8]
 80058cc:	7af9      	ldrb	r1, [r7, #11]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	47a0      	blx	r4
 80058d2:	6178      	str	r0, [r7, #20]

  return ret;
 80058d4:	697b      	ldr	r3, [r7, #20]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd90      	pop	{r4, r7, pc}

080058de <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80058de:	b590      	push	{r4, r7, lr}
 80058e0:	b087      	sub	sp, #28
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	461a      	mov	r2, r3
 80058ea:	460b      	mov	r3, r1
 80058ec:	72fb      	strb	r3, [r7, #11]
 80058ee:	4613      	mov	r3, r2
 80058f0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681c      	ldr	r4, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	68d8      	ldr	r0, [r3, #12]
 80058fa:	893b      	ldrh	r3, [r7, #8]
 80058fc:	7af9      	ldrb	r1, [r7, #11]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	47a0      	blx	r4
 8005902:	6178      	str	r0, [r7, #20]

  return ret;
 8005904:	697b      	ldr	r3, [r7, #20]
}
 8005906:	4618      	mov	r0, r3
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	bd90      	pop	{r4, r7, pc}
	...

08005910 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800593c <lps22hh_from_lsb_to_hpa+0x2c>
 8005926:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800592a:	eef0 7a66 	vmov.f32	s15, s13
}
 800592e:	eeb0 0a67 	vmov.f32	s0, s15
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	49800000 	.word	0x49800000

08005940 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800594a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005956:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005970 <lps22hh_from_lsb_to_celsius+0x30>
 800595a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800595e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005962:	eeb0 0a67 	vmov.f32	s0, s15
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	42c80000 	.word	0x42c80000

08005974 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005980:	f107 0208 	add.w	r2, r7, #8
 8005984:	2301      	movs	r3, #1
 8005986:	2110      	movs	r1, #16
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ff90 	bl	80058ae <lps22hh_read_reg>
 800598e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10f      	bne.n	80059b6 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	b2da      	uxtb	r2, r3
 800599e:	7a3b      	ldrb	r3, [r7, #8]
 80059a0:	f362 0341 	bfi	r3, r2, #1, #1
 80059a4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80059a6:	f107 0208 	add.w	r2, r7, #8
 80059aa:	2301      	movs	r3, #1
 80059ac:	2110      	movs	r1, #16
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff ff95 	bl	80058de <lps22hh_write_reg>
 80059b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059b6:	68fb      	ldr	r3, [r7, #12]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80059cc:	f107 0210 	add.w	r2, r7, #16
 80059d0:	2301      	movs	r3, #1
 80059d2:	2110      	movs	r1, #16
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff ff6a 	bl	80058ae <lps22hh_read_reg>
 80059da:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d107      	bne.n	80059f2 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80059e2:	f107 020c 	add.w	r2, r7, #12
 80059e6:	2301      	movs	r3, #1
 80059e8:	2111      	movs	r1, #17
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7ff ff5f 	bl	80058ae <lps22hh_read_reg>
 80059f0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10f      	bne.n	8005a18 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	7c3b      	ldrb	r3, [r7, #16]
 8005a02:	f362 1306 	bfi	r3, r2, #4, #3
 8005a06:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005a08:	f107 0210 	add.w	r2, r7, #16
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	2110      	movs	r1, #16
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff64 	bl	80058de <lps22hh_write_reg>
 8005a16:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d119      	bne.n	8005a52 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	7b3b      	ldrb	r3, [r7, #12]
 8005a2a:	f362 0341 	bfi	r3, r2, #1, #1
 8005a2e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	08db      	lsrs	r3, r3, #3
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	7b3b      	ldrb	r3, [r7, #12]
 8005a3c:	f362 0300 	bfi	r3, r2, #0, #1
 8005a40:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005a42:	f107 020c 	add.w	r2, r7, #12
 8005a46:	2301      	movs	r3, #1
 8005a48:	2111      	movs	r1, #17
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff ff47 	bl	80058de <lps22hh_write_reg>
 8005a50:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005a52:	697b      	ldr	r3, [r7, #20]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005a66:	f107 0210 	add.w	r2, r7, #16
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	2110      	movs	r1, #16
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff ff1d 	bl	80058ae <lps22hh_read_reg>
 8005a74:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d107      	bne.n	8005a8c <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005a7c:	f107 020c 	add.w	r2, r7, #12
 8005a80:	2301      	movs	r3, #1
 8005a82:	2111      	movs	r1, #17
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff ff12 	bl	80058ae <lps22hh_read_reg>
 8005a8a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f040 8086 	bne.w	8005ba0 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005a94:	f107 020c 	add.w	r2, r7, #12
 8005a98:	2301      	movs	r3, #1
 8005a9a:	2111      	movs	r1, #17
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff ff06 	bl	80058ae <lps22hh_read_reg>
 8005aa2:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005aa4:	7b3b      	ldrb	r3, [r7, #12]
 8005aa6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	011a      	lsls	r2, r3, #4
 8005aae:	7b3b      	ldrb	r3, [r7, #12]
 8005ab0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8005aba:	7c3a      	ldrb	r2, [r7, #16]
 8005abc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005ac0:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005ac2:	4413      	add	r3, r2
 8005ac4:	2b15      	cmp	r3, #21
 8005ac6:	d867      	bhi.n	8005b98 <lps22hh_data_rate_get+0x13c>
 8005ac8:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <lps22hh_data_rate_get+0x74>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005b29 	.word	0x08005b29
 8005ad4:	08005b39 	.word	0x08005b39
 8005ad8:	08005b41 	.word	0x08005b41
 8005adc:	08005b49 	.word	0x08005b49
 8005ae0:	08005b51 	.word	0x08005b51
 8005ae4:	08005b59 	.word	0x08005b59
 8005ae8:	08005b89 	.word	0x08005b89
 8005aec:	08005b91 	.word	0x08005b91
 8005af0:	08005b31 	.word	0x08005b31
 8005af4:	08005b99 	.word	0x08005b99
 8005af8:	08005b99 	.word	0x08005b99
 8005afc:	08005b99 	.word	0x08005b99
 8005b00:	08005b99 	.word	0x08005b99
 8005b04:	08005b99 	.word	0x08005b99
 8005b08:	08005b99 	.word	0x08005b99
 8005b0c:	08005b99 	.word	0x08005b99
 8005b10:	08005b99 	.word	0x08005b99
 8005b14:	08005b61 	.word	0x08005b61
 8005b18:	08005b69 	.word	0x08005b69
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005b79 	.word	0x08005b79
 8005b24:	08005b81 	.word	0x08005b81
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	701a      	strb	r2, [r3, #0]
        break;
 8005b2e:	e037      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2208      	movs	r2, #8
 8005b34:	701a      	strb	r2, [r3, #0]
        break;
 8005b36:	e033      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	701a      	strb	r2, [r3, #0]
        break;
 8005b3e:	e02f      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2202      	movs	r2, #2
 8005b44:	701a      	strb	r2, [r3, #0]
        break;
 8005b46:	e02b      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2203      	movs	r2, #3
 8005b4c:	701a      	strb	r2, [r3, #0]
        break;
 8005b4e:	e027      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2204      	movs	r2, #4
 8005b54:	701a      	strb	r2, [r3, #0]
        break;
 8005b56:	e023      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2205      	movs	r2, #5
 8005b5c:	701a      	strb	r2, [r3, #0]
        break;
 8005b5e:	e01f      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2211      	movs	r2, #17
 8005b64:	701a      	strb	r2, [r3, #0]
        break;
 8005b66:	e01b      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2212      	movs	r2, #18
 8005b6c:	701a      	strb	r2, [r3, #0]
        break;
 8005b6e:	e017      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2213      	movs	r2, #19
 8005b74:	701a      	strb	r2, [r3, #0]
        break;
 8005b76:	e013      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2214      	movs	r2, #20
 8005b7c:	701a      	strb	r2, [r3, #0]
        break;
 8005b7e:	e00f      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2215      	movs	r2, #21
 8005b84:	701a      	strb	r2, [r3, #0]
        break;
 8005b86:	e00b      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2206      	movs	r2, #6
 8005b8c:	701a      	strb	r2, [r3, #0]
        break;
 8005b8e:	e007      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2207      	movs	r2, #7
 8005b94:	701a      	strb	r2, [r3, #0]
        break;
 8005b96:	e003      	b.n	8005ba0 <lps22hh_data_rate_get+0x144>

      default:
        *val = LPS22HH_POWER_DOWN;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
        break;
 8005b9e:	bf00      	nop
    }
  }

  return ret;
 8005ba0:	697b      	ldr	r3, [r7, #20]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop

08005bac <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005bb6:	f107 0208 	add.w	r2, r7, #8
 8005bba:	2303      	movs	r3, #3
 8005bbc:	2128      	movs	r1, #40	; 0x28
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7ff fe75 	bl	80058ae <lps22hh_read_reg>
 8005bc4:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005bc6:	7abb      	ldrb	r3, [r7, #10]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	021b      	lsls	r3, r3, #8
 8005bd4:	7a7a      	ldrb	r2, [r7, #9]
 8005bd6:	441a      	add	r2, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	7a3a      	ldrb	r2, [r7, #8]
 8005be4:	441a      	add	r2, r3
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	601a      	str	r2, [r3, #0]

  return ret;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005c08:	f107 0208 	add.w	r2, r7, #8
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	212b      	movs	r1, #43	; 0x2b
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff fe4c 	bl	80058ae <lps22hh_read_reg>
 8005c16:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005c18:	7a7b      	ldrb	r3, [r7, #9]
 8005c1a:	b21a      	sxth	r2, r3
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	7a3b      	ldrb	r3, [r7, #8]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	4413      	add	r3, r2
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	b21a      	sxth	r2, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	801a      	strh	r2, [r3, #0]

  return ret;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005c4e:	2301      	movs	r3, #1
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	210f      	movs	r1, #15
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff fe2a 	bl	80058ae <lps22hh_read_reg>
 8005c5a:	60f8      	str	r0, [r7, #12]

  return ret;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005c72:	f107 0208 	add.w	r2, r7, #8
 8005c76:	2301      	movs	r3, #1
 8005c78:	2111      	movs	r1, #17
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff fe17 	bl	80058ae <lps22hh_read_reg>
 8005c80:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10f      	bne.n	8005ca8 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	7a3b      	ldrb	r3, [r7, #8]
 8005c92:	f362 1304 	bfi	r3, r2, #4, #1
 8005c96:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005c98:	f107 0208 	add.w	r2, r7, #8
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	2111      	movs	r1, #17
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fe1c 	bl	80058de <lps22hh_write_reg>
 8005ca6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005cbe:	f107 0208 	add.w	r2, r7, #8
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	2110      	movs	r1, #16
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fdf1 	bl	80058ae <lps22hh_read_reg>
 8005ccc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10f      	bne.n	8005cf4 <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	7a3b      	ldrb	r3, [r7, #8]
 8005cde:	f362 0383 	bfi	r3, r2, #2, #2
 8005ce2:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005ce4:	f107 0208 	add.w	r2, r7, #8
 8005ce8:	2301      	movs	r3, #1
 8005cea:	2110      	movs	r1, #16
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fdf6 	bl	80058de <lps22hh_write_reg>
 8005cf2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005d0a:	f107 0208 	add.w	r2, r7, #8
 8005d0e:	2301      	movs	r3, #1
 8005d10:	210e      	movs	r1, #14
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff fdcb 	bl	80058ae <lps22hh_read_reg>
 8005d18:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d118      	bne.n	8005d52 <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	7a3b      	ldrb	r3, [r7, #8]
 8005d2a:	f362 0341 	bfi	r3, r2, #1, #1
 8005d2e:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	091b      	lsrs	r3, r3, #4
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	7a3b      	ldrb	r3, [r7, #8]
 8005d3c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005d40:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005d42:	f107 0208 	add.w	r2, r7, #8
 8005d46:	2301      	movs	r3, #1
 8005d48:	210e      	movs	r1, #14
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff fdc7 	bl	80058de <lps22hh_write_reg>
 8005d50:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d52:	68fb      	ldr	r3, [r7, #12]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d103      	bne.n	8005d78 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	e051      	b.n	8005e1c <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	7b1a      	ldrb	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	699a      	ldr	r2, [r3, #24]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a1d      	ldr	r2, [pc, #116]	; (8005e28 <LSM6DSO_RegisterBusIO+0xcc>)
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <LSM6DSO_RegisterBusIO+0xd0>)
 8005dba:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d103      	bne.n	8005dda <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e020      	b.n	8005e1c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4798      	blx	r3
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	e016      	b.n	8005e1c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d112      	bne.n	8005e1c <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10d      	bne.n	8005e1c <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005e00:	230c      	movs	r3, #12
 8005e02:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005e04:	7afb      	ldrb	r3, [r7, #11]
 8005e06:	461a      	mov	r2, r3
 8005e08:	2112      	movs	r1, #18
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 ff5d 	bl	8006cca <LSM6DSO_Write_Reg>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	0800716d 	.word	0x0800716d
 8005e2c:	080071a3 	.word	0x080071a3

08005e30 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d00b      	beq.n	8005e58 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3320      	adds	r3, #32
 8005e44:	2180      	movs	r1, #128	; 0x80
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 fe8a 	bl	8007b60 <lsm6dso_i3c_disable_set>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8005e52:	f04f 33ff 	mov.w	r3, #4294967295
 8005e56:	e060      	b.n	8005f1a <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3320      	adds	r3, #32
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 fe58 	bl	8007b14 <lsm6dso_auto_increment_set>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8005e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e6e:	e054      	b.n	8005f1a <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3320      	adds	r3, #32
 8005e74:	2101      	movs	r1, #1
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 fd62 	bl	8007940 <lsm6dso_block_data_update_set>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8005e82:	f04f 33ff 	mov.w	r3, #4294967295
 8005e86:	e048      	b.n	8005f1a <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3320      	adds	r3, #32
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 feae 	bl	8007bf0 <lsm6dso_fifo_mode_set>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8005e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9e:	e03c      	b.n	8005f1a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3320      	adds	r3, #32
 8005eac:	2100      	movs	r1, #0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fa20 	bl	80072f4 <lsm6dso_xl_data_rate_set>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8005eba:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebe:	e02c      	b.n	8005f1a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3320      	adds	r3, #32
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 f9b6 	bl	8007238 <lsm6dso_xl_full_scale_set>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8005ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed6:	e020      	b.n	8005f1a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2204      	movs	r2, #4
 8005edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3320      	adds	r3, #32
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fbce 	bl	8007688 <lsm6dso_gy_data_rate_set>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8005ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef6:	e010      	b.n	8005f1a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3320      	adds	r3, #32
 8005efc:	2106      	movs	r1, #6
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 fb5a 	bl	80075b8 <lsm6dso_gy_full_scale_set>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8005f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0e:	e004      	b.n	8005f1a <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f888 	bl	8006040 <LSM6DSO_ACC_Disable>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005f36:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3a:	e015      	b.n	8005f68 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fc2e 	bl	800679e <LSM6DSO_GYRO_Disable>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005f48:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4c:	e00c      	b.n	8005f68 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3320      	adds	r3, #32
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fdb6 	bl	8007af2 <lsm6dso_device_id_get>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f90:	e000      	b.n	8005f94 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005fc4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2210      	movs	r2, #16
 8005fca:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <LSM6DSO_GetCapabilities+0x58>)
 8005fd6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	4a06      	ldr	r2, [pc, #24]	; (8005ff4 <LSM6DSO_GetCapabilities+0x58>)
 8005fdc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	45d02000 	.word	0x45d02000

08005ff8 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	e014      	b.n	8006038 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f103 0220 	add.w	r2, r3, #32
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800601a:	4619      	mov	r1, r3
 800601c:	4610      	mov	r0, r2
 800601e:	f001 f969 	bl	80072f4 <lsm6dso_xl_data_rate_set>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006028:	f04f 33ff 	mov.w	r3, #4294967295
 800602c:	e004      	b.n	8006038 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e01f      	b.n	8006096 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f103 0220 	add.w	r2, r3, #32
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3333      	adds	r3, #51	; 0x33
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f001 fa40 	bl	80074e8 <lsm6dso_xl_data_rate_get>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800606e:	f04f 33ff 	mov.w	r3, #4294967295
 8006072:	e010      	b.n	8006096 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3320      	adds	r3, #32
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f001 f93a 	bl	80072f4 <lsm6dso_xl_data_rate_set>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006086:	f04f 33ff 	mov.w	r3, #4294967295
 800608a:	e004      	b.n	8006096 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3320      	adds	r3, #32
 80060b2:	f107 020b 	add.w	r2, r7, #11
 80060b6:	4611      	mov	r1, r2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 f8e3 	bl	8007284 <lsm6dso_xl_full_scale_get>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80060c4:	f04f 33ff 	mov.w	r3, #4294967295
 80060c8:	e023      	b.n	8006112 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80060ca:	7afb      	ldrb	r3, [r7, #11]
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d81b      	bhi.n	8006108 <LSM6DSO_ACC_GetSensitivity+0x68>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	080060e9 	.word	0x080060e9
 80060dc:	08006101 	.word	0x08006101
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060f9 	.word	0x080060f9
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	4a0c      	ldr	r2, [pc, #48]	; (800611c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80060ec:	601a      	str	r2, [r3, #0]
      break;
 80060ee:	e00f      	b.n	8006110 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	4a0b      	ldr	r2, [pc, #44]	; (8006120 <LSM6DSO_ACC_GetSensitivity+0x80>)
 80060f4:	601a      	str	r2, [r3, #0]
      break;
 80060f6:	e00b      	b.n	8006110 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	4a0a      	ldr	r2, [pc, #40]	; (8006124 <LSM6DSO_ACC_GetSensitivity+0x84>)
 80060fc:	601a      	str	r2, [r3, #0]
      break;
 80060fe:	e007      	b.n	8006110 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006104:	601a      	str	r2, [r3, #0]
      break;
 8006106:	e003      	b.n	8006110 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006108:	f04f 33ff 	mov.w	r3, #4294967295
 800610c:	60fb      	str	r3, [r7, #12]
      break;
 800610e:	bf00      	nop
  }

  return ret;
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	3d79db23 	.word	0x3d79db23
 8006120:	3df9db23 	.word	0x3df9db23
 8006124:	3e79db23 	.word	0x3e79db23
 8006128:	3ef9db23 	.word	0x3ef9db23

0800612c <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3320      	adds	r3, #32
 800613e:	f107 020b 	add.w	r2, r7, #11
 8006142:	4611      	mov	r1, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f001 f9cf 	bl	80074e8 <lsm6dso_xl_data_rate_get>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006150:	f04f 33ff 	mov.w	r3, #4294967295
 8006154:	e054      	b.n	8006200 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006156:	7afb      	ldrb	r3, [r7, #11]
 8006158:	2b0b      	cmp	r3, #11
 800615a:	d84c      	bhi.n	80061f6 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 800615c:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800615e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006162:	bf00      	nop
 8006164:	08006195 	.word	0x08006195
 8006168:	080061a7 	.word	0x080061a7
 800616c:	080061af 	.word	0x080061af
 8006170:	080061b7 	.word	0x080061b7
 8006174:	080061bf 	.word	0x080061bf
 8006178:	080061c7 	.word	0x080061c7
 800617c:	080061cf 	.word	0x080061cf
 8006180:	080061d7 	.word	0x080061d7
 8006184:	080061df 	.word	0x080061df
 8006188:	080061e7 	.word	0x080061e7
 800618c:	080061ef 	.word	0x080061ef
 8006190:	0800619f 	.word	0x0800619f
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
      break;
 800619c:	e02f      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	4a19      	ldr	r2, [pc, #100]	; (8006208 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80061a2:	601a      	str	r2, [r3, #0]
      break;
 80061a4:	e02b      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	4a18      	ldr	r2, [pc, #96]	; (800620c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80061aa:	601a      	str	r2, [r3, #0]
      break;
 80061ac:	e027      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	4a17      	ldr	r2, [pc, #92]	; (8006210 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80061b2:	601a      	str	r2, [r3, #0]
      break;
 80061b4:	e023      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	4a16      	ldr	r2, [pc, #88]	; (8006214 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80061ba:	601a      	str	r2, [r3, #0]
      break;
 80061bc:	e01f      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	4a15      	ldr	r2, [pc, #84]	; (8006218 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80061c2:	601a      	str	r2, [r3, #0]
      break;
 80061c4:	e01b      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	4a14      	ldr	r2, [pc, #80]	; (800621c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80061ca:	601a      	str	r2, [r3, #0]
      break;
 80061cc:	e017      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	4a13      	ldr	r2, [pc, #76]	; (8006220 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80061d2:	601a      	str	r2, [r3, #0]
      break;
 80061d4:	e013      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	4a12      	ldr	r2, [pc, #72]	; (8006224 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80061da:	601a      	str	r2, [r3, #0]
      break;
 80061dc:	e00f      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	4a11      	ldr	r2, [pc, #68]	; (8006228 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80061e2:	601a      	str	r2, [r3, #0]
      break;
 80061e4:	e00b      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	4a10      	ldr	r2, [pc, #64]	; (800622c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80061ea:	601a      	str	r2, [r3, #0]
      break;
 80061ec:	e007      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	4a0f      	ldr	r2, [pc, #60]	; (8006230 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80061f2:	601a      	str	r2, [r3, #0]
      break;
 80061f4:	e003      	b.n	80061fe <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295
 80061fa:	60fb      	str	r3, [r7, #12]
      break;
 80061fc:	bf00      	nop
  }

  return ret;
 80061fe:	68fb      	ldr	r3, [r7, #12]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	3fcccccd 	.word	0x3fcccccd
 800620c:	41480000 	.word	0x41480000
 8006210:	41d00000 	.word	0x41d00000
 8006214:	42500000 	.word	0x42500000
 8006218:	42d00000 	.word	0x42d00000
 800621c:	43500000 	.word	0x43500000
 8006220:	43d08000 	.word	0x43d08000
 8006224:	44504000 	.word	0x44504000
 8006228:	44d06000 	.word	0x44d06000
 800622c:	45505000 	.word	0x45505000
 8006230:	45d05800 	.word	0x45d05800

08006234 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8006240:	2100      	movs	r1, #0
 8006242:	ed97 0a00 	vldr	s0, [r7]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f806 	bl	8006258 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 800624c:	4603      	mov	r3, r0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08c      	sub	sp, #48	; 0x30
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	ed87 0a02 	vstr	s0, [r7, #8]
 8006264:	460b      	mov	r3, r1
 8006266:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	2b02      	cmp	r3, #2
 8006274:	f000 80ea 	beq.w	800644c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006278:	2b02      	cmp	r3, #2
 800627a:	f300 8163 	bgt.w	8006544 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8006282:	2b01      	cmp	r3, #1
 8006284:	d074      	beq.n	8006370 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8006286:	e15d      	b.n	8006544 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f103 0020 	add.w	r0, r3, #32
 800628e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006292:	2301      	movs	r3, #1
 8006294:	2114      	movs	r1, #20
 8006296:	f000 ff9f 	bl	80071d8 <lsm6dso_read_reg>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80062a0:	f04f 33ff 	mov.w	r3, #4294967295
 80062a4:	e16c      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80062a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d025      	beq.n	8006300 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d10b      	bne.n	80062d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3320      	adds	r3, #32
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 f815 	bl	80072f4 <lsm6dso_xl_data_rate_set>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80062d0:	f04f 33ff 	mov.w	r3, #4294967295
 80062d4:	e154      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80062d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062da:	f36f 13c7 	bfc	r3, #7, #1
 80062de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f103 0020 	add.w	r0, r3, #32
 80062e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80062ec:	2301      	movs	r3, #1
 80062ee:	2114      	movs	r1, #20
 80062f0:	f000 ff8a 	bl	8007208 <lsm6dso_write_reg>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80062fa:	f04f 33ff 	mov.w	r3, #4294967295
 80062fe:	e13f      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f103 0020 	add.w	r0, r3, #32
 8006306:	f107 0220 	add.w	r2, r7, #32
 800630a:	2301      	movs	r3, #1
 800630c:	2115      	movs	r1, #21
 800630e:	f000 ff63 	bl	80071d8 <lsm6dso_read_reg>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8006318:	f04f 33ff 	mov.w	r3, #4294967295
 800631c:	e130      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800631e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d014      	beq.n	8006356 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 800632c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006330:	f36f 1304 	bfc	r3, #4, #1
 8006334:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f103 0020 	add.w	r0, r3, #32
 800633e:	f107 0220 	add.w	r2, r7, #32
 8006342:	2301      	movs	r3, #1
 8006344:	2115      	movs	r1, #21
 8006346:	f000 ff5f 	bl	8007208 <lsm6dso_write_reg>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8006350:	f04f 33ff 	mov.w	r3, #4294967295
 8006354:	e114      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006356:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800635a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800635e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006366:	d400      	bmi.n	800636a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006368:	e0f0      	b.n	800654c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 800636a:	4b87      	ldr	r3, [pc, #540]	; (8006588 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
 800636e:	e0ed      	b.n	800654c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f103 0020 	add.w	r0, r3, #32
 8006376:	f107 021c 	add.w	r2, r7, #28
 800637a:	2301      	movs	r3, #1
 800637c:	2114      	movs	r1, #20
 800637e:	f000 ff2b 	bl	80071d8 <lsm6dso_read_reg>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006388:	f04f 33ff 	mov.w	r3, #4294967295
 800638c:	e0f8      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800638e:	7f3b      	ldrb	r3, [r7, #28]
 8006390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d023      	beq.n	80063e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d10b      	bne.n	80063bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3320      	adds	r3, #32
 80063a8:	2100      	movs	r1, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 ffa2 	bl	80072f4 <lsm6dso_xl_data_rate_set>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80063b6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ba:	e0e1      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80063bc:	7f3b      	ldrb	r3, [r7, #28]
 80063be:	f36f 13c7 	bfc	r3, #7, #1
 80063c2:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f103 0020 	add.w	r0, r3, #32
 80063ca:	f107 021c 	add.w	r2, r7, #28
 80063ce:	2301      	movs	r3, #1
 80063d0:	2114      	movs	r1, #20
 80063d2:	f000 ff19 	bl	8007208 <lsm6dso_write_reg>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80063dc:	f04f 33ff 	mov.w	r3, #4294967295
 80063e0:	e0ce      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f103 0020 	add.w	r0, r3, #32
 80063e8:	f107 0218 	add.w	r2, r7, #24
 80063ec:	2301      	movs	r3, #1
 80063ee:	2115      	movs	r1, #21
 80063f0:	f000 fef2 	bl	80071d8 <lsm6dso_read_reg>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
 80063fe:	e0bf      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8006400:	7e3b      	ldrb	r3, [r7, #24]
 8006402:	f003 0310 	and.w	r3, r3, #16
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d112      	bne.n	8006432 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 800640c:	7e3b      	ldrb	r3, [r7, #24]
 800640e:	f043 0310 	orr.w	r3, r3, #16
 8006412:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f103 0020 	add.w	r0, r3, #32
 800641a:	f107 0218 	add.w	r2, r7, #24
 800641e:	2301      	movs	r3, #1
 8006420:	2115      	movs	r1, #21
 8006422:	f000 fef1 	bl	8007208 <lsm6dso_write_reg>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 800642c:	f04f 33ff 	mov.w	r3, #4294967295
 8006430:	e0a6      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006432:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006436:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800658c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800643a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800643e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006442:	dc00      	bgt.n	8006446 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8006444:	e082      	b.n	800654c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006446:	4b52      	ldr	r3, [pc, #328]	; (8006590 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28
 800644a:	e07f      	b.n	800654c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f103 0020 	add.w	r0, r3, #32
 8006452:	f107 0210 	add.w	r2, r7, #16
 8006456:	2301      	movs	r3, #1
 8006458:	2115      	movs	r1, #21
 800645a:	f000 febd 	bl	80071d8 <lsm6dso_read_reg>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006464:	f04f 33ff 	mov.w	r3, #4294967295
 8006468:	e08a      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800646a:	7c3b      	ldrb	r3, [r7, #16]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d012      	beq.n	800649c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8006476:	7c3b      	ldrb	r3, [r7, #16]
 8006478:	f36f 1304 	bfc	r3, #4, #1
 800647c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f103 0020 	add.w	r0, r3, #32
 8006484:	f107 0210 	add.w	r2, r7, #16
 8006488:	2301      	movs	r3, #1
 800648a:	2115      	movs	r1, #21
 800648c:	f000 febc 	bl	8007208 <lsm6dso_write_reg>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8006496:	f04f 33ff 	mov.w	r3, #4294967295
 800649a:	e071      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d108      	bne.n	80064b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f000 f979 	bl	800679e <LSM6DSO_GYRO_Disable>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 80064b2:	f04f 33ff 	mov.w	r3, #4294967295
 80064b6:	e063      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f103 0020 	add.w	r0, r3, #32
 80064be:	f107 0214 	add.w	r2, r7, #20
 80064c2:	2301      	movs	r3, #1
 80064c4:	2114      	movs	r1, #20
 80064c6:	f000 fe87 	bl	80071d8 <lsm6dso_read_reg>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 80064d0:	f04f 33ff 	mov.w	r3, #4294967295
 80064d4:	e054      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 80064d6:	7d3b      	ldrb	r3, [r7, #20]
 80064d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d123      	bne.n	800652a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10b      	bne.n	8006504 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3320      	adds	r3, #32
 80064f0:	2100      	movs	r1, #0
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 fefe 	bl	80072f4 <lsm6dso_xl_data_rate_set>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006502:	e03d      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8006504:	7d3b      	ldrb	r3, [r7, #20]
 8006506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f103 0020 	add.w	r0, r3, #32
 8006512:	f107 0214 	add.w	r2, r7, #20
 8006516:	2301      	movs	r3, #1
 8006518:	2114      	movs	r1, #20
 800651a:	f000 fe75 	bl	8007208 <lsm6dso_write_reg>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006524:	f04f 33ff 	mov.w	r3, #4294967295
 8006528:	e02a      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800652a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800652e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800658c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653a:	dc00      	bgt.n	800653e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 800653c:	e006      	b.n	800654c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800653e:	4b14      	ldr	r3, [pc, #80]	; (8006590 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
 8006542:	e003      	b.n	800654c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006544:	f04f 33ff 	mov.w	r3, #4294967295
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800654a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006552:	d102      	bne.n	800655a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006554:	f04f 33ff 	mov.w	r3, #4294967295
 8006558:	e012      	b.n	8006580 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006560:	2b01      	cmp	r3, #1
 8006562:	d106      	bne.n	8006572 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006564:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fbc9 	bl	8006d00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800656e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006570:	e005      	b.n	800657e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006572:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fc5a 	bl	8006e30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800657c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006580:	4618      	mov	r0, r3
 8006582:	3730      	adds	r7, #48	; 0x30
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	41480000 	.word	0x41480000
 800658c:	43500000 	.word	0x43500000
 8006590:	43500000 	.word	0x43500000

08006594 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3320      	adds	r3, #32
 80065a6:	f107 020b 	add.w	r2, r7, #11
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fe69 	bl	8007284 <lsm6dso_xl_full_scale_get>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295
 80065bc:	e023      	b.n	8006606 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80065be:	7afb      	ldrb	r3, [r7, #11]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d81b      	bhi.n	80065fc <LSM6DSO_ACC_GetFullScale+0x68>
 80065c4:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <LSM6DSO_ACC_GetFullScale+0x38>)
 80065c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ca:	bf00      	nop
 80065cc:	080065dd 	.word	0x080065dd
 80065d0:	080065f5 	.word	0x080065f5
 80065d4:	080065e5 	.word	0x080065e5
 80065d8:	080065ed 	.word	0x080065ed
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2202      	movs	r2, #2
 80065e0:	601a      	str	r2, [r3, #0]
      break;
 80065e2:	e00f      	b.n	8006604 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2204      	movs	r2, #4
 80065e8:	601a      	str	r2, [r3, #0]
      break;
 80065ea:	e00b      	b.n	8006604 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2208      	movs	r2, #8
 80065f0:	601a      	str	r2, [r3, #0]
      break;
 80065f2:	e007      	b.n	8006604 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2210      	movs	r2, #16
 80065f8:	601a      	str	r2, [r3, #0]
      break;
 80065fa:	e003      	b.n	8006604 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006600:	60fb      	str	r3, [r7, #12]
      break;
 8006602:	bf00      	nop
  }

  return ret;
 8006604:	68fb      	ldr	r3, [r7, #12]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop

08006610 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b02      	cmp	r3, #2
 800661e:	dd0b      	ble.n	8006638 <LSM6DSO_ACC_SetFullScale+0x28>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b04      	cmp	r3, #4
 8006624:	dd06      	ble.n	8006634 <LSM6DSO_ACC_SetFullScale+0x24>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b08      	cmp	r3, #8
 800662a:	dc01      	bgt.n	8006630 <LSM6DSO_ACC_SetFullScale+0x20>
 800662c:	2303      	movs	r3, #3
 800662e:	e004      	b.n	800663a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006630:	2301      	movs	r3, #1
 8006632:	e002      	b.n	800663a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006634:	2302      	movs	r3, #2
 8006636:	e000      	b.n	800663a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006638:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 800663a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3320      	adds	r3, #32
 8006640:	7bfa      	ldrb	r2, [r7, #15]
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f000 fdf7 	bl	8007238 <lsm6dso_xl_full_scale_set>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	e000      	b.n	8006658 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3320      	adds	r3, #32
 800666e:	f107 0208 	add.w	r2, r7, #8
 8006672:	4611      	mov	r1, r2
 8006674:	4618      	mov	r0, r3
 8006676:	f001 f9d4 	bl	8007a22 <lsm6dso_acceleration_raw_get>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006680:	f04f 33ff 	mov.w	r3, #4294967295
 8006684:	e00c      	b.n	80066a0 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006686:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800668e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006696:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3320      	adds	r3, #32
 80066bc:	f107 0210 	add.w	r2, r7, #16
 80066c0:	4611      	mov	r1, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 f9ad 	bl	8007a22 <lsm6dso_acceleration_raw_get>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80066ce:	f04f 33ff 	mov.w	r3, #4294967295
 80066d2:	e03c      	b.n	800674e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80066d4:	f107 030c 	add.w	r3, r7, #12
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff fce0 	bl	80060a0 <LSM6DSO_ACC_GetSensitivity>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80066e6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ea:	e030      	b.n	800674e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80066ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80066fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006704:	ee17 2a90 	vmov	r2, s15
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800670c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006718:	edd7 7a03 	vldr	s15, [r7, #12]
 800671c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006724:	ee17 2a90 	vmov	r2, s15
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800672c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006730:	ee07 3a90 	vmov	s15, r3
 8006734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006738:	edd7 7a03 	vldr	s15, [r7, #12]
 800673c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006744:	ee17 2a90 	vmov	r2, s15
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006764:	2b01      	cmp	r3, #1
 8006766:	d101      	bne.n	800676c <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	e014      	b.n	8006796 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f103 0220 	add.w	r2, r3, #32
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006778:	4619      	mov	r1, r3
 800677a:	4610      	mov	r0, r2
 800677c:	f000 ff84 	bl	8007688 <lsm6dso_gy_data_rate_set>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006786:	f04f 33ff 	mov.w	r3, #4294967295
 800678a:	e004      	b.n	8006796 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	e01f      	b.n	80067f4 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f103 0220 	add.w	r2, r3, #32
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3334      	adds	r3, #52	; 0x34
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f001 f85b 	bl	800787c <lsm6dso_gy_data_rate_get>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80067cc:	f04f 33ff 	mov.w	r3, #4294967295
 80067d0:	e010      	b.n	80067f4 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3320      	adds	r3, #32
 80067d6:	2100      	movs	r1, #0
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 ff55 	bl	8007688 <lsm6dso_gy_data_rate_set>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80067e4:	f04f 33ff 	mov.w	r3, #4294967295
 80067e8:	e004      	b.n	80067f4 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3320      	adds	r3, #32
 800680e:	f107 020b 	add.w	r2, r7, #11
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fef5 	bl	8007604 <lsm6dso_gy_full_scale_get>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006820:	f04f 33ff 	mov.w	r3, #4294967295
 8006824:	e02d      	b.n	8006882 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	2b06      	cmp	r3, #6
 800682a:	d825      	bhi.n	8006878 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800682c:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800682e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006832:	bf00      	nop
 8006834:	08006859 	.word	0x08006859
 8006838:	08006851 	.word	0x08006851
 800683c:	08006861 	.word	0x08006861
 8006840:	08006879 	.word	0x08006879
 8006844:	08006869 	.word	0x08006869
 8006848:	08006879 	.word	0x08006879
 800684c:	08006871 	.word	0x08006871
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	4a0e      	ldr	r2, [pc, #56]	; (800688c <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8006854:	601a      	str	r2, [r3, #0]
      break;
 8006856:	e013      	b.n	8006880 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	4a0d      	ldr	r2, [pc, #52]	; (8006890 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 800685c:	601a      	str	r2, [r3, #0]
      break;
 800685e:	e00f      	b.n	8006880 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	4a0c      	ldr	r2, [pc, #48]	; (8006894 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8006864:	601a      	str	r2, [r3, #0]
      break;
 8006866:	e00b      	b.n	8006880 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4a0b      	ldr	r2, [pc, #44]	; (8006898 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 800686c:	601a      	str	r2, [r3, #0]
      break;
 800686e:	e007      	b.n	8006880 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	4a0a      	ldr	r2, [pc, #40]	; (800689c <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8006874:	601a      	str	r2, [r3, #0]
      break;
 8006876:	e003      	b.n	8006880 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006878:	f04f 33ff 	mov.w	r3, #4294967295
 800687c:	60fb      	str	r3, [r7, #12]
      break;
 800687e:	bf00      	nop
  }

  return ret;
 8006880:	68fb      	ldr	r3, [r7, #12]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	408c0000 	.word	0x408c0000
 8006890:	410c0000 	.word	0x410c0000
 8006894:	418c0000 	.word	0x418c0000
 8006898:	420c0000 	.word	0x420c0000
 800689c:	428c0000 	.word	0x428c0000

080068a0 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3320      	adds	r3, #32
 80068b2:	f107 020b 	add.w	r2, r7, #11
 80068b6:	4611      	mov	r1, r2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 ffdf 	bl	800787c <lsm6dso_gy_data_rate_get>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80068c4:	f04f 33ff 	mov.w	r3, #4294967295
 80068c8:	e04e      	b.n	8006968 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80068ca:	7afb      	ldrb	r3, [r7, #11]
 80068cc:	2b0a      	cmp	r3, #10
 80068ce:	d846      	bhi.n	800695e <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80068d0:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80068d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d6:	bf00      	nop
 80068d8:	08006905 	.word	0x08006905
 80068dc:	0800690f 	.word	0x0800690f
 80068e0:	08006917 	.word	0x08006917
 80068e4:	0800691f 	.word	0x0800691f
 80068e8:	08006927 	.word	0x08006927
 80068ec:	0800692f 	.word	0x0800692f
 80068f0:	08006937 	.word	0x08006937
 80068f4:	0800693f 	.word	0x0800693f
 80068f8:	08006947 	.word	0x08006947
 80068fc:	0800694f 	.word	0x0800694f
 8006900:	08006957 	.word	0x08006957
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	601a      	str	r2, [r3, #0]
      break;
 800690c:	e02b      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	4a17      	ldr	r2, [pc, #92]	; (8006970 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8006912:	601a      	str	r2, [r3, #0]
      break;
 8006914:	e027      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	4a16      	ldr	r2, [pc, #88]	; (8006974 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800691a:	601a      	str	r2, [r3, #0]
      break;
 800691c:	e023      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	4a15      	ldr	r2, [pc, #84]	; (8006978 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8006922:	601a      	str	r2, [r3, #0]
      break;
 8006924:	e01f      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800692a:	601a      	str	r2, [r3, #0]
      break;
 800692c:	e01b      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	4a13      	ldr	r2, [pc, #76]	; (8006980 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8006932:	601a      	str	r2, [r3, #0]
      break;
 8006934:	e017      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	4a12      	ldr	r2, [pc, #72]	; (8006984 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 800693a:	601a      	str	r2, [r3, #0]
      break;
 800693c:	e013      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	4a11      	ldr	r2, [pc, #68]	; (8006988 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8006942:	601a      	str	r2, [r3, #0]
      break;
 8006944:	e00f      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	4a10      	ldr	r2, [pc, #64]	; (800698c <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800694a:	601a      	str	r2, [r3, #0]
      break;
 800694c:	e00b      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	4a0f      	ldr	r2, [pc, #60]	; (8006990 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8006952:	601a      	str	r2, [r3, #0]
      break;
 8006954:	e007      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	4a0e      	ldr	r2, [pc, #56]	; (8006994 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800695a:	601a      	str	r2, [r3, #0]
      break;
 800695c:	e003      	b.n	8006966 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800695e:	f04f 33ff 	mov.w	r3, #4294967295
 8006962:	60fb      	str	r3, [r7, #12]
      break;
 8006964:	bf00      	nop
  }

  return ret;
 8006966:	68fb      	ldr	r3, [r7, #12]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	41480000 	.word	0x41480000
 8006974:	41d00000 	.word	0x41d00000
 8006978:	42500000 	.word	0x42500000
 800697c:	42d00000 	.word	0x42d00000
 8006980:	43500000 	.word	0x43500000
 8006984:	43d08000 	.word	0x43d08000
 8006988:	44504000 	.word	0x44504000
 800698c:	44d06000 	.word	0x44d06000
 8006990:	45505000 	.word	0x45505000
 8006994:	45d05800 	.word	0x45d05800

08006998 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80069a4:	2100      	movs	r1, #0
 80069a6:	ed97 0a00 	vldr	s0, [r7]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f806 	bl	80069bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80069b0:	4603      	mov	r3, r0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80069c8:	460b      	mov	r3, r1
 80069ca:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d028      	beq.n	8006a30 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80069de:	e05c      	b.n	8006a9a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f103 0020 	add.w	r0, r3, #32
 80069e6:	f107 0214 	add.w	r2, r7, #20
 80069ea:	2301      	movs	r3, #1
 80069ec:	2116      	movs	r1, #22
 80069ee:	f000 fbf3 	bl	80071d8 <lsm6dso_read_reg>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80069f8:	f04f 33ff 	mov.w	r3, #4294967295
 80069fc:	e06c      	b.n	8006ad8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80069fe:	7d3b      	ldrb	r3, [r7, #20]
 8006a00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d04b      	beq.n	8006aa2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8006a0a:	7d3b      	ldrb	r3, [r7, #20]
 8006a0c:	f36f 13c7 	bfc	r3, #7, #1
 8006a10:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f103 0020 	add.w	r0, r3, #32
 8006a18:	f107 0214 	add.w	r2, r7, #20
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	2116      	movs	r1, #22
 8006a20:	f000 fbf2 	bl	8007208 <lsm6dso_write_reg>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d03b      	beq.n	8006aa2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	e053      	b.n	8006ad8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f103 0020 	add.w	r0, r3, #32
 8006a36:	f107 0210 	add.w	r2, r7, #16
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	2116      	movs	r1, #22
 8006a3e:	f000 fbcb 	bl	80071d8 <lsm6dso_read_reg>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006a48:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4c:	e044      	b.n	8006ad8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8006a4e:	7c3b      	ldrb	r3, [r7, #16]
 8006a50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d112      	bne.n	8006a80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8006a5a:	7c3b      	ldrb	r3, [r7, #16]
 8006a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a60:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f103 0020 	add.w	r0, r3, #32
 8006a68:	f107 0210 	add.w	r2, r7, #16
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	2116      	movs	r1, #22
 8006a70:	f000 fbca 	bl	8007208 <lsm6dso_write_reg>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7e:	e02b      	b.n	8006ad8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006a80:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a84:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006ae0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a90:	dc00      	bgt.n	8006a94 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8006a92:	e007      	b.n	8006aa4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8006a94:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8006a96:	61bb      	str	r3, [r7, #24]
 8006a98:	e004      	b.n	8006aa4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9e:	61fb      	str	r3, [r7, #28]
      break;
 8006aa0:	e000      	b.n	8006aa4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8006aa2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d102      	bne.n	8006ab2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006aac:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab0:	e012      	b.n	8006ad8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d106      	bne.n	8006aca <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006abc:	ed97 0a06 	vldr	s0, [r7, #24]
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fa45 	bl	8006f50 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8006ac6:	61f8      	str	r0, [r7, #28]
 8006ac8:	e005      	b.n	8006ad6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006aca:	ed97 0a06 	vldr	s0, [r7, #24]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 faca 	bl	8007068 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8006ad4:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3720      	adds	r7, #32
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	43500000 	.word	0x43500000
 8006ae4:	43500000 	.word	0x43500000

08006ae8 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3320      	adds	r3, #32
 8006afa:	f107 020b 	add.w	r2, r7, #11
 8006afe:	4611      	mov	r1, r2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fd7f 	bl	8007604 <lsm6dso_gy_full_scale_get>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b10:	e030      	b.n	8006b74 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8006b12:	7afb      	ldrb	r3, [r7, #11]
 8006b14:	2b06      	cmp	r3, #6
 8006b16:	d828      	bhi.n	8006b6a <LSM6DSO_GYRO_GetFullScale+0x82>
 8006b18:	a201      	add	r2, pc, #4	; (adr r2, 8006b20 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b45 	.word	0x08006b45
 8006b24:	08006b3d 	.word	0x08006b3d
 8006b28:	08006b4d 	.word	0x08006b4d
 8006b2c:	08006b6b 	.word	0x08006b6b
 8006b30:	08006b57 	.word	0x08006b57
 8006b34:	08006b6b 	.word	0x08006b6b
 8006b38:	08006b61 	.word	0x08006b61
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	227d      	movs	r2, #125	; 0x7d
 8006b40:	601a      	str	r2, [r3, #0]
      break;
 8006b42:	e016      	b.n	8006b72 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	22fa      	movs	r2, #250	; 0xfa
 8006b48:	601a      	str	r2, [r3, #0]
      break;
 8006b4a:	e012      	b.n	8006b72 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006b52:	601a      	str	r2, [r3, #0]
      break;
 8006b54:	e00d      	b.n	8006b72 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b5c:	601a      	str	r2, [r3, #0]
      break;
 8006b5e:	e008      	b.n	8006b72 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006b66:	601a      	str	r2, [r3, #0]
      break;
 8006b68:	e003      	b.n	8006b72 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6e:	60fb      	str	r3, [r7, #12]
      break;
 8006b70:	bf00      	nop
  }

  return ret;
 8006b72:	68fb      	ldr	r3, [r7, #12]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b7d      	cmp	r3, #125	; 0x7d
 8006b8a:	dd12      	ble.n	8006bb2 <LSM6DSO_GYRO_SetFullScale+0x36>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2bfa      	cmp	r3, #250	; 0xfa
 8006b90:	dd0d      	ble.n	8006bae <LSM6DSO_GYRO_SetFullScale+0x32>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006b98:	dd07      	ble.n	8006baa <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ba0:	dc01      	bgt.n	8006ba6 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8006ba2:	2304      	movs	r3, #4
 8006ba4:	e006      	b.n	8006bb4 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006ba6:	2306      	movs	r3, #6
 8006ba8:	e004      	b.n	8006bb4 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e002      	b.n	8006bb4 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e000      	b.n	8006bb4 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006bb2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8006bb4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3320      	adds	r3, #32
 8006bba:	7bfa      	ldrb	r2, [r7, #15]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fcfa 	bl	80075b8 <lsm6dso_gy_full_scale_set>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006bca:	f04f 33ff 	mov.w	r3, #4294967295
 8006bce:	e000      	b.n	8006bd2 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3320      	adds	r3, #32
 8006be8:	f107 0208 	add.w	r2, r7, #8
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fecc 	bl	800798c <lsm6dso_angular_rate_raw_get>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfe:	e00c      	b.n	8006c1a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006c00:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006c08:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006c10:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b086      	sub	sp, #24
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3320      	adds	r3, #32
 8006c30:	f107 0210 	add.w	r2, r7, #16
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fea8 	bl	800798c <lsm6dso_angular_rate_raw_get>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d002      	beq.n	8006c48 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006c42:	f04f 33ff 	mov.w	r3, #4294967295
 8006c46:	e03c      	b.n	8006cc2 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006c48:	f107 030c 	add.w	r3, r7, #12
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff fdd4 	bl	80067fc <LSM6DSO_GYRO_GetSensitivity>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5e:	e030      	b.n	8006cc2 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006c60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006c64:	ee07 3a90 	vmov	s15, r3
 8006c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c78:	ee17 2a90 	vmov	r2, s15
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006c80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c84:	ee07 3a90 	vmov	s15, r3
 8006c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c98:	ee17 2a90 	vmov	r2, s15
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006ca0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006ca4:	ee07 3a90 	vmov	s15, r3
 8006ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cb8:	ee17 2a90 	vmov	r2, s15
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	70fb      	strb	r3, [r7, #3]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f103 0020 	add.w	r0, r3, #32
 8006ce0:	1cba      	adds	r2, r7, #2
 8006ce2:	78f9      	ldrb	r1, [r7, #3]
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f000 fa8f 	bl	8007208 <lsm6dso_write_reg>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8006cf4:	e000      	b.n	8006cf8 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006d0c:	edd7 7a00 	vldr	s15, [r7]
 8006d10:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006e10 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1c:	d801      	bhi.n	8006d22 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006d1e:	230b      	movs	r3, #11
 8006d20:	e063      	b.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d22:	edd7 7a00 	vldr	s15, [r7]
 8006d26:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d32:	d801      	bhi.n	8006d38 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e058      	b.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d38:	edd7 7a00 	vldr	s15, [r7]
 8006d3c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d48:	d801      	bhi.n	8006d4e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e04d      	b.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d4e:	edd7 7a00 	vldr	s15, [r7]
 8006d52:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006e14 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5e:	d801      	bhi.n	8006d64 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006d60:	2303      	movs	r3, #3
 8006d62:	e042      	b.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d64:	edd7 7a00 	vldr	s15, [r7]
 8006d68:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006e18 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d74:	d801      	bhi.n	8006d7a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006d76:	2304      	movs	r3, #4
 8006d78:	e037      	b.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d7a:	edd7 7a00 	vldr	s15, [r7]
 8006d7e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006e1c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8a:	d801      	bhi.n	8006d90 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006d8c:	2305      	movs	r3, #5
 8006d8e:	e02c      	b.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d90:	edd7 7a00 	vldr	s15, [r7]
 8006d94:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006e20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da0:	d801      	bhi.n	8006da6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006da2:	2306      	movs	r3, #6
 8006da4:	e021      	b.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006da6:	edd7 7a00 	vldr	s15, [r7]
 8006daa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006e24 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db6:	d801      	bhi.n	8006dbc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006db8:	2307      	movs	r3, #7
 8006dba:	e016      	b.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006dbc:	edd7 7a00 	vldr	s15, [r7]
 8006dc0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006e28 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dcc:	d801      	bhi.n	8006dd2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006dce:	2308      	movs	r3, #8
 8006dd0:	e00b      	b.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006dd2:	edd7 7a00 	vldr	s15, [r7]
 8006dd6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006e2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de2:	d801      	bhi.n	8006de8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006de4:	2309      	movs	r3, #9
 8006de6:	e000      	b.n	8006dea <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006de8:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006dea:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3320      	adds	r3, #32
 8006df0:	7bfa      	ldrb	r2, [r7, #15]
 8006df2:	4611      	mov	r1, r2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 fa7d 	bl	80072f4 <lsm6dso_xl_data_rate_set>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006e00:	f04f 33ff 	mov.w	r3, #4294967295
 8006e04:	e000      	b.n	8006e08 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	3fcccccd 	.word	0x3fcccccd
 8006e14:	42500000 	.word	0x42500000
 8006e18:	42d00000 	.word	0x42d00000
 8006e1c:	43500000 	.word	0x43500000
 8006e20:	43d08000 	.word	0x43d08000
 8006e24:	44504000 	.word	0x44504000
 8006e28:	44d06000 	.word	0x44d06000
 8006e2c:	45505000 	.word	0x45505000

08006e30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006e3c:	edd7 7a00 	vldr	s15, [r7]
 8006e40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006f30 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e4c:	d801      	bhi.n	8006e52 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006e4e:	230b      	movs	r3, #11
 8006e50:	e063      	b.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006e52:	edd7 7a00 	vldr	s15, [r7]
 8006e56:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e62:	d801      	bhi.n	8006e68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e058      	b.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006e68:	edd7 7a00 	vldr	s15, [r7]
 8006e6c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e78:	d801      	bhi.n	8006e7e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e04d      	b.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006e7e:	edd7 7a00 	vldr	s15, [r7]
 8006e82:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006f34 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8006e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e8e:	d801      	bhi.n	8006e94 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006e90:	2303      	movs	r3, #3
 8006e92:	e042      	b.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006e94:	edd7 7a00 	vldr	s15, [r7]
 8006e98:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006f38 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea4:	d801      	bhi.n	8006eaa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006ea6:	2304      	movs	r3, #4
 8006ea8:	e037      	b.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006eaa:	edd7 7a00 	vldr	s15, [r7]
 8006eae:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006f3c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eba:	d801      	bhi.n	8006ec0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006ebc:	2305      	movs	r3, #5
 8006ebe:	e02c      	b.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006ec0:	edd7 7a00 	vldr	s15, [r7]
 8006ec4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006f40 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed0:	d801      	bhi.n	8006ed6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006ed2:	2306      	movs	r3, #6
 8006ed4:	e021      	b.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006ed6:	edd7 7a00 	vldr	s15, [r7]
 8006eda:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006f44 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee6:	d801      	bhi.n	8006eec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006ee8:	2307      	movs	r3, #7
 8006eea:	e016      	b.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006eec:	edd7 7a00 	vldr	s15, [r7]
 8006ef0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8006f48 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8006ef4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efc:	d801      	bhi.n	8006f02 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006efe:	2308      	movs	r3, #8
 8006f00:	e00b      	b.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006f02:	edd7 7a00 	vldr	s15, [r7]
 8006f06:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006f4c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8006f0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f12:	d801      	bhi.n	8006f18 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006f14:	2309      	movs	r3, #9
 8006f16:	e000      	b.n	8006f1a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006f18:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	3fcccccd 	.word	0x3fcccccd
 8006f34:	42500000 	.word	0x42500000
 8006f38:	42d00000 	.word	0x42d00000
 8006f3c:	43500000 	.word	0x43500000
 8006f40:	43d08000 	.word	0x43d08000
 8006f44:	44504000 	.word	0x44504000
 8006f48:	44d06000 	.word	0x44d06000
 8006f4c:	45505000 	.word	0x45505000

08006f50 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006f5c:	edd7 7a00 	vldr	s15, [r7]
 8006f60:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8006f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f6c:	d801      	bhi.n	8006f72 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e058      	b.n	8007024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006f72:	edd7 7a00 	vldr	s15, [r7]
 8006f76:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8006f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f82:	d801      	bhi.n	8006f88 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e04d      	b.n	8007024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006f88:	edd7 7a00 	vldr	s15, [r7]
 8006f8c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800704c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f98:	d801      	bhi.n	8006f9e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e042      	b.n	8007024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006f9e:	edd7 7a00 	vldr	s15, [r7]
 8006fa2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007050 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006fa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fae:	d801      	bhi.n	8006fb4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006fb0:	2304      	movs	r3, #4
 8006fb2:	e037      	b.n	8007024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006fb4:	edd7 7a00 	vldr	s15, [r7]
 8006fb8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007054 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc4:	d801      	bhi.n	8006fca <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006fc6:	2305      	movs	r3, #5
 8006fc8:	e02c      	b.n	8007024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006fca:	edd7 7a00 	vldr	s15, [r7]
 8006fce:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007058 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006fd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fda:	d801      	bhi.n	8006fe0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006fdc:	2306      	movs	r3, #6
 8006fde:	e021      	b.n	8007024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006fe0:	edd7 7a00 	vldr	s15, [r7]
 8006fe4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800705c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff0:	d801      	bhi.n	8006ff6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8006ff2:	2307      	movs	r3, #7
 8006ff4:	e016      	b.n	8007024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006ff6:	edd7 7a00 	vldr	s15, [r7]
 8006ffa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007060 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007006:	d801      	bhi.n	800700c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8007008:	2308      	movs	r3, #8
 800700a:	e00b      	b.n	8007024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800700c:	edd7 7a00 	vldr	s15, [r7]
 8007010:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007064 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701c:	d801      	bhi.n	8007022 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800701e:	2309      	movs	r3, #9
 8007020:	e000      	b.n	8007024 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007022:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007024:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3320      	adds	r3, #32
 800702a:	7bfa      	ldrb	r2, [r7, #15]
 800702c:	4611      	mov	r1, r2
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fb2a 	bl	8007688 <lsm6dso_gy_data_rate_set>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800703a:	f04f 33ff 	mov.w	r3, #4294967295
 800703e:	e000      	b.n	8007042 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	42500000 	.word	0x42500000
 8007050:	42d00000 	.word	0x42d00000
 8007054:	43500000 	.word	0x43500000
 8007058:	43d08000 	.word	0x43d08000
 800705c:	44504000 	.word	0x44504000
 8007060:	44d06000 	.word	0x44d06000
 8007064:	45505000 	.word	0x45505000

08007068 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007074:	edd7 7a00 	vldr	s15, [r7]
 8007078:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800707c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007084:	d801      	bhi.n	800708a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007086:	2301      	movs	r3, #1
 8007088:	e058      	b.n	800713c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800708a:	edd7 7a00 	vldr	s15, [r7]
 800708e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007092:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709a:	d801      	bhi.n	80070a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800709c:	2302      	movs	r3, #2
 800709e:	e04d      	b.n	800713c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80070a0:	edd7 7a00 	vldr	s15, [r7]
 80070a4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8007150 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80070a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b0:	d801      	bhi.n	80070b6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80070b2:	2303      	movs	r3, #3
 80070b4:	e042      	b.n	800713c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80070b6:	edd7 7a00 	vldr	s15, [r7]
 80070ba:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007154 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80070be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c6:	d801      	bhi.n	80070cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80070c8:	2304      	movs	r3, #4
 80070ca:	e037      	b.n	800713c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80070cc:	edd7 7a00 	vldr	s15, [r7]
 80070d0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007158 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80070d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070dc:	d801      	bhi.n	80070e2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80070de:	2305      	movs	r3, #5
 80070e0:	e02c      	b.n	800713c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80070e2:	edd7 7a00 	vldr	s15, [r7]
 80070e6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800715c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80070ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f2:	d801      	bhi.n	80070f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80070f4:	2306      	movs	r3, #6
 80070f6:	e021      	b.n	800713c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80070f8:	edd7 7a00 	vldr	s15, [r7]
 80070fc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007160 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007108:	d801      	bhi.n	800710e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800710a:	2307      	movs	r3, #7
 800710c:	e016      	b.n	800713c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800710e:	edd7 7a00 	vldr	s15, [r7]
 8007112:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007164 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800711a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711e:	d801      	bhi.n	8007124 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007120:	2308      	movs	r3, #8
 8007122:	e00b      	b.n	800713c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007124:	edd7 7a00 	vldr	s15, [r7]
 8007128:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8007168 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800712c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007134:	d801      	bhi.n	800713a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007136:	2309      	movs	r3, #9
 8007138:	e000      	b.n	800713c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800713a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	42500000 	.word	0x42500000
 8007154:	42d00000 	.word	0x42d00000
 8007158:	43500000 	.word	0x43500000
 800715c:	43d08000 	.word	0x43d08000
 8007160:	44504000 	.word	0x44504000
 8007164:	44d06000 	.word	0x44d06000
 8007168:	45505000 	.word	0x45505000

0800716c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800716c:	b590      	push	{r4, r7, lr}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	607a      	str	r2, [r7, #4]
 8007176:	461a      	mov	r2, r3
 8007178:	460b      	mov	r3, r1
 800717a:	72fb      	strb	r3, [r7, #11]
 800717c:	4613      	mov	r3, r2
 800717e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	695c      	ldr	r4, [r3, #20]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	7b1b      	ldrb	r3, [r3, #12]
 800718c:	b298      	uxth	r0, r3
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	b299      	uxth	r1, r3
 8007192:	893b      	ldrh	r3, [r7, #8]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	47a0      	blx	r4
 8007198:	4603      	mov	r3, r0
}
 800719a:	4618      	mov	r0, r3
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd90      	pop	{r4, r7, pc}

080071a2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80071a2:	b590      	push	{r4, r7, lr}
 80071a4:	b087      	sub	sp, #28
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	461a      	mov	r2, r3
 80071ae:	460b      	mov	r3, r1
 80071b0:	72fb      	strb	r3, [r7, #11]
 80071b2:	4613      	mov	r3, r2
 80071b4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	691c      	ldr	r4, [r3, #16]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	7b1b      	ldrb	r3, [r3, #12]
 80071c2:	b298      	uxth	r0, r3
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	b299      	uxth	r1, r3
 80071c8:	893b      	ldrh	r3, [r7, #8]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	47a0      	blx	r4
 80071ce:	4603      	mov	r3, r0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd90      	pop	{r4, r7, pc}

080071d8 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	461a      	mov	r2, r3
 80071e4:	460b      	mov	r3, r1
 80071e6:	72fb      	strb	r3, [r7, #11]
 80071e8:	4613      	mov	r3, r2
 80071ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685c      	ldr	r4, [r3, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	68d8      	ldr	r0, [r3, #12]
 80071f4:	893b      	ldrh	r3, [r7, #8]
 80071f6:	7af9      	ldrb	r1, [r7, #11]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	47a0      	blx	r4
 80071fc:	6178      	str	r0, [r7, #20]

  return ret;
 80071fe:	697b      	ldr	r3, [r7, #20]
}
 8007200:	4618      	mov	r0, r3
 8007202:	371c      	adds	r7, #28
 8007204:	46bd      	mov	sp, r7
 8007206:	bd90      	pop	{r4, r7, pc}

08007208 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	461a      	mov	r2, r3
 8007214:	460b      	mov	r3, r1
 8007216:	72fb      	strb	r3, [r7, #11]
 8007218:	4613      	mov	r3, r2
 800721a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681c      	ldr	r4, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	68d8      	ldr	r0, [r3, #12]
 8007224:	893b      	ldrh	r3, [r7, #8]
 8007226:	7af9      	ldrb	r1, [r7, #11]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	47a0      	blx	r4
 800722c:	6178      	str	r0, [r7, #20]

  return ret;
 800722e:	697b      	ldr	r3, [r7, #20]
}
 8007230:	4618      	mov	r0, r3
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	bd90      	pop	{r4, r7, pc}

08007238 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007244:	f107 0208 	add.w	r2, r7, #8
 8007248:	2301      	movs	r3, #1
 800724a:	2110      	movs	r1, #16
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ffc3 	bl	80071d8 <lsm6dso_read_reg>
 8007252:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10f      	bne.n	800727a <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	f003 0303 	and.w	r3, r3, #3
 8007260:	b2da      	uxtb	r2, r3
 8007262:	7a3b      	ldrb	r3, [r7, #8]
 8007264:	f362 0383 	bfi	r3, r2, #2, #2
 8007268:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800726a:	f107 0208 	add.w	r2, r7, #8
 800726e:	2301      	movs	r3, #1
 8007270:	2110      	movs	r1, #16
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff ffc8 	bl	8007208 <lsm6dso_write_reg>
 8007278:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800727a:	68fb      	ldr	r3, [r7, #12]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800728e:	f107 0208 	add.w	r2, r7, #8
 8007292:	2301      	movs	r3, #1
 8007294:	2110      	movs	r1, #16
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff ff9e 	bl	80071d8 <lsm6dso_read_reg>
 800729c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800729e:	7a3b      	ldrb	r3, [r7, #8]
 80072a0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d81a      	bhi.n	80072e0 <lsm6dso_xl_full_scale_get+0x5c>
 80072aa:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <lsm6dso_xl_full_scale_get+0x2c>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	080072c1 	.word	0x080072c1
 80072b4:	080072c9 	.word	0x080072c9
 80072b8:	080072d1 	.word	0x080072d1
 80072bc:	080072d9 	.word	0x080072d9
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2200      	movs	r2, #0
 80072c4:	701a      	strb	r2, [r3, #0]
      break;
 80072c6:	e00f      	b.n	80072e8 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2201      	movs	r2, #1
 80072cc:	701a      	strb	r2, [r3, #0]
      break;
 80072ce:	e00b      	b.n	80072e8 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	2202      	movs	r2, #2
 80072d4:	701a      	strb	r2, [r3, #0]
      break;
 80072d6:	e007      	b.n	80072e8 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2203      	movs	r2, #3
 80072dc:	701a      	strb	r2, [r3, #0]
      break;
 80072de:	e003      	b.n	80072e8 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]
      break;
 80072e6:	bf00      	nop
  }

  return ret;
 80072e8:	68fb      	ldr	r3, [r7, #12]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop

080072f4 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007304:	f107 030c 	add.w	r3, r7, #12
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fc96 	bl	8007c3c <lsm6dso_fsm_enable_get>
 8007310:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <lsm6dso_xl_data_rate_set+0x28>
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	e0e0      	b.n	80074de <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800731c:	7b3b      	ldrb	r3, [r7, #12]
 800731e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007322:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007324:	7b3b      	ldrb	r3, [r7, #12]
 8007326:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800732a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800732c:	4313      	orrs	r3, r2
 800732e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007330:	7b3b      	ldrb	r3, [r7, #12]
 8007332:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007336:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007338:	4313      	orrs	r3, r2
 800733a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800733c:	7b3b      	ldrb	r3, [r7, #12]
 800733e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007342:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007344:	4313      	orrs	r3, r2
 8007346:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007348:	7b3b      	ldrb	r3, [r7, #12]
 800734a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800734e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007350:	4313      	orrs	r3, r2
 8007352:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007354:	7b3b      	ldrb	r3, [r7, #12]
 8007356:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800735a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800735c:	4313      	orrs	r3, r2
 800735e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007360:	7b3b      	ldrb	r3, [r7, #12]
 8007362:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007366:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007368:	4313      	orrs	r3, r2
 800736a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800736c:	7b3b      	ldrb	r3, [r7, #12]
 800736e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007372:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007374:	4313      	orrs	r3, r2
 8007376:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007378:	7b7b      	ldrb	r3, [r7, #13]
 800737a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800737e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007380:	4313      	orrs	r3, r2
 8007382:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007384:	7b7b      	ldrb	r3, [r7, #13]
 8007386:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800738a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800738c:	4313      	orrs	r3, r2
 800738e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007390:	7b7b      	ldrb	r3, [r7, #13]
 8007392:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007396:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007398:	4313      	orrs	r3, r2
 800739a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800739c:	7b7b      	ldrb	r3, [r7, #13]
 800739e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80073a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80073a8:	7b7b      	ldrb	r3, [r7, #13]
 80073aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80073ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80073b0:	4313      	orrs	r3, r2
 80073b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80073b4:	7b7b      	ldrb	r3, [r7, #13]
 80073b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80073ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80073bc:	4313      	orrs	r3, r2
 80073be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80073c0:	7b7b      	ldrb	r3, [r7, #13]
 80073c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80073c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80073c8:	4313      	orrs	r3, r2
 80073ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80073cc:	7b7b      	ldrb	r3, [r7, #13]
 80073ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80073d2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80073d4:	4313      	orrs	r3, r2
 80073d6:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d164      	bne.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80073dc:	f107 030b 	add.w	r3, r7, #11
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fc4c 	bl	8007c80 <lsm6dso_fsm_data_rate_get>
 80073e8:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <lsm6dso_xl_data_rate_set+0x100>
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	e074      	b.n	80074de <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d852      	bhi.n	80074a0 <lsm6dso_xl_data_rate_set+0x1ac>
 80073fa:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <lsm6dso_xl_data_rate_set+0x10c>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	08007411 	.word	0x08007411
 8007404:	08007423 	.word	0x08007423
 8007408:	08007441 	.word	0x08007441
 800740c:	0800746b 	.word	0x0800746b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d102      	bne.n	800741c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8007416:	2301      	movs	r3, #1
 8007418:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800741a:	e044      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	75fb      	strb	r3, [r7, #23]
        break;
 8007420:	e041      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007422:	78fb      	ldrb	r3, [r7, #3]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d102      	bne.n	800742e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007428:	2302      	movs	r3, #2
 800742a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800742c:	e03b      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d102      	bne.n	800743a <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007434:	2302      	movs	r3, #2
 8007436:	75fb      	strb	r3, [r7, #23]
        break;
 8007438:	e035      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	75fb      	strb	r3, [r7, #23]
        break;
 800743e:	e032      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007446:	2303      	movs	r3, #3
 8007448:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800744a:	e02c      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d102      	bne.n	8007458 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007452:	2303      	movs	r3, #3
 8007454:	75fb      	strb	r3, [r7, #23]
        break;
 8007456:	e026      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	2b02      	cmp	r3, #2
 800745c:	d102      	bne.n	8007464 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800745e:	2303      	movs	r3, #3
 8007460:	75fb      	strb	r3, [r7, #23]
        break;
 8007462:	e020      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	75fb      	strb	r3, [r7, #23]
        break;
 8007468:	e01d      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007470:	2304      	movs	r3, #4
 8007472:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007474:	e017      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d102      	bne.n	8007482 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800747c:	2304      	movs	r3, #4
 800747e:	75fb      	strb	r3, [r7, #23]
        break;
 8007480:	e011      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d102      	bne.n	800748e <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007488:	2304      	movs	r3, #4
 800748a:	75fb      	strb	r3, [r7, #23]
        break;
 800748c:	e00b      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	2b03      	cmp	r3, #3
 8007492:	d102      	bne.n	800749a <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007494:	2304      	movs	r3, #4
 8007496:	75fb      	strb	r3, [r7, #23]
        break;
 8007498:	e005      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	75fb      	strb	r3, [r7, #23]
        break;
 800749e:	e002      	b.n	80074a6 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	75fb      	strb	r3, [r7, #23]
        break;
 80074a4:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80074a6:	f107 0208 	add.w	r2, r7, #8
 80074aa:	2301      	movs	r3, #1
 80074ac:	2110      	movs	r1, #16
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7ff fe92 	bl	80071d8 <lsm6dso_read_reg>
 80074b4:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
 80074b8:	f003 030f 	and.w	r3, r3, #15
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	7a3b      	ldrb	r3, [r7, #8]
 80074c0:	f362 1307 	bfi	r3, r2, #4, #4
 80074c4:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80074c6:	f107 0208 	add.w	r2, r7, #8
 80074ca:	2301      	movs	r3, #1
 80074cc:	2110      	movs	r1, #16
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff fe9a 	bl	8007208 <lsm6dso_write_reg>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	4413      	add	r3, r2
 80074da:	613b      	str	r3, [r7, #16]

  return ret;
 80074dc:	693b      	ldr	r3, [r7, #16]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop

080074e8 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80074f2:	f107 0208 	add.w	r2, r7, #8
 80074f6:	2301      	movs	r3, #1
 80074f8:	2110      	movs	r1, #16
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff fe6c 	bl	80071d8 <lsm6dso_read_reg>
 8007500:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8007502:	7a3b      	ldrb	r3, [r7, #8]
 8007504:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b0b      	cmp	r3, #11
 800750c:	d84a      	bhi.n	80075a4 <lsm6dso_xl_data_rate_get+0xbc>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <lsm6dso_xl_data_rate_get+0x2c>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	08007545 	.word	0x08007545
 8007518:	0800754d 	.word	0x0800754d
 800751c:	08007555 	.word	0x08007555
 8007520:	0800755d 	.word	0x0800755d
 8007524:	08007565 	.word	0x08007565
 8007528:	0800756d 	.word	0x0800756d
 800752c:	08007575 	.word	0x08007575
 8007530:	0800757d 	.word	0x0800757d
 8007534:	08007585 	.word	0x08007585
 8007538:	0800758d 	.word	0x0800758d
 800753c:	08007595 	.word	0x08007595
 8007540:	0800759d 	.word	0x0800759d
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2200      	movs	r2, #0
 8007548:	701a      	strb	r2, [r3, #0]
      break;
 800754a:	e02f      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
      break;
 8007552:	e02b      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2202      	movs	r2, #2
 8007558:	701a      	strb	r2, [r3, #0]
      break;
 800755a:	e027      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2203      	movs	r2, #3
 8007560:	701a      	strb	r2, [r3, #0]
      break;
 8007562:	e023      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2204      	movs	r2, #4
 8007568:	701a      	strb	r2, [r3, #0]
      break;
 800756a:	e01f      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2205      	movs	r2, #5
 8007570:	701a      	strb	r2, [r3, #0]
      break;
 8007572:	e01b      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2206      	movs	r2, #6
 8007578:	701a      	strb	r2, [r3, #0]
      break;
 800757a:	e017      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2207      	movs	r2, #7
 8007580:	701a      	strb	r2, [r3, #0]
      break;
 8007582:	e013      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2208      	movs	r2, #8
 8007588:	701a      	strb	r2, [r3, #0]
      break;
 800758a:	e00f      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2209      	movs	r2, #9
 8007590:	701a      	strb	r2, [r3, #0]
      break;
 8007592:	e00b      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	220a      	movs	r2, #10
 8007598:	701a      	strb	r2, [r3, #0]
      break;
 800759a:	e007      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	220b      	movs	r2, #11
 80075a0:	701a      	strb	r2, [r3, #0]
      break;
 80075a2:	e003      	b.n	80075ac <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
      break;
 80075aa:	bf00      	nop
  }

  return ret;
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop

080075b8 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80075c4:	f107 0208 	add.w	r2, r7, #8
 80075c8:	2301      	movs	r3, #1
 80075ca:	2111      	movs	r1, #17
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff fe03 	bl	80071d8 <lsm6dso_read_reg>
 80075d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10f      	bne.n	80075fa <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	7a3b      	ldrb	r3, [r7, #8]
 80075e4:	f362 0343 	bfi	r3, r2, #1, #3
 80075e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80075ea:	f107 0208 	add.w	r2, r7, #8
 80075ee:	2301      	movs	r3, #1
 80075f0:	2111      	movs	r1, #17
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff fe08 	bl	8007208 <lsm6dso_write_reg>
 80075f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80075fa:	68fb      	ldr	r3, [r7, #12]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800760e:	f107 0208 	add.w	r2, r7, #8
 8007612:	2301      	movs	r3, #1
 8007614:	2111      	movs	r1, #17
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff fdde 	bl	80071d8 <lsm6dso_read_reg>
 800761c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800761e:	7a3b      	ldrb	r3, [r7, #8]
 8007620:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b06      	cmp	r3, #6
 8007628:	d824      	bhi.n	8007674 <lsm6dso_gy_full_scale_get+0x70>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <lsm6dso_gy_full_scale_get+0x2c>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	0800764d 	.word	0x0800764d
 8007634:	08007655 	.word	0x08007655
 8007638:	0800765d 	.word	0x0800765d
 800763c:	08007675 	.word	0x08007675
 8007640:	08007665 	.word	0x08007665
 8007644:	08007675 	.word	0x08007675
 8007648:	0800766d 	.word	0x0800766d
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2200      	movs	r2, #0
 8007650:	701a      	strb	r2, [r3, #0]
      break;
 8007652:	e013      	b.n	800767c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2201      	movs	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]
      break;
 800765a:	e00f      	b.n	800767c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2202      	movs	r2, #2
 8007660:	701a      	strb	r2, [r3, #0]
      break;
 8007662:	e00b      	b.n	800767c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2204      	movs	r2, #4
 8007668:	701a      	strb	r2, [r3, #0]
      break;
 800766a:	e007      	b.n	800767c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2206      	movs	r2, #6
 8007670:	701a      	strb	r2, [r3, #0]
      break;
 8007672:	e003      	b.n	800767c <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
      break;
 800767a:	bf00      	nop
  }

  return ret;
 800767c:	68fb      	ldr	r3, [r7, #12]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop

08007688 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007698:	f107 030c 	add.w	r3, r7, #12
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 facc 	bl	8007c3c <lsm6dso_fsm_enable_get>
 80076a4:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <lsm6dso_gy_data_rate_set+0x28>
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	e0e0      	b.n	8007872 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80076b0:	7b3b      	ldrb	r3, [r7, #12]
 80076b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80076b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80076b8:	7b3b      	ldrb	r3, [r7, #12]
 80076ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80076be:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80076c0:	4313      	orrs	r3, r2
 80076c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80076c4:	7b3b      	ldrb	r3, [r7, #12]
 80076c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80076ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80076cc:	4313      	orrs	r3, r2
 80076ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80076d0:	7b3b      	ldrb	r3, [r7, #12]
 80076d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80076d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80076d8:	4313      	orrs	r3, r2
 80076da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80076dc:	7b3b      	ldrb	r3, [r7, #12]
 80076de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80076e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80076e4:	4313      	orrs	r3, r2
 80076e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80076e8:	7b3b      	ldrb	r3, [r7, #12]
 80076ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80076ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80076f0:	4313      	orrs	r3, r2
 80076f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80076f4:	7b3b      	ldrb	r3, [r7, #12]
 80076f6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80076fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80076fc:	4313      	orrs	r3, r2
 80076fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007700:	7b3b      	ldrb	r3, [r7, #12]
 8007702:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007706:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007708:	4313      	orrs	r3, r2
 800770a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800770c:	7b7b      	ldrb	r3, [r7, #13]
 800770e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007712:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007714:	4313      	orrs	r3, r2
 8007716:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007718:	7b7b      	ldrb	r3, [r7, #13]
 800771a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800771e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007720:	4313      	orrs	r3, r2
 8007722:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007724:	7b7b      	ldrb	r3, [r7, #13]
 8007726:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800772a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800772c:	4313      	orrs	r3, r2
 800772e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007730:	7b7b      	ldrb	r3, [r7, #13]
 8007732:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007736:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007738:	4313      	orrs	r3, r2
 800773a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800773c:	7b7b      	ldrb	r3, [r7, #13]
 800773e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007742:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007744:	4313      	orrs	r3, r2
 8007746:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007748:	7b7b      	ldrb	r3, [r7, #13]
 800774a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800774e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007750:	4313      	orrs	r3, r2
 8007752:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007754:	7b7b      	ldrb	r3, [r7, #13]
 8007756:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800775a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800775c:	4313      	orrs	r3, r2
 800775e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007760:	7b7b      	ldrb	r3, [r7, #13]
 8007762:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007766:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007768:	4313      	orrs	r3, r2
 800776a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800776c:	2b01      	cmp	r3, #1
 800776e:	d164      	bne.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007770:	f107 030b 	add.w	r3, r7, #11
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa82 	bl	8007c80 <lsm6dso_fsm_data_rate_get>
 800777c:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <lsm6dso_gy_data_rate_set+0x100>
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	e074      	b.n	8007872 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007788:	7afb      	ldrb	r3, [r7, #11]
 800778a:	2b03      	cmp	r3, #3
 800778c:	d852      	bhi.n	8007834 <lsm6dso_gy_data_rate_set+0x1ac>
 800778e:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <lsm6dso_gy_data_rate_set+0x10c>)
 8007790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007794:	080077a5 	.word	0x080077a5
 8007798:	080077b7 	.word	0x080077b7
 800779c:	080077d5 	.word	0x080077d5
 80077a0:	080077ff 	.word	0x080077ff
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80077aa:	2301      	movs	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80077ae:	e044      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	75fb      	strb	r3, [r7, #23]
        break;
 80077b4:	e041      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80077bc:	2302      	movs	r3, #2
 80077be:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80077c0:	e03b      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d102      	bne.n	80077ce <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80077c8:	2302      	movs	r3, #2
 80077ca:	75fb      	strb	r3, [r7, #23]
        break;
 80077cc:	e035      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	75fb      	strb	r3, [r7, #23]
        break;
 80077d2:	e032      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80077da:	2303      	movs	r3, #3
 80077dc:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80077de:	e02c      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d102      	bne.n	80077ec <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80077e6:	2303      	movs	r3, #3
 80077e8:	75fb      	strb	r3, [r7, #23]
        break;
 80077ea:	e026      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d102      	bne.n	80077f8 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80077f2:	2303      	movs	r3, #3
 80077f4:	75fb      	strb	r3, [r7, #23]
        break;
 80077f6:	e020      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	75fb      	strb	r3, [r7, #23]
        break;
 80077fc:	e01d      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d102      	bne.n	800780a <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007804:	2304      	movs	r3, #4
 8007806:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007808:	e017      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d102      	bne.n	8007816 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007810:	2304      	movs	r3, #4
 8007812:	75fb      	strb	r3, [r7, #23]
        break;
 8007814:	e011      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d102      	bne.n	8007822 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800781c:	2304      	movs	r3, #4
 800781e:	75fb      	strb	r3, [r7, #23]
        break;
 8007820:	e00b      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d102      	bne.n	800782e <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007828:	2304      	movs	r3, #4
 800782a:	75fb      	strb	r3, [r7, #23]
        break;
 800782c:	e005      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	75fb      	strb	r3, [r7, #23]
        break;
 8007832:	e002      	b.n	800783a <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	75fb      	strb	r3, [r7, #23]
        break;
 8007838:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800783a:	f107 0208 	add.w	r2, r7, #8
 800783e:	2301      	movs	r3, #1
 8007840:	2111      	movs	r1, #17
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fcc8 	bl	80071d8 <lsm6dso_read_reg>
 8007848:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	b2da      	uxtb	r2, r3
 8007852:	7a3b      	ldrb	r3, [r7, #8]
 8007854:	f362 1307 	bfi	r3, r2, #4, #4
 8007858:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800785a:	f107 0208 	add.w	r2, r7, #8
 800785e:	2301      	movs	r3, #1
 8007860:	2111      	movs	r1, #17
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff fcd0 	bl	8007208 <lsm6dso_write_reg>
 8007868:	4602      	mov	r2, r0
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	4413      	add	r3, r2
 800786e:	613b      	str	r3, [r7, #16]

  return ret;
 8007870:	693b      	ldr	r3, [r7, #16]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop

0800787c <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007886:	f107 0208 	add.w	r2, r7, #8
 800788a:	2301      	movs	r3, #1
 800788c:	2111      	movs	r1, #17
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff fca2 	bl	80071d8 <lsm6dso_read_reg>
 8007894:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8007896:	7a3b      	ldrb	r3, [r7, #8]
 8007898:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b0a      	cmp	r3, #10
 80078a0:	d844      	bhi.n	800792c <lsm6dso_gy_data_rate_get+0xb0>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <lsm6dso_gy_data_rate_get+0x2c>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078d5 	.word	0x080078d5
 80078ac:	080078dd 	.word	0x080078dd
 80078b0:	080078e5 	.word	0x080078e5
 80078b4:	080078ed 	.word	0x080078ed
 80078b8:	080078f5 	.word	0x080078f5
 80078bc:	080078fd 	.word	0x080078fd
 80078c0:	08007905 	.word	0x08007905
 80078c4:	0800790d 	.word	0x0800790d
 80078c8:	08007915 	.word	0x08007915
 80078cc:	0800791d 	.word	0x0800791d
 80078d0:	08007925 	.word	0x08007925
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2200      	movs	r2, #0
 80078d8:	701a      	strb	r2, [r3, #0]
      break;
 80078da:	e02b      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2201      	movs	r2, #1
 80078e0:	701a      	strb	r2, [r3, #0]
      break;
 80078e2:	e027      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2202      	movs	r2, #2
 80078e8:	701a      	strb	r2, [r3, #0]
      break;
 80078ea:	e023      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2203      	movs	r2, #3
 80078f0:	701a      	strb	r2, [r3, #0]
      break;
 80078f2:	e01f      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2204      	movs	r2, #4
 80078f8:	701a      	strb	r2, [r3, #0]
      break;
 80078fa:	e01b      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2205      	movs	r2, #5
 8007900:	701a      	strb	r2, [r3, #0]
      break;
 8007902:	e017      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2206      	movs	r2, #6
 8007908:	701a      	strb	r2, [r3, #0]
      break;
 800790a:	e013      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2207      	movs	r2, #7
 8007910:	701a      	strb	r2, [r3, #0]
      break;
 8007912:	e00f      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2208      	movs	r2, #8
 8007918:	701a      	strb	r2, [r3, #0]
      break;
 800791a:	e00b      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2209      	movs	r2, #9
 8007920:	701a      	strb	r2, [r3, #0]
      break;
 8007922:	e007      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	220a      	movs	r2, #10
 8007928:	701a      	strb	r2, [r3, #0]
      break;
 800792a:	e003      	b.n	8007934 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
      break;
 8007932:	bf00      	nop
  }

  return ret;
 8007934:	68fb      	ldr	r3, [r7, #12]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop

08007940 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800794c:	f107 0208 	add.w	r2, r7, #8
 8007950:	2301      	movs	r3, #1
 8007952:	2112      	movs	r1, #18
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff fc3f 	bl	80071d8 <lsm6dso_read_reg>
 800795a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10f      	bne.n	8007982 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007962:	78fb      	ldrb	r3, [r7, #3]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	b2da      	uxtb	r2, r3
 800796a:	7a3b      	ldrb	r3, [r7, #8]
 800796c:	f362 1386 	bfi	r3, r2, #6, #1
 8007970:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007972:	f107 0208 	add.w	r2, r7, #8
 8007976:	2301      	movs	r3, #1
 8007978:	2112      	movs	r1, #18
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff fc44 	bl	8007208 <lsm6dso_write_reg>
 8007980:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007982:	68fb      	ldr	r3, [r7, #12]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8007996:	f107 020c 	add.w	r2, r7, #12
 800799a:	2306      	movs	r3, #6
 800799c:	2122      	movs	r1, #34	; 0x22
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff fc1a 	bl	80071d8 <lsm6dso_read_reg>
 80079a4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80079a6:	7b7b      	ldrb	r3, [r7, #13]
 80079a8:	b21a      	sxth	r2, r3
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	7b3b      	ldrb	r3, [r7, #12]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	4413      	add	r3, r2
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	b21a      	sxth	r2, r3
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80079c8:	7bfa      	ldrb	r2, [r7, #15]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	3302      	adds	r3, #2
 80079ce:	b212      	sxth	r2, r2
 80079d0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	3302      	adds	r3, #2
 80079d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	b29a      	uxth	r2, r3
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	4413      	add	r3, r2
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	3302      	adds	r3, #2
 80079ec:	b212      	sxth	r2, r2
 80079ee:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80079f0:	7c7a      	ldrb	r2, [r7, #17]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	3304      	adds	r3, #4
 80079f6:	b212      	sxth	r2, r2
 80079f8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	3304      	adds	r3, #4
 80079fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	021b      	lsls	r3, r3, #8
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	7c3b      	ldrb	r3, [r7, #16]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	4413      	add	r3, r2
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	3304      	adds	r3, #4
 8007a14:	b212      	sxth	r2, r2
 8007a16:	801a      	strh	r2, [r3, #0]

  return ret;
 8007a18:	697b      	ldr	r3, [r7, #20]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b086      	sub	sp, #24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8007a2c:	f107 020c 	add.w	r2, r7, #12
 8007a30:	2306      	movs	r3, #6
 8007a32:	2128      	movs	r1, #40	; 0x28
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fbcf 	bl	80071d8 <lsm6dso_read_reg>
 8007a3a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007a3c:	7b7b      	ldrb	r3, [r7, #13]
 8007a3e:	b21a      	sxth	r2, r3
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	7b3b      	ldrb	r3, [r7, #12]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	4413      	add	r3, r2
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	b21a      	sxth	r2, r3
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007a5e:	7bfa      	ldrb	r2, [r7, #15]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	3302      	adds	r3, #2
 8007a64:	b212      	sxth	r2, r2
 8007a66:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	4413      	add	r3, r2
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	3302      	adds	r3, #2
 8007a82:	b212      	sxth	r2, r2
 8007a84:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007a86:	7c7a      	ldrb	r2, [r7, #17]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	b212      	sxth	r2, r2
 8007a8e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	3304      	adds	r3, #4
 8007a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	7c3b      	ldrb	r3, [r7, #16]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	4413      	add	r3, r2
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	b212      	sxth	r2, r2
 8007aac:	801a      	strh	r2, [r3, #0]

  return ret;
 8007aae:	697b      	ldr	r3, [r7, #20]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	7a3b      	ldrb	r3, [r7, #8]
 8007ad2:	f362 1387 	bfi	r3, r2, #6, #2
 8007ad6:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007ad8:	f107 0208 	add.w	r2, r7, #8
 8007adc:	2301      	movs	r3, #1
 8007ade:	2101      	movs	r1, #1
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fb91 	bl	8007208 <lsm6dso_write_reg>
 8007ae6:	60f8      	str	r0, [r7, #12]

  return ret;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8007afc:	2301      	movs	r3, #1
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	210f      	movs	r1, #15
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7ff fb68 	bl	80071d8 <lsm6dso_read_reg>
 8007b08:	60f8      	str	r0, [r7, #12]

  return ret;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007b20:	f107 0208 	add.w	r2, r7, #8
 8007b24:	2301      	movs	r3, #1
 8007b26:	2112      	movs	r1, #18
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7ff fb55 	bl	80071d8 <lsm6dso_read_reg>
 8007b2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10f      	bne.n	8007b56 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8007b36:	78fb      	ldrb	r3, [r7, #3]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	7a3b      	ldrb	r3, [r7, #8]
 8007b40:	f362 0382 	bfi	r3, r2, #2, #1
 8007b44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007b46:	f107 0208 	add.w	r2, r7, #8
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	2112      	movs	r1, #18
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff fb5a 	bl	8007208 <lsm6dso_write_reg>
 8007b54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b56:	68fb      	ldr	r3, [r7, #12]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007b6c:	f107 020c 	add.w	r2, r7, #12
 8007b70:	2301      	movs	r3, #1
 8007b72:	2118      	movs	r1, #24
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff fb2f 	bl	80071d8 <lsm6dso_read_reg>
 8007b7a:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	09db      	lsrs	r3, r3, #7
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	7b3b      	ldrb	r3, [r7, #12]
 8007b8a:	f362 0341 	bfi	r3, r2, #1, #1
 8007b8e:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007b90:	f107 020c 	add.w	r2, r7, #12
 8007b94:	2301      	movs	r3, #1
 8007b96:	2118      	movs	r1, #24
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7ff fb35 	bl	8007208 <lsm6dso_write_reg>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d001      	beq.n	8007bb0 <lsm6dso_i3c_disable_set+0x50>
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	e01b      	b.n	8007be8 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007bb0:	f107 0210 	add.w	r2, r7, #16
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	2162      	movs	r1, #98	; 0x62
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff fb0d 	bl	80071d8 <lsm6dso_read_reg>
 8007bbe:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	7c3b      	ldrb	r3, [r7, #16]
 8007bca:	f362 03c4 	bfi	r3, r2, #3, #2
 8007bce:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007bd0:	f107 0210 	add.w	r2, r7, #16
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	2162      	movs	r1, #98	; 0x62
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff fb15 	bl	8007208 <lsm6dso_write_reg>
 8007bde:	4602      	mov	r2, r0
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	4413      	add	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]

  return ret;
 8007be6:	697b      	ldr	r3, [r7, #20]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007bfc:	f107 0208 	add.w	r2, r7, #8
 8007c00:	2301      	movs	r3, #1
 8007c02:	210a      	movs	r1, #10
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7ff fae7 	bl	80071d8 <lsm6dso_read_reg>
 8007c0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10f      	bne.n	8007c32 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007c12:	78fb      	ldrb	r3, [r7, #3]
 8007c14:	f003 0307 	and.w	r3, r3, #7
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	7a3b      	ldrb	r3, [r7, #8]
 8007c1c:	f362 0302 	bfi	r3, r2, #0, #3
 8007c20:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007c22:	f107 0208 	add.w	r2, r7, #8
 8007c26:	2301      	movs	r3, #1
 8007c28:	210a      	movs	r1, #10
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff faec 	bl	8007208 <lsm6dso_write_reg>
 8007c30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c32:	68fb      	ldr	r3, [r7, #12]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007c46:	2102      	movs	r1, #2
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff ff35 	bl	8007ab8 <lsm6dso_mem_bank_set>
 8007c4e:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007c50:	2302      	movs	r3, #2
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	2146      	movs	r1, #70	; 0x46
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7ff fabe 	bl	80071d8 <lsm6dso_read_reg>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff ff26 	bl	8007ab8 <lsm6dso_mem_bank_set>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4413      	add	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]

  return ret;
 8007c74:	68fb      	ldr	r3, [r7, #12]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007c8a:	2102      	movs	r1, #2
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff ff13 	bl	8007ab8 <lsm6dso_mem_bank_set>
 8007c92:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <lsm6dso_fsm_data_rate_get+0x1e>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	e03a      	b.n	8007d14 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8007c9e:	f107 0208 	add.w	r2, r7, #8
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	215f      	movs	r1, #95	; 0x5f
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff fa96 	bl	80071d8 <lsm6dso_read_reg>
 8007cac:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d125      	bne.n	8007d00 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8007cb4:	7a3b      	ldrb	r3, [r7, #8]
 8007cb6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b03      	cmp	r3, #3
 8007cbe:	d81b      	bhi.n	8007cf8 <lsm6dso_fsm_data_rate_get+0x78>
 8007cc0:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <lsm6dso_fsm_data_rate_get+0x48>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007cd9 	.word	0x08007cd9
 8007ccc:	08007ce1 	.word	0x08007ce1
 8007cd0:	08007ce9 	.word	0x08007ce9
 8007cd4:	08007cf1 	.word	0x08007cf1
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	701a      	strb	r2, [r3, #0]
      break;
 8007cde:	e010      	b.n	8007d02 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	701a      	strb	r2, [r3, #0]
      break;
 8007ce6:	e00c      	b.n	8007d02 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2202      	movs	r2, #2
 8007cec:	701a      	strb	r2, [r3, #0]
      break;
 8007cee:	e008      	b.n	8007d02 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	701a      	strb	r2, [r3, #0]
      break;
 8007cf6:	e004      	b.n	8007d02 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	701a      	strb	r2, [r3, #0]
      break;
 8007cfe:	e000      	b.n	8007d02 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8007d00:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff fed7 	bl	8007ab8 <lsm6dso_mem_bank_set>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]

  return ret;
 8007d12:	68fb      	ldr	r3, [r7, #12]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d103      	bne.n	8007d34 <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8007d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	e034      	b.n	8007d9e <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	7b1a      	ldrb	r2, [r3, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	695a      	ldr	r2, [r3, #20]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	699a      	ldr	r2, [r3, #24]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a0e      	ldr	r2, [pc, #56]	; (8007da8 <STTS751_RegisterBusIO+0x8c>)
 8007d70:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a0d      	ldr	r2, [pc, #52]	; (8007dac <STTS751_RegisterBusIO+0x90>)
 8007d76:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	69da      	ldr	r2, [r3, #28]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d004      	beq.n	8007d98 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	e002      	b.n	8007d9e <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8007d98:	f04f 33ff 	mov.w	r3, #4294967295
 8007d9c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	08008241 	.word	0x08008241
 8007dac:	080082af 	.word	0x080082af

08007db0 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d127      	bne.n	8007e12 <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3320      	adds	r3, #32
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 fc54 	bl	8008676 <stts751_pin_event_route_set>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 8007dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd8:	e020      	b.n	8007e1c <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007de0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3320      	adds	r3, #32
 8007de6:	2103      	movs	r1, #3
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fbb7 	bl	800855c <stts751_resolution_set>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 8007df4:	f04f 33ff 	mov.w	r3, #4294967295
 8007df8:	e010      	b.n	8007e1c <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3320      	adds	r3, #32
 8007dfe:	2180      	movs	r1, #128	; 0x80
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fad5 	bl	80083b0 <stts751_temp_data_rate_set>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 8007e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e10:	e004      	b.n	8007e1c <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d108      	bne.n	8007e48 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f877 	bl	8007f2a <STTS751_TEMP_Disable>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d002      	beq.n	8007e48 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8007e42:	f04f 33ff 	mov.w	r3, #4294967295
 8007e46:	e004      	b.n	8007e52 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3320      	adds	r3, #32
 8007e68:	f107 020c 	add.w	r2, r7, #12
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fc27 	bl	80086c2 <stts751_device_id_get>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8007e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e7e:	e003      	b.n	8007e88 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8007e80:	7b7a      	ldrb	r2, [r7, #13]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f04f 0200 	mov.w	r2, #0
 8007ebe:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 32.0f;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007ec6:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	615a      	str	r2, [r3, #20]
  return STTS751_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e012      	b.n	8007f22 <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8007f02:	eeb0 0a67 	vmov.f32	s0, s15
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f8b6 	bl	8008078 <STTS751_TEMP_SetOutputDataRate>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 8007f12:	f04f 33ff 	mov.w	r3, #4294967295
 8007f16:	e004      	b.n	8007f22 <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e01c      	b.n	8007f7a <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3334      	adds	r3, #52	; 0x34
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f81c 	bl	8007f84 <STTS751_TEMP_GetOutputDataRate>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 8007f52:	f04f 33ff 	mov.w	r3, #4294967295
 8007f56:	e010      	b.n	8007f7a <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3320      	adds	r3, #32
 8007f5c:	2180      	movs	r1, #128	; 0x80
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fa26 	bl	80083b0 <stts751_temp_data_rate_set>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8007f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6e:	e004      	b.n	8007f7a <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3320      	adds	r3, #32
 8007f96:	f107 020b 	add.w	r2, r7, #11
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fa5d 	bl	800845c <stts751_temp_data_rate_get>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8007fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fac:	e060      	b.n	8008070 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8007fae:	7afb      	ldrb	r3, [r7, #11]
 8007fb0:	2b90      	cmp	r3, #144	; 0x90
 8007fb2:	d021      	beq.n	8007ff8 <STTS751_TEMP_GetOutputDataRate+0x74>
 8007fb4:	2b90      	cmp	r3, #144	; 0x90
 8007fb6:	dc56      	bgt.n	8008066 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007fb8:	2b09      	cmp	r3, #9
 8007fba:	dc1b      	bgt.n	8007ff4 <STTS751_TEMP_GetOutputDataRate+0x70>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	db52      	blt.n	8008066 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007fc0:	2b09      	cmp	r3, #9
 8007fc2:	d850      	bhi.n	8008066 <STTS751_TEMP_GetOutputDataRate+0xe2>
 8007fc4:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <STTS751_TEMP_GetOutputDataRate+0x48>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	08008003 	.word	0x08008003
 8007fd0:	0800800d 	.word	0x0800800d
 8007fd4:	08008017 	.word	0x08008017
 8007fd8:	08008021 	.word	0x08008021
 8007fdc:	0800802b 	.word	0x0800802b
 8007fe0:	08008035 	.word	0x08008035
 8007fe4:	0800803f 	.word	0x0800803f
 8007fe8:	08008049 	.word	0x08008049
 8007fec:	08008053 	.word	0x08008053
 8007ff0:	0800805d 	.word	0x0800805d
 8007ff4:	2b80      	cmp	r3, #128	; 0x80
 8007ff6:	d136      	bne.n	8008066 <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f04f 0200 	mov.w	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
      break;
 8008000:	e035      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8008008:	601a      	str	r2, [r3, #0]
      break;
 800800a:	e030      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 8008012:	601a      	str	r2, [r3, #0]
      break;
 8008014:	e02b      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800801c:	601a      	str	r2, [r3, #0]
      break;
 800801e:	e026      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8008026:	601a      	str	r2, [r3, #0]
      break;
 8008028:	e021      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008030:	601a      	str	r2, [r3, #0]
      break;
 8008032:	e01c      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800803a:	601a      	str	r2, [r3, #0]
      break;
 800803c:	e017      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8008044:	601a      	str	r2, [r3, #0]
      break;
 8008046:	e012      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800804e:	601a      	str	r2, [r3, #0]
      break;
 8008050:	e00d      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8008058:	601a      	str	r2, [r3, #0]
      break;
 800805a:	e008      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8008062:	601a      	str	r2, [r3, #0]
      break;
 8008064:	e003      	b.n	800806e <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 8008066:	f04f 33ff 	mov.w	r3, #4294967295
 800806a:	60fb      	str	r3, [r7, #12]
      break;
 800806c:	bf00      	nop
  }

  return ret;
 800806e:	68fb      	ldr	r3, [r7, #12]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3320      	adds	r3, #32
 8008088:	f107 020e 	add.w	r2, r7, #14
 800808c:	4611      	mov	r1, r2
 800808e:	4618      	mov	r0, r3
 8008090:	f000 fa8a 	bl	80085a8 <stts751_resolution_get>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 800809a:	f04f 33ff 	mov.w	r3, #4294967295
 800809e:	e0a5      	b.n	80081ec <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 80080a0:	edd7 7a00 	vldr	s15, [r7]
 80080a4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80080a8:	eef4 7a47 	vcmp.f32	s15, s14
 80080ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b0:	d10e      	bne.n	80080d0 <STTS751_TEMP_SetOutputDataRate+0x58>
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d10b      	bne.n	80080d0 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3320      	adds	r3, #32
 80080bc:	2101      	movs	r1, #1
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fa4c 	bl	800855c <stts751_resolution_set>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 80080ca:	f04f 33ff 	mov.w	r3, #4294967295
 80080ce:	e08d      	b.n	80081ec <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 80080d0:	edd7 7a00 	vldr	s15, [r7]
 80080d4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80081f4 <STTS751_TEMP_SetOutputDataRate+0x17c>
 80080d8:	eef4 7a47 	vcmp.f32	s15, s14
 80080dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e0:	d111      	bne.n	8008106 <STTS751_TEMP_SetOutputDataRate+0x8e>
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d002      	beq.n	80080ee <STTS751_TEMP_SetOutputDataRate+0x76>
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d10b      	bne.n	8008106 <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3320      	adds	r3, #32
 80080f2:	2100      	movs	r1, #0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fa31 	bl	800855c <stts751_resolution_set>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8008100:	f04f 33ff 	mov.w	r3, #4294967295
 8008104:	e072      	b.n	80081ec <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8008106:	edd7 7a00 	vldr	s15, [r7]
 800810a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80081f8 <STTS751_TEMP_SetOutputDataRate+0x180>
 800810e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008116:	d801      	bhi.n	800811c <STTS751_TEMP_SetOutputDataRate+0xa4>
 8008118:	2300      	movs	r3, #0
 800811a:	e058      	b.n	80081ce <STTS751_TEMP_SetOutputDataRate+0x156>
 800811c:	edd7 7a00 	vldr	s15, [r7]
 8008120:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8008124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800812c:	d801      	bhi.n	8008132 <STTS751_TEMP_SetOutputDataRate+0xba>
 800812e:	2301      	movs	r3, #1
 8008130:	e04d      	b.n	80081ce <STTS751_TEMP_SetOutputDataRate+0x156>
 8008132:	edd7 7a00 	vldr	s15, [r7]
 8008136:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800813a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800813e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008142:	d801      	bhi.n	8008148 <STTS751_TEMP_SetOutputDataRate+0xd0>
 8008144:	2302      	movs	r3, #2
 8008146:	e042      	b.n	80081ce <STTS751_TEMP_SetOutputDataRate+0x156>
 8008148:	edd7 7a00 	vldr	s15, [r7]
 800814c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008158:	d801      	bhi.n	800815e <STTS751_TEMP_SetOutputDataRate+0xe6>
 800815a:	2303      	movs	r3, #3
 800815c:	e037      	b.n	80081ce <STTS751_TEMP_SetOutputDataRate+0x156>
 800815e:	edd7 7a00 	vldr	s15, [r7]
 8008162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800816a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800816e:	d801      	bhi.n	8008174 <STTS751_TEMP_SetOutputDataRate+0xfc>
 8008170:	2304      	movs	r3, #4
 8008172:	e02c      	b.n	80081ce <STTS751_TEMP_SetOutputDataRate+0x156>
 8008174:	edd7 7a00 	vldr	s15, [r7]
 8008178:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800817c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008184:	d801      	bhi.n	800818a <STTS751_TEMP_SetOutputDataRate+0x112>
 8008186:	2305      	movs	r3, #5
 8008188:	e021      	b.n	80081ce <STTS751_TEMP_SetOutputDataRate+0x156>
 800818a:	edd7 7a00 	vldr	s15, [r7]
 800818e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800819a:	d801      	bhi.n	80081a0 <STTS751_TEMP_SetOutputDataRate+0x128>
 800819c:	2306      	movs	r3, #6
 800819e:	e016      	b.n	80081ce <STTS751_TEMP_SetOutputDataRate+0x156>
 80081a0:	edd7 7a00 	vldr	s15, [r7]
 80081a4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80081a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b0:	d801      	bhi.n	80081b6 <STTS751_TEMP_SetOutputDataRate+0x13e>
 80081b2:	2307      	movs	r3, #7
 80081b4:	e00b      	b.n	80081ce <STTS751_TEMP_SetOutputDataRate+0x156>
 80081b6:	edd7 7a00 	vldr	s15, [r7]
 80081ba:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80081be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c6:	d801      	bhi.n	80081cc <STTS751_TEMP_SetOutputDataRate+0x154>
 80081c8:	2308      	movs	r3, #8
 80081ca:	e000      	b.n	80081ce <STTS751_TEMP_SetOutputDataRate+0x156>
 80081cc:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 80081ce:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3320      	adds	r3, #32
 80081d4:	7bfa      	ldrb	r2, [r7, #15]
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 f8e9 	bl	80083b0 <stts751_temp_data_rate_set>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 80081e4:	f04f 33ff 	mov.w	r3, #4294967295
 80081e8:	e000      	b.n	80081ec <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	42000000 	.word	0x42000000
 80081f8:	3d800000 	.word	0x3d800000

080081fc <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3320      	adds	r3, #32
 800820a:	f107 020e 	add.w	r2, r7, #14
 800820e:	4611      	mov	r1, r2
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fa01 	bl	8008618 <stts751_temperature_raw_get>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 800821c:	f04f 33ff 	mov.w	r3, #4294967295
 8008220:	e00a      	b.n	8008238 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8008222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f8a8 	bl	800837c <stts751_from_lsb_to_celsius>
 800822c:	eef0 7a40 	vmov.f32	s15, s0
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008240:	b590      	push	{r4, r7, lr}
 8008242:	b089      	sub	sp, #36	; 0x24
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	461a      	mov	r2, r3
 800824c:	460b      	mov	r3, r1
 800824e:	72fb      	strb	r3, [r7, #11]
 8008250:	4613      	mov	r3, r2
 8008252:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d11f      	bne.n	80082a4 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8008264:	2300      	movs	r3, #0
 8008266:	83fb      	strh	r3, [r7, #30]
 8008268:	e018      	b.n	800829c <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	695c      	ldr	r4, [r3, #20]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	7b1b      	ldrb	r3, [r3, #12]
 8008272:	b298      	uxth	r0, r3
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	b29a      	uxth	r2, r3
 8008278:	8bfb      	ldrh	r3, [r7, #30]
 800827a:	4413      	add	r3, r2
 800827c:	b299      	uxth	r1, r3
 800827e:	8bfb      	ldrh	r3, [r7, #30]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	441a      	add	r2, r3
 8008284:	2301      	movs	r3, #1
 8008286:	47a0      	blx	r4
 8008288:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008290:	f04f 33ff 	mov.w	r3, #4294967295
 8008294:	e007      	b.n	80082a6 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8008296:	8bfb      	ldrh	r3, [r7, #30]
 8008298:	3301      	adds	r3, #1
 800829a:	83fb      	strh	r3, [r7, #30]
 800829c:	8bfa      	ldrh	r2, [r7, #30]
 800829e:	893b      	ldrh	r3, [r7, #8]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d3e2      	bcc.n	800826a <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 80082a4:	69bb      	ldr	r3, [r7, #24]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3724      	adds	r7, #36	; 0x24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd90      	pop	{r4, r7, pc}

080082ae <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80082ae:	b590      	push	{r4, r7, lr}
 80082b0:	b089      	sub	sp, #36	; 0x24
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	461a      	mov	r2, r3
 80082ba:	460b      	mov	r3, r1
 80082bc:	72fb      	strb	r3, [r7, #11]
 80082be:	4613      	mov	r3, r2
 80082c0:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d11f      	bne.n	8008312 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80082d2:	2300      	movs	r3, #0
 80082d4:	83fb      	strh	r3, [r7, #30]
 80082d6:	e018      	b.n	800830a <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	691c      	ldr	r4, [r3, #16]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	7b1b      	ldrb	r3, [r3, #12]
 80082e0:	b298      	uxth	r0, r3
 80082e2:	7afb      	ldrb	r3, [r7, #11]
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	8bfb      	ldrh	r3, [r7, #30]
 80082e8:	4413      	add	r3, r2
 80082ea:	b299      	uxth	r1, r3
 80082ec:	8bfb      	ldrh	r3, [r7, #30]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	441a      	add	r2, r3
 80082f2:	2301      	movs	r3, #1
 80082f4:	47a0      	blx	r4
 80082f6:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 80082fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008302:	e007      	b.n	8008314 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8008304:	8bfb      	ldrh	r3, [r7, #30]
 8008306:	3301      	adds	r3, #1
 8008308:	83fb      	strh	r3, [r7, #30]
 800830a:	8bfa      	ldrh	r2, [r7, #30]
 800830c:	893b      	ldrh	r3, [r7, #8]
 800830e:	429a      	cmp	r2, r3
 8008310:	d3e2      	bcc.n	80082d8 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8008312:	69bb      	ldr	r3, [r7, #24]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3724      	adds	r7, #36	; 0x24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd90      	pop	{r4, r7, pc}

0800831c <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800831c:	b590      	push	{r4, r7, lr}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	607a      	str	r2, [r7, #4]
 8008326:	461a      	mov	r2, r3
 8008328:	460b      	mov	r3, r1
 800832a:	72fb      	strb	r3, [r7, #11]
 800832c:	4613      	mov	r3, r2
 800832e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	685c      	ldr	r4, [r3, #4]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68d8      	ldr	r0, [r3, #12]
 8008338:	893b      	ldrh	r3, [r7, #8]
 800833a:	7af9      	ldrb	r1, [r7, #11]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	47a0      	blx	r4
 8008340:	6178      	str	r0, [r7, #20]

  return ret;
 8008342:	697b      	ldr	r3, [r7, #20]
}
 8008344:	4618      	mov	r0, r3
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	bd90      	pop	{r4, r7, pc}

0800834c <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800834c:	b590      	push	{r4, r7, lr}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	461a      	mov	r2, r3
 8008358:	460b      	mov	r3, r1
 800835a:	72fb      	strb	r3, [r7, #11]
 800835c:	4613      	mov	r3, r2
 800835e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681c      	ldr	r4, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68d8      	ldr	r0, [r3, #12]
 8008368:	893b      	ldrh	r3, [r7, #8]
 800836a:	7af9      	ldrb	r1, [r7, #11]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	47a0      	blx	r4
 8008370:	6178      	str	r0, [r7, #20]

  return ret;
 8008372:	697b      	ldr	r3, [r7, #20]
}
 8008374:	4618      	mov	r0, r3
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	bd90      	pop	{r4, r7, pc}

0800837c <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8008386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008392:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80083ac <stts751_from_lsb_to_celsius+0x30>
 8008396:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800839a:	eef0 7a66 	vmov.f32	s15, s13
}
 800839e:	eeb0 0a67 	vmov.f32	s0, s15
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	43800000 	.word	0x43800000

080083b0 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 80083bc:	23aa      	movs	r3, #170	; 0xaa
 80083be:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80083c0:	f107 020c 	add.w	r2, r7, #12
 80083c4:	2301      	movs	r3, #1
 80083c6:	2104      	movs	r1, #4
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff ffa7 	bl	800831c <stts751_read_reg>
 80083ce:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10f      	bne.n	80083f6 <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 80083d6:	78fb      	ldrb	r3, [r7, #3]
 80083d8:	f003 030f 	and.w	r3, r3, #15
 80083dc:	b2da      	uxtb	r2, r3
 80083de:	7b3b      	ldrb	r3, [r7, #12]
 80083e0:	f362 0303 	bfi	r3, r2, #0, #4
 80083e4:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 80083e6:	f107 020c 	add.w	r2, r7, #12
 80083ea:	2301      	movs	r3, #1
 80083ec:	2104      	movs	r1, #4
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff ffac 	bl	800834c <stts751_write_reg>
 80083f4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d107      	bne.n	800840c <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 80083fc:	f107 0210 	add.w	r2, r7, #16
 8008400:	2301      	movs	r3, #1
 8008402:	2103      	movs	r1, #3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff ff89 	bl	800831c <stts751_read_reg>
 800840a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d111      	bne.n	8008436 <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	09db      	lsrs	r3, r3, #7
 8008416:	b2db      	uxtb	r3, r3
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	b2da      	uxtb	r2, r3
 800841e:	7c3b      	ldrb	r3, [r7, #16]
 8008420:	f362 1386 	bfi	r3, r2, #6, #1
 8008424:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8008426:	f107 0210 	add.w	r2, r7, #16
 800842a:	2301      	movs	r3, #1
 800842c:	2103      	movs	r1, #3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7ff ff8c 	bl	800834c <stts751_write_reg>
 8008434:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10a      	bne.n	8008452 <stts751_temp_data_rate_set+0xa2>
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	2b90      	cmp	r3, #144	; 0x90
 8008440:	d107      	bne.n	8008452 <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8008442:	f107 020b 	add.w	r2, r7, #11
 8008446:	2301      	movs	r3, #1
 8008448:	210f      	movs	r1, #15
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff ff7e 	bl	800834c <stts751_write_reg>
 8008450:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8008452:	697b      	ldr	r3, [r7, #20]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008466:	f107 0210 	add.w	r2, r7, #16
 800846a:	2301      	movs	r3, #1
 800846c:	2104      	movs	r1, #4
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7ff ff54 	bl	800831c <stts751_read_reg>
 8008474:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d107      	bne.n	800848c <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 800847c:	f107 020c 	add.w	r2, r7, #12
 8008480:	2301      	movs	r3, #1
 8008482:	2103      	movs	r1, #3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff ff49 	bl	800831c <stts751_read_reg>
 800848a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 800848c:	7b3b      	ldrb	r3, [r7, #12]
 800848e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008492:	b2db      	uxtb	r3, r3
 8008494:	01db      	lsls	r3, r3, #7
 8008496:	7c3a      	ldrb	r2, [r7, #16]
 8008498:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	4413      	add	r3, r2
 80084a0:	2b90      	cmp	r3, #144	; 0x90
 80084a2:	d025      	beq.n	80084f0 <stts751_temp_data_rate_get+0x94>
 80084a4:	2b90      	cmp	r3, #144	; 0x90
 80084a6:	dc4f      	bgt.n	8008548 <stts751_temp_data_rate_get+0xec>
 80084a8:	2b09      	cmp	r3, #9
 80084aa:	dc1b      	bgt.n	80084e4 <stts751_temp_data_rate_get+0x88>
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	db4b      	blt.n	8008548 <stts751_temp_data_rate_get+0xec>
 80084b0:	2b09      	cmp	r3, #9
 80084b2:	d849      	bhi.n	8008548 <stts751_temp_data_rate_get+0xec>
 80084b4:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <stts751_temp_data_rate_get+0x60>)
 80084b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ba:	bf00      	nop
 80084bc:	080084f9 	.word	0x080084f9
 80084c0:	08008501 	.word	0x08008501
 80084c4:	08008509 	.word	0x08008509
 80084c8:	08008511 	.word	0x08008511
 80084cc:	08008519 	.word	0x08008519
 80084d0:	08008521 	.word	0x08008521
 80084d4:	08008529 	.word	0x08008529
 80084d8:	08008531 	.word	0x08008531
 80084dc:	08008539 	.word	0x08008539
 80084e0:	08008541 	.word	0x08008541
 80084e4:	2b80      	cmp	r3, #128	; 0x80
 80084e6:	d12f      	bne.n	8008548 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2280      	movs	r2, #128	; 0x80
 80084ec:	701a      	strb	r2, [r3, #0]
      break;
 80084ee:	e02f      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2290      	movs	r2, #144	; 0x90
 80084f4:	701a      	strb	r2, [r3, #0]
      break;
 80084f6:	e02b      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2200      	movs	r2, #0
 80084fc:	701a      	strb	r2, [r3, #0]
      break;
 80084fe:	e027      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2201      	movs	r2, #1
 8008504:	701a      	strb	r2, [r3, #0]
      break;
 8008506:	e023      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2202      	movs	r2, #2
 800850c:	701a      	strb	r2, [r3, #0]
      break;
 800850e:	e01f      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	2203      	movs	r2, #3
 8008514:	701a      	strb	r2, [r3, #0]
      break;
 8008516:	e01b      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2204      	movs	r2, #4
 800851c:	701a      	strb	r2, [r3, #0]
      break;
 800851e:	e017      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2205      	movs	r2, #5
 8008524:	701a      	strb	r2, [r3, #0]
      break;
 8008526:	e013      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	2206      	movs	r2, #6
 800852c:	701a      	strb	r2, [r3, #0]
      break;
 800852e:	e00f      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2207      	movs	r2, #7
 8008534:	701a      	strb	r2, [r3, #0]
      break;
 8008536:	e00b      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2208      	movs	r2, #8
 800853c:	701a      	strb	r2, [r3, #0]
      break;
 800853e:	e007      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	2209      	movs	r2, #9
 8008544:	701a      	strb	r2, [r3, #0]
      break;
 8008546:	e003      	b.n	8008550 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	2280      	movs	r2, #128	; 0x80
 800854c:	701a      	strb	r2, [r3, #0]
      break;
 800854e:	bf00      	nop
  }

  return ret;
 8008550:	697b      	ldr	r3, [r7, #20]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop

0800855c <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008568:	f107 0208 	add.w	r2, r7, #8
 800856c:	2301      	movs	r3, #1
 800856e:	2103      	movs	r1, #3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff fed3 	bl	800831c <stts751_read_reg>
 8008576:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10f      	bne.n	800859e <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	b2da      	uxtb	r2, r3
 8008586:	7a3b      	ldrb	r3, [r7, #8]
 8008588:	f362 0383 	bfi	r3, r2, #2, #2
 800858c:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800858e:	f107 0208 	add.w	r2, r7, #8
 8008592:	2301      	movs	r3, #1
 8008594:	2103      	movs	r1, #3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff fed8 	bl	800834c <stts751_write_reg>
 800859c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800859e:	68fb      	ldr	r3, [r7, #12]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80085b2:	f107 0208 	add.w	r2, r7, #8
 80085b6:	2301      	movs	r3, #1
 80085b8:	2103      	movs	r1, #3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7ff feae 	bl	800831c <stts751_read_reg>
 80085c0:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 80085c2:	7a3b      	ldrb	r3, [r7, #8]
 80085c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d81a      	bhi.n	8008604 <stts751_resolution_get+0x5c>
 80085ce:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <stts751_resolution_get+0x2c>)
 80085d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d4:	080085ed 	.word	0x080085ed
 80085d8:	080085f5 	.word	0x080085f5
 80085dc:	080085e5 	.word	0x080085e5
 80085e0:	080085fd 	.word	0x080085fd
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2202      	movs	r2, #2
 80085e8:	701a      	strb	r2, [r3, #0]
      break;
 80085ea:	e00f      	b.n	800860c <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	701a      	strb	r2, [r3, #0]
      break;
 80085f2:	e00b      	b.n	800860c <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2201      	movs	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]
      break;
 80085fa:	e007      	b.n	800860c <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2203      	movs	r2, #3
 8008600:	701a      	strb	r2, [r3, #0]
      break;
 8008602:	e003      	b.n	800860c <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2202      	movs	r2, #2
 8008608:	701a      	strb	r2, [r3, #0]
      break;
 800860a:	bf00      	nop
  }

  return ret;
 800860c:	68fb      	ldr	r3, [r7, #12]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop

08008618 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8008622:	f107 0308 	add.w	r3, r7, #8
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	2301      	movs	r3, #1
 800862a:	2100      	movs	r1, #0
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7ff fe75 	bl	800831c <stts751_read_reg>
 8008632:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d118      	bne.n	800866c <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 800863a:	f107 0208 	add.w	r2, r7, #8
 800863e:	2301      	movs	r3, #1
 8008640:	2102      	movs	r1, #2
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff fe6a 	bl	800831c <stts751_read_reg>
 8008648:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 800864a:	7a7b      	ldrb	r3, [r7, #9]
 800864c:	b21a      	sxth	r2, r3
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008658:	b29b      	uxth	r3, r3
 800865a:	021b      	lsls	r3, r3, #8
 800865c:	b29a      	uxth	r2, r3
 800865e:	7a3b      	ldrb	r3, [r7, #8]
 8008660:	b29b      	uxth	r3, r3
 8008662:	4413      	add	r3, r2
 8008664:	b29b      	uxth	r3, r3
 8008666:	b21a      	sxth	r2, r3
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800866c:	68fb      	ldr	r3, [r7, #12]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008682:	f107 0208 	add.w	r2, r7, #8
 8008686:	2301      	movs	r3, #1
 8008688:	2103      	movs	r1, #3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff fe46 	bl	800831c <stts751_read_reg>
 8008690:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10f      	bne.n	80086b8 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	7a3b      	ldrb	r3, [r7, #8]
 80086a2:	f362 13c7 	bfi	r3, r2, #7, #1
 80086a6:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 80086a8:	f107 0208 	add.w	r2, r7, #8
 80086ac:	2301      	movs	r3, #1
 80086ae:	2103      	movs	r1, #3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fe4b 	bl	800834c <stts751_write_reg>
 80086b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80086b8:	68fb      	ldr	r3, [r7, #12]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	2301      	movs	r3, #1
 80086d0:	21fd      	movs	r1, #253	; 0xfd
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff fe22 	bl	800831c <stts751_read_reg>
 80086d8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d107      	bne.n	80086f0 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	2301      	movs	r3, #1
 80086e6:	21fe      	movs	r1, #254	; 0xfe
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff fe17 	bl	800831c <stts751_read_reg>
 80086ee:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d107      	bne.n	8008706 <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	1c9a      	adds	r2, r3, #2
 80086fa:	2301      	movs	r3, #1
 80086fc:	21ff      	movs	r1, #255	; 0xff
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fe0c 	bl	800831c <stts751_read_reg>
 8008704:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8008706:	68fb      	ldr	r3, [r7, #12]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08c      	sub	sp, #48	; 0x30
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800871a:	2300      	movs	r3, #0
 800871c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800871e:	2301      	movs	r3, #1
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	623b      	str	r3, [r7, #32]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b02      	cmp	r3, #2
 800872a:	d07c      	beq.n	8008826 <IKS01A3_ENV_SENSOR_Init+0x116>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b02      	cmp	r3, #2
 8008730:	f200 80b2 	bhi.w	8008898 <IKS01A3_ENV_SENSOR_Init+0x188>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <IKS01A3_ENV_SENSOR_Init+0x32>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d039      	beq.n	80087b4 <IKS01A3_ENV_SENSOR_Init+0xa4>
 8008740:	e0aa      	b.n	8008898 <IKS01A3_ENV_SENSOR_Init+0x188>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8008742:	6838      	ldr	r0, [r7, #0]
 8008744:	f000 f934 	bl	80089b0 <HTS221_0_Probe>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800874e:	f04f 33ff 	mov.w	r3, #4294967295
 8008752:	e0df      	b.n	8008914 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008754:	4a71      	ldr	r2, [pc, #452]	; (800891c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	4970      	ldr	r1, [pc, #448]	; (8008920 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008766:	f107 0108 	add.w	r1, r7, #8
 800876a:	4610      	mov	r0, r2
 800876c:	4798      	blx	r3
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008774:	f06f 0306 	mvn.w	r3, #6
 8008778:	e0cc      	b.n	8008914 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800877a:	7a3b      	ldrb	r3, [r7, #8]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d103      	bne.n	8008788 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8008788:	7abb      	ldrb	r3, [r7, #10]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d103      	bne.n	8008796 <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	f043 0304 	orr.w	r3, r3, #4
 8008794:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8008796:	7a7b      	ldrb	r3, [r7, #9]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d103      	bne.n	80087a4 <IKS01A3_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	f043 0302 	orr.w	r3, r3, #2
 80087a2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 80087a4:	7afb      	ldrb	r3, [r7, #11]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d17a      	bne.n	80088a0 <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	f043 0308 	orr.w	r3, r3, #8
 80087b0:	623b      	str	r3, [r7, #32]
      }
      break;
 80087b2:	e075      	b.n	80088a0 <IKS01A3_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 80087b4:	6838      	ldr	r0, [r7, #0]
 80087b6:	f000 f9c5 	bl	8008b44 <LPS22HH_0_Probe>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 80087c0:	f04f 33ff 	mov.w	r3, #4294967295
 80087c4:	e0a6      	b.n	8008914 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80087c6:	4a55      	ldr	r2, [pc, #340]	; (800891c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	4953      	ldr	r1, [pc, #332]	; (8008920 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80087d8:	f107 0108 	add.w	r1, r7, #8
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80087e6:	f06f 0306 	mvn.w	r3, #6
 80087ea:	e093      	b.n	8008914 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 80087ec:	7a3b      	ldrb	r3, [r7, #8]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d103      	bne.n	80087fa <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	f043 0301 	orr.w	r3, r3, #1
 80087f8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 80087fa:	7abb      	ldrb	r3, [r7, #10]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d103      	bne.n	8008808 <IKS01A3_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	f043 0304 	orr.w	r3, r3, #4
 8008806:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8008808:	7a7b      	ldrb	r3, [r7, #9]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d103      	bne.n	8008816 <IKS01A3_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	f043 0302 	orr.w	r3, r3, #2
 8008814:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8008816:	7afb      	ldrb	r3, [r7, #11]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d143      	bne.n	80088a4 <IKS01A3_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	f043 0308 	orr.w	r3, r3, #8
 8008822:	623b      	str	r3, [r7, #32]
      }
      break;
 8008824:	e03e      	b.n	80088a4 <IKS01A3_ENV_SENSOR_Init+0x194>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8008826:	6838      	ldr	r0, [r7, #0]
 8008828:	f000 fa58 	bl	8008cdc <STTS751_0_Probe>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <IKS01A3_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8008832:	f04f 33ff 	mov.w	r3, #4294967295
 8008836:	e06d      	b.n	8008914 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008838:	4a38      	ldr	r2, [pc, #224]	; (800891c <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	4937      	ldr	r1, [pc, #220]	; (8008920 <IKS01A3_ENV_SENSOR_Init+0x210>)
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800884a:	f107 0108 	add.w	r1, r7, #8
 800884e:	4610      	mov	r0, r2
 8008850:	4798      	blx	r3
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008858:	f06f 0306 	mvn.w	r3, #6
 800885c:	e05a      	b.n	8008914 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800885e:	7a3b      	ldrb	r3, [r7, #8]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d103      	bne.n	800886c <IKS01A3_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	f043 0301 	orr.w	r3, r3, #1
 800886a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800886c:	7abb      	ldrb	r3, [r7, #10]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d103      	bne.n	800887a <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	f043 0304 	orr.w	r3, r3, #4
 8008878:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800887a:	7a7b      	ldrb	r3, [r7, #9]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d103      	bne.n	8008888 <IKS01A3_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	f043 0302 	orr.w	r3, r3, #2
 8008886:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8008888:	7afb      	ldrb	r3, [r7, #11]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d10c      	bne.n	80088a8 <IKS01A3_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	f043 0308 	orr.w	r3, r3, #8
 8008894:	623b      	str	r3, [r7, #32]
      }
      break;
 8008896:	e007      	b.n	80088a8 <IKS01A3_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008898:	f06f 0301 	mvn.w	r3, #1
 800889c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800889e:	e004      	b.n	80088aa <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 80088a0:	bf00      	nop
 80088a2:	e002      	b.n	80088aa <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 80088a4:	bf00      	nop
 80088a6:	e000      	b.n	80088aa <IKS01A3_ENV_SENSOR_Init+0x19a>
      break;
 80088a8:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <IKS01A3_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	e02f      	b.n	8008914 <IKS01A3_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80088b4:	2300      	movs	r3, #0
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
 80088b8:	e028      	b.n	800890c <IKS01A3_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	4013      	ands	r3, r2
 80088c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d11c      	bne.n	8008900 <IKS01A3_ENV_SENSOR_Init+0x1f0>
 80088c6:	6a3a      	ldr	r2, [r7, #32]
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	4013      	ands	r3, r2
 80088cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d116      	bne.n	8008900 <IKS01A3_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80088d2:	4a14      	ldr	r2, [pc, #80]	; (8008924 <IKS01A3_ENV_SENSOR_Init+0x214>)
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088da:	4913      	ldr	r1, [pc, #76]	; (8008928 <IKS01A3_ENV_SENSOR_Init+0x218>)
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	0092      	lsls	r2, r2, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	490d      	ldr	r1, [pc, #52]	; (8008920 <IKS01A3_ENV_SENSOR_Init+0x210>)
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80088f0:	4610      	mov	r0, r2
 80088f2:	4798      	blx	r3
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <IKS01A3_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80088fa:	f06f 0304 	mvn.w	r3, #4
 80088fe:	e009      	b.n	8008914 <IKS01A3_ENV_SENSOR_Init+0x204>
      }
    }

    function = function << 1;
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	3301      	adds	r3, #1
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	2b03      	cmp	r3, #3
 8008910:	d9d3      	bls.n	80088ba <IKS01A3_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008914:	4618      	mov	r0, r3
 8008916:	3730      	adds	r7, #48	; 0x30
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	20000d34 	.word	0x20000d34
 8008920:	20000cf8 	.word	0x20000cf8
 8008924:	2000015c 	.word	0x2000015c
 8008928:	20000d04 	.word	0x20000d04

0800892c <IKS01A3_ENV_SENSOR_GetValue>:
  * @param  Function Environmental sensor function
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d903      	bls.n	8008946 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800893e:	f06f 0301 	mvn.w	r3, #1
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	e027      	b.n	8008996 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8008946:	4a16      	ldr	r2, [pc, #88]	; (80089a0 <IKS01A3_ENV_SENSOR_GetValue+0x74>)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4013      	ands	r3, r2
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	429a      	cmp	r2, r3
 8008956:	d11b      	bne.n	8008990 <IKS01A3_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8008958:	4a12      	ldr	r2, [pc, #72]	; (80089a4 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008960:	4911      	ldr	r1, [pc, #68]	; (80089a8 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	0092      	lsls	r2, r2, #2
 8008966:	4413      	add	r3, r2
 8008968:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	490f      	ldr	r1, [pc, #60]	; (80089ac <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <IKS01A3_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008982:	f06f 0304 	mvn.w	r3, #4
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	e005      	b.n	8008996 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800898a:	2300      	movs	r3, #0
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	e002      	b.n	8008996 <IKS01A3_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008990:	f06f 0301 	mvn.w	r3, #1
 8008994:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008996:	697b      	ldr	r3, [r7, #20]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20000d40 	.word	0x20000d40
 80089a4:	2000015c 	.word	0x2000015c
 80089a8:	20000d04 	.word	0x20000d04
 80089ac:	20000cf8 	.word	0x20000cf8

080089b0 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b092      	sub	sp, #72	; 0x48
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	647b      	str	r3, [r7, #68]	; 0x44
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 80089bc:	2300      	movs	r3, #0
 80089be:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 80089c0:	23bf      	movs	r3, #191	; 0xbf
 80089c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 80089c6:	4b51      	ldr	r3, [pc, #324]	; (8008b0c <HTS221_0_Probe+0x15c>)
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80089ca:	4b51      	ldr	r3, [pc, #324]	; (8008b10 <HTS221_0_Probe+0x160>)
 80089cc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80089ce:	4b51      	ldr	r3, [pc, #324]	; (8008b14 <HTS221_0_Probe+0x164>)
 80089d0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80089d2:	4b51      	ldr	r3, [pc, #324]	; (8008b18 <HTS221_0_Probe+0x168>)
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 80089d6:	4b51      	ldr	r3, [pc, #324]	; (8008b1c <HTS221_0_Probe+0x16c>)
 80089d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 80089da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089de:	4619      	mov	r1, r3
 80089e0:	484f      	ldr	r0, [pc, #316]	; (8008b20 <HTS221_0_Probe+0x170>)
 80089e2:	f7f9 fa97 	bl	8001f14 <HTS221_RegisterBusIO>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d003      	beq.n	80089f4 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80089ec:	f06f 0306 	mvn.w	r3, #6
 80089f0:	647b      	str	r3, [r7, #68]	; 0x44
 80089f2:	e085      	b.n	8008b00 <HTS221_0_Probe+0x150>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 80089f4:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80089f8:	4619      	mov	r1, r3
 80089fa:	4849      	ldr	r0, [pc, #292]	; (8008b20 <HTS221_0_Probe+0x170>)
 80089fc:	f7f9 fb13 	bl	8002026 <HTS221_ReadID>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008a06:	f06f 0306 	mvn.w	r3, #6
 8008a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a0c:	e078      	b.n	8008b00 <HTS221_0_Probe+0x150>
  }
  else if (id != HTS221_ID)
 8008a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a12:	2bbc      	cmp	r3, #188	; 0xbc
 8008a14:	d003      	beq.n	8008a1e <HTS221_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008a16:	f06f 0306 	mvn.w	r3, #6
 8008a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a1c:	e070      	b.n	8008b00 <HTS221_0_Probe+0x150>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8008a1e:	f107 0308 	add.w	r3, r7, #8
 8008a22:	4619      	mov	r1, r3
 8008a24:	483e      	ldr	r0, [pc, #248]	; (8008b20 <HTS221_0_Probe+0x170>)
 8008a26:	f7f9 fb15 	bl	8002054 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8008a2a:	7a3b      	ldrb	r3, [r7, #8]
 8008a2c:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 8008a2e:	7a7b      	ldrb	r3, [r7, #9]
 8008a30:	005b      	lsls	r3, r3, #1
 8008a32:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 8008a34:	7abb      	ldrb	r3, [r7, #10]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 8008a3a:	7afb      	ldrb	r3, [r7, #11]
 8008a3c:	00db      	lsls	r3, r3, #3
 8008a3e:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature)
 8008a40:	4a38      	ldr	r2, [pc, #224]	; (8008b24 <HTS221_0_Probe+0x174>)
 8008a42:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8008a44:	4b38      	ldr	r3, [pc, #224]	; (8008b28 <HTS221_0_Probe+0x178>)
 8008a46:	4a36      	ldr	r2, [pc, #216]	; (8008b20 <HTS221_0_Probe+0x170>)
 8008a48:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8008a4a:	4b38      	ldr	r3, [pc, #224]	; (8008b2c <HTS221_0_Probe+0x17c>)
 8008a4c:	4a38      	ldr	r2, [pc, #224]	; (8008b30 <HTS221_0_Probe+0x180>)
 8008a4e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d11d      	bne.n	8008a92 <HTS221_0_Probe+0xe2>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d018      	beq.n	8008a92 <HTS221_0_Probe+0xe2>
 8008a60:	7a3b      	ldrb	r3, [r7, #8]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d115      	bne.n	8008a92 <HTS221_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8008a66:	4b33      	ldr	r3, [pc, #204]	; (8008b34 <HTS221_0_Probe+0x184>)
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	4a33      	ldr	r2, [pc, #204]	; (8008b38 <HTS221_0_Probe+0x188>)
 8008a6c:	4933      	ldr	r1, [pc, #204]	; (8008b3c <HTS221_0_Probe+0x18c>)
 8008a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008a72:	4b2e      	ldr	r3, [pc, #184]	; (8008b2c <HTS221_0_Probe+0x17c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a2b      	ldr	r2, [pc, #172]	; (8008b28 <HTS221_0_Probe+0x178>)
 8008a7a:	6812      	ldr	r2, [r2, #0]
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <HTS221_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a86:	f06f 0304 	mvn.w	r3, #4
 8008a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a8c:	e001      	b.n	8008a92 <HTS221_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8008a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d11d      	bne.n	8008ad4 <HTS221_0_Probe+0x124>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f003 0304 	and.w	r3, r3, #4
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d018      	beq.n	8008ad4 <HTS221_0_Probe+0x124>
 8008aa2:	7abb      	ldrb	r3, [r7, #10]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d115      	bne.n	8008ad4 <HTS221_0_Probe+0x124>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8008aa8:	4b22      	ldr	r3, [pc, #136]	; (8008b34 <HTS221_0_Probe+0x184>)
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	4a22      	ldr	r2, [pc, #136]	; (8008b38 <HTS221_0_Probe+0x188>)
 8008aae:	4924      	ldr	r1, [pc, #144]	; (8008b40 <HTS221_0_Probe+0x190>)
 8008ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008ab4:	4b1d      	ldr	r3, [pc, #116]	; (8008b2c <HTS221_0_Probe+0x17c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a1b      	ldr	r2, [pc, #108]	; (8008b28 <HTS221_0_Probe+0x178>)
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4798      	blx	r3
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <HTS221_0_Probe+0x120>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ac8:	f06f 0304 	mvn.w	r3, #4
 8008acc:	647b      	str	r3, [r7, #68]	; 0x44
 8008ace:	e001      	b.n	8008ad4 <HTS221_0_Probe+0x124>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d107      	bne.n	8008aea <HTS221_0_Probe+0x13a>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <HTS221_0_Probe+0x13a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ae4:	f06f 0304 	mvn.w	r3, #4
 8008ae8:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8008aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d107      	bne.n	8008b00 <HTS221_0_Probe+0x150>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f003 0308 	and.w	r3, r3, #8
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <HTS221_0_Probe+0x150>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008afa:	f06f 0304 	mvn.w	r3, #4
 8008afe:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8008b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3748      	adds	r7, #72	; 0x48
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	08000f45 	.word	0x08000f45
 8008b10:	08000fc1 	.word	0x08000fc1
 8008b14:	08001075 	.word	0x08001075
 8008b18:	08001011 	.word	0x08001011
 8008b1c:	080010d9 	.word	0x080010d9
 8008b20:	20000d4c 	.word	0x20000d4c
 8008b24:	20000d40 	.word	0x20000d40
 8008b28:	20000cf8 	.word	0x20000cf8
 8008b2c:	20000d34 	.word	0x20000d34
 8008b30:	20000008 	.word	0x20000008
 8008b34:	2000015c 	.word	0x2000015c
 8008b38:	20000d04 	.word	0x20000d04
 8008b3c:	2000002c 	.word	0x2000002c
 8008b40:	20000018 	.word	0x20000018

08008b44 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b092      	sub	sp, #72	; 0x48
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	647b      	str	r3, [r7, #68]	; 0x44
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8008b50:	2300      	movs	r3, #0
 8008b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8008b54:	23bb      	movs	r3, #187	; 0xbb
 8008b56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008b5a:	4b52      	ldr	r3, [pc, #328]	; (8008ca4 <LPS22HH_0_Probe+0x160>)
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008b5e:	4b52      	ldr	r3, [pc, #328]	; (8008ca8 <LPS22HH_0_Probe+0x164>)
 8008b60:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008b62:	4b52      	ldr	r3, [pc, #328]	; (8008cac <LPS22HH_0_Probe+0x168>)
 8008b64:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008b66:	4b52      	ldr	r3, [pc, #328]	; (8008cb0 <LPS22HH_0_Probe+0x16c>)
 8008b68:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008b6a:	4b52      	ldr	r3, [pc, #328]	; (8008cb4 <LPS22HH_0_Probe+0x170>)
 8008b6c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8008b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b72:	4619      	mov	r1, r3
 8008b74:	4850      	ldr	r0, [pc, #320]	; (8008cb8 <LPS22HH_0_Probe+0x174>)
 8008b76:	f7fc fa8b 	bl	8005090 <LPS22HH_RegisterBusIO>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b80:	f06f 0306 	mvn.w	r3, #6
 8008b84:	647b      	str	r3, [r7, #68]	; 0x44
 8008b86:	e087      	b.n	8008c98 <LPS22HH_0_Probe+0x154>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8008b88:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	484a      	ldr	r0, [pc, #296]	; (8008cb8 <LPS22HH_0_Probe+0x174>)
 8008b90:	f7fc fb27 	bl	80051e2 <LPS22HH_ReadID>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b9a:	f06f 0306 	mvn.w	r3, #6
 8008b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8008ba0:	e07a      	b.n	8008c98 <LPS22HH_0_Probe+0x154>
  }
  else if (id != LPS22HH_ID)
 8008ba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ba6:	2bb3      	cmp	r3, #179	; 0xb3
 8008ba8:	d003      	beq.n	8008bb2 <LPS22HH_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008baa:	f06f 0306 	mvn.w	r3, #6
 8008bae:	647b      	str	r3, [r7, #68]	; 0x44
 8008bb0:	e072      	b.n	8008c98 <LPS22HH_0_Probe+0x154>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8008bb2:	f107 0308 	add.w	r3, r7, #8
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	483f      	ldr	r0, [pc, #252]	; (8008cb8 <LPS22HH_0_Probe+0x174>)
 8008bba:	f7fc fb29 	bl	8005210 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8008bbe:	7a3b      	ldrb	r3, [r7, #8]
 8008bc0:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8008bc2:	7a7b      	ldrb	r3, [r7, #9]
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8008bc8:	7abb      	ldrb	r3, [r7, #10]
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8008bce:	7afb      	ldrb	r3, [r7, #11]
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature)
 8008bd4:	4a39      	ldr	r2, [pc, #228]	; (8008cbc <LPS22HH_0_Probe+0x178>)
 8008bd6:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8008bd8:	4b39      	ldr	r3, [pc, #228]	; (8008cc0 <LPS22HH_0_Probe+0x17c>)
 8008bda:	4a37      	ldr	r2, [pc, #220]	; (8008cb8 <LPS22HH_0_Probe+0x174>)
 8008bdc:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8008bde:	4b39      	ldr	r3, [pc, #228]	; (8008cc4 <LPS22HH_0_Probe+0x180>)
 8008be0:	4a39      	ldr	r2, [pc, #228]	; (8008cc8 <LPS22HH_0_Probe+0x184>)
 8008be2:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d11e      	bne.n	8008c28 <LPS22HH_0_Probe+0xe4>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d019      	beq.n	8008c28 <LPS22HH_0_Probe+0xe4>
 8008bf4:	7a3b      	ldrb	r3, [r7, #8]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d116      	bne.n	8008c28 <LPS22HH_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8008bfa:	4b34      	ldr	r3, [pc, #208]	; (8008ccc <LPS22HH_0_Probe+0x188>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4a34      	ldr	r2, [pc, #208]	; (8008cd0 <LPS22HH_0_Probe+0x18c>)
 8008c00:	3304      	adds	r3, #4
 8008c02:	4934      	ldr	r1, [pc, #208]	; (8008cd4 <LPS22HH_0_Probe+0x190>)
 8008c04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008c08:	4b2e      	ldr	r3, [pc, #184]	; (8008cc4 <LPS22HH_0_Probe+0x180>)
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a2c      	ldr	r2, [pc, #176]	; (8008cc0 <LPS22HH_0_Probe+0x17c>)
 8008c10:	6852      	ldr	r2, [r2, #4]
 8008c12:	4610      	mov	r0, r2
 8008c14:	4798      	blx	r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <LPS22HH_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c1c:	f06f 0304 	mvn.w	r3, #4
 8008c20:	647b      	str	r3, [r7, #68]	; 0x44
 8008c22:	e001      	b.n	8008c28 <LPS22HH_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8008c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d11e      	bne.n	8008c6c <LPS22HH_0_Probe+0x128>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d019      	beq.n	8008c6c <LPS22HH_0_Probe+0x128>
 8008c38:	7a7b      	ldrb	r3, [r7, #9]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d116      	bne.n	8008c6c <LPS22HH_0_Probe+0x128>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8008c3e:	4b23      	ldr	r3, [pc, #140]	; (8008ccc <LPS22HH_0_Probe+0x188>)
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	4a23      	ldr	r2, [pc, #140]	; (8008cd0 <LPS22HH_0_Probe+0x18c>)
 8008c44:	3304      	adds	r3, #4
 8008c46:	4924      	ldr	r1, [pc, #144]	; (8008cd8 <LPS22HH_0_Probe+0x194>)
 8008c48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008c4c:	4b1d      	ldr	r3, [pc, #116]	; (8008cc4 <LPS22HH_0_Probe+0x180>)
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a1b      	ldr	r2, [pc, #108]	; (8008cc0 <LPS22HH_0_Probe+0x17c>)
 8008c54:	6852      	ldr	r2, [r2, #4]
 8008c56:	4610      	mov	r0, r2
 8008c58:	4798      	blx	r3
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <LPS22HH_0_Probe+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c60:	f06f 0304 	mvn.w	r3, #4
 8008c64:	647b      	str	r3, [r7, #68]	; 0x44
 8008c66:	e001      	b.n	8008c6c <LPS22HH_0_Probe+0x128>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d107      	bne.n	8008c82 <LPS22HH_0_Probe+0x13e>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <LPS22HH_0_Probe+0x13e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c7c:	f06f 0304 	mvn.w	r3, #4
 8008c80:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8008c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d107      	bne.n	8008c98 <LPS22HH_0_Probe+0x154>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f003 0308 	and.w	r3, r3, #8
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d002      	beq.n	8008c98 <LPS22HH_0_Probe+0x154>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c92:	f06f 0304 	mvn.w	r3, #4
 8008c96:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3748      	adds	r7, #72	; 0x48
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08000f45 	.word	0x08000f45
 8008ca8:	08000fc1 	.word	0x08000fc1
 8008cac:	08001075 	.word	0x08001075
 8008cb0:	08001011 	.word	0x08001011
 8008cb4:	080010d9 	.word	0x080010d9
 8008cb8:	20000d80 	.word	0x20000d80
 8008cbc:	20000d40 	.word	0x20000d40
 8008cc0:	20000cf8 	.word	0x20000cf8
 8008cc4:	20000d34 	.word	0x20000d34
 8008cc8:	200000a8 	.word	0x200000a8
 8008ccc:	2000015c 	.word	0x2000015c
 8008cd0:	20000d04 	.word	0x20000d04
 8008cd4:	200000cc 	.word	0x200000cc
 8008cd8:	200000b8 	.word	0x200000b8

08008cdc <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b092      	sub	sp, #72	; 0x48
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	647b      	str	r3, [r7, #68]	; 0x44
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8008ce8:	2300      	movs	r3, #0
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8008cec:	2395      	movs	r3, #149	; 0x95
 8008cee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008cf2:	4b46      	ldr	r3, [pc, #280]	; (8008e0c <STTS751_0_Probe+0x130>)
 8008cf4:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008cf6:	4b46      	ldr	r3, [pc, #280]	; (8008e10 <STTS751_0_Probe+0x134>)
 8008cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008cfa:	4b46      	ldr	r3, [pc, #280]	; (8008e14 <STTS751_0_Probe+0x138>)
 8008cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008cfe:	4b46      	ldr	r3, [pc, #280]	; (8008e18 <STTS751_0_Probe+0x13c>)
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008d02:	4b46      	ldr	r3, [pc, #280]	; (8008e1c <STTS751_0_Probe+0x140>)
 8008d04:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8008d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4844      	ldr	r0, [pc, #272]	; (8008e20 <STTS751_0_Probe+0x144>)
 8008d0e:	f7ff f805 	bl	8007d1c <STTS751_RegisterBusIO>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d18:	f06f 0306 	mvn.w	r3, #6
 8008d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d1e:	e070      	b.n	8008e02 <STTS751_0_Probe+0x126>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8008d20:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8008d24:	4619      	mov	r1, r3
 8008d26:	483e      	ldr	r0, [pc, #248]	; (8008e20 <STTS751_0_Probe+0x144>)
 8008d28:	f7ff f897 	bl	8007e5a <STTS751_ReadID>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d32:	f06f 0306 	mvn.w	r3, #6
 8008d36:	647b      	str	r3, [r7, #68]	; 0x44
 8008d38:	e063      	b.n	8008e02 <STTS751_0_Probe+0x126>
  }
  else if (id != STTS751_ID_MAN)
 8008d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d3e:	2b53      	cmp	r3, #83	; 0x53
 8008d40:	d003      	beq.n	8008d4a <STTS751_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d42:	f06f 0306 	mvn.w	r3, #6
 8008d46:	647b      	str	r3, [r7, #68]	; 0x44
 8008d48:	e05b      	b.n	8008e02 <STTS751_0_Probe+0x126>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8008d4a:	f107 0308 	add.w	r3, r7, #8
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4833      	ldr	r0, [pc, #204]	; (8008e20 <STTS751_0_Probe+0x144>)
 8008d52:	f7ff f89d 	bl	8007e90 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8008d56:	7a3b      	ldrb	r3, [r7, #8]
 8008d58:	461a      	mov	r2, r3
                                        | ((uint32_t)cap.Pressure << 1)
 8008d5a:	7a7b      	ldrb	r3, [r7, #9]
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Humidity << 2)
 8008d60:	7abb      	ldrb	r3, [r7, #10]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	431a      	orrs	r2, r3
                                        | ((uint32_t)cap.Gas      << 3);
 8008d66:	7afb      	ldrb	r3, [r7, #11]
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	4313      	orrs	r3, r2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature)
 8008d6c:	4a2d      	ldr	r2, [pc, #180]	; (8008e24 <STTS751_0_Probe+0x148>)
 8008d6e:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8008d70:	4b2d      	ldr	r3, [pc, #180]	; (8008e28 <STTS751_0_Probe+0x14c>)
 8008d72:	4a2b      	ldr	r2, [pc, #172]	; (8008e20 <STTS751_0_Probe+0x144>)
 8008d74:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8008d76:	4b2d      	ldr	r3, [pc, #180]	; (8008e2c <STTS751_0_Probe+0x150>)
 8008d78:	4a2d      	ldr	r2, [pc, #180]	; (8008e30 <STTS751_0_Probe+0x154>)
 8008d7a:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d11e      	bne.n	8008dc0 <STTS751_0_Probe+0xe4>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f003 0301 	and.w	r3, r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d019      	beq.n	8008dc0 <STTS751_0_Probe+0xe4>
 8008d8c:	7a3b      	ldrb	r3, [r7, #8]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d116      	bne.n	8008dc0 <STTS751_0_Probe+0xe4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8008d92:	4b28      	ldr	r3, [pc, #160]	; (8008e34 <STTS751_0_Probe+0x158>)
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	4a28      	ldr	r2, [pc, #160]	; (8008e38 <STTS751_0_Probe+0x15c>)
 8008d98:	3308      	adds	r3, #8
 8008d9a:	4928      	ldr	r1, [pc, #160]	; (8008e3c <STTS751_0_Probe+0x160>)
 8008d9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8008da0:	4b22      	ldr	r3, [pc, #136]	; (8008e2c <STTS751_0_Probe+0x150>)
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a20      	ldr	r2, [pc, #128]	; (8008e28 <STTS751_0_Probe+0x14c>)
 8008da8:	6892      	ldr	r2, [r2, #8]
 8008daa:	4610      	mov	r0, r2
 8008dac:	4798      	blx	r3
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <STTS751_0_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008db4:	f06f 0304 	mvn.w	r3, #4
 8008db8:	647b      	str	r3, [r7, #68]	; 0x44
 8008dba:	e001      	b.n	8008dc0 <STTS751_0_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d107      	bne.n	8008dd6 <STTS751_0_Probe+0xfa>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f003 0304 	and.w	r3, r3, #4
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <STTS751_0_Probe+0xfa>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008dd0:	f06f 0304 	mvn.w	r3, #4
 8008dd4:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d107      	bne.n	8008dec <STTS751_0_Probe+0x110>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <STTS751_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008de6:	f06f 0304 	mvn.w	r3, #4
 8008dea:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8008dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d107      	bne.n	8008e02 <STTS751_0_Probe+0x126>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f003 0308 	and.w	r3, r3, #8
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <STTS751_0_Probe+0x126>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008dfc:	f06f 0304 	mvn.w	r3, #4
 8008e00:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8008e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3748      	adds	r7, #72	; 0x48
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	08000f45 	.word	0x08000f45
 8008e10:	08000fc1 	.word	0x08000fc1
 8008e14:	08001075 	.word	0x08001075
 8008e18:	08001011 	.word	0x08001011
 8008e1c:	080010d9 	.word	0x080010d9
 8008e20:	20000db4 	.word	0x20000db4
 8008e24:	20000d40 	.word	0x20000d40
 8008e28:	20000cf8 	.word	0x20000cf8
 8008e2c:	20000d34 	.word	0x20000d34
 8008e30:	20000138 	.word	0x20000138
 8008e34:	2000015c 	.word	0x2000015c
 8008e38:	20000d04 	.word	0x20000d04
 8008e3c:	20000148 	.word	0x20000148

08008e40 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08e      	sub	sp, #56	; 0x38
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d06e      	beq.n	8008f3a <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	f200 809d 	bhi.w	8008f9e <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <IKS01A3_MOTION_SENSOR_Init+0x32>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d032      	beq.n	8008ed6 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8008e70:	e095      	b.n	8008f9e <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8008e72:	6838      	ldr	r0, [r7, #0]
 8008e74:	f000 f9ae 	bl	80091d4 <LSM6DSO_0_Probe>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8008e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e82:	e0cc      	b.n	800901e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008e84:	4a68      	ldr	r2, [pc, #416]	; (8009028 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	4967      	ldr	r1, [pc, #412]	; (800902c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008e96:	f107 010c 	add.w	r1, r7, #12
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	4798      	blx	r3
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008ea4:	f06f 0306 	mvn.w	r3, #6
 8008ea8:	e0b9      	b.n	800901e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008eaa:	7b3b      	ldrb	r3, [r7, #12]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d103      	bne.n	8008eb8 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	f043 0302 	orr.w	r3, r3, #2
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008eb8:	7b7b      	ldrb	r3, [r7, #13]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d103      	bne.n	8008ec6 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	f043 0301 	orr.w	r3, r3, #1
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d16c      	bne.n	8008fa6 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8008ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ece:	f043 0304 	orr.w	r3, r3, #4
 8008ed2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008ed4:	e067      	b.n	8008fa6 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8008ed6:	6838      	ldr	r0, [r7, #0]
 8008ed8:	f000 fa3c 	bl	8009354 <LIS2DW12_0_Probe>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8008ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee6:	e09a      	b.n	800901e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008ee8:	4a4f      	ldr	r2, [pc, #316]	; (8009028 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	494e      	ldr	r1, [pc, #312]	; (800902c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008efa:	f107 010c 	add.w	r1, r7, #12
 8008efe:	4610      	mov	r0, r2
 8008f00:	4798      	blx	r3
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008f08:	f06f 0306 	mvn.w	r3, #6
 8008f0c:	e087      	b.n	800901e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008f0e:	7b3b      	ldrb	r3, [r7, #12]
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d103      	bne.n	8008f1c <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	f043 0302 	orr.w	r3, r3, #2
 8008f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008f1c:	7b7b      	ldrb	r3, [r7, #13]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d103      	bne.n	8008f2a <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	f043 0301 	orr.w	r3, r3, #1
 8008f28:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d13c      	bne.n	8008faa <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8008f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f32:	f043 0304 	orr.w	r3, r3, #4
 8008f36:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008f38:	e037      	b.n	8008faa <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8008f3a:	6838      	ldr	r0, [r7, #0]
 8008f3c:	f000 fab2 	bl	80094a4 <LIS2MDL_0_Probe>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8008f46:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4a:	e068      	b.n	800901e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008f4c:	4a36      	ldr	r2, [pc, #216]	; (8009028 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	4935      	ldr	r1, [pc, #212]	; (800902c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008f5e:	f107 010c 	add.w	r1, r7, #12
 8008f62:	4610      	mov	r0, r2
 8008f64:	4798      	blx	r3
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008f6c:	f06f 0306 	mvn.w	r3, #6
 8008f70:	e055      	b.n	800901e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008f72:	7b3b      	ldrb	r3, [r7, #12]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d103      	bne.n	8008f80 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	f043 0302 	orr.w	r3, r3, #2
 8008f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8008f80:	7b7b      	ldrb	r3, [r7, #13]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d103      	bne.n	8008f8e <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	f043 0301 	orr.w	r3, r3, #1
 8008f8c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d10c      	bne.n	8008fae <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f96:	f043 0304 	orr.w	r3, r3, #4
 8008f9a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8008f9c:	e007      	b.n	8008fae <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008f9e:	f06f 0301 	mvn.w	r3, #1
 8008fa2:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8008fa4:	e004      	b.n	8008fb0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008fa6:	bf00      	nop
 8008fa8:	e002      	b.n	8008fb0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008faa:	bf00      	nop
 8008fac:	e000      	b.n	8008fb0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008fae:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb8:	e031      	b.n	800901e <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008fba:	2300      	movs	r3, #0
 8008fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fbe:	e02a      	b.n	8009016 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d11e      	bne.n	800900a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8008fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d118      	bne.n	800900a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8008fd8:	4a15      	ldr	r2, [pc, #84]	; (8009030 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8008fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fe0:	4814      	ldr	r0, [pc, #80]	; (8009034 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	4413      	add	r3, r2
 8008fea:	440b      	add	r3, r1
 8008fec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	490e      	ldr	r1, [pc, #56]	; (800902c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	4798      	blx	r3
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009004:	f06f 0304 	mvn.w	r3, #4
 8009008:	e009      	b.n	800901e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8009010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009012:	3301      	adds	r3, #1
 8009014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	2b02      	cmp	r3, #2
 800901a:	d9d1      	bls.n	8008fc0 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800901e:	4618      	mov	r0, r3
 8009020:	3738      	adds	r7, #56	; 0x38
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000e1c 	.word	0x20000e1c
 800902c:	20000dec 	.word	0x20000dec
 8009030:	20000180 	.word	0x20000180
 8009034:	20000df8 	.word	0x20000df8

08009038 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b02      	cmp	r3, #2
 8009048:	d903      	bls.n	8009052 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800904a:	f06f 0301 	mvn.w	r3, #1
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	e029      	b.n	80090a6 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009052:	4a17      	ldr	r2, [pc, #92]	; (80090b0 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	4013      	ands	r3, r2
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	429a      	cmp	r2, r3
 8009062:	d11d      	bne.n	80090a0 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8009064:	4a13      	ldr	r2, [pc, #76]	; (80090b4 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800906c:	4812      	ldr	r0, [pc, #72]	; (80090b8 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4613      	mov	r3, r2
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	4413      	add	r3, r2
 8009076:	440b      	add	r3, r1
 8009078:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	490f      	ldr	r1, [pc, #60]	; (80090bc <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	4610      	mov	r0, r2
 800908a:	4798      	blx	r3
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009092:	f06f 0304 	mvn.w	r3, #4
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e005      	b.n	80090a6 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]
 800909e:	e002      	b.n	80090a6 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80090a0:	f06f 0301 	mvn.w	r3, #1
 80090a4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80090a6:	697b      	ldr	r3, [r7, #20]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20000e28 	.word	0x20000e28
 80090b4:	20000180 	.word	0x20000180
 80090b8:	20000df8 	.word	0x20000df8
 80090bc:	20000dec 	.word	0x20000dec

080090c0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d903      	bls.n	80090dc <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80090d4:	f06f 0301 	mvn.w	r3, #1
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	e02a      	b.n	8009132 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80090dc:	4a17      	ldr	r2, [pc, #92]	; (800913c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4013      	ands	r3, r2
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d11e      	bne.n	800912c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80090ee:	4a14      	ldr	r2, [pc, #80]	; (8009140 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80090f6:	4813      	ldr	r0, [pc, #76]	; (8009144 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	4613      	mov	r3, r2
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	4413      	add	r3, r2
 8009100:	440b      	add	r3, r1
 8009102:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	490f      	ldr	r1, [pc, #60]	; (8009148 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009110:	ed97 0a01 	vldr	s0, [r7, #4]
 8009114:	4610      	mov	r0, r2
 8009116:	4798      	blx	r3
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800911e:	f06f 0304 	mvn.w	r3, #4
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	e005      	b.n	8009132 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009126:	2300      	movs	r3, #0
 8009128:	617b      	str	r3, [r7, #20]
 800912a:	e002      	b.n	8009132 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800912c:	f06f 0301 	mvn.w	r3, #1
 8009130:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009132:	697b      	ldr	r3, [r7, #20]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3718      	adds	r7, #24
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20000e28 	.word	0x20000e28
 8009140:	20000180 	.word	0x20000180
 8009144:	20000df8 	.word	0x20000df8
 8009148:	20000dec 	.word	0x20000dec

0800914c <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d903      	bls.n	8009166 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800915e:	f06f 0301 	mvn.w	r3, #1
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	e029      	b.n	80091ba <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009166:	4a17      	ldr	r2, [pc, #92]	; (80091c4 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	4013      	ands	r3, r2
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	429a      	cmp	r2, r3
 8009176:	d11d      	bne.n	80091b4 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8009178:	4a13      	ldr	r2, [pc, #76]	; (80091c8 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009180:	4812      	ldr	r0, [pc, #72]	; (80091cc <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	4613      	mov	r3, r2
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	4413      	add	r3, r2
 800918a:	440b      	add	r3, r1
 800918c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	490f      	ldr	r1, [pc, #60]	; (80091d0 <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	4610      	mov	r0, r2
 800919e:	4798      	blx	r3
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80091a6:	f06f 0304 	mvn.w	r3, #4
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	e005      	b.n	80091ba <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80091ae:	2300      	movs	r3, #0
 80091b0:	617b      	str	r3, [r7, #20]
 80091b2:	e002      	b.n	80091ba <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80091b4:	f06f 0301 	mvn.w	r3, #1
 80091b8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80091ba:	697b      	ldr	r3, [r7, #20]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	20000e28 	.word	0x20000e28
 80091c8:	20000180 	.word	0x20000180
 80091cc:	20000df8 	.word	0x20000df8
 80091d0:	20000dec 	.word	0x20000dec

080091d4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b094      	sub	sp, #80	; 0x50
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80091dc:	2300      	movs	r3, #0
 80091de:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80091e0:	2300      	movs	r3, #0
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80091e4:	23d7      	movs	r3, #215	; 0xd7
 80091e6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80091ea:	4b4b      	ldr	r3, [pc, #300]	; (8009318 <LSM6DSO_0_Probe+0x144>)
 80091ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80091ee:	4b4b      	ldr	r3, [pc, #300]	; (800931c <LSM6DSO_0_Probe+0x148>)
 80091f0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80091f2:	4b4b      	ldr	r3, [pc, #300]	; (8009320 <LSM6DSO_0_Probe+0x14c>)
 80091f4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80091f6:	4b4b      	ldr	r3, [pc, #300]	; (8009324 <LSM6DSO_0_Probe+0x150>)
 80091f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80091fa:	4b4b      	ldr	r3, [pc, #300]	; (8009328 <LSM6DSO_0_Probe+0x154>)
 80091fc:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80091fe:	4b4b      	ldr	r3, [pc, #300]	; (800932c <LSM6DSO_0_Probe+0x158>)
 8009200:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8009202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009206:	4619      	mov	r1, r3
 8009208:	4849      	ldr	r0, [pc, #292]	; (8009330 <LSM6DSO_0_Probe+0x15c>)
 800920a:	f7fc fda7 	bl	8005d5c <LSM6DSO_RegisterBusIO>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009214:	f06f 0306 	mvn.w	r3, #6
 8009218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800921a:	e077      	b.n	800930c <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800921c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009220:	4619      	mov	r1, r3
 8009222:	4843      	ldr	r0, [pc, #268]	; (8009330 <LSM6DSO_0_Probe+0x15c>)
 8009224:	f7fc fea4 	bl	8005f70 <LSM6DSO_ReadID>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800922e:	f06f 0306 	mvn.w	r3, #6
 8009232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009234:	e06a      	b.n	800930c <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8009236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800923a:	2b6c      	cmp	r3, #108	; 0x6c
 800923c:	d003      	beq.n	8009246 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800923e:	f06f 0306 	mvn.w	r3, #6
 8009242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009244:	e062      	b.n	800930c <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8009246:	f107 030c 	add.w	r3, r7, #12
 800924a:	4619      	mov	r1, r3
 800924c:	4838      	ldr	r0, [pc, #224]	; (8009330 <LSM6DSO_0_Probe+0x15c>)
 800924e:	f7fc fea5 	bl	8005f9c <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009252:	7b7b      	ldrb	r3, [r7, #13]
 8009254:	461a      	mov	r2, r3
 8009256:	7b3b      	ldrb	r3, [r7, #12]
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	431a      	orrs	r2, r3
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4313      	orrs	r3, r2
 8009262:	4a34      	ldr	r2, [pc, #208]	; (8009334 <LSM6DSO_0_Probe+0x160>)
 8009264:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8009266:	4b34      	ldr	r3, [pc, #208]	; (8009338 <LSM6DSO_0_Probe+0x164>)
 8009268:	4a31      	ldr	r2, [pc, #196]	; (8009330 <LSM6DSO_0_Probe+0x15c>)
 800926a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800926c:	4b33      	ldr	r3, [pc, #204]	; (800933c <LSM6DSO_0_Probe+0x168>)
 800926e:	4a34      	ldr	r2, [pc, #208]	; (8009340 <LSM6DSO_0_Probe+0x16c>)
 8009270:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8009272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d11d      	bne.n	80092b4 <LSM6DSO_0_Probe+0xe0>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	d018      	beq.n	80092b4 <LSM6DSO_0_Probe+0xe0>
 8009282:	7b7b      	ldrb	r3, [r7, #13]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d115      	bne.n	80092b4 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8009288:	4b2e      	ldr	r3, [pc, #184]	; (8009344 <LSM6DSO_0_Probe+0x170>)
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	4a2e      	ldr	r2, [pc, #184]	; (8009348 <LSM6DSO_0_Probe+0x174>)
 800928e:	492f      	ldr	r1, [pc, #188]	; (800934c <LSM6DSO_0_Probe+0x178>)
 8009290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009294:	4b29      	ldr	r3, [pc, #164]	; (800933c <LSM6DSO_0_Probe+0x168>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a27      	ldr	r2, [pc, #156]	; (8009338 <LSM6DSO_0_Probe+0x164>)
 800929c:	6812      	ldr	r2, [r2, #0]
 800929e:	4610      	mov	r0, r2
 80092a0:	4798      	blx	r3
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80092a8:	f06f 0304 	mvn.w	r3, #4
 80092ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ae:	e001      	b.n	80092b4 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80092b0:	2300      	movs	r3, #0
 80092b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80092b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d11d      	bne.n	80092f6 <LSM6DSO_0_Probe+0x122>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d018      	beq.n	80092f6 <LSM6DSO_0_Probe+0x122>
 80092c4:	7b3b      	ldrb	r3, [r7, #12]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d115      	bne.n	80092f6 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80092ca:	4b1e      	ldr	r3, [pc, #120]	; (8009344 <LSM6DSO_0_Probe+0x170>)
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	4a1e      	ldr	r2, [pc, #120]	; (8009348 <LSM6DSO_0_Probe+0x174>)
 80092d0:	491f      	ldr	r1, [pc, #124]	; (8009350 <LSM6DSO_0_Probe+0x17c>)
 80092d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80092d6:	4b19      	ldr	r3, [pc, #100]	; (800933c <LSM6DSO_0_Probe+0x168>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a16      	ldr	r2, [pc, #88]	; (8009338 <LSM6DSO_0_Probe+0x164>)
 80092de:	6812      	ldr	r2, [r2, #0]
 80092e0:	4610      	mov	r0, r2
 80092e2:	4798      	blx	r3
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80092ea:	f06f 0304 	mvn.w	r3, #4
 80092ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092f0:	e001      	b.n	80092f6 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80092f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d107      	bne.n	800930c <LSM6DSO_0_Probe+0x138>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f003 0304 	and.w	r3, r3, #4
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009306:	f06f 0304 	mvn.w	r3, #4
 800930a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800930c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800930e:	4618      	mov	r0, r3
 8009310:	3750      	adds	r7, #80	; 0x50
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	08000f45 	.word	0x08000f45
 800931c:	08000fc1 	.word	0x08000fc1
 8009320:	08001075 	.word	0x08001075
 8009324:	08001011 	.word	0x08001011
 8009328:	080010d9 	.word	0x080010d9
 800932c:	08009b45 	.word	0x08009b45
 8009330:	20000e34 	.word	0x20000e34
 8009334:	20000e28 	.word	0x20000e28
 8009338:	20000dec 	.word	0x20000dec
 800933c:	20000e1c 	.word	0x20000e1c
 8009340:	200000e0 	.word	0x200000e0
 8009344:	20000180 	.word	0x20000180
 8009348:	20000df8 	.word	0x20000df8
 800934c:	20000114 	.word	0x20000114
 8009350:	200000f0 	.word	0x200000f0

08009354 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b094      	sub	sp, #80	; 0x50
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800935c:	2300      	movs	r3, #0
 800935e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009360:	2300      	movs	r3, #0
 8009362:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009364:	2333      	movs	r3, #51	; 0x33
 8009366:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800936a:	4b40      	ldr	r3, [pc, #256]	; (800946c <LIS2DW12_0_Probe+0x118>)
 800936c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800936e:	4b40      	ldr	r3, [pc, #256]	; (8009470 <LIS2DW12_0_Probe+0x11c>)
 8009370:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009372:	4b40      	ldr	r3, [pc, #256]	; (8009474 <LIS2DW12_0_Probe+0x120>)
 8009374:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009376:	4b40      	ldr	r3, [pc, #256]	; (8009478 <LIS2DW12_0_Probe+0x124>)
 8009378:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800937a:	4b40      	ldr	r3, [pc, #256]	; (800947c <LIS2DW12_0_Probe+0x128>)
 800937c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800937e:	4b40      	ldr	r3, [pc, #256]	; (8009480 <LIS2DW12_0_Probe+0x12c>)
 8009380:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009382:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009386:	4619      	mov	r1, r3
 8009388:	483e      	ldr	r0, [pc, #248]	; (8009484 <LIS2DW12_0_Probe+0x130>)
 800938a:	f7f9 fbed 	bl	8002b68 <LIS2DW12_RegisterBusIO>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009394:	f06f 0306 	mvn.w	r3, #6
 8009398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800939a:	e062      	b.n	8009462 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800939c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80093a0:	4619      	mov	r1, r3
 80093a2:	4838      	ldr	r0, [pc, #224]	; (8009484 <LIS2DW12_0_Probe+0x130>)
 80093a4:	f7f9 fcce 	bl	8002d44 <LIS2DW12_ReadID>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093ae:	f06f 0306 	mvn.w	r3, #6
 80093b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093b4:	e055      	b.n	8009462 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 80093b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093ba:	2b44      	cmp	r3, #68	; 0x44
 80093bc:	d003      	beq.n	80093c6 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80093be:	f06f 0306 	mvn.w	r3, #6
 80093c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093c4:	e04d      	b.n	8009462 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 80093c6:	f107 030c 	add.w	r3, r7, #12
 80093ca:	4619      	mov	r1, r3
 80093cc:	482d      	ldr	r0, [pc, #180]	; (8009484 <LIS2DW12_0_Probe+0x130>)
 80093ce:	f7f9 fccf 	bl	8002d70 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80093d2:	7b7b      	ldrb	r3, [r7, #13]
 80093d4:	461a      	mov	r2, r3
 80093d6:	7b3b      	ldrb	r3, [r7, #12]
 80093d8:	005b      	lsls	r3, r3, #1
 80093da:	431a      	orrs	r2, r3
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4313      	orrs	r3, r2
 80093e2:	4a29      	ldr	r2, [pc, #164]	; (8009488 <LIS2DW12_0_Probe+0x134>)
 80093e4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80093e6:	4b29      	ldr	r3, [pc, #164]	; (800948c <LIS2DW12_0_Probe+0x138>)
 80093e8:	4a26      	ldr	r2, [pc, #152]	; (8009484 <LIS2DW12_0_Probe+0x130>)
 80093ea:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80093ec:	4b28      	ldr	r3, [pc, #160]	; (8009490 <LIS2DW12_0_Probe+0x13c>)
 80093ee:	4a29      	ldr	r2, [pc, #164]	; (8009494 <LIS2DW12_0_Probe+0x140>)
 80093f0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80093f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d11e      	bne.n	8009436 <LIS2DW12_0_Probe+0xe2>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d019      	beq.n	8009436 <LIS2DW12_0_Probe+0xe2>
 8009402:	7b3b      	ldrb	r3, [r7, #12]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d116      	bne.n	8009436 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009408:	4b23      	ldr	r3, [pc, #140]	; (8009498 <LIS2DW12_0_Probe+0x144>)
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	4a23      	ldr	r2, [pc, #140]	; (800949c <LIS2DW12_0_Probe+0x148>)
 800940e:	3303      	adds	r3, #3
 8009410:	4923      	ldr	r1, [pc, #140]	; (80094a0 <LIS2DW12_0_Probe+0x14c>)
 8009412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8009416:	4b1e      	ldr	r3, [pc, #120]	; (8009490 <LIS2DW12_0_Probe+0x13c>)
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a1b      	ldr	r2, [pc, #108]	; (800948c <LIS2DW12_0_Probe+0x138>)
 800941e:	6852      	ldr	r2, [r2, #4]
 8009420:	4610      	mov	r0, r2
 8009422:	4798      	blx	r3
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800942a:	f06f 0304 	mvn.w	r3, #4
 800942e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009430:	e001      	b.n	8009436 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009432:	2300      	movs	r3, #0
 8009434:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009438:	2b00      	cmp	r3, #0
 800943a:	d107      	bne.n	800944c <LIS2DW12_0_Probe+0xf8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009446:	f06f 0304 	mvn.w	r3, #4
 800944a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800944c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d107      	bne.n	8009462 <LIS2DW12_0_Probe+0x10e>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b00      	cmp	r3, #0
 800945a:	d002      	beq.n	8009462 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800945c:	f06f 0304 	mvn.w	r3, #4
 8009460:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009464:	4618      	mov	r0, r3
 8009466:	3750      	adds	r7, #80	; 0x50
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	08000f45 	.word	0x08000f45
 8009470:	08000fc1 	.word	0x08000fc1
 8009474:	08001075 	.word	0x08001075
 8009478:	08001011 	.word	0x08001011
 800947c:	080010d9 	.word	0x080010d9
 8009480:	08009b45 	.word	0x08009b45
 8009484:	20000e6c 	.word	0x20000e6c
 8009488:	20000e28 	.word	0x20000e28
 800948c:	20000dec 	.word	0x20000dec
 8009490:	20000e1c 	.word	0x20000e1c
 8009494:	20000040 	.word	0x20000040
 8009498:	20000180 	.word	0x20000180
 800949c:	20000df8 	.word	0x20000df8
 80094a0:	20000050 	.word	0x20000050

080094a4 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b094      	sub	sp, #80	; 0x50
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 80094b0:	2300      	movs	r3, #0
 80094b2:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 80094b4:	233d      	movs	r3, #61	; 0x3d
 80094b6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80094ba:	4b40      	ldr	r3, [pc, #256]	; (80095bc <LIS2MDL_0_Probe+0x118>)
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80094be:	4b40      	ldr	r3, [pc, #256]	; (80095c0 <LIS2MDL_0_Probe+0x11c>)
 80094c0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80094c2:	4b40      	ldr	r3, [pc, #256]	; (80095c4 <LIS2MDL_0_Probe+0x120>)
 80094c4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80094c6:	4b40      	ldr	r3, [pc, #256]	; (80095c8 <LIS2MDL_0_Probe+0x124>)
 80094c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80094ca:	4b40      	ldr	r3, [pc, #256]	; (80095cc <LIS2MDL_0_Probe+0x128>)
 80094cc:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80094ce:	4b40      	ldr	r3, [pc, #256]	; (80095d0 <LIS2MDL_0_Probe+0x12c>)
 80094d0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80094d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094d6:	4619      	mov	r1, r3
 80094d8:	483e      	ldr	r0, [pc, #248]	; (80095d4 <LIS2MDL_0_Probe+0x130>)
 80094da:	f7fa fdd3 	bl	8004084 <LIS2MDL_RegisterBusIO>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d003      	beq.n	80094ec <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094e4:	f06f 0306 	mvn.w	r3, #6
 80094e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ea:	e062      	b.n	80095b2 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80094ec:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80094f0:	4619      	mov	r1, r3
 80094f2:	4838      	ldr	r0, [pc, #224]	; (80095d4 <LIS2MDL_0_Probe+0x130>)
 80094f4:	f7fa fee2 	bl	80042bc <LIS2MDL_ReadID>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094fe:	f06f 0306 	mvn.w	r3, #6
 8009502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009504:	e055      	b.n	80095b2 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8009506:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800950a:	2b40      	cmp	r3, #64	; 0x40
 800950c:	d003      	beq.n	8009516 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800950e:	f06f 0306 	mvn.w	r3, #6
 8009512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009514:	e04d      	b.n	80095b2 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8009516:	f107 030c 	add.w	r3, r7, #12
 800951a:	4619      	mov	r1, r3
 800951c:	482d      	ldr	r0, [pc, #180]	; (80095d4 <LIS2MDL_0_Probe+0x130>)
 800951e:	f7fa fef3 	bl	8004308 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009522:	7b7b      	ldrb	r3, [r7, #13]
 8009524:	461a      	mov	r2, r3
 8009526:	7b3b      	ldrb	r3, [r7, #12]
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	431a      	orrs	r2, r3
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4313      	orrs	r3, r2
 8009532:	4a29      	ldr	r2, [pc, #164]	; (80095d8 <LIS2MDL_0_Probe+0x134>)
 8009534:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8009536:	4b29      	ldr	r3, [pc, #164]	; (80095dc <LIS2MDL_0_Probe+0x138>)
 8009538:	4a26      	ldr	r2, [pc, #152]	; (80095d4 <LIS2MDL_0_Probe+0x130>)
 800953a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800953c:	4b28      	ldr	r3, [pc, #160]	; (80095e0 <LIS2MDL_0_Probe+0x13c>)
 800953e:	4a29      	ldr	r2, [pc, #164]	; (80095e4 <LIS2MDL_0_Probe+0x140>)
 8009540:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d11e      	bne.n	8009586 <LIS2MDL_0_Probe+0xe2>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	d019      	beq.n	8009586 <LIS2MDL_0_Probe+0xe2>
 8009552:	7bbb      	ldrb	r3, [r7, #14]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d116      	bne.n	8009586 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009558:	4b23      	ldr	r3, [pc, #140]	; (80095e8 <LIS2MDL_0_Probe+0x144>)
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	4a23      	ldr	r2, [pc, #140]	; (80095ec <LIS2MDL_0_Probe+0x148>)
 800955e:	3306      	adds	r3, #6
 8009560:	4923      	ldr	r1, [pc, #140]	; (80095f0 <LIS2MDL_0_Probe+0x14c>)
 8009562:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009566:	4b1e      	ldr	r3, [pc, #120]	; (80095e0 <LIS2MDL_0_Probe+0x13c>)
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a1b      	ldr	r2, [pc, #108]	; (80095dc <LIS2MDL_0_Probe+0x138>)
 800956e:	6892      	ldr	r2, [r2, #8]
 8009570:	4610      	mov	r0, r2
 8009572:	4798      	blx	r3
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800957a:	f06f 0304 	mvn.w	r3, #4
 800957e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009580:	e001      	b.n	8009586 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009582:	2300      	movs	r3, #0
 8009584:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009588:	2b00      	cmp	r3, #0
 800958a:	d107      	bne.n	800959c <LIS2MDL_0_Probe+0xf8>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009596:	f06f 0304 	mvn.w	r3, #4
 800959a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800959c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d107      	bne.n	80095b2 <LIS2MDL_0_Probe+0x10e>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80095ac:	f06f 0304 	mvn.w	r3, #4
 80095b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80095b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3750      	adds	r7, #80	; 0x50
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	08000f45 	.word	0x08000f45
 80095c0:	08000fc1 	.word	0x08000fc1
 80095c4:	08001075 	.word	0x08001075
 80095c8:	08001011 	.word	0x08001011
 80095cc:	080010d9 	.word	0x080010d9
 80095d0:	08009b45 	.word	0x08009b45
 80095d4:	20000ea8 	.word	0x20000ea8
 80095d8:	20000e28 	.word	0x20000e28
 80095dc:	20000dec 	.word	0x20000dec
 80095e0:	20000e1c 	.word	0x20000e1c
 80095e4:	20000074 	.word	0x20000074
 80095e8:	20000180 	.word	0x20000180
 80095ec:	20000df8 	.word	0x20000df8
 80095f0:	20000084 	.word	0x20000084

080095f4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80095fe:	79fb      	ldrb	r3, [r7, #7]
 8009600:	4a04      	ldr	r2, [pc, #16]	; (8009614 <BSP_LED_Init+0x20>)
 8009602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009606:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3708      	adds	r7, #8
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	0801ec28 	.word	0x0801ec28

08009618 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8009622:	79fb      	ldrb	r3, [r7, #7]
 8009624:	4a06      	ldr	r2, [pc, #24]	; (8009640 <BSP_LED_On+0x28>)
 8009626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800962a:	2120      	movs	r1, #32
 800962c:	2201      	movs	r2, #1
 800962e:	4618      	mov	r0, r3
 8009630:	f001 f8d4 	bl	800a7dc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	20000194 	.word	0x20000194

08009644 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	4a06      	ldr	r2, [pc, #24]	; (800966c <BSP_LED_Off+0x28>)
 8009652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009656:	2120      	movs	r1, #32
 8009658:	2200      	movs	r2, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f001 f8be 	bl	800a7dc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20000194 	.word	0x20000194

08009670 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009676:	4b1c      	ldr	r3, [pc, #112]	; (80096e8 <LED_USER_GPIO_Init+0x78>)
 8009678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967a:	4a1b      	ldr	r2, [pc, #108]	; (80096e8 <LED_USER_GPIO_Init+0x78>)
 800967c:	f043 0301 	orr.w	r3, r3, #1
 8009680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009682:	4b19      	ldr	r3, [pc, #100]	; (80096e8 <LED_USER_GPIO_Init+0x78>)
 8009684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	60bb      	str	r3, [r7, #8]
 800968c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800968e:	f107 030c 	add.w	r3, r7, #12
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	605a      	str	r2, [r3, #4]
 8009698:	609a      	str	r2, [r3, #8]
 800969a:	60da      	str	r2, [r3, #12]
 800969c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800969e:	4b12      	ldr	r3, [pc, #72]	; (80096e8 <LED_USER_GPIO_Init+0x78>)
 80096a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a2:	4a11      	ldr	r2, [pc, #68]	; (80096e8 <LED_USER_GPIO_Init+0x78>)
 80096a4:	f043 0301 	orr.w	r3, r3, #1
 80096a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80096aa:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <LED_USER_GPIO_Init+0x78>)
 80096ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	607b      	str	r3, [r7, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80096b6:	2200      	movs	r2, #0
 80096b8:	2120      	movs	r1, #32
 80096ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096be:	f001 f88d 	bl	800a7dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80096c2:	2320      	movs	r3, #32
 80096c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096c6:	2301      	movs	r3, #1
 80096c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096ce:	2300      	movs	r3, #0
 80096d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80096d2:	f107 030c 	add.w	r3, r7, #12
 80096d6:	4619      	mov	r1, r3
 80096d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096dc:	f000 fdc8 	bl	800a270 <HAL_GPIO_Init>

}
 80096e0:	bf00      	nop
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	40021000 	.word	0x40021000

080096ec <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	460a      	mov	r2, r1
 80096f6:	71fb      	strb	r3, [r7, #7]
 80096f8:	4613      	mov	r3, r2
 80096fa:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80096fc:	2300      	movs	r3, #0
 80096fe:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	4a1f      	ldr	r2, [pc, #124]	; (8009780 <BSP_PB_Init+0x94>)
 8009704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009708:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800970a:	79bb      	ldrb	r3, [r7, #6]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d132      	bne.n	8009776 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	4a1b      	ldr	r2, [pc, #108]	; (8009784 <BSP_PB_Init+0x98>)
 8009716:	441a      	add	r2, r3
 8009718:	79fb      	ldrb	r3, [r7, #7]
 800971a:	491b      	ldr	r1, [pc, #108]	; (8009788 <BSP_PB_Init+0x9c>)
 800971c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f000 fd5f 	bl	800a1e6 <HAL_EXTI_GetHandle>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d003      	beq.n	8009736 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800972e:	f06f 0303 	mvn.w	r3, #3
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	e01f      	b.n	8009776 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	00db      	lsls	r3, r3, #3
 800973a:	4a12      	ldr	r2, [pc, #72]	; (8009784 <BSP_PB_Init+0x98>)
 800973c:	1898      	adds	r0, r3, r2
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	4a12      	ldr	r2, [pc, #72]	; (800978c <BSP_PB_Init+0xa0>)
 8009742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009746:	461a      	mov	r2, r3
 8009748:	2100      	movs	r1, #0
 800974a:	f000 fd32 	bl	800a1b2 <HAL_EXTI_RegisterCallback>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009754:	f06f 0303 	mvn.w	r3, #3
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	e00c      	b.n	8009776 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800975c:	2028      	movs	r0, #40	; 0x28
 800975e:	79fb      	ldrb	r3, [r7, #7]
 8009760:	4a0b      	ldr	r2, [pc, #44]	; (8009790 <BSP_PB_Init+0xa4>)
 8009762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009766:	2200      	movs	r2, #0
 8009768:	4619      	mov	r1, r3
 800976a:	f000 faea 	bl	8009d42 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800976e:	2328      	movs	r3, #40	; 0x28
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fb02 	bl	8009d7a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8009776:	68fb      	ldr	r3, [r7, #12]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	0801ec2c 	.word	0x0801ec2c
 8009784:	2000019c 	.word	0x2000019c
 8009788:	0801ec30 	.word	0x0801ec30
 800978c:	0801ec34 	.word	0x0801ec34
 8009790:	0801ec38 	.word	0x0801ec38

08009794 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	4a09      	ldr	r2, [pc, #36]	; (80097c8 <BSP_PB_GetState+0x34>)
 80097a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80097aa:	4611      	mov	r1, r2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fffd 	bl	800a7ac <HAL_GPIO_ReadPin>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	bf0c      	ite	eq
 80097b8:	2301      	moveq	r3, #1
 80097ba:	2300      	movne	r3, #0
 80097bc:	b2db      	uxtb	r3, r3
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	20000198 	.word	0x20000198

080097cc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80097d0:	2000      	movs	r0, #0
 80097d2:	f006 fa37 	bl	800fc44 <BSP_PB_Callback>
}
 80097d6:	bf00      	nop
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80097e2:	4b19      	ldr	r3, [pc, #100]	; (8009848 <BUTTON_USER_GPIO_Init+0x6c>)
 80097e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097e6:	4a18      	ldr	r2, [pc, #96]	; (8009848 <BUTTON_USER_GPIO_Init+0x6c>)
 80097e8:	f043 0304 	orr.w	r3, r3, #4
 80097ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097ee:	4b16      	ldr	r3, [pc, #88]	; (8009848 <BUTTON_USER_GPIO_Init+0x6c>)
 80097f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	60bb      	str	r3, [r7, #8]
 80097f8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097fa:	f107 030c 	add.w	r3, r7, #12
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	605a      	str	r2, [r3, #4]
 8009804:	609a      	str	r2, [r3, #8]
 8009806:	60da      	str	r2, [r3, #12]
 8009808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800980a:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <BUTTON_USER_GPIO_Init+0x6c>)
 800980c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800980e:	4a0e      	ldr	r2, [pc, #56]	; (8009848 <BUTTON_USER_GPIO_Init+0x6c>)
 8009810:	f043 0304 	orr.w	r3, r3, #4
 8009814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009816:	4b0c      	ldr	r3, [pc, #48]	; (8009848 <BUTTON_USER_GPIO_Init+0x6c>)
 8009818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	607b      	str	r3, [r7, #4]
 8009820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8009822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009828:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800982c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800982e:	2300      	movs	r3, #0
 8009830:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8009832:	f107 030c 	add.w	r3, r7, #12
 8009836:	4619      	mov	r1, r3
 8009838:	4804      	ldr	r0, [pc, #16]	; (800984c <BUTTON_USER_GPIO_Init+0x70>)
 800983a:	f000 fd19 	bl	800a270 <HAL_GPIO_Init>

}
 800983e:	bf00      	nop
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	40021000 	.word	0x40021000
 800984c:	48000800 	.word	0x48000800

08009850 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800985e:	79fb      	ldrb	r3, [r7, #7]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d903      	bls.n	800986c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009864:	f06f 0301 	mvn.w	r3, #1
 8009868:	60fb      	str	r3, [r7, #12]
 800986a:	e025      	b.n	80098b8 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	79fa      	ldrb	r2, [r7, #7]
 8009870:	4914      	ldr	r1, [pc, #80]	; (80098c4 <BSP_COM_Init+0x74>)
 8009872:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009876:	4814      	ldr	r0, [pc, #80]	; (80098c8 <BSP_COM_Init+0x78>)
 8009878:	4613      	mov	r3, r2
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	4413      	add	r3, r2
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	4403      	add	r3, r0
 8009882:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8009884:	79fa      	ldrb	r2, [r7, #7]
 8009886:	4613      	mov	r3, r2
 8009888:	011b      	lsls	r3, r3, #4
 800988a:	4413      	add	r3, r2
 800988c:	00db      	lsls	r3, r3, #3
 800988e:	4a0e      	ldr	r2, [pc, #56]	; (80098c8 <BSP_COM_Init+0x78>)
 8009890:	4413      	add	r3, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f000 f87c 	bl	8009990 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8009898:	79fa      	ldrb	r2, [r7, #7]
 800989a:	4613      	mov	r3, r2
 800989c:	011b      	lsls	r3, r3, #4
 800989e:	4413      	add	r3, r2
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	4a09      	ldr	r2, [pc, #36]	; (80098c8 <BSP_COM_Init+0x78>)
 80098a4:	4413      	add	r3, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 f810 	bl	80098cc <MX_USART2_UART_Init>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80098b2:	f06f 0303 	mvn.w	r3, #3
 80098b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80098b8:	68fb      	ldr	r3, [r7, #12]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200001a4 	.word	0x200001a4
 80098c8:	20000edc 	.word	0x20000edc

080098cc <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a17      	ldr	r2, [pc, #92]	; (8009938 <MX_USART2_UART_Init+0x6c>)
 80098dc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80098e4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	220c      	movs	r2, #12
 80098fc:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2210      	movs	r2, #16
 8009914:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800991c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(huart) != HAL_OK)
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f004 f874 	bl	800da0c <HAL_UART_Init>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <MX_USART2_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	40004400 	.word	0x40004400

0800993c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b0a      	cmp	r3, #10
 8009948:	d109      	bne.n	800995e <__io_putchar+0x22>
		uint8_t ch2 = '\r';
 800994a:	230d      	movs	r3, #13
 800994c:	73fb      	strb	r3, [r7, #15]
		(void)HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800994e:	f107 010f 	add.w	r1, r7, #15
 8009952:	f04f 33ff 	mov.w	r3, #4294967295
 8009956:	2201      	movs	r2, #1
 8009958:	480b      	ldr	r0, [pc, #44]	; (8009988 <__io_putchar+0x4c>)
 800995a:	f004 f8af 	bl	800dabc <HAL_UART_Transmit>
	}
	(void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800995e:	4b0b      	ldr	r3, [pc, #44]	; (800998c <__io_putchar+0x50>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	4613      	mov	r3, r2
 8009966:	011b      	lsls	r3, r3, #4
 8009968:	4413      	add	r3, r2
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	4a06      	ldr	r2, [pc, #24]	; (8009988 <__io_putchar+0x4c>)
 800996e:	1898      	adds	r0, r3, r2
 8009970:	1d39      	adds	r1, r7, #4
 8009972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009976:	2201      	movs	r2, #1
 8009978:	f004 f8a0 	bl	800dabc <HAL_UART_Transmit>
	return ch;
 800997c:	687b      	ldr	r3, [r7, #4]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20000edc 	.word	0x20000edc
 800998c:	20000f64 	.word	0x20000f64

08009990 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b0ac      	sub	sp, #176	; 0xb0
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009998:	f107 0314 	add.w	r3, r7, #20
 800999c:	2288      	movs	r2, #136	; 0x88
 800999e:	2100      	movs	r1, #0
 80099a0:	4618      	mov	r0, r3
 80099a2:	f011 f8f2 	bl	801ab8a <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80099a6:	2302      	movs	r3, #2
 80099a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80099aa:	2300      	movs	r3, #0
 80099ac:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80099ae:	f107 0314 	add.w	r3, r7, #20
 80099b2:	4618      	mov	r0, r3
 80099b4:	f002 fc14 	bl	800c1e0 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80099b8:	4b27      	ldr	r3, [pc, #156]	; (8009a58 <USART2_MspInit+0xc8>)
 80099ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099bc:	4a26      	ldr	r2, [pc, #152]	; (8009a58 <USART2_MspInit+0xc8>)
 80099be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c2:	6593      	str	r3, [r2, #88]	; 0x58
 80099c4:	4b24      	ldr	r3, [pc, #144]	; (8009a58 <USART2_MspInit+0xc8>)
 80099c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099cc:	613b      	str	r3, [r7, #16]
 80099ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099d0:	4b21      	ldr	r3, [pc, #132]	; (8009a58 <USART2_MspInit+0xc8>)
 80099d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d4:	4a20      	ldr	r2, [pc, #128]	; (8009a58 <USART2_MspInit+0xc8>)
 80099d6:	f043 0301 	orr.w	r3, r3, #1
 80099da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099dc:	4b1e      	ldr	r3, [pc, #120]	; (8009a58 <USART2_MspInit+0xc8>)
 80099de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80099e8:	2304      	movs	r3, #4
 80099ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099ee:	2302      	movs	r3, #2
 80099f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099f4:	2300      	movs	r3, #0
 80099f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099fa:	2303      	movs	r3, #3
 80099fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8009a00:	2307      	movs	r3, #7
 8009a02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8009a06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a10:	f000 fc2e 	bl	800a270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8009a14:	2308      	movs	r3, #8
 8009a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a26:	2303      	movs	r3, #3
 8009a28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8009a2c:	2307      	movs	r3, #7
 8009a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8009a32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009a36:	4619      	mov	r1, r3
 8009a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a3c:	f000 fc18 	bl	800a270 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8009a40:	2200      	movs	r2, #0
 8009a42:	2103      	movs	r1, #3
 8009a44:	2026      	movs	r0, #38	; 0x26
 8009a46:	f000 f97c 	bl	8009d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009a4a:	2026      	movs	r0, #38	; 0x26
 8009a4c:	f000 f995 	bl	8009d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8009a50:	bf00      	nop
 8009a52:	37b0      	adds	r7, #176	; 0xb0
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	40021000 	.word	0x40021000

08009a5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009a66:	2003      	movs	r0, #3
 8009a68:	f000 f960 	bl	8009d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f000 f80d 	bl	8009a8c <HAL_InitTick>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	71fb      	strb	r3, [r7, #7]
 8009a7c:	e001      	b.n	8009a82 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009a7e:	f7f8 f80b 	bl	8001a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009a82:	79fb      	ldrb	r3, [r7, #7]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009a98:	4b17      	ldr	r3, [pc, #92]	; (8009af8 <HAL_InitTick+0x6c>)
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d023      	beq.n	8009ae8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009aa0:	4b16      	ldr	r3, [pc, #88]	; (8009afc <HAL_InitTick+0x70>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	4b14      	ldr	r3, [pc, #80]	; (8009af8 <HAL_InitTick+0x6c>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f96d 	bl	8009d96 <HAL_SYSTICK_Config>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10f      	bne.n	8009ae2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b0f      	cmp	r3, #15
 8009ac6:	d809      	bhi.n	8009adc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ac8:	2200      	movs	r2, #0
 8009aca:	6879      	ldr	r1, [r7, #4]
 8009acc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad0:	f000 f937 	bl	8009d42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009ad4:	4a0a      	ldr	r2, [pc, #40]	; (8009b00 <HAL_InitTick+0x74>)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	e007      	b.n	8009aec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	73fb      	strb	r3, [r7, #15]
 8009ae0:	e004      	b.n	8009aec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	73fb      	strb	r3, [r7, #15]
 8009ae6:	e001      	b.n	8009aec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	200001ac 	.word	0x200001ac
 8009afc:	20000004 	.word	0x20000004
 8009b00:	200001a8 	.word	0x200001a8

08009b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009b08:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <HAL_IncTick+0x20>)
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <HAL_IncTick+0x24>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4413      	add	r3, r2
 8009b14:	4a04      	ldr	r2, [pc, #16]	; (8009b28 <HAL_IncTick+0x24>)
 8009b16:	6013      	str	r3, [r2, #0]
}
 8009b18:	bf00      	nop
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	200001ac 	.word	0x200001ac
 8009b28:	20000f68 	.word	0x20000f68

08009b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8009b30:	4b03      	ldr	r3, [pc, #12]	; (8009b40 <HAL_GetTick+0x14>)
 8009b32:	681b      	ldr	r3, [r3, #0]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	20000f68 	.word	0x20000f68

08009b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009b4c:	f7ff ffee 	bl	8009b2c <HAL_GetTick>
 8009b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5c:	d005      	beq.n	8009b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009b5e:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <HAL_Delay+0x44>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4413      	add	r3, r2
 8009b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009b6a:	bf00      	nop
 8009b6c:	f7ff ffde 	bl	8009b2c <HAL_GetTick>
 8009b70:	4602      	mov	r2, r0
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d8f7      	bhi.n	8009b6c <HAL_Delay+0x28>
  {
  }
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	200001ac 	.word	0x200001ac

08009b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b085      	sub	sp, #20
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b9c:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009ba8:	4013      	ands	r3, r2
 8009baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009bbe:	4a04      	ldr	r2, [pc, #16]	; (8009bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	60d3      	str	r3, [r2, #12]
}
 8009bc4:	bf00      	nop
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	e000ed00 	.word	0xe000ed00

08009bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009bd8:	4b04      	ldr	r3, [pc, #16]	; (8009bec <__NVIC_GetPriorityGrouping+0x18>)
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	0a1b      	lsrs	r3, r3, #8
 8009bde:	f003 0307 	and.w	r3, r3, #7
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	e000ed00 	.word	0xe000ed00

08009bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	db0b      	blt.n	8009c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	f003 021f 	and.w	r2, r3, #31
 8009c08:	4907      	ldr	r1, [pc, #28]	; (8009c28 <__NVIC_EnableIRQ+0x38>)
 8009c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c0e:	095b      	lsrs	r3, r3, #5
 8009c10:	2001      	movs	r0, #1
 8009c12:	fa00 f202 	lsl.w	r2, r0, r2
 8009c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009c1a:	bf00      	nop
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	e000e100 	.word	0xe000e100

08009c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	6039      	str	r1, [r7, #0]
 8009c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	db0a      	blt.n	8009c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	490c      	ldr	r1, [pc, #48]	; (8009c78 <__NVIC_SetPriority+0x4c>)
 8009c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c4a:	0112      	lsls	r2, r2, #4
 8009c4c:	b2d2      	uxtb	r2, r2
 8009c4e:	440b      	add	r3, r1
 8009c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009c54:	e00a      	b.n	8009c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	4908      	ldr	r1, [pc, #32]	; (8009c7c <__NVIC_SetPriority+0x50>)
 8009c5c:	79fb      	ldrb	r3, [r7, #7]
 8009c5e:	f003 030f 	and.w	r3, r3, #15
 8009c62:	3b04      	subs	r3, #4
 8009c64:	0112      	lsls	r2, r2, #4
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	440b      	add	r3, r1
 8009c6a:	761a      	strb	r2, [r3, #24]
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	e000e100 	.word	0xe000e100
 8009c7c:	e000ed00 	.word	0xe000ed00

08009c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b089      	sub	sp, #36	; 0x24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f003 0307 	and.w	r3, r3, #7
 8009c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	f1c3 0307 	rsb	r3, r3, #7
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	bf28      	it	cs
 8009c9e:	2304      	movcs	r3, #4
 8009ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	2b06      	cmp	r3, #6
 8009ca8:	d902      	bls.n	8009cb0 <NVIC_EncodePriority+0x30>
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	3b03      	subs	r3, #3
 8009cae:	e000      	b.n	8009cb2 <NVIC_EncodePriority+0x32>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbe:	43da      	mvns	r2, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	401a      	ands	r2, r3
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd2:	43d9      	mvns	r1, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009cd8:	4313      	orrs	r3, r2
         );
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3724      	adds	r7, #36	; 0x24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
	...

08009ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cf8:	d301      	bcc.n	8009cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e00f      	b.n	8009d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009cfe:	4a0a      	ldr	r2, [pc, #40]	; (8009d28 <SysTick_Config+0x40>)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3b01      	subs	r3, #1
 8009d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009d06:	210f      	movs	r1, #15
 8009d08:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0c:	f7ff ff8e 	bl	8009c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009d10:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <SysTick_Config+0x40>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009d16:	4b04      	ldr	r3, [pc, #16]	; (8009d28 <SysTick_Config+0x40>)
 8009d18:	2207      	movs	r2, #7
 8009d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	e000e010 	.word	0xe000e010

08009d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff ff29 	bl	8009b8c <__NVIC_SetPriorityGrouping>
}
 8009d3a:	bf00      	nop
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b086      	sub	sp, #24
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	4603      	mov	r3, r0
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
 8009d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009d50:	2300      	movs	r3, #0
 8009d52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009d54:	f7ff ff3e 	bl	8009bd4 <__NVIC_GetPriorityGrouping>
 8009d58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	68b9      	ldr	r1, [r7, #8]
 8009d5e:	6978      	ldr	r0, [r7, #20]
 8009d60:	f7ff ff8e 	bl	8009c80 <NVIC_EncodePriority>
 8009d64:	4602      	mov	r2, r0
 8009d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff ff5d 	bl	8009c2c <__NVIC_SetPriority>
}
 8009d72:	bf00      	nop
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	4603      	mov	r3, r0
 8009d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7ff ff31 	bl	8009bf0 <__NVIC_EnableIRQ>
}
 8009d8e:	bf00      	nop
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff ffa2 	bl	8009ce8 <SysTick_Config>
 8009da4:	4603      	mov	r3, r0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
	...

08009db0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e054      	b.n	8009e6c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	7f5b      	ldrb	r3, [r3, #29]
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d105      	bne.n	8009dd8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7f7 fea6 	bl	8001b24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	791b      	ldrb	r3, [r3, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10c      	bne.n	8009e00 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a22      	ldr	r2, [pc, #136]	; (8009e74 <HAL_CRC_Init+0xc4>)
 8009dec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f022 0218 	bic.w	r2, r2, #24
 8009dfc:	609a      	str	r2, [r3, #8]
 8009dfe:	e00c      	b.n	8009e1a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6899      	ldr	r1, [r3, #8]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f834 	bl	8009e78 <HAL_CRCEx_Polynomial_Set>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e028      	b.n	8009e6c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	795b      	ldrb	r3, [r3, #5]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d105      	bne.n	8009e2e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	611a      	str	r2, [r3, #16]
 8009e2c:	e004      	b.n	8009e38 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	6912      	ldr	r2, [r2, #16]
 8009e36:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695a      	ldr	r2, [r3, #20]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	699a      	ldr	r2, [r3, #24]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	04c11db7 	.word	0x04c11db7

08009e78 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009e88:	231f      	movs	r3, #31
 8009e8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d102      	bne.n	8009e9c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	75fb      	strb	r3, [r7, #23]
 8009e9a:	e063      	b.n	8009f64 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009e9c:	bf00      	nop
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	1e5a      	subs	r2, r3, #1
 8009ea2:	613a      	str	r2, [r7, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d009      	beq.n	8009ebc <HAL_CRCEx_Polynomial_Set+0x44>
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f003 031f 	and.w	r3, r3, #31
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb4:	f003 0301 	and.w	r3, r3, #1
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0f0      	beq.n	8009e9e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b18      	cmp	r3, #24
 8009ec0:	d846      	bhi.n	8009f50 <HAL_CRCEx_Polynomial_Set+0xd8>
 8009ec2:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8009ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec8:	08009f57 	.word	0x08009f57
 8009ecc:	08009f51 	.word	0x08009f51
 8009ed0:	08009f51 	.word	0x08009f51
 8009ed4:	08009f51 	.word	0x08009f51
 8009ed8:	08009f51 	.word	0x08009f51
 8009edc:	08009f51 	.word	0x08009f51
 8009ee0:	08009f51 	.word	0x08009f51
 8009ee4:	08009f51 	.word	0x08009f51
 8009ee8:	08009f45 	.word	0x08009f45
 8009eec:	08009f51 	.word	0x08009f51
 8009ef0:	08009f51 	.word	0x08009f51
 8009ef4:	08009f51 	.word	0x08009f51
 8009ef8:	08009f51 	.word	0x08009f51
 8009efc:	08009f51 	.word	0x08009f51
 8009f00:	08009f51 	.word	0x08009f51
 8009f04:	08009f51 	.word	0x08009f51
 8009f08:	08009f39 	.word	0x08009f39
 8009f0c:	08009f51 	.word	0x08009f51
 8009f10:	08009f51 	.word	0x08009f51
 8009f14:	08009f51 	.word	0x08009f51
 8009f18:	08009f51 	.word	0x08009f51
 8009f1c:	08009f51 	.word	0x08009f51
 8009f20:	08009f51 	.word	0x08009f51
 8009f24:	08009f51 	.word	0x08009f51
 8009f28:	08009f2d 	.word	0x08009f2d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	2b06      	cmp	r3, #6
 8009f30:	d913      	bls.n	8009f5a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009f36:	e010      	b.n	8009f5a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2b07      	cmp	r3, #7
 8009f3c:	d90f      	bls.n	8009f5e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009f42:	e00c      	b.n	8009f5e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	2b0f      	cmp	r3, #15
 8009f48:	d90b      	bls.n	8009f62 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8009f4e:	e008      	b.n	8009f62 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	75fb      	strb	r3, [r7, #23]
        break;
 8009f54:	e006      	b.n	8009f64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009f56:	bf00      	nop
 8009f58:	e004      	b.n	8009f64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009f5a:	bf00      	nop
 8009f5c:	e002      	b.n	8009f64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009f5e:	bf00      	nop
 8009f60:	e000      	b.n	8009f64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009f62:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009f64:	7dfb      	ldrb	r3, [r7, #23]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10d      	bne.n	8009f86 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f023 0118 	bic.w	r1, r3, #24
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	371c      	adds	r7, #28
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
 8009fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d101      	bne.n	8009fb4 <HAL_DMA_Start_IT+0x20>
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e04b      	b.n	800a04c <HAL_DMA_Start_IT+0xb8>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d13a      	bne.n	800a03e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f022 0201 	bic.w	r2, r2, #1
 8009fe4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	68b9      	ldr	r1, [r7, #8]
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 f8b0 	bl	800a152 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d008      	beq.n	800a00c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 020e 	orr.w	r2, r2, #14
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	e00f      	b.n	800a02c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0204 	bic.w	r2, r2, #4
 800a01a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 020a 	orr.w	r2, r2, #10
 800a02a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f042 0201 	orr.w	r2, r2, #1
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	e005      	b.n	800a04a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a046:	2302      	movs	r3, #2
 800a048:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a066:	b2db      	uxtb	r3, r3
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d008      	beq.n	800a07e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2204      	movs	r2, #4
 800a070:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e022      	b.n	800a0c4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f022 020e 	bic.w	r2, r2, #14
 800a08c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f022 0201 	bic.w	r2, r2, #1
 800a09c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a2:	f003 021c 	and.w	r2, r3, #28
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0aa:	2101      	movs	r1, #1
 800a0ac:	fa01 f202 	lsl.w	r2, r1, r2
 800a0b0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d005      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2204      	movs	r2, #4
 800a0ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	73fb      	strb	r3, [r7, #15]
 800a0f2:	e029      	b.n	800a148 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 020e 	bic.w	r2, r2, #14
 800a102:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f022 0201 	bic.w	r2, r2, #1
 800a112:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a118:	f003 021c 	and.w	r2, r3, #28
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a120:	2101      	movs	r1, #1
 800a122:	fa01 f202 	lsl.w	r2, r1, r2
 800a126:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d003      	beq.n	800a148 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	4798      	blx	r3
    }
  }
  return status;
 800a148:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a152:	b480      	push	{r7}
 800a154:	b085      	sub	sp, #20
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	60b9      	str	r1, [r7, #8]
 800a15c:	607a      	str	r2, [r7, #4]
 800a15e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a164:	f003 021c 	and.w	r2, r3, #28
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16c:	2101      	movs	r1, #1
 800a16e:	fa01 f202 	lsl.w	r2, r1, r2
 800a172:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	2b10      	cmp	r3, #16
 800a182:	d108      	bne.n	800a196 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a194:	e007      	b.n	800a1a6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	60da      	str	r2, [r3, #12]
}
 800a1a6:	bf00      	nop
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	b087      	sub	sp, #28
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	60f8      	str	r0, [r7, #12]
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	607a      	str	r2, [r7, #4]
 800a1be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a1c4:	7afb      	ldrb	r3, [r7, #11]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d103      	bne.n	800a1d2 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	605a      	str	r2, [r3, #4]
      break;
 800a1d0:	e002      	b.n	800a1d8 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a1d6:	bf00      	nop
  }

  return status;
 800a1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b083      	sub	sp, #12
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
 800a1ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e003      	b.n	800a202 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a200:	2300      	movs	r3, #0
  }
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
	...

0800a210 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	0c1b      	lsrs	r3, r3, #16
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 031f 	and.w	r3, r3, #31
 800a22c:	2201      	movs	r2, #1
 800a22e:	fa02 f303 	lsl.w	r3, r2, r3
 800a232:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <HAL_EXTI_IRQHandler+0x5c>)
 800a23a:	4413      	add	r3, r2
 800a23c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	4013      	ands	r3, r2
 800a246:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d009      	beq.n	800a262 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	4798      	blx	r3
    }
  }
}
 800a262:	bf00      	nop
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	40010414 	.word	0x40010414

0800a270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a270:	b480      	push	{r7}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a27e:	e17f      	b.n	800a580 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	2101      	movs	r1, #1
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	fa01 f303 	lsl.w	r3, r1, r3
 800a28c:	4013      	ands	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 8171 	beq.w	800a57a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f003 0303 	and.w	r3, r3, #3
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d005      	beq.n	800a2b0 <HAL_GPIO_Init+0x40>
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f003 0303 	and.w	r3, r3, #3
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d130      	bne.n	800a312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	2203      	movs	r2, #3
 800a2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c0:	43db      	mvns	r3, r3
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	68da      	ldr	r2, [r3, #12]
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ee:	43db      	mvns	r3, r3
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	091b      	lsrs	r3, r3, #4
 800a2fc:	f003 0201 	and.w	r2, r3, #1
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	fa02 f303 	lsl.w	r3, r2, r3
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	4313      	orrs	r3, r2
 800a30a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	693a      	ldr	r2, [r7, #16]
 800a310:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	d118      	bne.n	800a350 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800a324:	2201      	movs	r2, #1
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	fa02 f303 	lsl.w	r3, r2, r3
 800a32c:	43db      	mvns	r3, r3
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4013      	ands	r3, r2
 800a332:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	08db      	lsrs	r3, r3, #3
 800a33a:	f003 0201 	and.w	r2, r3, #1
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	fa02 f303 	lsl.w	r3, r2, r3
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	4313      	orrs	r3, r2
 800a348:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d017      	beq.n	800a38c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	2203      	movs	r2, #3
 800a368:	fa02 f303 	lsl.w	r3, r2, r3
 800a36c:	43db      	mvns	r3, r3
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	4013      	ands	r3, r2
 800a372:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	689a      	ldr	r2, [r3, #8]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	fa02 f303 	lsl.w	r3, r2, r3
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	4313      	orrs	r3, r2
 800a384:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	f003 0303 	and.w	r3, r3, #3
 800a394:	2b02      	cmp	r3, #2
 800a396:	d123      	bne.n	800a3e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	08da      	lsrs	r2, r3, #3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3208      	adds	r2, #8
 800a3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f003 0307 	and.w	r3, r3, #7
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	220f      	movs	r2, #15
 800a3b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b4:	43db      	mvns	r3, r3
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	691a      	ldr	r2, [r3, #16]
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f003 0307 	and.w	r3, r3, #7
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	08da      	lsrs	r2, r3, #3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3208      	adds	r2, #8
 800a3da:	6939      	ldr	r1, [r7, #16]
 800a3dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	2203      	movs	r2, #3
 800a3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f0:	43db      	mvns	r3, r3
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	f003 0203 	and.w	r2, r3, #3
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	005b      	lsls	r3, r3, #1
 800a404:	fa02 f303 	lsl.w	r3, r2, r3
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 80ac 	beq.w	800a57a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a422:	4b5f      	ldr	r3, [pc, #380]	; (800a5a0 <HAL_GPIO_Init+0x330>)
 800a424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a426:	4a5e      	ldr	r2, [pc, #376]	; (800a5a0 <HAL_GPIO_Init+0x330>)
 800a428:	f043 0301 	orr.w	r3, r3, #1
 800a42c:	6613      	str	r3, [r2, #96]	; 0x60
 800a42e:	4b5c      	ldr	r3, [pc, #368]	; (800a5a0 <HAL_GPIO_Init+0x330>)
 800a430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	60bb      	str	r3, [r7, #8]
 800a438:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a43a:	4a5a      	ldr	r2, [pc, #360]	; (800a5a4 <HAL_GPIO_Init+0x334>)
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	089b      	lsrs	r3, r3, #2
 800a440:	3302      	adds	r3, #2
 800a442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a446:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f003 0303 	and.w	r3, r3, #3
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	220f      	movs	r2, #15
 800a452:	fa02 f303 	lsl.w	r3, r2, r3
 800a456:	43db      	mvns	r3, r3
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	4013      	ands	r3, r2
 800a45c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a464:	d025      	beq.n	800a4b2 <HAL_GPIO_Init+0x242>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a4f      	ldr	r2, [pc, #316]	; (800a5a8 <HAL_GPIO_Init+0x338>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d01f      	beq.n	800a4ae <HAL_GPIO_Init+0x23e>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a4e      	ldr	r2, [pc, #312]	; (800a5ac <HAL_GPIO_Init+0x33c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d019      	beq.n	800a4aa <HAL_GPIO_Init+0x23a>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a4d      	ldr	r2, [pc, #308]	; (800a5b0 <HAL_GPIO_Init+0x340>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d013      	beq.n	800a4a6 <HAL_GPIO_Init+0x236>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a4c      	ldr	r2, [pc, #304]	; (800a5b4 <HAL_GPIO_Init+0x344>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d00d      	beq.n	800a4a2 <HAL_GPIO_Init+0x232>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a4b      	ldr	r2, [pc, #300]	; (800a5b8 <HAL_GPIO_Init+0x348>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d007      	beq.n	800a49e <HAL_GPIO_Init+0x22e>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a4a      	ldr	r2, [pc, #296]	; (800a5bc <HAL_GPIO_Init+0x34c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d101      	bne.n	800a49a <HAL_GPIO_Init+0x22a>
 800a496:	2306      	movs	r3, #6
 800a498:	e00c      	b.n	800a4b4 <HAL_GPIO_Init+0x244>
 800a49a:	2307      	movs	r3, #7
 800a49c:	e00a      	b.n	800a4b4 <HAL_GPIO_Init+0x244>
 800a49e:	2305      	movs	r3, #5
 800a4a0:	e008      	b.n	800a4b4 <HAL_GPIO_Init+0x244>
 800a4a2:	2304      	movs	r3, #4
 800a4a4:	e006      	b.n	800a4b4 <HAL_GPIO_Init+0x244>
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	e004      	b.n	800a4b4 <HAL_GPIO_Init+0x244>
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	e002      	b.n	800a4b4 <HAL_GPIO_Init+0x244>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e000      	b.n	800a4b4 <HAL_GPIO_Init+0x244>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	f002 0203 	and.w	r2, r2, #3
 800a4ba:	0092      	lsls	r2, r2, #2
 800a4bc:	4093      	lsls	r3, r2
 800a4be:	693a      	ldr	r2, [r7, #16]
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a4c4:	4937      	ldr	r1, [pc, #220]	; (800a5a4 <HAL_GPIO_Init+0x334>)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	089b      	lsrs	r3, r3, #2
 800a4ca:	3302      	adds	r3, #2
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a4d2:	4b3b      	ldr	r3, [pc, #236]	; (800a5c0 <HAL_GPIO_Init+0x350>)
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	43db      	mvns	r3, r3
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4013      	ands	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800a4ee:	693a      	ldr	r2, [r7, #16]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a4f6:	4a32      	ldr	r2, [pc, #200]	; (800a5c0 <HAL_GPIO_Init+0x350>)
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a4fc:	4b30      	ldr	r3, [pc, #192]	; (800a5c0 <HAL_GPIO_Init+0x350>)
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	43db      	mvns	r3, r3
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	4013      	ands	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d003      	beq.n	800a520 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a520:	4a27      	ldr	r2, [pc, #156]	; (800a5c0 <HAL_GPIO_Init+0x350>)
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a526:	4b26      	ldr	r3, [pc, #152]	; (800a5c0 <HAL_GPIO_Init+0x350>)
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	43db      	mvns	r3, r3
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	4013      	ands	r3, r2
 800a534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800a542:	693a      	ldr	r2, [r7, #16]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4313      	orrs	r3, r2
 800a548:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a54a:	4a1d      	ldr	r2, [pc, #116]	; (800a5c0 <HAL_GPIO_Init+0x350>)
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a550:	4b1b      	ldr	r3, [pc, #108]	; (800a5c0 <HAL_GPIO_Init+0x350>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	43db      	mvns	r3, r3
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	4013      	ands	r3, r2
 800a55e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d003      	beq.n	800a574 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	4313      	orrs	r3, r2
 800a572:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a574:	4a12      	ldr	r2, [pc, #72]	; (800a5c0 <HAL_GPIO_Init+0x350>)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	3301      	adds	r3, #1
 800a57e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	fa22 f303 	lsr.w	r3, r2, r3
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f47f ae78 	bne.w	800a280 <HAL_GPIO_Init+0x10>
  }
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	371c      	adds	r7, #28
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	40021000 	.word	0x40021000
 800a5a4:	40010000 	.word	0x40010000
 800a5a8:	48000400 	.word	0x48000400
 800a5ac:	48000800 	.word	0x48000800
 800a5b0:	48000c00 	.word	0x48000c00
 800a5b4:	48001000 	.word	0x48001000
 800a5b8:	48001400 	.word	0x48001400
 800a5bc:	48001800 	.word	0x48001800
 800a5c0:	40010400 	.word	0x40010400

0800a5c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a5d2:	e0cd      	b.n	800a770 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 80c0 	beq.w	800a76a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a5ea:	4a68      	ldr	r2, [pc, #416]	; (800a78c <HAL_GPIO_DeInit+0x1c8>)
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	089b      	lsrs	r3, r3, #2
 800a5f0:	3302      	adds	r3, #2
 800a5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f003 0303 	and.w	r3, r3, #3
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	220f      	movs	r2, #15
 800a602:	fa02 f303 	lsl.w	r3, r2, r3
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4013      	ands	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a612:	d025      	beq.n	800a660 <HAL_GPIO_DeInit+0x9c>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a5e      	ldr	r2, [pc, #376]	; (800a790 <HAL_GPIO_DeInit+0x1cc>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d01f      	beq.n	800a65c <HAL_GPIO_DeInit+0x98>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a5d      	ldr	r2, [pc, #372]	; (800a794 <HAL_GPIO_DeInit+0x1d0>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d019      	beq.n	800a658 <HAL_GPIO_DeInit+0x94>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a5c      	ldr	r2, [pc, #368]	; (800a798 <HAL_GPIO_DeInit+0x1d4>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d013      	beq.n	800a654 <HAL_GPIO_DeInit+0x90>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a5b      	ldr	r2, [pc, #364]	; (800a79c <HAL_GPIO_DeInit+0x1d8>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d00d      	beq.n	800a650 <HAL_GPIO_DeInit+0x8c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a5a      	ldr	r2, [pc, #360]	; (800a7a0 <HAL_GPIO_DeInit+0x1dc>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d007      	beq.n	800a64c <HAL_GPIO_DeInit+0x88>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a59      	ldr	r2, [pc, #356]	; (800a7a4 <HAL_GPIO_DeInit+0x1e0>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d101      	bne.n	800a648 <HAL_GPIO_DeInit+0x84>
 800a644:	2306      	movs	r3, #6
 800a646:	e00c      	b.n	800a662 <HAL_GPIO_DeInit+0x9e>
 800a648:	2307      	movs	r3, #7
 800a64a:	e00a      	b.n	800a662 <HAL_GPIO_DeInit+0x9e>
 800a64c:	2305      	movs	r3, #5
 800a64e:	e008      	b.n	800a662 <HAL_GPIO_DeInit+0x9e>
 800a650:	2304      	movs	r3, #4
 800a652:	e006      	b.n	800a662 <HAL_GPIO_DeInit+0x9e>
 800a654:	2303      	movs	r3, #3
 800a656:	e004      	b.n	800a662 <HAL_GPIO_DeInit+0x9e>
 800a658:	2302      	movs	r3, #2
 800a65a:	e002      	b.n	800a662 <HAL_GPIO_DeInit+0x9e>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <HAL_GPIO_DeInit+0x9e>
 800a660:	2300      	movs	r3, #0
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	f002 0203 	and.w	r2, r2, #3
 800a668:	0092      	lsls	r2, r2, #2
 800a66a:	4093      	lsls	r3, r2
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d132      	bne.n	800a6d8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a672:	4b4d      	ldr	r3, [pc, #308]	; (800a7a8 <HAL_GPIO_DeInit+0x1e4>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	43db      	mvns	r3, r3
 800a67a:	494b      	ldr	r1, [pc, #300]	; (800a7a8 <HAL_GPIO_DeInit+0x1e4>)
 800a67c:	4013      	ands	r3, r2
 800a67e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a680:	4b49      	ldr	r3, [pc, #292]	; (800a7a8 <HAL_GPIO_DeInit+0x1e4>)
 800a682:	685a      	ldr	r2, [r3, #4]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	43db      	mvns	r3, r3
 800a688:	4947      	ldr	r1, [pc, #284]	; (800a7a8 <HAL_GPIO_DeInit+0x1e4>)
 800a68a:	4013      	ands	r3, r2
 800a68c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800a68e:	4b46      	ldr	r3, [pc, #280]	; (800a7a8 <HAL_GPIO_DeInit+0x1e4>)
 800a690:	68da      	ldr	r2, [r3, #12]
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	43db      	mvns	r3, r3
 800a696:	4944      	ldr	r1, [pc, #272]	; (800a7a8 <HAL_GPIO_DeInit+0x1e4>)
 800a698:	4013      	ands	r3, r2
 800a69a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800a69c:	4b42      	ldr	r3, [pc, #264]	; (800a7a8 <HAL_GPIO_DeInit+0x1e4>)
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	43db      	mvns	r3, r3
 800a6a4:	4940      	ldr	r1, [pc, #256]	; (800a7a8 <HAL_GPIO_DeInit+0x1e4>)
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f003 0303 	and.w	r3, r3, #3
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	220f      	movs	r2, #15
 800a6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a6ba:	4a34      	ldr	r2, [pc, #208]	; (800a78c <HAL_GPIO_DeInit+0x1c8>)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	089b      	lsrs	r3, r3, #2
 800a6c0:	3302      	adds	r3, #2
 800a6c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	43da      	mvns	r2, r3
 800a6ca:	4830      	ldr	r0, [pc, #192]	; (800a78c <HAL_GPIO_DeInit+0x1c8>)
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	089b      	lsrs	r3, r3, #2
 800a6d0:	400a      	ands	r2, r1
 800a6d2:	3302      	adds	r3, #2
 800a6d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	005b      	lsls	r3, r3, #1
 800a6e0:	2103      	movs	r1, #3
 800a6e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	08da      	lsrs	r2, r3, #3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	3208      	adds	r2, #8
 800a6f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	220f      	movs	r2, #15
 800a702:	fa02 f303 	lsl.w	r3, r2, r3
 800a706:	43db      	mvns	r3, r3
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	08d2      	lsrs	r2, r2, #3
 800a70c:	4019      	ands	r1, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	3208      	adds	r2, #8
 800a712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	689a      	ldr	r2, [r3, #8]
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	005b      	lsls	r3, r3, #1
 800a71e:	2103      	movs	r1, #3
 800a720:	fa01 f303 	lsl.w	r3, r1, r3
 800a724:	43db      	mvns	r3, r3
 800a726:	401a      	ands	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685a      	ldr	r2, [r3, #4]
 800a730:	2101      	movs	r1, #1
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	fa01 f303 	lsl.w	r3, r1, r3
 800a738:	43db      	mvns	r3, r3
 800a73a:	401a      	ands	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	005b      	lsls	r3, r3, #1
 800a748:	2103      	movs	r1, #3
 800a74a:	fa01 f303 	lsl.w	r3, r1, r3
 800a74e:	43db      	mvns	r3, r3
 800a750:	401a      	ands	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75a:	2101      	movs	r1, #1
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	fa01 f303 	lsl.w	r3, r1, r3
 800a762:	43db      	mvns	r3, r3
 800a764:	401a      	ands	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	3301      	adds	r3, #1
 800a76e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	fa22 f303 	lsr.w	r3, r2, r3
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f47f af2b 	bne.w	800a5d4 <HAL_GPIO_DeInit+0x10>
  }
}
 800a77e:	bf00      	nop
 800a780:	bf00      	nop
 800a782:	371c      	adds	r7, #28
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	40010000 	.word	0x40010000
 800a790:	48000400 	.word	0x48000400
 800a794:	48000800 	.word	0x48000800
 800a798:	48000c00 	.word	0x48000c00
 800a79c:	48001000 	.word	0x48001000
 800a7a0:	48001400 	.word	0x48001400
 800a7a4:	48001800 	.word	0x48001800
 800a7a8:	40010400 	.word	0x40010400

0800a7ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691a      	ldr	r2, [r3, #16]
 800a7bc:	887b      	ldrh	r3, [r7, #2]
 800a7be:	4013      	ands	r3, r2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	73fb      	strb	r3, [r7, #15]
 800a7c8:	e001      	b.n	800a7ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	807b      	strh	r3, [r7, #2]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a7ec:	787b      	ldrb	r3, [r7, #1]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a7f2:	887a      	ldrh	r2, [r7, #2]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a7f8:	e002      	b.n	800a800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a7fa:	887a      	ldrh	r2, [r7, #2]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e08d      	b.n	800a93a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d106      	bne.n	800a838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f8b4 	bl	800a9a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2224      	movs	r2, #36	; 0x24
 800a83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f022 0201 	bic.w	r2, r2, #1
 800a84e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a85c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	689a      	ldr	r2, [r3, #8]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a86c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d107      	bne.n	800a886 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689a      	ldr	r2, [r3, #8]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a882:	609a      	str	r2, [r3, #8]
 800a884:	e006      	b.n	800a894 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	689a      	ldr	r2, [r3, #8]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a892:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d108      	bne.n	800a8ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8aa:	605a      	str	r2, [r3, #4]
 800a8ac:	e007      	b.n	800a8be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	6812      	ldr	r2, [r2, #0]
 800a8c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a8cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68da      	ldr	r2, [r3, #12]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a8e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	691a      	ldr	r2, [r3, #16]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	699b      	ldr	r3, [r3, #24]
 800a8f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	430a      	orrs	r2, r1
 800a8fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	69d9      	ldr	r1, [r3, #28]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a1a      	ldr	r2, [r3, #32]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	430a      	orrs	r2, r1
 800a90a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f042 0201 	orr.w	r2, r2, #1
 800a91a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2220      	movs	r2, #32
 800a926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b082      	sub	sp, #8
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e021      	b.n	800a998 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2224      	movs	r2, #36	; 0x24
 800a958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 0201 	bic.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f821 	bl	800a9b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af02      	add	r7, sp, #8
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	817b      	strh	r3, [r7, #10]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	813b      	strh	r3, [r7, #8]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b20      	cmp	r3, #32
 800a9ec:	f040 80f9 	bne.w	800abe2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9f0:	6a3b      	ldr	r3, [r7, #32]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d002      	beq.n	800a9fc <HAL_I2C_Mem_Write+0x34>
 800a9f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d105      	bne.n	800aa08 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e0ed      	b.n	800abe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d101      	bne.n	800aa16 <HAL_I2C_Mem_Write+0x4e>
 800aa12:	2302      	movs	r3, #2
 800aa14:	e0e6      	b.n	800abe4 <HAL_I2C_Mem_Write+0x21c>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aa1e:	f7ff f885 	bl	8009b2c <HAL_GetTick>
 800aa22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	2319      	movs	r3, #25
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f000 fadd 	bl	800aff0 <I2C_WaitOnFlagUntilTimeout>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d001      	beq.n	800aa40 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e0d1      	b.n	800abe4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2221      	movs	r2, #33	; 0x21
 800aa44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2240      	movs	r2, #64	; 0x40
 800aa4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6a3a      	ldr	r2, [r7, #32]
 800aa5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2200      	movs	r2, #0
 800aa66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aa68:	88f8      	ldrh	r0, [r7, #6]
 800aa6a:	893a      	ldrh	r2, [r7, #8]
 800aa6c:	8979      	ldrh	r1, [r7, #10]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	9301      	str	r3, [sp, #4]
 800aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	4603      	mov	r3, r0
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f9ed 	bl	800ae58 <I2C_RequestMemoryWrite>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d005      	beq.n	800aa90 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e0a9      	b.n	800abe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	2bff      	cmp	r3, #255	; 0xff
 800aa98:	d90e      	bls.n	800aab8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	22ff      	movs	r2, #255	; 0xff
 800aa9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaa4:	b2da      	uxtb	r2, r3
 800aaa6:	8979      	ldrh	r1, [r7, #10]
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 fc57 	bl	800b364 <I2C_TransferConfig>
 800aab6:	e00f      	b.n	800aad8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	8979      	ldrh	r1, [r7, #10]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 fc46 	bl	800b364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f000 fad6 	bl	800b08e <I2C_WaitOnTXISFlagUntilTimeout>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	e07b      	b.n	800abe4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf0:	781a      	ldrb	r2, [r3, #0]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	1c5a      	adds	r2, r3, #1
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab14:	3b01      	subs	r3, #1
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d034      	beq.n	800ab90 <HAL_I2C_Mem_Write+0x1c8>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d130      	bne.n	800ab90 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	2200      	movs	r2, #0
 800ab36:	2180      	movs	r1, #128	; 0x80
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f000 fa59 	bl	800aff0 <I2C_WaitOnFlagUntilTimeout>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e04d      	b.n	800abe4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	2bff      	cmp	r3, #255	; 0xff
 800ab50:	d90e      	bls.n	800ab70 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	22ff      	movs	r2, #255	; 0xff
 800ab56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	8979      	ldrh	r1, [r7, #10]
 800ab60:	2300      	movs	r3, #0
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f000 fbfb 	bl	800b364 <I2C_TransferConfig>
 800ab6e:	e00f      	b.n	800ab90 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	8979      	ldrh	r1, [r7, #10]
 800ab82:	2300      	movs	r3, #0
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 fbea 	bl	800b364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d19e      	bne.n	800aad8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f000 fabc 	bl	800b11c <I2C_WaitOnSTOPFlagUntilTimeout>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e01a      	b.n	800abe4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2220      	movs	r2, #32
 800abb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	6859      	ldr	r1, [r3, #4]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <HAL_I2C_Mem_Write+0x224>)
 800abc2:	400b      	ands	r3, r1
 800abc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2220      	movs	r2, #32
 800abca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	e000      	b.n	800abe4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800abe2:	2302      	movs	r3, #2
  }
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	fe00e800 	.word	0xfe00e800

0800abf0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	4608      	mov	r0, r1
 800abfa:	4611      	mov	r1, r2
 800abfc:	461a      	mov	r2, r3
 800abfe:	4603      	mov	r3, r0
 800ac00:	817b      	strh	r3, [r7, #10]
 800ac02:	460b      	mov	r3, r1
 800ac04:	813b      	strh	r3, [r7, #8]
 800ac06:	4613      	mov	r3, r2
 800ac08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	f040 80fd 	bne.w	800ae12 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <HAL_I2C_Mem_Read+0x34>
 800ac1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d105      	bne.n	800ac30 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e0f1      	b.n	800ae14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d101      	bne.n	800ac3e <HAL_I2C_Mem_Read+0x4e>
 800ac3a:	2302      	movs	r3, #2
 800ac3c:	e0ea      	b.n	800ae14 <HAL_I2C_Mem_Read+0x224>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ac46:	f7fe ff71 	bl	8009b2c <HAL_GetTick>
 800ac4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	2319      	movs	r3, #25
 800ac52:	2201      	movs	r2, #1
 800ac54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f000 f9c9 	bl	800aff0 <I2C_WaitOnFlagUntilTimeout>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e0d5      	b.n	800ae14 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2222      	movs	r2, #34	; 0x22
 800ac6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2240      	movs	r2, #64	; 0x40
 800ac74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6a3a      	ldr	r2, [r7, #32]
 800ac82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac90:	88f8      	ldrh	r0, [r7, #6]
 800ac92:	893a      	ldrh	r2, [r7, #8]
 800ac94:	8979      	ldrh	r1, [r7, #10]
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	9301      	str	r3, [sp, #4]
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	4603      	mov	r3, r0
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f92d 	bl	800af00 <I2C_RequestMemoryRead>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d005      	beq.n	800acb8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e0ad      	b.n	800ae14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	2bff      	cmp	r3, #255	; 0xff
 800acc0:	d90e      	bls.n	800ace0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	22ff      	movs	r2, #255	; 0xff
 800acc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800accc:	b2da      	uxtb	r2, r3
 800acce:	8979      	ldrh	r1, [r7, #10]
 800acd0:	4b52      	ldr	r3, [pc, #328]	; (800ae1c <HAL_I2C_Mem_Read+0x22c>)
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800acd8:	68f8      	ldr	r0, [r7, #12]
 800acda:	f000 fb43 	bl	800b364 <I2C_TransferConfig>
 800acde:	e00f      	b.n	800ad00 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	8979      	ldrh	r1, [r7, #10]
 800acf2:	4b4a      	ldr	r3, [pc, #296]	; (800ae1c <HAL_I2C_Mem_Read+0x22c>)
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f000 fb32 	bl	800b364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	9300      	str	r3, [sp, #0]
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	2200      	movs	r2, #0
 800ad08:	2104      	movs	r1, #4
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f000 f970 	bl	800aff0 <I2C_WaitOnFlagUntilTimeout>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e07c      	b.n	800ae14 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	b2d2      	uxtb	r2, r2
 800ad26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad36:	3b01      	subs	r3, #1
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	3b01      	subs	r3, #1
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d034      	beq.n	800adc0 <HAL_I2C_Mem_Read+0x1d0>
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d130      	bne.n	800adc0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad64:	2200      	movs	r2, #0
 800ad66:	2180      	movs	r1, #128	; 0x80
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 f941 	bl	800aff0 <I2C_WaitOnFlagUntilTimeout>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e04d      	b.n	800ae14 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	2bff      	cmp	r3, #255	; 0xff
 800ad80:	d90e      	bls.n	800ada0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	22ff      	movs	r2, #255	; 0xff
 800ad86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	8979      	ldrh	r1, [r7, #10]
 800ad90:	2300      	movs	r3, #0
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 fae3 	bl	800b364 <I2C_TransferConfig>
 800ad9e:	e00f      	b.n	800adc0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	8979      	ldrh	r1, [r7, #10]
 800adb2:	2300      	movs	r3, #0
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f000 fad2 	bl	800b364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d19a      	bne.n	800ad00 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f000 f9a4 	bl	800b11c <I2C_WaitOnSTOPFlagUntilTimeout>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e01a      	b.n	800ae14 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2220      	movs	r2, #32
 800ade4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6859      	ldr	r1, [r3, #4]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <HAL_I2C_Mem_Read+0x230>)
 800adf2:	400b      	ands	r3, r1
 800adf4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2220      	movs	r2, #32
 800adfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e000      	b.n	800ae14 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ae12:	2302      	movs	r3, #2
  }
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	80002400 	.word	0x80002400
 800ae20:	fe00e800 	.word	0xfe00e800

0800ae24 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae32:	b2db      	uxtb	r3, r3
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	370c      	adds	r7, #12
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af02      	add	r7, sp, #8
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	4608      	mov	r0, r1
 800ae62:	4611      	mov	r1, r2
 800ae64:	461a      	mov	r2, r3
 800ae66:	4603      	mov	r3, r0
 800ae68:	817b      	strh	r3, [r7, #10]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	813b      	strh	r3, [r7, #8]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ae72:	88fb      	ldrh	r3, [r7, #6]
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	8979      	ldrh	r1, [r7, #10]
 800ae78:	4b20      	ldr	r3, [pc, #128]	; (800aefc <I2C_RequestMemoryWrite+0xa4>)
 800ae7a:	9300      	str	r3, [sp, #0]
 800ae7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f000 fa6f 	bl	800b364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae86:	69fa      	ldr	r2, [r7, #28]
 800ae88:	69b9      	ldr	r1, [r7, #24]
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f000 f8ff 	bl	800b08e <I2C_WaitOnTXISFlagUntilTimeout>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e02c      	b.n	800aef4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae9a:	88fb      	ldrh	r3, [r7, #6]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d105      	bne.n	800aeac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aea0:	893b      	ldrh	r3, [r7, #8]
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	629a      	str	r2, [r3, #40]	; 0x28
 800aeaa:	e015      	b.n	800aed8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aeac:	893b      	ldrh	r3, [r7, #8]
 800aeae:	0a1b      	lsrs	r3, r3, #8
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeba:	69fa      	ldr	r2, [r7, #28]
 800aebc:	69b9      	ldr	r1, [r7, #24]
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f000 f8e5 	bl	800b08e <I2C_WaitOnTXISFlagUntilTimeout>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d001      	beq.n	800aece <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e012      	b.n	800aef4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aece:	893b      	ldrh	r3, [r7, #8]
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	2200      	movs	r2, #0
 800aee0:	2180      	movs	r1, #128	; 0x80
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f000 f884 	bl	800aff0 <I2C_WaitOnFlagUntilTimeout>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e000      	b.n	800aef4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	80002000 	.word	0x80002000

0800af00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af02      	add	r7, sp, #8
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	4608      	mov	r0, r1
 800af0a:	4611      	mov	r1, r2
 800af0c:	461a      	mov	r2, r3
 800af0e:	4603      	mov	r3, r0
 800af10:	817b      	strh	r3, [r7, #10]
 800af12:	460b      	mov	r3, r1
 800af14:	813b      	strh	r3, [r7, #8]
 800af16:	4613      	mov	r3, r2
 800af18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800af1a:	88fb      	ldrh	r3, [r7, #6]
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	8979      	ldrh	r1, [r7, #10]
 800af20:	4b20      	ldr	r3, [pc, #128]	; (800afa4 <I2C_RequestMemoryRead+0xa4>)
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	2300      	movs	r3, #0
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f000 fa1c 	bl	800b364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af2c:	69fa      	ldr	r2, [r7, #28]
 800af2e:	69b9      	ldr	r1, [r7, #24]
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f000 f8ac 	bl	800b08e <I2C_WaitOnTXISFlagUntilTimeout>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d001      	beq.n	800af40 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	e02c      	b.n	800af9a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800af40:	88fb      	ldrh	r3, [r7, #6]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d105      	bne.n	800af52 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800af46:	893b      	ldrh	r3, [r7, #8]
 800af48:	b2da      	uxtb	r2, r3
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	629a      	str	r2, [r3, #40]	; 0x28
 800af50:	e015      	b.n	800af7e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800af52:	893b      	ldrh	r3, [r7, #8]
 800af54:	0a1b      	lsrs	r3, r3, #8
 800af56:	b29b      	uxth	r3, r3
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af60:	69fa      	ldr	r2, [r7, #28]
 800af62:	69b9      	ldr	r1, [r7, #24]
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 f892 	bl	800b08e <I2C_WaitOnTXISFlagUntilTimeout>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e012      	b.n	800af9a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800af74:	893b      	ldrh	r3, [r7, #8]
 800af76:	b2da      	uxtb	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	9300      	str	r3, [sp, #0]
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	2200      	movs	r2, #0
 800af86:	2140      	movs	r1, #64	; 0x40
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f000 f831 	bl	800aff0 <I2C_WaitOnFlagUntilTimeout>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d001      	beq.n	800af98 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e000      	b.n	800af9a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	80002000 	.word	0x80002000

0800afa8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	f003 0302 	and.w	r3, r3, #2
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d103      	bne.n	800afc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2200      	movs	r2, #0
 800afc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	f003 0301 	and.w	r3, r3, #1
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d007      	beq.n	800afe4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	699a      	ldr	r2, [r3, #24]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f042 0201 	orr.w	r2, r2, #1
 800afe2:	619a      	str	r2, [r3, #24]
  }
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	4613      	mov	r3, r2
 800affe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b000:	e031      	b.n	800b066 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b008:	d02d      	beq.n	800b066 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b00a:	f7fe fd8f 	bl	8009b2c <HAL_GetTick>
 800b00e:	4602      	mov	r2, r0
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	1ad3      	subs	r3, r2, r3
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	d302      	bcc.n	800b020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d122      	bne.n	800b066 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	699a      	ldr	r2, [r3, #24]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	4013      	ands	r3, r2
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	bf0c      	ite	eq
 800b030:	2301      	moveq	r3, #1
 800b032:	2300      	movne	r3, #0
 800b034:	b2db      	uxtb	r3, r3
 800b036:	461a      	mov	r2, r3
 800b038:	79fb      	ldrb	r3, [r7, #7]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d113      	bne.n	800b066 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b042:	f043 0220 	orr.w	r2, r3, #32
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2220      	movs	r2, #32
 800b04e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e00f      	b.n	800b086 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	699a      	ldr	r2, [r3, #24]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	4013      	ands	r3, r2
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	429a      	cmp	r2, r3
 800b074:	bf0c      	ite	eq
 800b076:	2301      	moveq	r3, #1
 800b078:	2300      	movne	r3, #0
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	461a      	mov	r2, r3
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	429a      	cmp	r2, r3
 800b082:	d0be      	beq.n	800b002 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b09a:	e033      	b.n	800b104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	68b9      	ldr	r1, [r7, #8]
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f000 f87f 	bl	800b1a4 <I2C_IsErrorOccurred>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e031      	b.n	800b114 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b6:	d025      	beq.n	800b104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0b8:	f7fe fd38 	bl	8009b2c <HAL_GetTick>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	1ad3      	subs	r3, r2, r3
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d302      	bcc.n	800b0ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d11a      	bne.n	800b104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	f003 0302 	and.w	r3, r3, #2
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d013      	beq.n	800b104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e0:	f043 0220 	orr.w	r2, r3, #32
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	e007      	b.n	800b114 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d1c4      	bne.n	800b09c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b128:	e02f      	b.n	800b18a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	68b9      	ldr	r1, [r7, #8]
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f000 f838 	bl	800b1a4 <I2C_IsErrorOccurred>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d001      	beq.n	800b13e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	e02d      	b.n	800b19a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b13e:	f7fe fcf5 	bl	8009b2c <HAL_GetTick>
 800b142:	4602      	mov	r2, r0
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d302      	bcc.n	800b154 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d11a      	bne.n	800b18a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	f003 0320 	and.w	r3, r3, #32
 800b15e:	2b20      	cmp	r3, #32
 800b160:	d013      	beq.n	800b18a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b166:	f043 0220 	orr.w	r2, r3, #32
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2220      	movs	r2, #32
 800b172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e007      	b.n	800b19a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	f003 0320 	and.w	r3, r3, #32
 800b194:	2b20      	cmp	r3, #32
 800b196:	d1c8      	bne.n	800b12a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08a      	sub	sp, #40	; 0x28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	f003 0310 	and.w	r3, r3, #16
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d068      	beq.n	800b2a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2210      	movs	r2, #16
 800b1d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b1d8:	e049      	b.n	800b26e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e0:	d045      	beq.n	800b26e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b1e2:	f7fe fca3 	bl	8009b2c <HAL_GetTick>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d302      	bcc.n	800b1f8 <I2C_IsErrorOccurred+0x54>
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d13a      	bne.n	800b26e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b202:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b20a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b21a:	d121      	bne.n	800b260 <I2C_IsErrorOccurred+0xbc>
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b222:	d01d      	beq.n	800b260 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b224:	7cfb      	ldrb	r3, [r7, #19]
 800b226:	2b20      	cmp	r3, #32
 800b228:	d01a      	beq.n	800b260 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	685a      	ldr	r2, [r3, #4]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b238:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b23a:	f7fe fc77 	bl	8009b2c <HAL_GetTick>
 800b23e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b240:	e00e      	b.n	800b260 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b242:	f7fe fc73 	bl	8009b2c <HAL_GetTick>
 800b246:	4602      	mov	r2, r0
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	2b19      	cmp	r3, #25
 800b24e:	d907      	bls.n	800b260 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	f043 0320 	orr.w	r3, r3, #32
 800b256:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800b25e:	e006      	b.n	800b26e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	699b      	ldr	r3, [r3, #24]
 800b266:	f003 0320 	and.w	r3, r3, #32
 800b26a:	2b20      	cmp	r3, #32
 800b26c:	d1e9      	bne.n	800b242 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	f003 0320 	and.w	r3, r3, #32
 800b278:	2b20      	cmp	r3, #32
 800b27a:	d003      	beq.n	800b284 <I2C_IsErrorOccurred+0xe0>
 800b27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b280:	2b00      	cmp	r3, #0
 800b282:	d0aa      	beq.n	800b1da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d103      	bne.n	800b294 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2220      	movs	r2, #32
 800b292:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	f043 0304 	orr.w	r3, r3, #4
 800b29a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00b      	beq.n	800b2cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b2b4:	6a3b      	ldr	r3, [r7, #32]
 800b2b6:	f043 0301 	orr.w	r3, r3, #1
 800b2ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b2c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00b      	beq.n	800b2ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	f043 0308 	orr.w	r3, r3, #8
 800b2dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b2e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00b      	beq.n	800b310 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b2f8:	6a3b      	ldr	r3, [r7, #32]
 800b2fa:	f043 0302 	orr.w	r3, r3, #2
 800b2fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b308:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b314:	2b00      	cmp	r3, #0
 800b316:	d01c      	beq.n	800b352 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f7ff fe45 	bl	800afa8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6859      	ldr	r1, [r3, #4]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	4b0d      	ldr	r3, [pc, #52]	; (800b360 <I2C_IsErrorOccurred+0x1bc>)
 800b32a:	400b      	ands	r3, r1
 800b32c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	431a      	orrs	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2220      	movs	r2, #32
 800b33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b356:	4618      	mov	r0, r3
 800b358:	3728      	adds	r7, #40	; 0x28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	fe00e800 	.word	0xfe00e800

0800b364 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	607b      	str	r3, [r7, #4]
 800b36e:	460b      	mov	r3, r1
 800b370:	817b      	strh	r3, [r7, #10]
 800b372:	4613      	mov	r3, r2
 800b374:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b376:	897b      	ldrh	r3, [r7, #10]
 800b378:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b37c:	7a7b      	ldrb	r3, [r7, #9]
 800b37e:	041b      	lsls	r3, r3, #16
 800b380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b384:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b392:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	0d5b      	lsrs	r3, r3, #21
 800b39e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b3a2:	4b08      	ldr	r3, [pc, #32]	; (800b3c4 <I2C_TransferConfig+0x60>)
 800b3a4:	430b      	orrs	r3, r1
 800b3a6:	43db      	mvns	r3, r3
 800b3a8:	ea02 0103 	and.w	r1, r2, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b3b6:	bf00      	nop
 800b3b8:	371c      	adds	r7, #28
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	03ff63ff 	.word	0x03ff63ff

0800b3c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	d138      	bne.n	800b450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d101      	bne.n	800b3ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	e032      	b.n	800b452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2224      	movs	r2, #36	; 0x24
 800b3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f022 0201 	bic.w	r2, r2, #1
 800b40a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b41a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6819      	ldr	r1, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	430a      	orrs	r2, r1
 800b42a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f042 0201 	orr.w	r2, r2, #1
 800b43a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2220      	movs	r2, #32
 800b440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	e000      	b.n	800b452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b450:	2302      	movs	r3, #2
  }
}
 800b452:	4618      	mov	r0, r3
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b45e:	b480      	push	{r7}
 800b460:	b085      	sub	sp, #20
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	2b20      	cmp	r3, #32
 800b472:	d139      	bne.n	800b4e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d101      	bne.n	800b482 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b47e:	2302      	movs	r3, #2
 800b480:	e033      	b.n	800b4ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2224      	movs	r2, #36	; 0x24
 800b48e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f022 0201 	bic.w	r2, r2, #1
 800b4a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b4b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	021b      	lsls	r3, r3, #8
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f042 0201 	orr.w	r2, r2, #1
 800b4d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	e000      	b.n	800b4ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b4e8:	2302      	movs	r3, #2
  }
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
	...

0800b4f8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4fc:	4b05      	ldr	r3, [pc, #20]	; (800b514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a04      	ldr	r2, [pc, #16]	; (800b514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b506:	6013      	str	r3, [r2, #0]
}
 800b508:	bf00      	nop
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	40007000 	.word	0x40007000

0800b518 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b518:	b480      	push	{r7}
 800b51a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b51c:	4b04      	ldr	r3, [pc, #16]	; (800b530 <HAL_PWREx_GetVoltageRange+0x18>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b524:	4618      	mov	r0, r3
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	40007000 	.word	0x40007000

0800b534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b542:	d130      	bne.n	800b5a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b544:	4b23      	ldr	r3, [pc, #140]	; (800b5d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b54c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b550:	d038      	beq.n	800b5c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b552:	4b20      	ldr	r3, [pc, #128]	; (800b5d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b55a:	4a1e      	ldr	r2, [pc, #120]	; (800b5d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b55c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b560:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b562:	4b1d      	ldr	r3, [pc, #116]	; (800b5d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2232      	movs	r2, #50	; 0x32
 800b568:	fb02 f303 	mul.w	r3, r2, r3
 800b56c:	4a1b      	ldr	r2, [pc, #108]	; (800b5dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b56e:	fba2 2303 	umull	r2, r3, r2, r3
 800b572:	0c9b      	lsrs	r3, r3, #18
 800b574:	3301      	adds	r3, #1
 800b576:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b578:	e002      	b.n	800b580 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b580:	4b14      	ldr	r3, [pc, #80]	; (800b5d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b58c:	d102      	bne.n	800b594 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1f2      	bne.n	800b57a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b594:	4b0f      	ldr	r3, [pc, #60]	; (800b5d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b59c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5a0:	d110      	bne.n	800b5c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e00f      	b.n	800b5c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b5a6:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b5ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5b2:	d007      	beq.n	800b5c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b5b4:	4b07      	ldr	r3, [pc, #28]	; (800b5d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b5bc:	4a05      	ldr	r2, [pc, #20]	; (800b5d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b5be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	40007000 	.word	0x40007000
 800b5d8:	20000004 	.word	0x20000004
 800b5dc:	431bde83 	.word	0x431bde83

0800b5e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b088      	sub	sp, #32
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e3ca      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5f2:	4b97      	ldr	r3, [pc, #604]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	f003 030c 	and.w	r3, r3, #12
 800b5fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b5fc:	4b94      	ldr	r3, [pc, #592]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	f003 0303 	and.w	r3, r3, #3
 800b604:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 0310 	and.w	r3, r3, #16
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f000 80e4 	beq.w	800b7dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d007      	beq.n	800b62a <HAL_RCC_OscConfig+0x4a>
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	2b0c      	cmp	r3, #12
 800b61e:	f040 808b 	bne.w	800b738 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2b01      	cmp	r3, #1
 800b626:	f040 8087 	bne.w	800b738 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b62a:	4b89      	ldr	r3, [pc, #548]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 0302 	and.w	r3, r3, #2
 800b632:	2b00      	cmp	r3, #0
 800b634:	d005      	beq.n	800b642 <HAL_RCC_OscConfig+0x62>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e3a2      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1a      	ldr	r2, [r3, #32]
 800b646:	4b82      	ldr	r3, [pc, #520]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 0308 	and.w	r3, r3, #8
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d004      	beq.n	800b65c <HAL_RCC_OscConfig+0x7c>
 800b652:	4b7f      	ldr	r3, [pc, #508]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b65a:	e005      	b.n	800b668 <HAL_RCC_OscConfig+0x88>
 800b65c:	4b7c      	ldr	r3, [pc, #496]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b65e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b662:	091b      	lsrs	r3, r3, #4
 800b664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b668:	4293      	cmp	r3, r2
 800b66a:	d223      	bcs.n	800b6b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a1b      	ldr	r3, [r3, #32]
 800b670:	4618      	mov	r0, r3
 800b672:	f000 fd55 	bl	800c120 <RCC_SetFlashLatencyFromMSIRange>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e383      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b680:	4b73      	ldr	r3, [pc, #460]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a72      	ldr	r2, [pc, #456]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b686:	f043 0308 	orr.w	r3, r3, #8
 800b68a:	6013      	str	r3, [r2, #0]
 800b68c:	4b70      	ldr	r3, [pc, #448]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	496d      	ldr	r1, [pc, #436]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b69a:	4313      	orrs	r3, r2
 800b69c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b69e:	4b6c      	ldr	r3, [pc, #432]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	69db      	ldr	r3, [r3, #28]
 800b6aa:	021b      	lsls	r3, r3, #8
 800b6ac:	4968      	ldr	r1, [pc, #416]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	604b      	str	r3, [r1, #4]
 800b6b2:	e025      	b.n	800b700 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b6b4:	4b66      	ldr	r3, [pc, #408]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a65      	ldr	r2, [pc, #404]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b6ba:	f043 0308 	orr.w	r3, r3, #8
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	4b63      	ldr	r3, [pc, #396]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	4960      	ldr	r1, [pc, #384]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b6d2:	4b5f      	ldr	r3, [pc, #380]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	69db      	ldr	r3, [r3, #28]
 800b6de:	021b      	lsls	r3, r3, #8
 800b6e0:	495b      	ldr	r1, [pc, #364]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d109      	bne.n	800b700 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a1b      	ldr	r3, [r3, #32]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fd15 	bl	800c120 <RCC_SetFlashLatencyFromMSIRange>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d001      	beq.n	800b700 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e343      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b700:	f000 fc4a 	bl	800bf98 <HAL_RCC_GetSysClockFreq>
 800b704:	4602      	mov	r2, r0
 800b706:	4b52      	ldr	r3, [pc, #328]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	091b      	lsrs	r3, r3, #4
 800b70c:	f003 030f 	and.w	r3, r3, #15
 800b710:	4950      	ldr	r1, [pc, #320]	; (800b854 <HAL_RCC_OscConfig+0x274>)
 800b712:	5ccb      	ldrb	r3, [r1, r3]
 800b714:	f003 031f 	and.w	r3, r3, #31
 800b718:	fa22 f303 	lsr.w	r3, r2, r3
 800b71c:	4a4e      	ldr	r2, [pc, #312]	; (800b858 <HAL_RCC_OscConfig+0x278>)
 800b71e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b720:	4b4e      	ldr	r3, [pc, #312]	; (800b85c <HAL_RCC_OscConfig+0x27c>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4618      	mov	r0, r3
 800b726:	f7fe f9b1 	bl	8009a8c <HAL_InitTick>
 800b72a:	4603      	mov	r3, r0
 800b72c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d052      	beq.n	800b7da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
 800b736:	e327      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d032      	beq.n	800b7a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b740:	4b43      	ldr	r3, [pc, #268]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a42      	ldr	r2, [pc, #264]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b746:	f043 0301 	orr.w	r3, r3, #1
 800b74a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b74c:	f7fe f9ee 	bl	8009b2c <HAL_GetTick>
 800b750:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b752:	e008      	b.n	800b766 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b754:	f7fe f9ea 	bl	8009b2c <HAL_GetTick>
 800b758:	4602      	mov	r2, r0
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	1ad3      	subs	r3, r2, r3
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d901      	bls.n	800b766 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800b762:	2303      	movs	r3, #3
 800b764:	e310      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b766:	4b3a      	ldr	r3, [pc, #232]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0302 	and.w	r3, r3, #2
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d0f0      	beq.n	800b754 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b772:	4b37      	ldr	r3, [pc, #220]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a36      	ldr	r2, [pc, #216]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b778:	f043 0308 	orr.w	r3, r3, #8
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	4b34      	ldr	r3, [pc, #208]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a1b      	ldr	r3, [r3, #32]
 800b78a:	4931      	ldr	r1, [pc, #196]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b78c:	4313      	orrs	r3, r2
 800b78e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b790:	4b2f      	ldr	r3, [pc, #188]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	69db      	ldr	r3, [r3, #28]
 800b79c:	021b      	lsls	r3, r3, #8
 800b79e:	492c      	ldr	r1, [pc, #176]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	604b      	str	r3, [r1, #4]
 800b7a4:	e01a      	b.n	800b7dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b7a6:	4b2a      	ldr	r3, [pc, #168]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a29      	ldr	r2, [pc, #164]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b7ac:	f023 0301 	bic.w	r3, r3, #1
 800b7b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b7b2:	f7fe f9bb 	bl	8009b2c <HAL_GetTick>
 800b7b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b7b8:	e008      	b.n	800b7cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b7ba:	f7fe f9b7 	bl	8009b2c <HAL_GetTick>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d901      	bls.n	800b7cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e2dd      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b7cc:	4b20      	ldr	r3, [pc, #128]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 0302 	and.w	r3, r3, #2
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1f0      	bne.n	800b7ba <HAL_RCC_OscConfig+0x1da>
 800b7d8:	e000      	b.n	800b7dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b7da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0301 	and.w	r3, r3, #1
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d074      	beq.n	800b8d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	2b08      	cmp	r3, #8
 800b7ec:	d005      	beq.n	800b7fa <HAL_RCC_OscConfig+0x21a>
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	2b0c      	cmp	r3, #12
 800b7f2:	d10e      	bne.n	800b812 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2b03      	cmp	r3, #3
 800b7f8:	d10b      	bne.n	800b812 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7fa:	4b15      	ldr	r3, [pc, #84]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b802:	2b00      	cmp	r3, #0
 800b804:	d064      	beq.n	800b8d0 <HAL_RCC_OscConfig+0x2f0>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d160      	bne.n	800b8d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	e2ba      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b81a:	d106      	bne.n	800b82a <HAL_RCC_OscConfig+0x24a>
 800b81c:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a0b      	ldr	r2, [pc, #44]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b826:	6013      	str	r3, [r2, #0]
 800b828:	e026      	b.n	800b878 <HAL_RCC_OscConfig+0x298>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b832:	d115      	bne.n	800b860 <HAL_RCC_OscConfig+0x280>
 800b834:	4b06      	ldr	r3, [pc, #24]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a05      	ldr	r2, [pc, #20]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b83a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	4b03      	ldr	r3, [pc, #12]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a02      	ldr	r2, [pc, #8]	; (800b850 <HAL_RCC_OscConfig+0x270>)
 800b846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	e014      	b.n	800b878 <HAL_RCC_OscConfig+0x298>
 800b84e:	bf00      	nop
 800b850:	40021000 	.word	0x40021000
 800b854:	0801ebe0 	.word	0x0801ebe0
 800b858:	20000004 	.word	0x20000004
 800b85c:	200001a8 	.word	0x200001a8
 800b860:	4ba0      	ldr	r3, [pc, #640]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a9f      	ldr	r2, [pc, #636]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	4b9d      	ldr	r3, [pc, #628]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a9c      	ldr	r2, [pc, #624]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d013      	beq.n	800b8a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b880:	f7fe f954 	bl	8009b2c <HAL_GetTick>
 800b884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b886:	e008      	b.n	800b89a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b888:	f7fe f950 	bl	8009b2c <HAL_GetTick>
 800b88c:	4602      	mov	r2, r0
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	2b64      	cmp	r3, #100	; 0x64
 800b894:	d901      	bls.n	800b89a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e276      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b89a:	4b92      	ldr	r3, [pc, #584]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d0f0      	beq.n	800b888 <HAL_RCC_OscConfig+0x2a8>
 800b8a6:	e014      	b.n	800b8d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a8:	f7fe f940 	bl	8009b2c <HAL_GetTick>
 800b8ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b8ae:	e008      	b.n	800b8c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8b0:	f7fe f93c 	bl	8009b2c <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	2b64      	cmp	r3, #100	; 0x64
 800b8bc:	d901      	bls.n	800b8c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e262      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b8c2:	4b88      	ldr	r3, [pc, #544]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1f0      	bne.n	800b8b0 <HAL_RCC_OscConfig+0x2d0>
 800b8ce:	e000      	b.n	800b8d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f003 0302 	and.w	r3, r3, #2
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d060      	beq.n	800b9a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	2b04      	cmp	r3, #4
 800b8e2:	d005      	beq.n	800b8f0 <HAL_RCC_OscConfig+0x310>
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	2b0c      	cmp	r3, #12
 800b8e8:	d119      	bne.n	800b91e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d116      	bne.n	800b91e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b8f0:	4b7c      	ldr	r3, [pc, #496]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d005      	beq.n	800b908 <HAL_RCC_OscConfig+0x328>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	e23f      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b908:	4b76      	ldr	r3, [pc, #472]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	061b      	lsls	r3, r3, #24
 800b916:	4973      	ldr	r1, [pc, #460]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b91c:	e040      	b.n	800b9a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d023      	beq.n	800b96e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b926:	4b6f      	ldr	r3, [pc, #444]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a6e      	ldr	r2, [pc, #440]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b92c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b932:	f7fe f8fb 	bl	8009b2c <HAL_GetTick>
 800b936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b938:	e008      	b.n	800b94c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b93a:	f7fe f8f7 	bl	8009b2c <HAL_GetTick>
 800b93e:	4602      	mov	r2, r0
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	2b02      	cmp	r3, #2
 800b946:	d901      	bls.n	800b94c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b948:	2303      	movs	r3, #3
 800b94a:	e21d      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b94c:	4b65      	ldr	r3, [pc, #404]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b954:	2b00      	cmp	r3, #0
 800b956:	d0f0      	beq.n	800b93a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b958:	4b62      	ldr	r3, [pc, #392]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	061b      	lsls	r3, r3, #24
 800b966:	495f      	ldr	r1, [pc, #380]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b968:	4313      	orrs	r3, r2
 800b96a:	604b      	str	r3, [r1, #4]
 800b96c:	e018      	b.n	800b9a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b96e:	4b5d      	ldr	r3, [pc, #372]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a5c      	ldr	r2, [pc, #368]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b97a:	f7fe f8d7 	bl	8009b2c <HAL_GetTick>
 800b97e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b980:	e008      	b.n	800b994 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b982:	f7fe f8d3 	bl	8009b2c <HAL_GetTick>
 800b986:	4602      	mov	r2, r0
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d901      	bls.n	800b994 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b990:	2303      	movs	r3, #3
 800b992:	e1f9      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b994:	4b53      	ldr	r3, [pc, #332]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1f0      	bne.n	800b982 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0308 	and.w	r3, r3, #8
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d03c      	beq.n	800ba26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d01c      	beq.n	800b9ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b9b4:	4b4b      	ldr	r3, [pc, #300]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b9b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9ba:	4a4a      	ldr	r2, [pc, #296]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b9bc:	f043 0301 	orr.w	r3, r3, #1
 800b9c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9c4:	f7fe f8b2 	bl	8009b2c <HAL_GetTick>
 800b9c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b9ca:	e008      	b.n	800b9de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9cc:	f7fe f8ae 	bl	8009b2c <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d901      	bls.n	800b9de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e1d4      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b9de:	4b41      	ldr	r3, [pc, #260]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b9e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9e4:	f003 0302 	and.w	r3, r3, #2
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d0ef      	beq.n	800b9cc <HAL_RCC_OscConfig+0x3ec>
 800b9ec:	e01b      	b.n	800ba26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9ee:	4b3d      	ldr	r3, [pc, #244]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b9f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9f4:	4a3b      	ldr	r2, [pc, #236]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800b9f6:	f023 0301 	bic.w	r3, r3, #1
 800b9fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9fe:	f7fe f895 	bl	8009b2c <HAL_GetTick>
 800ba02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ba04:	e008      	b.n	800ba18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba06:	f7fe f891 	bl	8009b2c <HAL_GetTick>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d901      	bls.n	800ba18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ba14:	2303      	movs	r3, #3
 800ba16:	e1b7      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ba18:	4b32      	ldr	r3, [pc, #200]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800ba1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba1e:	f003 0302 	and.w	r3, r3, #2
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1ef      	bne.n	800ba06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 0304 	and.w	r3, r3, #4
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 80a6 	beq.w	800bb80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba34:	2300      	movs	r3, #0
 800ba36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ba38:	4b2a      	ldr	r3, [pc, #168]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800ba3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10d      	bne.n	800ba60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba44:	4b27      	ldr	r3, [pc, #156]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800ba46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba48:	4a26      	ldr	r2, [pc, #152]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800ba4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba4e:	6593      	str	r3, [r2, #88]	; 0x58
 800ba50:	4b24      	ldr	r3, [pc, #144]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800ba52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba58:	60bb      	str	r3, [r7, #8]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba60:	4b21      	ldr	r3, [pc, #132]	; (800bae8 <HAL_RCC_OscConfig+0x508>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d118      	bne.n	800ba9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba6c:	4b1e      	ldr	r3, [pc, #120]	; (800bae8 <HAL_RCC_OscConfig+0x508>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a1d      	ldr	r2, [pc, #116]	; (800bae8 <HAL_RCC_OscConfig+0x508>)
 800ba72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba78:	f7fe f858 	bl	8009b2c <HAL_GetTick>
 800ba7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba7e:	e008      	b.n	800ba92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba80:	f7fe f854 	bl	8009b2c <HAL_GetTick>
 800ba84:	4602      	mov	r2, r0
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d901      	bls.n	800ba92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ba8e:	2303      	movs	r3, #3
 800ba90:	e17a      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba92:	4b15      	ldr	r3, [pc, #84]	; (800bae8 <HAL_RCC_OscConfig+0x508>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d0f0      	beq.n	800ba80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d108      	bne.n	800bab8 <HAL_RCC_OscConfig+0x4d8>
 800baa6:	4b0f      	ldr	r3, [pc, #60]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800baa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baac:	4a0d      	ldr	r2, [pc, #52]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800baae:	f043 0301 	orr.w	r3, r3, #1
 800bab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bab6:	e029      	b.n	800bb0c <HAL_RCC_OscConfig+0x52c>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	2b05      	cmp	r3, #5
 800babe:	d115      	bne.n	800baec <HAL_RCC_OscConfig+0x50c>
 800bac0:	4b08      	ldr	r3, [pc, #32]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800bac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bac6:	4a07      	ldr	r2, [pc, #28]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800bac8:	f043 0304 	orr.w	r3, r3, #4
 800bacc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bad0:	4b04      	ldr	r3, [pc, #16]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800bad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bad6:	4a03      	ldr	r2, [pc, #12]	; (800bae4 <HAL_RCC_OscConfig+0x504>)
 800bad8:	f043 0301 	orr.w	r3, r3, #1
 800badc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bae0:	e014      	b.n	800bb0c <HAL_RCC_OscConfig+0x52c>
 800bae2:	bf00      	nop
 800bae4:	40021000 	.word	0x40021000
 800bae8:	40007000 	.word	0x40007000
 800baec:	4b9c      	ldr	r3, [pc, #624]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800baee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baf2:	4a9b      	ldr	r2, [pc, #620]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800baf4:	f023 0301 	bic.w	r3, r3, #1
 800baf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bafc:	4b98      	ldr	r3, [pc, #608]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb02:	4a97      	ldr	r2, [pc, #604]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bb04:	f023 0304 	bic.w	r3, r3, #4
 800bb08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d016      	beq.n	800bb42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb14:	f7fe f80a 	bl	8009b2c <HAL_GetTick>
 800bb18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb1a:	e00a      	b.n	800bb32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb1c:	f7fe f806 	bl	8009b2c <HAL_GetTick>
 800bb20:	4602      	mov	r2, r0
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d901      	bls.n	800bb32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	e12a      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb32:	4b8b      	ldr	r3, [pc, #556]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb38:	f003 0302 	and.w	r3, r3, #2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d0ed      	beq.n	800bb1c <HAL_RCC_OscConfig+0x53c>
 800bb40:	e015      	b.n	800bb6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb42:	f7fd fff3 	bl	8009b2c <HAL_GetTick>
 800bb46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb48:	e00a      	b.n	800bb60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb4a:	f7fd ffef 	bl	8009b2c <HAL_GetTick>
 800bb4e:	4602      	mov	r2, r0
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d901      	bls.n	800bb60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e113      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bb60:	4b7f      	ldr	r3, [pc, #508]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bb62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb66:	f003 0302 	and.w	r3, r3, #2
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1ed      	bne.n	800bb4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb6e:	7ffb      	ldrb	r3, [r7, #31]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d105      	bne.n	800bb80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb74:	4b7a      	ldr	r3, [pc, #488]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bb76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb78:	4a79      	ldr	r2, [pc, #484]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bb7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	f000 80fe 	beq.w	800bd86 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	f040 80d0 	bne.w	800bd34 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800bb94:	4b72      	ldr	r3, [pc, #456]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f003 0203 	and.w	r2, r3, #3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d130      	bne.n	800bc0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d127      	bne.n	800bc0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d11f      	bne.n	800bc0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bbd4:	2a07      	cmp	r2, #7
 800bbd6:	bf14      	ite	ne
 800bbd8:	2201      	movne	r2, #1
 800bbda:	2200      	moveq	r2, #0
 800bbdc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d113      	bne.n	800bc0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbec:	085b      	lsrs	r3, r3, #1
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d109      	bne.n	800bc0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc00:	085b      	lsrs	r3, r3, #1
 800bc02:	3b01      	subs	r3, #1
 800bc04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d06e      	beq.n	800bce8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	2b0c      	cmp	r3, #12
 800bc0e:	d069      	beq.n	800bce4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bc10:	4b53      	ldr	r3, [pc, #332]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d105      	bne.n	800bc28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800bc1c:	4b50      	ldr	r3, [pc, #320]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e0ad      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bc2c:	4b4c      	ldr	r3, [pc, #304]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a4b      	ldr	r2, [pc, #300]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bc32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bc38:	f7fd ff78 	bl	8009b2c <HAL_GetTick>
 800bc3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc3e:	e008      	b.n	800bc52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc40:	f7fd ff74 	bl	8009b2c <HAL_GetTick>
 800bc44:	4602      	mov	r2, r0
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d901      	bls.n	800bc52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e09a      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc52:	4b43      	ldr	r3, [pc, #268]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1f0      	bne.n	800bc40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc5e:	4b40      	ldr	r3, [pc, #256]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bc60:	68da      	ldr	r2, [r3, #12]
 800bc62:	4b40      	ldr	r3, [pc, #256]	; (800bd64 <HAL_RCC_OscConfig+0x784>)
 800bc64:	4013      	ands	r3, r2
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc6e:	3a01      	subs	r2, #1
 800bc70:	0112      	lsls	r2, r2, #4
 800bc72:	4311      	orrs	r1, r2
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bc78:	0212      	lsls	r2, r2, #8
 800bc7a:	4311      	orrs	r1, r2
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc80:	0852      	lsrs	r2, r2, #1
 800bc82:	3a01      	subs	r2, #1
 800bc84:	0552      	lsls	r2, r2, #21
 800bc86:	4311      	orrs	r1, r2
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bc8c:	0852      	lsrs	r2, r2, #1
 800bc8e:	3a01      	subs	r2, #1
 800bc90:	0652      	lsls	r2, r2, #25
 800bc92:	4311      	orrs	r1, r2
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bc98:	0912      	lsrs	r2, r2, #4
 800bc9a:	0452      	lsls	r2, r2, #17
 800bc9c:	430a      	orrs	r2, r1
 800bc9e:	4930      	ldr	r1, [pc, #192]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800bca4:	4b2e      	ldr	r3, [pc, #184]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a2d      	ldr	r2, [pc, #180]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bcaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bcb0:	4b2b      	ldr	r3, [pc, #172]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	4a2a      	ldr	r2, [pc, #168]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bcb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bcbc:	f7fd ff36 	bl	8009b2c <HAL_GetTick>
 800bcc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcc2:	e008      	b.n	800bcd6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcc4:	f7fd ff32 	bl	8009b2c <HAL_GetTick>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	2b02      	cmp	r3, #2
 800bcd0:	d901      	bls.n	800bcd6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	e058      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcd6:	4b22      	ldr	r3, [pc, #136]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d0f0      	beq.n	800bcc4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bce2:	e050      	b.n	800bd86 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e04f      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bce8:	4b1d      	ldr	r3, [pc, #116]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d148      	bne.n	800bd86 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bcf4:	4b1a      	ldr	r3, [pc, #104]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a19      	ldr	r2, [pc, #100]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bcfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bd00:	4b17      	ldr	r3, [pc, #92]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	4a16      	ldr	r2, [pc, #88]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bd06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bd0c:	f7fd ff0e 	bl	8009b2c <HAL_GetTick>
 800bd10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bd12:	e008      	b.n	800bd26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd14:	f7fd ff0a 	bl	8009b2c <HAL_GetTick>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d901      	bls.n	800bd26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800bd22:	2303      	movs	r3, #3
 800bd24:	e030      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bd26:	4b0e      	ldr	r3, [pc, #56]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d0f0      	beq.n	800bd14 <HAL_RCC_OscConfig+0x734>
 800bd32:	e028      	b.n	800bd86 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	2b0c      	cmp	r3, #12
 800bd38:	d023      	beq.n	800bd82 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd3a:	4b09      	ldr	r3, [pc, #36]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a08      	ldr	r2, [pc, #32]	; (800bd60 <HAL_RCC_OscConfig+0x780>)
 800bd40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd46:	f7fd fef1 	bl	8009b2c <HAL_GetTick>
 800bd4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd4c:	e00c      	b.n	800bd68 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd4e:	f7fd feed 	bl	8009b2c <HAL_GetTick>
 800bd52:	4602      	mov	r2, r0
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	1ad3      	subs	r3, r2, r3
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d905      	bls.n	800bd68 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	e013      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
 800bd60:	40021000 	.word	0x40021000
 800bd64:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd68:	4b09      	ldr	r3, [pc, #36]	; (800bd90 <HAL_RCC_OscConfig+0x7b0>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1ec      	bne.n	800bd4e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800bd74:	4b06      	ldr	r3, [pc, #24]	; (800bd90 <HAL_RCC_OscConfig+0x7b0>)
 800bd76:	68da      	ldr	r2, [r3, #12]
 800bd78:	4905      	ldr	r1, [pc, #20]	; (800bd90 <HAL_RCC_OscConfig+0x7b0>)
 800bd7a:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <HAL_RCC_OscConfig+0x7b4>)
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	60cb      	str	r3, [r1, #12]
 800bd80:	e001      	b.n	800bd86 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e000      	b.n	800bd88 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3720      	adds	r7, #32
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	40021000 	.word	0x40021000
 800bd94:	feeefffc 	.word	0xfeeefffc

0800bd98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d101      	bne.n	800bdac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e0e7      	b.n	800bf7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bdac:	4b75      	ldr	r3, [pc, #468]	; (800bf84 <HAL_RCC_ClockConfig+0x1ec>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 0307 	and.w	r3, r3, #7
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d910      	bls.n	800bddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdba:	4b72      	ldr	r3, [pc, #456]	; (800bf84 <HAL_RCC_ClockConfig+0x1ec>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f023 0207 	bic.w	r2, r3, #7
 800bdc2:	4970      	ldr	r1, [pc, #448]	; (800bf84 <HAL_RCC_ClockConfig+0x1ec>)
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdca:	4b6e      	ldr	r3, [pc, #440]	; (800bf84 <HAL_RCC_ClockConfig+0x1ec>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f003 0307 	and.w	r3, r3, #7
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d001      	beq.n	800bddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e0cf      	b.n	800bf7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 0302 	and.w	r3, r3, #2
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d010      	beq.n	800be0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	689a      	ldr	r2, [r3, #8]
 800bdec:	4b66      	ldr	r3, [pc, #408]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d908      	bls.n	800be0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdf8:	4b63      	ldr	r3, [pc, #396]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	4960      	ldr	r1, [pc, #384]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800be06:	4313      	orrs	r3, r2
 800be08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	2b00      	cmp	r3, #0
 800be14:	d04c      	beq.n	800beb0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	2b03      	cmp	r3, #3
 800be1c:	d107      	bne.n	800be2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be1e:	4b5a      	ldr	r3, [pc, #360]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be26:	2b00      	cmp	r3, #0
 800be28:	d121      	bne.n	800be6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e0a6      	b.n	800bf7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	2b02      	cmp	r3, #2
 800be34:	d107      	bne.n	800be46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be36:	4b54      	ldr	r3, [pc, #336]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d115      	bne.n	800be6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	e09a      	b.n	800bf7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d107      	bne.n	800be5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800be4e:	4b4e      	ldr	r3, [pc, #312]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f003 0302 	and.w	r3, r3, #2
 800be56:	2b00      	cmp	r3, #0
 800be58:	d109      	bne.n	800be6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e08e      	b.n	800bf7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800be5e:	4b4a      	ldr	r3, [pc, #296]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800be6a:	2301      	movs	r3, #1
 800be6c:	e086      	b.n	800bf7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be6e:	4b46      	ldr	r3, [pc, #280]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f023 0203 	bic.w	r2, r3, #3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	4943      	ldr	r1, [pc, #268]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800be7c:	4313      	orrs	r3, r2
 800be7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be80:	f7fd fe54 	bl	8009b2c <HAL_GetTick>
 800be84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be86:	e00a      	b.n	800be9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be88:	f7fd fe50 	bl	8009b2c <HAL_GetTick>
 800be8c:	4602      	mov	r2, r0
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	f241 3288 	movw	r2, #5000	; 0x1388
 800be96:	4293      	cmp	r3, r2
 800be98:	d901      	bls.n	800be9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800be9a:	2303      	movs	r3, #3
 800be9c:	e06e      	b.n	800bf7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be9e:	4b3a      	ldr	r3, [pc, #232]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	f003 020c 	and.w	r2, r3, #12
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	429a      	cmp	r2, r3
 800beae:	d1eb      	bne.n	800be88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f003 0302 	and.w	r3, r3, #2
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d010      	beq.n	800bede <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689a      	ldr	r2, [r3, #8]
 800bec0:	4b31      	ldr	r3, [pc, #196]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bec8:	429a      	cmp	r2, r3
 800beca:	d208      	bcs.n	800bede <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800becc:	4b2e      	ldr	r3, [pc, #184]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	492b      	ldr	r1, [pc, #172]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800beda:	4313      	orrs	r3, r2
 800bedc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bede:	4b29      	ldr	r3, [pc, #164]	; (800bf84 <HAL_RCC_ClockConfig+0x1ec>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 0307 	and.w	r3, r3, #7
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d210      	bcs.n	800bf0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beec:	4b25      	ldr	r3, [pc, #148]	; (800bf84 <HAL_RCC_ClockConfig+0x1ec>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f023 0207 	bic.w	r2, r3, #7
 800bef4:	4923      	ldr	r1, [pc, #140]	; (800bf84 <HAL_RCC_ClockConfig+0x1ec>)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	4313      	orrs	r3, r2
 800befa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800befc:	4b21      	ldr	r3, [pc, #132]	; (800bf84 <HAL_RCC_ClockConfig+0x1ec>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f003 0307 	and.w	r3, r3, #7
 800bf04:	683a      	ldr	r2, [r7, #0]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d001      	beq.n	800bf0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e036      	b.n	800bf7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f003 0304 	and.w	r3, r3, #4
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d008      	beq.n	800bf2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bf1a:	4b1b      	ldr	r3, [pc, #108]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	4918      	ldr	r1, [pc, #96]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 0308 	and.w	r3, r3, #8
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d009      	beq.n	800bf4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bf38:	4b13      	ldr	r3, [pc, #76]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	4910      	ldr	r1, [pc, #64]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bf4c:	f000 f824 	bl	800bf98 <HAL_RCC_GetSysClockFreq>
 800bf50:	4602      	mov	r2, r0
 800bf52:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <HAL_RCC_ClockConfig+0x1f0>)
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	091b      	lsrs	r3, r3, #4
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	490b      	ldr	r1, [pc, #44]	; (800bf8c <HAL_RCC_ClockConfig+0x1f4>)
 800bf5e:	5ccb      	ldrb	r3, [r1, r3]
 800bf60:	f003 031f 	and.w	r3, r3, #31
 800bf64:	fa22 f303 	lsr.w	r3, r2, r3
 800bf68:	4a09      	ldr	r2, [pc, #36]	; (800bf90 <HAL_RCC_ClockConfig+0x1f8>)
 800bf6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bf6c:	4b09      	ldr	r3, [pc, #36]	; (800bf94 <HAL_RCC_ClockConfig+0x1fc>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7fd fd8b 	bl	8009a8c <HAL_InitTick>
 800bf76:	4603      	mov	r3, r0
 800bf78:	72fb      	strb	r3, [r7, #11]

  return status;
 800bf7a:	7afb      	ldrb	r3, [r7, #11]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	40022000 	.word	0x40022000
 800bf88:	40021000 	.word	0x40021000
 800bf8c:	0801ebe0 	.word	0x0801ebe0
 800bf90:	20000004 	.word	0x20000004
 800bf94:	200001a8 	.word	0x200001a8

0800bf98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b089      	sub	sp, #36	; 0x24
 800bf9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	61fb      	str	r3, [r7, #28]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bfa6:	4b3e      	ldr	r3, [pc, #248]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f003 030c 	and.w	r3, r3, #12
 800bfae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bfb0:	4b3b      	ldr	r3, [pc, #236]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	f003 0303 	and.w	r3, r3, #3
 800bfb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d005      	beq.n	800bfcc <HAL_RCC_GetSysClockFreq+0x34>
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	2b0c      	cmp	r3, #12
 800bfc4:	d121      	bne.n	800c00a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d11e      	bne.n	800c00a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bfcc:	4b34      	ldr	r3, [pc, #208]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 0308 	and.w	r3, r3, #8
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d107      	bne.n	800bfe8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bfd8:	4b31      	ldr	r3, [pc, #196]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfde:	0a1b      	lsrs	r3, r3, #8
 800bfe0:	f003 030f 	and.w	r3, r3, #15
 800bfe4:	61fb      	str	r3, [r7, #28]
 800bfe6:	e005      	b.n	800bff4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bfe8:	4b2d      	ldr	r3, [pc, #180]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	091b      	lsrs	r3, r3, #4
 800bfee:	f003 030f 	and.w	r3, r3, #15
 800bff2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bff4:	4a2b      	ldr	r2, [pc, #172]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bffc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10d      	bne.n	800c020 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c008:	e00a      	b.n	800c020 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	2b04      	cmp	r3, #4
 800c00e:	d102      	bne.n	800c016 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c010:	4b25      	ldr	r3, [pc, #148]	; (800c0a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800c012:	61bb      	str	r3, [r7, #24]
 800c014:	e004      	b.n	800c020 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	2b08      	cmp	r3, #8
 800c01a:	d101      	bne.n	800c020 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c01c:	4b23      	ldr	r3, [pc, #140]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x114>)
 800c01e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	2b0c      	cmp	r3, #12
 800c024:	d134      	bne.n	800c090 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c026:	4b1e      	ldr	r3, [pc, #120]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	f003 0303 	and.w	r3, r3, #3
 800c02e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2b02      	cmp	r3, #2
 800c034:	d003      	beq.n	800c03e <HAL_RCC_GetSysClockFreq+0xa6>
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	2b03      	cmp	r3, #3
 800c03a:	d003      	beq.n	800c044 <HAL_RCC_GetSysClockFreq+0xac>
 800c03c:	e005      	b.n	800c04a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c03e:	4b1a      	ldr	r3, [pc, #104]	; (800c0a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800c040:	617b      	str	r3, [r7, #20]
      break;
 800c042:	e005      	b.n	800c050 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c044:	4b19      	ldr	r3, [pc, #100]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x114>)
 800c046:	617b      	str	r3, [r7, #20]
      break;
 800c048:	e002      	b.n	800c050 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	617b      	str	r3, [r7, #20]
      break;
 800c04e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c050:	4b13      	ldr	r3, [pc, #76]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	091b      	lsrs	r3, r3, #4
 800c056:	f003 0307 	and.w	r3, r3, #7
 800c05a:	3301      	adds	r3, #1
 800c05c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c05e:	4b10      	ldr	r3, [pc, #64]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	0a1b      	lsrs	r3, r3, #8
 800c064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	fb03 f202 	mul.w	r2, r3, r2
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	fbb2 f3f3 	udiv	r3, r2, r3
 800c074:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c076:	4b0a      	ldr	r3, [pc, #40]	; (800c0a0 <HAL_RCC_GetSysClockFreq+0x108>)
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	0e5b      	lsrs	r3, r3, #25
 800c07c:	f003 0303 	and.w	r3, r3, #3
 800c080:	3301      	adds	r3, #1
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c08e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c090:	69bb      	ldr	r3, [r7, #24]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3724      	adds	r7, #36	; 0x24
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	40021000 	.word	0x40021000
 800c0a4:	0801ebf8 	.word	0x0801ebf8
 800c0a8:	00f42400 	.word	0x00f42400
 800c0ac:	007a1200 	.word	0x007a1200

0800c0b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0b4:	4b03      	ldr	r3, [pc, #12]	; (800c0c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
 800c0c2:	bf00      	nop
 800c0c4:	20000004 	.word	0x20000004

0800c0c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c0cc:	f7ff fff0 	bl	800c0b0 <HAL_RCC_GetHCLKFreq>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	4b06      	ldr	r3, [pc, #24]	; (800c0ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	0a1b      	lsrs	r3, r3, #8
 800c0d8:	f003 0307 	and.w	r3, r3, #7
 800c0dc:	4904      	ldr	r1, [pc, #16]	; (800c0f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c0de:	5ccb      	ldrb	r3, [r1, r3]
 800c0e0:	f003 031f 	and.w	r3, r3, #31
 800c0e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	40021000 	.word	0x40021000
 800c0f0:	0801ebf0 	.word	0x0801ebf0

0800c0f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c0f8:	f7ff ffda 	bl	800c0b0 <HAL_RCC_GetHCLKFreq>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	4b06      	ldr	r3, [pc, #24]	; (800c118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	0adb      	lsrs	r3, r3, #11
 800c104:	f003 0307 	and.w	r3, r3, #7
 800c108:	4904      	ldr	r1, [pc, #16]	; (800c11c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c10a:	5ccb      	ldrb	r3, [r1, r3]
 800c10c:	f003 031f 	and.w	r3, r3, #31
 800c110:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c114:	4618      	mov	r0, r3
 800c116:	bd80      	pop	{r7, pc}
 800c118:	40021000 	.word	0x40021000
 800c11c:	0801ebf0 	.word	0x0801ebf0

0800c120 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c128:	2300      	movs	r3, #0
 800c12a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c12c:	4b2a      	ldr	r3, [pc, #168]	; (800c1d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c134:	2b00      	cmp	r3, #0
 800c136:	d003      	beq.n	800c140 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c138:	f7ff f9ee 	bl	800b518 <HAL_PWREx_GetVoltageRange>
 800c13c:	6178      	str	r0, [r7, #20]
 800c13e:	e014      	b.n	800c16a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c140:	4b25      	ldr	r3, [pc, #148]	; (800c1d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c144:	4a24      	ldr	r2, [pc, #144]	; (800c1d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c14a:	6593      	str	r3, [r2, #88]	; 0x58
 800c14c:	4b22      	ldr	r3, [pc, #136]	; (800c1d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c154:	60fb      	str	r3, [r7, #12]
 800c156:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c158:	f7ff f9de 	bl	800b518 <HAL_PWREx_GetVoltageRange>
 800c15c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c15e:	4b1e      	ldr	r3, [pc, #120]	; (800c1d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c162:	4a1d      	ldr	r2, [pc, #116]	; (800c1d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c168:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c170:	d10b      	bne.n	800c18a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b80      	cmp	r3, #128	; 0x80
 800c176:	d919      	bls.n	800c1ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2ba0      	cmp	r3, #160	; 0xa0
 800c17c:	d902      	bls.n	800c184 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c17e:	2302      	movs	r3, #2
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	e013      	b.n	800c1ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c184:	2301      	movs	r3, #1
 800c186:	613b      	str	r3, [r7, #16]
 800c188:	e010      	b.n	800c1ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2b80      	cmp	r3, #128	; 0x80
 800c18e:	d902      	bls.n	800c196 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c190:	2303      	movs	r3, #3
 800c192:	613b      	str	r3, [r7, #16]
 800c194:	e00a      	b.n	800c1ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b80      	cmp	r3, #128	; 0x80
 800c19a:	d102      	bne.n	800c1a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c19c:	2302      	movs	r3, #2
 800c19e:	613b      	str	r3, [r7, #16]
 800c1a0:	e004      	b.n	800c1ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b70      	cmp	r3, #112	; 0x70
 800c1a6:	d101      	bne.n	800c1ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c1ac:	4b0b      	ldr	r3, [pc, #44]	; (800c1dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f023 0207 	bic.w	r2, r3, #7
 800c1b4:	4909      	ldr	r1, [pc, #36]	; (800c1dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c1bc:	4b07      	ldr	r3, [pc, #28]	; (800c1dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f003 0307 	and.w	r3, r3, #7
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d001      	beq.n	800c1ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e000      	b.n	800c1d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3718      	adds	r7, #24
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	40021000 	.word	0x40021000
 800c1dc:	40022000 	.word	0x40022000

0800c1e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d041      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c200:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c204:	d02a      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c206:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c20a:	d824      	bhi.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c20c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c210:	d008      	beq.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c212:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c216:	d81e      	bhi.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00a      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c21c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c220:	d010      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c222:	e018      	b.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c224:	4b86      	ldr	r3, [pc, #536]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	4a85      	ldr	r2, [pc, #532]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c22a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c22e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c230:	e015      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	3304      	adds	r3, #4
 800c236:	2100      	movs	r1, #0
 800c238:	4618      	mov	r0, r3
 800c23a:	f000 facb 	bl	800c7d4 <RCCEx_PLLSAI1_Config>
 800c23e:	4603      	mov	r3, r0
 800c240:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c242:	e00c      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3320      	adds	r3, #32
 800c248:	2100      	movs	r1, #0
 800c24a:	4618      	mov	r0, r3
 800c24c:	f000 fbb6 	bl	800c9bc <RCCEx_PLLSAI2_Config>
 800c250:	4603      	mov	r3, r0
 800c252:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c254:	e003      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c256:	2301      	movs	r3, #1
 800c258:	74fb      	strb	r3, [r7, #19]
      break;
 800c25a:	e000      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c25c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c25e:	7cfb      	ldrb	r3, [r7, #19]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10b      	bne.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c264:	4b76      	ldr	r3, [pc, #472]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c26a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c272:	4973      	ldr	r1, [pc, #460]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c274:	4313      	orrs	r3, r2
 800c276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c27a:	e001      	b.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c27c:	7cfb      	ldrb	r3, [r7, #19]
 800c27e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d041      	beq.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c290:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c294:	d02a      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800c296:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c29a:	d824      	bhi.n	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800c29c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2a0:	d008      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c2a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2a6:	d81e      	bhi.n	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00a      	beq.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800c2ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c2b0:	d010      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800c2b2:	e018      	b.n	800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c2b4:	4b62      	ldr	r3, [pc, #392]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	4a61      	ldr	r2, [pc, #388]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c2ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c2c0:	e015      	b.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 fa83 	bl	800c7d4 <RCCEx_PLLSAI1_Config>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c2d2:	e00c      	b.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	3320      	adds	r3, #32
 800c2d8:	2100      	movs	r1, #0
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 fb6e 	bl	800c9bc <RCCEx_PLLSAI2_Config>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c2e4:	e003      	b.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	74fb      	strb	r3, [r7, #19]
      break;
 800c2ea:	e000      	b.n	800c2ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800c2ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2ee:	7cfb      	ldrb	r3, [r7, #19]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10b      	bne.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c2f4:	4b52      	ldr	r3, [pc, #328]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c302:	494f      	ldr	r1, [pc, #316]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c304:	4313      	orrs	r3, r2
 800c306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c30a:	e001      	b.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c30c:	7cfb      	ldrb	r3, [r7, #19]
 800c30e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 80a0 	beq.w	800c45e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c31e:	2300      	movs	r3, #0
 800c320:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c322:	4b47      	ldr	r3, [pc, #284]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800c32e:	2301      	movs	r3, #1
 800c330:	e000      	b.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800c332:	2300      	movs	r3, #0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d00d      	beq.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c338:	4b41      	ldr	r3, [pc, #260]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c33a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33c:	4a40      	ldr	r2, [pc, #256]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c33e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c342:	6593      	str	r3, [r2, #88]	; 0x58
 800c344:	4b3e      	ldr	r3, [pc, #248]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c34c:	60bb      	str	r3, [r7, #8]
 800c34e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c350:	2301      	movs	r3, #1
 800c352:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c354:	4b3b      	ldr	r3, [pc, #236]	; (800c444 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a3a      	ldr	r2, [pc, #232]	; (800c444 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c35a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c35e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c360:	f7fd fbe4 	bl	8009b2c <HAL_GetTick>
 800c364:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c366:	e009      	b.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c368:	f7fd fbe0 	bl	8009b2c <HAL_GetTick>
 800c36c:	4602      	mov	r2, r0
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	2b02      	cmp	r3, #2
 800c374:	d902      	bls.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	74fb      	strb	r3, [r7, #19]
        break;
 800c37a:	e005      	b.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c37c:	4b31      	ldr	r3, [pc, #196]	; (800c444 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c384:	2b00      	cmp	r3, #0
 800c386:	d0ef      	beq.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800c388:	7cfb      	ldrb	r3, [r7, #19]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d15c      	bne.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c38e:	4b2c      	ldr	r3, [pc, #176]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c398:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d01f      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d019      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c3ac:	4b24      	ldr	r3, [pc, #144]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c3b8:	4b21      	ldr	r3, [pc, #132]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3be:	4a20      	ldr	r2, [pc, #128]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c3c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c3c8:	4b1d      	ldr	r3, [pc, #116]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3ce:	4a1c      	ldr	r2, [pc, #112]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c3d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c3d8:	4a19      	ldr	r2, [pc, #100]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d016      	beq.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3ea:	f7fd fb9f 	bl	8009b2c <HAL_GetTick>
 800c3ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c3f0:	e00b      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3f2:	f7fd fb9b 	bl	8009b2c <HAL_GetTick>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c400:	4293      	cmp	r3, r2
 800c402:	d902      	bls.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800c404:	2303      	movs	r3, #3
 800c406:	74fb      	strb	r3, [r7, #19]
            break;
 800c408:	e006      	b.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c40a:	4b0d      	ldr	r3, [pc, #52]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c410:	f003 0302 	and.w	r3, r3, #2
 800c414:	2b00      	cmp	r3, #0
 800c416:	d0ec      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800c418:	7cfb      	ldrb	r3, [r7, #19]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d10c      	bne.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c41e:	4b08      	ldr	r3, [pc, #32]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c42e:	4904      	ldr	r1, [pc, #16]	; (800c440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c430:	4313      	orrs	r3, r2
 800c432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c436:	e009      	b.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c438:	7cfb      	ldrb	r3, [r7, #19]
 800c43a:	74bb      	strb	r3, [r7, #18]
 800c43c:	e006      	b.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800c43e:	bf00      	nop
 800c440:	40021000 	.word	0x40021000
 800c444:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c448:	7cfb      	ldrb	r3, [r7, #19]
 800c44a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c44c:	7c7b      	ldrb	r3, [r7, #17]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d105      	bne.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c452:	4b9e      	ldr	r3, [pc, #632]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c456:	4a9d      	ldr	r2, [pc, #628]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c45c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f003 0301 	and.w	r3, r3, #1
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00a      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c46a:	4b98      	ldr	r3, [pc, #608]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c46c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c470:	f023 0203 	bic.w	r2, r3, #3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c478:	4994      	ldr	r1, [pc, #592]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c47a:	4313      	orrs	r3, r2
 800c47c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 0302 	and.w	r3, r3, #2
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00a      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c48c:	4b8f      	ldr	r3, [pc, #572]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c492:	f023 020c 	bic.w	r2, r3, #12
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49a:	498c      	ldr	r1, [pc, #560]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c49c:	4313      	orrs	r3, r2
 800c49e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f003 0304 	and.w	r3, r3, #4
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00a      	beq.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c4ae:	4b87      	ldr	r3, [pc, #540]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4bc:	4983      	ldr	r1, [pc, #524]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f003 0308 	and.w	r3, r3, #8
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00a      	beq.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c4d0:	4b7e      	ldr	r3, [pc, #504]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4de:	497b      	ldr	r1, [pc, #492]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f003 0310 	and.w	r3, r3, #16
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00a      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c4f2:	4b76      	ldr	r3, [pc, #472]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c4f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c500:	4972      	ldr	r1, [pc, #456]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c502:	4313      	orrs	r3, r2
 800c504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0320 	and.w	r3, r3, #32
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00a      	beq.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c514:	4b6d      	ldr	r3, [pc, #436]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c51a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c522:	496a      	ldr	r1, [pc, #424]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c524:	4313      	orrs	r3, r2
 800c526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00a      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c536:	4b65      	ldr	r3, [pc, #404]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c53c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c544:	4961      	ldr	r1, [pc, #388]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c546:	4313      	orrs	r3, r2
 800c548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00a      	beq.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c558:	4b5c      	ldr	r3, [pc, #368]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c55e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c566:	4959      	ldr	r1, [pc, #356]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c568:	4313      	orrs	r3, r2
 800c56a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00a      	beq.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c57a:	4b54      	ldr	r3, [pc, #336]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c580:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c588:	4950      	ldr	r1, [pc, #320]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c58a:	4313      	orrs	r3, r2
 800c58c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00a      	beq.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c59c:	4b4b      	ldr	r3, [pc, #300]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5aa:	4948      	ldr	r1, [pc, #288]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00a      	beq.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c5be:	4b43      	ldr	r3, [pc, #268]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5cc:	493f      	ldr	r1, [pc, #252]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d028      	beq.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c5e0:	4b3a      	ldr	r3, [pc, #232]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ee:	4937      	ldr	r1, [pc, #220]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5fe:	d106      	bne.n	800c60e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c600:	4b32      	ldr	r3, [pc, #200]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	4a31      	ldr	r2, [pc, #196]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c60a:	60d3      	str	r3, [r2, #12]
 800c60c:	e011      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c616:	d10c      	bne.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	3304      	adds	r3, #4
 800c61c:	2101      	movs	r1, #1
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 f8d8 	bl	800c7d4 <RCCEx_PLLSAI1_Config>
 800c624:	4603      	mov	r3, r0
 800c626:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c628:	7cfb      	ldrb	r3, [r7, #19]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800c62e:	7cfb      	ldrb	r3, [r7, #19]
 800c630:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d028      	beq.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c63e:	4b23      	ldr	r3, [pc, #140]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c644:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c64c:	491f      	ldr	r1, [pc, #124]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c64e:	4313      	orrs	r3, r2
 800c650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c65c:	d106      	bne.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c65e:	4b1b      	ldr	r3, [pc, #108]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	4a1a      	ldr	r2, [pc, #104]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c668:	60d3      	str	r3, [r2, #12]
 800c66a:	e011      	b.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c674:	d10c      	bne.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	3304      	adds	r3, #4
 800c67a:	2101      	movs	r1, #1
 800c67c:	4618      	mov	r0, r3
 800c67e:	f000 f8a9 	bl	800c7d4 <RCCEx_PLLSAI1_Config>
 800c682:	4603      	mov	r3, r0
 800c684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c686:	7cfb      	ldrb	r3, [r7, #19]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d001      	beq.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800c68c:	7cfb      	ldrb	r3, [r7, #19]
 800c68e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d02b      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c69c:	4b0b      	ldr	r3, [pc, #44]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6aa:	4908      	ldr	r1, [pc, #32]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6ba:	d109      	bne.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c6bc:	4b03      	ldr	r3, [pc, #12]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	4a02      	ldr	r2, [pc, #8]	; (800c6cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c6c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6c6:	60d3      	str	r3, [r2, #12]
 800c6c8:	e014      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800c6ca:	bf00      	nop
 800c6cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c6d8:	d10c      	bne.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	3304      	adds	r3, #4
 800c6de:	2101      	movs	r1, #1
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f000 f877 	bl	800c7d4 <RCCEx_PLLSAI1_Config>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c6ea:	7cfb      	ldrb	r3, [r7, #19]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800c6f0:	7cfb      	ldrb	r3, [r7, #19]
 800c6f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d02f      	beq.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c700:	4b2b      	ldr	r3, [pc, #172]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c706:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c70e:	4928      	ldr	r1, [pc, #160]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c710:	4313      	orrs	r3, r2
 800c712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c71a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c71e:	d10d      	bne.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	3304      	adds	r3, #4
 800c724:	2102      	movs	r1, #2
 800c726:	4618      	mov	r0, r3
 800c728:	f000 f854 	bl	800c7d4 <RCCEx_PLLSAI1_Config>
 800c72c:	4603      	mov	r3, r0
 800c72e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c730:	7cfb      	ldrb	r3, [r7, #19]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d014      	beq.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800c736:	7cfb      	ldrb	r3, [r7, #19]
 800c738:	74bb      	strb	r3, [r7, #18]
 800c73a:	e011      	b.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c744:	d10c      	bne.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	3320      	adds	r3, #32
 800c74a:	2102      	movs	r1, #2
 800c74c:	4618      	mov	r0, r3
 800c74e:	f000 f935 	bl	800c9bc <RCCEx_PLLSAI2_Config>
 800c752:	4603      	mov	r3, r0
 800c754:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c756:	7cfb      	ldrb	r3, [r7, #19]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800c75c:	7cfb      	ldrb	r3, [r7, #19]
 800c75e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00a      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c76c:	4b10      	ldr	r3, [pc, #64]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c772:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c77a:	490d      	ldr	r1, [pc, #52]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c77c:	4313      	orrs	r3, r2
 800c77e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00b      	beq.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c78e:	4b08      	ldr	r3, [pc, #32]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c794:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c79e:	4904      	ldr	r1, [pc, #16]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c7a6:	7cbb      	ldrb	r3, [r7, #18]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	40021000 	.word	0x40021000

0800c7b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800c7b8:	4b05      	ldr	r3, [pc, #20]	; (800c7d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a04      	ldr	r2, [pc, #16]	; (800c7d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800c7be:	f043 0304 	orr.w	r3, r3, #4
 800c7c2:	6013      	str	r3, [r2, #0]
}
 800c7c4:	bf00      	nop
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	40021000 	.word	0x40021000

0800c7d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c7e2:	4b75      	ldr	r3, [pc, #468]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	f003 0303 	and.w	r3, r3, #3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d018      	beq.n	800c820 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c7ee:	4b72      	ldr	r3, [pc, #456]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	f003 0203 	and.w	r2, r3, #3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d10d      	bne.n	800c81a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
       ||
 800c802:	2b00      	cmp	r3, #0
 800c804:	d009      	beq.n	800c81a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c806:	4b6c      	ldr	r3, [pc, #432]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	091b      	lsrs	r3, r3, #4
 800c80c:	f003 0307 	and.w	r3, r3, #7
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	685b      	ldr	r3, [r3, #4]
       ||
 800c816:	429a      	cmp	r2, r3
 800c818:	d047      	beq.n	800c8aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c81a:	2301      	movs	r3, #1
 800c81c:	73fb      	strb	r3, [r7, #15]
 800c81e:	e044      	b.n	800c8aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b03      	cmp	r3, #3
 800c826:	d018      	beq.n	800c85a <RCCEx_PLLSAI1_Config+0x86>
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d825      	bhi.n	800c878 <RCCEx_PLLSAI1_Config+0xa4>
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d002      	beq.n	800c836 <RCCEx_PLLSAI1_Config+0x62>
 800c830:	2b02      	cmp	r3, #2
 800c832:	d009      	beq.n	800c848 <RCCEx_PLLSAI1_Config+0x74>
 800c834:	e020      	b.n	800c878 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c836:	4b60      	ldr	r3, [pc, #384]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d11d      	bne.n	800c87e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c846:	e01a      	b.n	800c87e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c848:	4b5b      	ldr	r3, [pc, #364]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c850:	2b00      	cmp	r3, #0
 800c852:	d116      	bne.n	800c882 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c858:	e013      	b.n	800c882 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c85a:	4b57      	ldr	r3, [pc, #348]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10f      	bne.n	800c886 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c866:	4b54      	ldr	r3, [pc, #336]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d109      	bne.n	800c886 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c876:	e006      	b.n	800c886 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	73fb      	strb	r3, [r7, #15]
      break;
 800c87c:	e004      	b.n	800c888 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c87e:	bf00      	nop
 800c880:	e002      	b.n	800c888 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c882:	bf00      	nop
 800c884:	e000      	b.n	800c888 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c886:	bf00      	nop
    }

    if(status == HAL_OK)
 800c888:	7bfb      	ldrb	r3, [r7, #15]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10d      	bne.n	800c8aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c88e:	4b4a      	ldr	r3, [pc, #296]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6819      	ldr	r1, [r3, #0]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	011b      	lsls	r3, r3, #4
 800c8a2:	430b      	orrs	r3, r1
 800c8a4:	4944      	ldr	r1, [pc, #272]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d17d      	bne.n	800c9ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c8b0:	4b41      	ldr	r3, [pc, #260]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a40      	ldr	r2, [pc, #256]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c8b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c8ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8bc:	f7fd f936 	bl	8009b2c <HAL_GetTick>
 800c8c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c8c2:	e009      	b.n	800c8d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c8c4:	f7fd f932 	bl	8009b2c <HAL_GetTick>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	1ad3      	subs	r3, r2, r3
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d902      	bls.n	800c8d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	73fb      	strb	r3, [r7, #15]
        break;
 800c8d6:	e005      	b.n	800c8e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c8d8:	4b37      	ldr	r3, [pc, #220]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1ef      	bne.n	800c8c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d160      	bne.n	800c9ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d111      	bne.n	800c914 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c8f0:	4b31      	ldr	r3, [pc, #196]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800c8f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	6892      	ldr	r2, [r2, #8]
 800c900:	0211      	lsls	r1, r2, #8
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	68d2      	ldr	r2, [r2, #12]
 800c906:	0912      	lsrs	r2, r2, #4
 800c908:	0452      	lsls	r2, r2, #17
 800c90a:	430a      	orrs	r2, r1
 800c90c:	492a      	ldr	r1, [pc, #168]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c90e:	4313      	orrs	r3, r2
 800c910:	610b      	str	r3, [r1, #16]
 800c912:	e027      	b.n	800c964 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	2b01      	cmp	r3, #1
 800c918:	d112      	bne.n	800c940 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c91a:	4b27      	ldr	r3, [pc, #156]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c922:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	6892      	ldr	r2, [r2, #8]
 800c92a:	0211      	lsls	r1, r2, #8
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	6912      	ldr	r2, [r2, #16]
 800c930:	0852      	lsrs	r2, r2, #1
 800c932:	3a01      	subs	r2, #1
 800c934:	0552      	lsls	r2, r2, #21
 800c936:	430a      	orrs	r2, r1
 800c938:	491f      	ldr	r1, [pc, #124]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c93a:	4313      	orrs	r3, r2
 800c93c:	610b      	str	r3, [r1, #16]
 800c93e:	e011      	b.n	800c964 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c940:	4b1d      	ldr	r3, [pc, #116]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c948:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	6892      	ldr	r2, [r2, #8]
 800c950:	0211      	lsls	r1, r2, #8
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	6952      	ldr	r2, [r2, #20]
 800c956:	0852      	lsrs	r2, r2, #1
 800c958:	3a01      	subs	r2, #1
 800c95a:	0652      	lsls	r2, r2, #25
 800c95c:	430a      	orrs	r2, r1
 800c95e:	4916      	ldr	r1, [pc, #88]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c960:	4313      	orrs	r3, r2
 800c962:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c964:	4b14      	ldr	r3, [pc, #80]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a13      	ldr	r2, [pc, #76]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c96a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c96e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c970:	f7fd f8dc 	bl	8009b2c <HAL_GetTick>
 800c974:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c976:	e009      	b.n	800c98c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c978:	f7fd f8d8 	bl	8009b2c <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	2b02      	cmp	r3, #2
 800c984:	d902      	bls.n	800c98c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800c986:	2303      	movs	r3, #3
 800c988:	73fb      	strb	r3, [r7, #15]
          break;
 800c98a:	e005      	b.n	800c998 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c98c:	4b0a      	ldr	r3, [pc, #40]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c994:	2b00      	cmp	r3, #0
 800c996:	d0ef      	beq.n	800c978 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d106      	bne.n	800c9ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c99e:	4b06      	ldr	r3, [pc, #24]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c9a0:	691a      	ldr	r2, [r3, #16]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	699b      	ldr	r3, [r3, #24]
 800c9a6:	4904      	ldr	r1, [pc, #16]	; (800c9b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	40021000 	.word	0x40021000

0800c9bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c9ca:	4b6a      	ldr	r3, [pc, #424]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	f003 0303 	and.w	r3, r3, #3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d018      	beq.n	800ca08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c9d6:	4b67      	ldr	r3, [pc, #412]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	f003 0203 	and.w	r2, r3, #3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d10d      	bne.n	800ca02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
       ||
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d009      	beq.n	800ca02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800c9ee:	4b61      	ldr	r3, [pc, #388]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	091b      	lsrs	r3, r3, #4
 800c9f4:	f003 0307 	and.w	r3, r3, #7
 800c9f8:	1c5a      	adds	r2, r3, #1
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	685b      	ldr	r3, [r3, #4]
       ||
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d047      	beq.n	800ca92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	73fb      	strb	r3, [r7, #15]
 800ca06:	e044      	b.n	800ca92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b03      	cmp	r3, #3
 800ca0e:	d018      	beq.n	800ca42 <RCCEx_PLLSAI2_Config+0x86>
 800ca10:	2b03      	cmp	r3, #3
 800ca12:	d825      	bhi.n	800ca60 <RCCEx_PLLSAI2_Config+0xa4>
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d002      	beq.n	800ca1e <RCCEx_PLLSAI2_Config+0x62>
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	d009      	beq.n	800ca30 <RCCEx_PLLSAI2_Config+0x74>
 800ca1c:	e020      	b.n	800ca60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ca1e:	4b55      	ldr	r3, [pc, #340]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f003 0302 	and.w	r3, r3, #2
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d11d      	bne.n	800ca66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca2e:	e01a      	b.n	800ca66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ca30:	4b50      	ldr	r3, [pc, #320]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d116      	bne.n	800ca6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca40:	e013      	b.n	800ca6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ca42:	4b4c      	ldr	r3, [pc, #304]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10f      	bne.n	800ca6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ca4e:	4b49      	ldr	r3, [pc, #292]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d109      	bne.n	800ca6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca5e:	e006      	b.n	800ca6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	73fb      	strb	r3, [r7, #15]
      break;
 800ca64:	e004      	b.n	800ca70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ca66:	bf00      	nop
 800ca68:	e002      	b.n	800ca70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ca6a:	bf00      	nop
 800ca6c:	e000      	b.n	800ca70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ca6e:	bf00      	nop
    }

    if(status == HAL_OK)
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d10d      	bne.n	800ca92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ca76:	4b3f      	ldr	r3, [pc, #252]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6819      	ldr	r1, [r3, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	011b      	lsls	r3, r3, #4
 800ca8a:	430b      	orrs	r3, r1
 800ca8c:	4939      	ldr	r1, [pc, #228]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d167      	bne.n	800cb68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ca98:	4b36      	ldr	r3, [pc, #216]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a35      	ldr	r2, [pc, #212]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ca9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800caa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800caa4:	f7fd f842 	bl	8009b2c <HAL_GetTick>
 800caa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800caaa:	e009      	b.n	800cac0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800caac:	f7fd f83e 	bl	8009b2c <HAL_GetTick>
 800cab0:	4602      	mov	r2, r0
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	1ad3      	subs	r3, r2, r3
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d902      	bls.n	800cac0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800caba:	2303      	movs	r3, #3
 800cabc:	73fb      	strb	r3, [r7, #15]
        break;
 800cabe:	e005      	b.n	800cacc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800cac0:	4b2c      	ldr	r3, [pc, #176]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1ef      	bne.n	800caac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d14a      	bne.n	800cb68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d111      	bne.n	800cafc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800cad8:	4b26      	ldr	r3, [pc, #152]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800cae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	6892      	ldr	r2, [r2, #8]
 800cae8:	0211      	lsls	r1, r2, #8
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	68d2      	ldr	r2, [r2, #12]
 800caee:	0912      	lsrs	r2, r2, #4
 800caf0:	0452      	lsls	r2, r2, #17
 800caf2:	430a      	orrs	r2, r1
 800caf4:	491f      	ldr	r1, [pc, #124]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	614b      	str	r3, [r1, #20]
 800cafa:	e011      	b.n	800cb20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800cafc:	4b1d      	ldr	r3, [pc, #116]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cafe:	695b      	ldr	r3, [r3, #20]
 800cb00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cb04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	6892      	ldr	r2, [r2, #8]
 800cb0c:	0211      	lsls	r1, r2, #8
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	6912      	ldr	r2, [r2, #16]
 800cb12:	0852      	lsrs	r2, r2, #1
 800cb14:	3a01      	subs	r2, #1
 800cb16:	0652      	lsls	r2, r2, #25
 800cb18:	430a      	orrs	r2, r1
 800cb1a:	4916      	ldr	r1, [pc, #88]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800cb20:	4b14      	ldr	r3, [pc, #80]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a13      	ldr	r2, [pc, #76]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cb26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb2c:	f7fc fffe 	bl	8009b2c <HAL_GetTick>
 800cb30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cb32:	e009      	b.n	800cb48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800cb34:	f7fc fffa 	bl	8009b2c <HAL_GetTick>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	1ad3      	subs	r3, r2, r3
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d902      	bls.n	800cb48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800cb42:	2303      	movs	r3, #3
 800cb44:	73fb      	strb	r3, [r7, #15]
          break;
 800cb46:	e005      	b.n	800cb54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800cb48:	4b0a      	ldr	r3, [pc, #40]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d0ef      	beq.n	800cb34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d106      	bne.n	800cb68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800cb5a:	4b06      	ldr	r3, [pc, #24]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cb5c:	695a      	ldr	r2, [r3, #20]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	695b      	ldr	r3, [r3, #20]
 800cb62:	4904      	ldr	r1, [pc, #16]	; (800cb74 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cb64:	4313      	orrs	r3, r2
 800cb66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	40021000 	.word	0x40021000

0800cb78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d079      	beq.n	800cc7e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d106      	bne.n	800cba4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f7f4 ffe0 	bl	8001b64 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2202      	movs	r2, #2
 800cba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	f003 0310 	and.w	r3, r3, #16
 800cbb6:	2b10      	cmp	r3, #16
 800cbb8:	d058      	beq.n	800cc6c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	22ca      	movs	r2, #202	; 0xca
 800cbc0:	625a      	str	r2, [r3, #36]	; 0x24
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2253      	movs	r2, #83	; 0x53
 800cbc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 fa4e 	bl	800d06c <RTC_EnterInitMode>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d127      	bne.n	800cc2a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	6812      	ldr	r2, [r2, #0]
 800cbe4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cbe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbec:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	6899      	ldr	r1, [r3, #8]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	685a      	ldr	r2, [r3, #4]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	431a      	orrs	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	699b      	ldr	r3, [r3, #24]
 800cc02:	431a      	orrs	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	430a      	orrs	r2, r1
 800cc0a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	68d2      	ldr	r2, [r2, #12]
 800cc14:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6919      	ldr	r1, [r3, #16]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	041a      	lsls	r2, r3, #16
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	430a      	orrs	r2, r1
 800cc28:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fa52 	bl	800d0d4 <RTC_ExitInitMode>
 800cc30:	4603      	mov	r3, r0
 800cc32:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d113      	bne.n	800cc62 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f022 0203 	bic.w	r2, r2, #3
 800cc48:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	69da      	ldr	r2, [r3, #28]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	695b      	ldr	r3, [r3, #20]
 800cc58:	431a      	orrs	r2, r3
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	430a      	orrs	r2, r1
 800cc60:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	22ff      	movs	r2, #255	; 0xff
 800cc68:	625a      	str	r2, [r3, #36]	; 0x24
 800cc6a:	e001      	b.n	800cc70 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d103      	bne.n	800cc7e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2201      	movs	r2, #1
 800cc7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cc88:	b590      	push	{r4, r7, lr}
 800cc8a:	b087      	sub	sp, #28
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d101      	bne.n	800cca2 <HAL_RTC_SetTime+0x1a>
 800cc9e:	2302      	movs	r3, #2
 800cca0:	e08b      	b.n	800cdba <HAL_RTC_SetTime+0x132>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2202      	movs	r2, #2
 800ccae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	22ca      	movs	r2, #202	; 0xca
 800ccb8:	625a      	str	r2, [r3, #36]	; 0x24
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2253      	movs	r2, #83	; 0x53
 800ccc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f000 f9d2 	bl	800d06c <RTC_EnterInitMode>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cccc:	7cfb      	ldrb	r3, [r7, #19]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d163      	bne.n	800cd9a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d126      	bne.n	800cd26 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d102      	bne.n	800ccec <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	2200      	movs	r2, #0
 800ccea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f000 fa2d 	bl	800d150 <RTC_ByteToBcd2>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	785b      	ldrb	r3, [r3, #1]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 fa26 	bl	800d150 <RTC_ByteToBcd2>
 800cd04:	4603      	mov	r3, r0
 800cd06:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800cd08:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	789b      	ldrb	r3, [r3, #2]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 fa1e 	bl	800d150 <RTC_ByteToBcd2>
 800cd14:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cd16:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	78db      	ldrb	r3, [r3, #3]
 800cd1e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800cd20:	4313      	orrs	r3, r2
 800cd22:	617b      	str	r3, [r7, #20]
 800cd24:	e018      	b.n	800cd58 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d102      	bne.n	800cd3a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	2200      	movs	r2, #0
 800cd38:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	785b      	ldrb	r3, [r3, #1]
 800cd44:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800cd46:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cd4c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	78db      	ldrb	r3, [r3, #3]
 800cd52:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800cd54:	4313      	orrs	r3, r2
 800cd56:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cd62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cd66:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	689a      	ldr	r2, [r3, #8]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cd76:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	6899      	ldr	r1, [r3, #8]
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	68da      	ldr	r2, [r3, #12]
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	431a      	orrs	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	430a      	orrs	r2, r1
 800cd8e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f000 f99f 	bl	800d0d4 <RTC_ExitInitMode>
 800cd96:	4603      	mov	r3, r0
 800cd98:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	22ff      	movs	r2, #255	; 0xff
 800cda0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800cda2:	7cfb      	ldrb	r3, [r7, #19]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d103      	bne.n	800cdb0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800cdb8:	7cfb      	ldrb	r3, [r7, #19]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	371c      	adds	r7, #28
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd90      	pop	{r4, r7, pc}

0800cdc2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b086      	sub	sp, #24
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	60f8      	str	r0, [r7, #12]
 800cdca:	60b9      	str	r1, [r7, #8]
 800cdcc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cdf0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cdf4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	0c1b      	lsrs	r3, r3, #16
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	0a1b      	lsrs	r3, r3, #8
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	0d9b      	lsrs	r3, r3, #22
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d11a      	bne.n	800ce70 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 f9a6 	bl	800d190 <RTC_Bcd2ToByte>
 800ce44:	4603      	mov	r3, r0
 800ce46:	461a      	mov	r2, r3
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	785b      	ldrb	r3, [r3, #1]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f000 f99d 	bl	800d190 <RTC_Bcd2ToByte>
 800ce56:	4603      	mov	r3, r0
 800ce58:	461a      	mov	r2, r3
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	789b      	ldrb	r3, [r3, #2]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 f994 	bl	800d190 <RTC_Bcd2ToByte>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3718      	adds	r7, #24
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}

0800ce7a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ce7a:	b590      	push	{r4, r7, lr}
 800ce7c:	b087      	sub	sp, #28
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	60f8      	str	r0, [r7, #12]
 800ce82:	60b9      	str	r1, [r7, #8]
 800ce84:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d101      	bne.n	800ce94 <HAL_RTC_SetDate+0x1a>
 800ce90:	2302      	movs	r3, #2
 800ce92:	e075      	b.n	800cf80 <HAL_RTC_SetDate+0x106>
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2202      	movs	r2, #2
 800cea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10e      	bne.n	800cec8 <HAL_RTC_SetDate+0x4e>
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	785b      	ldrb	r3, [r3, #1]
 800ceae:	f003 0310 	and.w	r3, r3, #16
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d008      	beq.n	800cec8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	785b      	ldrb	r3, [r3, #1]
 800ceba:	f023 0310 	bic.w	r3, r3, #16
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	330a      	adds	r3, #10
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d11c      	bne.n	800cf08 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	78db      	ldrb	r3, [r3, #3]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f000 f93c 	bl	800d150 <RTC_ByteToBcd2>
 800ced8:	4603      	mov	r3, r0
 800ceda:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	785b      	ldrb	r3, [r3, #1]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f000 f935 	bl	800d150 <RTC_ByteToBcd2>
 800cee6:	4603      	mov	r3, r0
 800cee8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ceea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	789b      	ldrb	r3, [r3, #2]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f000 f92d 	bl	800d150 <RTC_ByteToBcd2>
 800cef6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cef8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cf02:	4313      	orrs	r3, r2
 800cf04:	617b      	str	r3, [r7, #20]
 800cf06:	e00e      	b.n	800cf26 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	78db      	ldrb	r3, [r3, #3]
 800cf0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	785b      	ldrb	r3, [r3, #1]
 800cf12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cf14:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cf1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cf22:	4313      	orrs	r3, r2
 800cf24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	22ca      	movs	r2, #202	; 0xca
 800cf2c:	625a      	str	r2, [r3, #36]	; 0x24
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2253      	movs	r2, #83	; 0x53
 800cf34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f000 f898 	bl	800d06c <RTC_EnterInitMode>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cf40:	7cfb      	ldrb	r3, [r7, #19]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10c      	bne.n	800cf60 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cf54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f000 f8bc 	bl	800d0d4 <RTC_ExitInitMode>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	22ff      	movs	r2, #255	; 0xff
 800cf66:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800cf68:	7cfb      	ldrb	r3, [r7, #19]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d103      	bne.n	800cf76 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800cf7e:	7cfb      	ldrb	r3, [r7, #19]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	371c      	adds	r7, #28
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd90      	pop	{r4, r7, pc}

0800cf88 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b086      	sub	sp, #24
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cfa2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	0c1b      	lsrs	r3, r3, #16
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	0a1b      	lsrs	r3, r3, #8
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	f003 031f 	and.w	r3, r3, #31
 800cfb8:	b2da      	uxtb	r2, r3
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfc6:	b2da      	uxtb	r2, r3
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	0b5b      	lsrs	r3, r3, #13
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	f003 0307 	and.w	r3, r3, #7
 800cfd6:	b2da      	uxtb	r2, r3
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d11a      	bne.n	800d018 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	78db      	ldrb	r3, [r3, #3]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 f8d2 	bl	800d190 <RTC_Bcd2ToByte>
 800cfec:	4603      	mov	r3, r0
 800cfee:	461a      	mov	r2, r3
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	785b      	ldrb	r3, [r3, #1]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 f8c9 	bl	800d190 <RTC_Bcd2ToByte>
 800cffe:	4603      	mov	r3, r0
 800d000:	461a      	mov	r2, r3
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	789b      	ldrb	r3, [r3, #2]
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 f8c0 	bl	800d190 <RTC_Bcd2ToByte>
 800d010:	4603      	mov	r3, r0
 800d012:	461a      	mov	r2, r3
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3718      	adds	r7, #24
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a0d      	ldr	r2, [pc, #52]	; (800d068 <HAL_RTC_WaitForSynchro+0x44>)
 800d032:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800d034:	f7fc fd7a 	bl	8009b2c <HAL_GetTick>
 800d038:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d03a:	e009      	b.n	800d050 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d03c:	f7fc fd76 	bl	8009b2c <HAL_GetTick>
 800d040:	4602      	mov	r2, r0
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d04a:	d901      	bls.n	800d050 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800d04c:	2303      	movs	r3, #3
 800d04e:	e007      	b.n	800d060 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	f003 0320 	and.w	r3, r3, #32
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0ee      	beq.n	800d03c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	0003ff5f 	.word	0x0003ff5f

0800d06c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d082:	2b00      	cmp	r3, #0
 800d084:	d120      	bne.n	800d0c8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f04f 32ff 	mov.w	r2, #4294967295
 800d08e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d090:	f7fc fd4c 	bl	8009b2c <HAL_GetTick>
 800d094:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d096:	e00d      	b.n	800d0b4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d098:	f7fc fd48 	bl	8009b2c <HAL_GetTick>
 800d09c:	4602      	mov	r2, r0
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0a6:	d905      	bls.n	800d0b4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2203      	movs	r2, #3
 800d0b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d102      	bne.n	800d0c8 <RTC_EnterInitMode+0x5c>
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
 800d0c4:	2b03      	cmp	r3, #3
 800d0c6:	d1e7      	bne.n	800d098 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
	...

0800d0d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d0e0:	4b1a      	ldr	r3, [pc, #104]	; (800d14c <RTC_ExitInitMode+0x78>)
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	4a19      	ldr	r2, [pc, #100]	; (800d14c <RTC_ExitInitMode+0x78>)
 800d0e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0ea:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d0ec:	4b17      	ldr	r3, [pc, #92]	; (800d14c <RTC_ExitInitMode+0x78>)
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	f003 0320 	and.w	r3, r3, #32
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10c      	bne.n	800d112 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7ff ff93 	bl	800d024 <HAL_RTC_WaitForSynchro>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d01e      	beq.n	800d142 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2203      	movs	r2, #3
 800d108:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d10c:	2303      	movs	r3, #3
 800d10e:	73fb      	strb	r3, [r7, #15]
 800d110:	e017      	b.n	800d142 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d112:	4b0e      	ldr	r3, [pc, #56]	; (800d14c <RTC_ExitInitMode+0x78>)
 800d114:	689b      	ldr	r3, [r3, #8]
 800d116:	4a0d      	ldr	r2, [pc, #52]	; (800d14c <RTC_ExitInitMode+0x78>)
 800d118:	f023 0320 	bic.w	r3, r3, #32
 800d11c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f7ff ff80 	bl	800d024 <HAL_RTC_WaitForSynchro>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d005      	beq.n	800d136 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2203      	movs	r2, #3
 800d12e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d132:	2303      	movs	r3, #3
 800d134:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d136:	4b05      	ldr	r3, [pc, #20]	; (800d14c <RTC_ExitInitMode+0x78>)
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	4a04      	ldr	r2, [pc, #16]	; (800d14c <RTC_ExitInitMode+0x78>)
 800d13c:	f043 0320 	orr.w	r3, r3, #32
 800d140:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d142:	7bfb      	ldrb	r3, [r7, #15]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	40002800 	.word	0x40002800

0800d150 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d150:	b480      	push	{r7}
 800d152:	b085      	sub	sp, #20
 800d154:	af00      	add	r7, sp, #0
 800d156:	4603      	mov	r3, r0
 800d158:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d15a:	2300      	movs	r3, #0
 800d15c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800d15e:	79fb      	ldrb	r3, [r7, #7]
 800d160:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800d162:	e005      	b.n	800d170 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	3301      	adds	r3, #1
 800d168:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800d16a:	7afb      	ldrb	r3, [r7, #11]
 800d16c:	3b0a      	subs	r3, #10
 800d16e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800d170:	7afb      	ldrb	r3, [r7, #11]
 800d172:	2b09      	cmp	r3, #9
 800d174:	d8f6      	bhi.n	800d164 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	011b      	lsls	r3, r3, #4
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	7afb      	ldrb	r3, [r7, #11]
 800d180:	4313      	orrs	r3, r2
 800d182:	b2db      	uxtb	r3, r3
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	4603      	mov	r3, r0
 800d198:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d19a:	79fb      	ldrb	r3, [r7, #7]
 800d19c:	091b      	lsrs	r3, r3, #4
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	0092      	lsls	r2, r2, #2
 800d1a4:	4413      	add	r3, r2
 800d1a6:	005b      	lsls	r3, r3, #1
 800d1a8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d1aa:	79fb      	ldrb	r3, [r7, #7]
 800d1ac:	f003 030f 	and.w	r3, r3, #15
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	b2db      	uxtb	r3, r3
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d101      	bne.n	800d1d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e049      	b.n	800d26a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7f4 fcec 	bl	8001bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3304      	adds	r3, #4
 800d200:	4619      	mov	r1, r3
 800d202:	4610      	mov	r0, r2
 800d204:	f000 fa28 	bl	800d658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d268:	2300      	movs	r3, #0
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b084      	sub	sp, #16
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	f003 0302 	and.w	r3, r3, #2
 800d290:	2b00      	cmp	r3, #0
 800d292:	d020      	beq.n	800d2d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d01b      	beq.n	800d2d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f06f 0202 	mvn.w	r2, #2
 800d2a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	f003 0303 	and.w	r3, r3, #3
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d003      	beq.n	800d2c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f000 f9ad 	bl	800d61c <HAL_TIM_IC_CaptureCallback>
 800d2c2:	e005      	b.n	800d2d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 f99f 	bl	800d608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 f9b0 	bl	800d630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	f003 0304 	and.w	r3, r3, #4
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d020      	beq.n	800d322 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f003 0304 	and.w	r3, r3, #4
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d01b      	beq.n	800d322 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f06f 0204 	mvn.w	r2, #4
 800d2f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	699b      	ldr	r3, [r3, #24]
 800d300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d304:	2b00      	cmp	r3, #0
 800d306:	d003      	beq.n	800d310 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f987 	bl	800d61c <HAL_TIM_IC_CaptureCallback>
 800d30e:	e005      	b.n	800d31c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 f979 	bl	800d608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f98a 	bl	800d630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	f003 0308 	and.w	r3, r3, #8
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d020      	beq.n	800d36e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f003 0308 	and.w	r3, r3, #8
 800d332:	2b00      	cmp	r3, #0
 800d334:	d01b      	beq.n	800d36e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f06f 0208 	mvn.w	r2, #8
 800d33e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2204      	movs	r2, #4
 800d344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	69db      	ldr	r3, [r3, #28]
 800d34c:	f003 0303 	and.w	r3, r3, #3
 800d350:	2b00      	cmp	r3, #0
 800d352:	d003      	beq.n	800d35c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 f961 	bl	800d61c <HAL_TIM_IC_CaptureCallback>
 800d35a:	e005      	b.n	800d368 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 f953 	bl	800d608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f964 	bl	800d630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	f003 0310 	and.w	r3, r3, #16
 800d374:	2b00      	cmp	r3, #0
 800d376:	d020      	beq.n	800d3ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f003 0310 	and.w	r3, r3, #16
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d01b      	beq.n	800d3ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f06f 0210 	mvn.w	r2, #16
 800d38a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2208      	movs	r2, #8
 800d390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	69db      	ldr	r3, [r3, #28]
 800d398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d003      	beq.n	800d3a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 f93b 	bl	800d61c <HAL_TIM_IC_CaptureCallback>
 800d3a6:	e005      	b.n	800d3b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f92d 	bl	800d608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 f93e 	bl	800d630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	f003 0301 	and.w	r3, r3, #1
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00c      	beq.n	800d3de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d007      	beq.n	800d3de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f06f 0201 	mvn.w	r2, #1
 800d3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f002 f9e9 	bl	800f7b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00c      	beq.n	800d402 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d007      	beq.n	800d402 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d3fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 faf1 	bl	800d9e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00c      	beq.n	800d426 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d412:	2b00      	cmp	r3, #0
 800d414:	d007      	beq.n	800d426 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d41e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 fae9 	bl	800d9f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00c      	beq.n	800d44a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d436:	2b00      	cmp	r3, #0
 800d438:	d007      	beq.n	800d44a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 f8fd 	bl	800d644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	f003 0320 	and.w	r3, r3, #32
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00c      	beq.n	800d46e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f003 0320 	and.w	r3, r3, #32
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d007      	beq.n	800d46e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f06f 0220 	mvn.w	r2, #32
 800d466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 fab1 	bl	800d9d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d46e:	bf00      	nop
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d476:	b580      	push	{r7, lr}
 800d478:	b084      	sub	sp, #16
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
 800d47e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d101      	bne.n	800d492 <HAL_TIM_ConfigClockSource+0x1c>
 800d48e:	2302      	movs	r3, #2
 800d490:	e0b6      	b.n	800d600 <HAL_TIM_ConfigClockSource+0x18a>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2202      	movs	r2, #2
 800d49e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d4b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	68ba      	ldr	r2, [r7, #8]
 800d4c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4ce:	d03e      	beq.n	800d54e <HAL_TIM_ConfigClockSource+0xd8>
 800d4d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4d4:	f200 8087 	bhi.w	800d5e6 <HAL_TIM_ConfigClockSource+0x170>
 800d4d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4dc:	f000 8086 	beq.w	800d5ec <HAL_TIM_ConfigClockSource+0x176>
 800d4e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4e4:	d87f      	bhi.n	800d5e6 <HAL_TIM_ConfigClockSource+0x170>
 800d4e6:	2b70      	cmp	r3, #112	; 0x70
 800d4e8:	d01a      	beq.n	800d520 <HAL_TIM_ConfigClockSource+0xaa>
 800d4ea:	2b70      	cmp	r3, #112	; 0x70
 800d4ec:	d87b      	bhi.n	800d5e6 <HAL_TIM_ConfigClockSource+0x170>
 800d4ee:	2b60      	cmp	r3, #96	; 0x60
 800d4f0:	d050      	beq.n	800d594 <HAL_TIM_ConfigClockSource+0x11e>
 800d4f2:	2b60      	cmp	r3, #96	; 0x60
 800d4f4:	d877      	bhi.n	800d5e6 <HAL_TIM_ConfigClockSource+0x170>
 800d4f6:	2b50      	cmp	r3, #80	; 0x50
 800d4f8:	d03c      	beq.n	800d574 <HAL_TIM_ConfigClockSource+0xfe>
 800d4fa:	2b50      	cmp	r3, #80	; 0x50
 800d4fc:	d873      	bhi.n	800d5e6 <HAL_TIM_ConfigClockSource+0x170>
 800d4fe:	2b40      	cmp	r3, #64	; 0x40
 800d500:	d058      	beq.n	800d5b4 <HAL_TIM_ConfigClockSource+0x13e>
 800d502:	2b40      	cmp	r3, #64	; 0x40
 800d504:	d86f      	bhi.n	800d5e6 <HAL_TIM_ConfigClockSource+0x170>
 800d506:	2b30      	cmp	r3, #48	; 0x30
 800d508:	d064      	beq.n	800d5d4 <HAL_TIM_ConfigClockSource+0x15e>
 800d50a:	2b30      	cmp	r3, #48	; 0x30
 800d50c:	d86b      	bhi.n	800d5e6 <HAL_TIM_ConfigClockSource+0x170>
 800d50e:	2b20      	cmp	r3, #32
 800d510:	d060      	beq.n	800d5d4 <HAL_TIM_ConfigClockSource+0x15e>
 800d512:	2b20      	cmp	r3, #32
 800d514:	d867      	bhi.n	800d5e6 <HAL_TIM_ConfigClockSource+0x170>
 800d516:	2b00      	cmp	r3, #0
 800d518:	d05c      	beq.n	800d5d4 <HAL_TIM_ConfigClockSource+0x15e>
 800d51a:	2b10      	cmp	r3, #16
 800d51c:	d05a      	beq.n	800d5d4 <HAL_TIM_ConfigClockSource+0x15e>
 800d51e:	e062      	b.n	800d5e6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d530:	f000 f9a6 	bl	800d880 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d542:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	609a      	str	r2, [r3, #8]
      break;
 800d54c:	e04f      	b.n	800d5ee <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d55e:	f000 f98f 	bl	800d880 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	689a      	ldr	r2, [r3, #8]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d570:	609a      	str	r2, [r3, #8]
      break;
 800d572:	e03c      	b.n	800d5ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d580:	461a      	mov	r2, r3
 800d582:	f000 f903 	bl	800d78c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2150      	movs	r1, #80	; 0x50
 800d58c:	4618      	mov	r0, r3
 800d58e:	f000 f95c 	bl	800d84a <TIM_ITRx_SetConfig>
      break;
 800d592:	e02c      	b.n	800d5ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	f000 f922 	bl	800d7ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2160      	movs	r1, #96	; 0x60
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f000 f94c 	bl	800d84a <TIM_ITRx_SetConfig>
      break;
 800d5b2:	e01c      	b.n	800d5ee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	f000 f8e3 	bl	800d78c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	2140      	movs	r1, #64	; 0x40
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f000 f93c 	bl	800d84a <TIM_ITRx_SetConfig>
      break;
 800d5d2:	e00c      	b.n	800d5ee <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4610      	mov	r0, r2
 800d5e0:	f000 f933 	bl	800d84a <TIM_ITRx_SetConfig>
      break;
 800d5e4:	e003      	b.n	800d5ee <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	73fb      	strb	r3, [r7, #15]
      break;
 800d5ea:	e000      	b.n	800d5ee <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d5ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d610:	bf00      	nop
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d624:	bf00      	nop
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d638:	bf00      	nop
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d64c:	bf00      	nop
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4a40      	ldr	r2, [pc, #256]	; (800d76c <TIM_Base_SetConfig+0x114>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d013      	beq.n	800d698 <TIM_Base_SetConfig+0x40>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d676:	d00f      	beq.n	800d698 <TIM_Base_SetConfig+0x40>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a3d      	ldr	r2, [pc, #244]	; (800d770 <TIM_Base_SetConfig+0x118>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d00b      	beq.n	800d698 <TIM_Base_SetConfig+0x40>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a3c      	ldr	r2, [pc, #240]	; (800d774 <TIM_Base_SetConfig+0x11c>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d007      	beq.n	800d698 <TIM_Base_SetConfig+0x40>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a3b      	ldr	r2, [pc, #236]	; (800d778 <TIM_Base_SetConfig+0x120>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d003      	beq.n	800d698 <TIM_Base_SetConfig+0x40>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	4a3a      	ldr	r2, [pc, #232]	; (800d77c <TIM_Base_SetConfig+0x124>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d108      	bne.n	800d6aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d69e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a2f      	ldr	r2, [pc, #188]	; (800d76c <TIM_Base_SetConfig+0x114>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d01f      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6b8:	d01b      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	4a2c      	ldr	r2, [pc, #176]	; (800d770 <TIM_Base_SetConfig+0x118>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	d017      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a2b      	ldr	r2, [pc, #172]	; (800d774 <TIM_Base_SetConfig+0x11c>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d013      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	4a2a      	ldr	r2, [pc, #168]	; (800d778 <TIM_Base_SetConfig+0x120>)
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	d00f      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	4a29      	ldr	r2, [pc, #164]	; (800d77c <TIM_Base_SetConfig+0x124>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d00b      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a28      	ldr	r2, [pc, #160]	; (800d780 <TIM_Base_SetConfig+0x128>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d007      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4a27      	ldr	r2, [pc, #156]	; (800d784 <TIM_Base_SetConfig+0x12c>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d003      	beq.n	800d6f2 <TIM_Base_SetConfig+0x9a>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4a26      	ldr	r2, [pc, #152]	; (800d788 <TIM_Base_SetConfig+0x130>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d108      	bne.n	800d704 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	4313      	orrs	r3, r2
 800d702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	695b      	ldr	r3, [r3, #20]
 800d70e:	4313      	orrs	r3, r2
 800d710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	689a      	ldr	r2, [r3, #8]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4a10      	ldr	r2, [pc, #64]	; (800d76c <TIM_Base_SetConfig+0x114>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d00f      	beq.n	800d750 <TIM_Base_SetConfig+0xf8>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	4a12      	ldr	r2, [pc, #72]	; (800d77c <TIM_Base_SetConfig+0x124>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d00b      	beq.n	800d750 <TIM_Base_SetConfig+0xf8>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a11      	ldr	r2, [pc, #68]	; (800d780 <TIM_Base_SetConfig+0x128>)
 800d73c:	4293      	cmp	r3, r2
 800d73e:	d007      	beq.n	800d750 <TIM_Base_SetConfig+0xf8>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	4a10      	ldr	r2, [pc, #64]	; (800d784 <TIM_Base_SetConfig+0x12c>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d003      	beq.n	800d750 <TIM_Base_SetConfig+0xf8>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a0f      	ldr	r2, [pc, #60]	; (800d788 <TIM_Base_SetConfig+0x130>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d103      	bne.n	800d758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	691a      	ldr	r2, [r3, #16]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	615a      	str	r2, [r3, #20]
}
 800d75e:	bf00      	nop
 800d760:	3714      	adds	r7, #20
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
 800d76a:	bf00      	nop
 800d76c:	40012c00 	.word	0x40012c00
 800d770:	40000400 	.word	0x40000400
 800d774:	40000800 	.word	0x40000800
 800d778:	40000c00 	.word	0x40000c00
 800d77c:	40013400 	.word	0x40013400
 800d780:	40014000 	.word	0x40014000
 800d784:	40014400 	.word	0x40014400
 800d788:	40014800 	.word	0x40014800

0800d78c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b087      	sub	sp, #28
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6a1b      	ldr	r3, [r3, #32]
 800d79c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6a1b      	ldr	r3, [r3, #32]
 800d7a2:	f023 0201 	bic.w	r2, r3, #1
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	699b      	ldr	r3, [r3, #24]
 800d7ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d7b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	011b      	lsls	r3, r3, #4
 800d7bc:	693a      	ldr	r2, [r7, #16]
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f023 030a 	bic.w	r3, r3, #10
 800d7c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d7ca:	697a      	ldr	r2, [r7, #20]
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	693a      	ldr	r2, [r7, #16]
 800d7d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	621a      	str	r2, [r3, #32]
}
 800d7de:	bf00      	nop
 800d7e0:	371c      	adds	r7, #28
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b087      	sub	sp, #28
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	60f8      	str	r0, [r7, #12]
 800d7f2:	60b9      	str	r1, [r7, #8]
 800d7f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6a1b      	ldr	r3, [r3, #32]
 800d7fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6a1b      	ldr	r3, [r3, #32]
 800d800:	f023 0210 	bic.w	r2, r3, #16
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	699b      	ldr	r3, [r3, #24]
 800d80c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	031b      	lsls	r3, r3, #12
 800d81a:	693a      	ldr	r2, [r7, #16]
 800d81c:	4313      	orrs	r3, r2
 800d81e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d826:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	011b      	lsls	r3, r3, #4
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	4313      	orrs	r3, r2
 800d830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	693a      	ldr	r2, [r7, #16]
 800d836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	697a      	ldr	r2, [r7, #20]
 800d83c:	621a      	str	r2, [r3, #32]
}
 800d83e:	bf00      	nop
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b085      	sub	sp, #20
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	4313      	orrs	r3, r2
 800d868:	f043 0307 	orr.w	r3, r3, #7
 800d86c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	609a      	str	r2, [r3, #8]
}
 800d874:	bf00      	nop
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d880:	b480      	push	{r7}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d89a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	021a      	lsls	r2, r3, #8
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	431a      	orrs	r2, r3
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	697a      	ldr	r2, [r7, #20]
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	697a      	ldr	r2, [r7, #20]
 800d8b2:	609a      	str	r2, [r3, #8]
}
 800d8b4:	bf00      	nop
 800d8b6:	371c      	adds	r7, #28
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d101      	bne.n	800d8d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d8d4:	2302      	movs	r3, #2
 800d8d6:	e068      	b.n	800d9aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2202      	movs	r2, #2
 800d8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a2e      	ldr	r2, [pc, #184]	; (800d9b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d004      	beq.n	800d90c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4a2d      	ldr	r2, [pc, #180]	; (800d9bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d108      	bne.n	800d91e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d912:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d924:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	68fa      	ldr	r2, [r7, #12]
 800d936:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a1e      	ldr	r2, [pc, #120]	; (800d9b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d01d      	beq.n	800d97e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d94a:	d018      	beq.n	800d97e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a1b      	ldr	r2, [pc, #108]	; (800d9c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d013      	beq.n	800d97e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a1a      	ldr	r2, [pc, #104]	; (800d9c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d00e      	beq.n	800d97e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a18      	ldr	r2, [pc, #96]	; (800d9c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d009      	beq.n	800d97e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a13      	ldr	r2, [pc, #76]	; (800d9bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d004      	beq.n	800d97e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	4a14      	ldr	r2, [pc, #80]	; (800d9cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d10c      	bne.n	800d998 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	68ba      	ldr	r2, [r7, #8]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3714      	adds	r7, #20
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	40012c00 	.word	0x40012c00
 800d9bc:	40013400 	.word	0x40013400
 800d9c0:	40000400 	.word	0x40000400
 800d9c4:	40000800 	.word	0x40000800
 800d9c8:	40000c00 	.word	0x40000c00
 800d9cc:	40014000 	.word	0x40014000

0800d9d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d9d8:	bf00      	nop
 800d9da:	370c      	adds	r7, #12
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d9ec:	bf00      	nop
 800d9ee:	370c      	adds	r7, #12
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800da00:	bf00      	nop
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d101      	bne.n	800da1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da1a:	2301      	movs	r3, #1
 800da1c:	e040      	b.n	800daa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da22:	2b00      	cmp	r3, #0
 800da24:	d106      	bne.n	800da34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f83a 	bl	800daa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2224      	movs	r2, #36	; 0x24
 800da38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f022 0201 	bic.w	r2, r2, #1
 800da48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 ff20 	bl	800e898 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 fc65 	bl	800e328 <UART_SetConfig>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b01      	cmp	r3, #1
 800da62:	d101      	bne.n	800da68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800da64:	2301      	movs	r3, #1
 800da66:	e01b      	b.n	800daa0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800da76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	689a      	ldr	r2, [r3, #8]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800da86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f042 0201 	orr.w	r2, r2, #1
 800da96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 ff9f 	bl	800e9dc <UART_CheckIdleState>
 800da9e:	4603      	mov	r3, r0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800dab0:	bf00      	nop
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b08a      	sub	sp, #40	; 0x28
 800dac0:	af02      	add	r7, sp, #8
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	603b      	str	r3, [r7, #0]
 800dac8:	4613      	mov	r3, r2
 800daca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dad0:	2b20      	cmp	r3, #32
 800dad2:	d178      	bne.n	800dbc6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d002      	beq.n	800dae0 <HAL_UART_Transmit+0x24>
 800dada:	88fb      	ldrh	r3, [r7, #6]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d101      	bne.n	800dae4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800dae0:	2301      	movs	r3, #1
 800dae2:	e071      	b.n	800dbc8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2221      	movs	r2, #33	; 0x21
 800daf0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800daf2:	f7fc f81b 	bl	8009b2c <HAL_GetTick>
 800daf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	88fa      	ldrh	r2, [r7, #6]
 800dafc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	88fa      	ldrh	r2, [r7, #6]
 800db04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db10:	d108      	bne.n	800db24 <HAL_UART_Transmit+0x68>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	691b      	ldr	r3, [r3, #16]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d104      	bne.n	800db24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800db1a:	2300      	movs	r3, #0
 800db1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	61bb      	str	r3, [r7, #24]
 800db22:	e003      	b.n	800db2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db28:	2300      	movs	r3, #0
 800db2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800db2c:	e030      	b.n	800db90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	2200      	movs	r2, #0
 800db36:	2180      	movs	r1, #128	; 0x80
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f000 fff7 	bl	800eb2c <UART_WaitOnFlagUntilTimeout>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d004      	beq.n	800db4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2220      	movs	r2, #32
 800db48:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800db4a:	2303      	movs	r3, #3
 800db4c:	e03c      	b.n	800dbc8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10b      	bne.n	800db6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	881a      	ldrh	r2, [r3, #0]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db60:	b292      	uxth	r2, r2
 800db62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	3302      	adds	r3, #2
 800db68:	61bb      	str	r3, [r7, #24]
 800db6a:	e008      	b.n	800db7e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	781a      	ldrb	r2, [r3, #0]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	b292      	uxth	r2, r2
 800db76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	3301      	adds	r3, #1
 800db7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800db84:	b29b      	uxth	r3, r3
 800db86:	3b01      	subs	r3, #1
 800db88:	b29a      	uxth	r2, r3
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800db96:	b29b      	uxth	r3, r3
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1c8      	bne.n	800db2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	2200      	movs	r2, #0
 800dba4:	2140      	movs	r1, #64	; 0x40
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f000 ffc0 	bl	800eb2c <UART_WaitOnFlagUntilTimeout>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d004      	beq.n	800dbbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2220      	movs	r2, #32
 800dbb6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800dbb8:	2303      	movs	r3, #3
 800dbba:	e005      	b.n	800dbc8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2220      	movs	r2, #32
 800dbc0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	e000      	b.n	800dbc8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800dbc6:	2302      	movs	r3, #2
  }
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3720      	adds	r7, #32
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b08a      	sub	sp, #40	; 0x28
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	4613      	mov	r3, r2
 800dbdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbe4:	2b20      	cmp	r3, #32
 800dbe6:	d137      	bne.n	800dc58 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <HAL_UART_Receive_IT+0x24>
 800dbee:	88fb      	ldrh	r3, [r7, #6]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d101      	bne.n	800dbf8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e030      	b.n	800dc5a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a18      	ldr	r2, [pc, #96]	; (800dc64 <HAL_UART_Receive_IT+0x94>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d01f      	beq.n	800dc48 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d018      	beq.n	800dc48 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	e853 3f00 	ldrex	r3, [r3]
 800dc22:	613b      	str	r3, [r7, #16]
   return(result);
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dc2a:	627b      	str	r3, [r7, #36]	; 0x24
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	461a      	mov	r2, r3
 800dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc34:	623b      	str	r3, [r7, #32]
 800dc36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc38:	69f9      	ldr	r1, [r7, #28]
 800dc3a:	6a3a      	ldr	r2, [r7, #32]
 800dc3c:	e841 2300 	strex	r3, r2, [r1]
 800dc40:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1e6      	bne.n	800dc16 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dc48:	88fb      	ldrh	r3, [r7, #6]
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	68b9      	ldr	r1, [r7, #8]
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f000 ffd4 	bl	800ebfc <UART_Start_Receive_IT>
 800dc54:	4603      	mov	r3, r0
 800dc56:	e000      	b.n	800dc5a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dc58:	2302      	movs	r3, #2
  }
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3728      	adds	r7, #40	; 0x28
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	40008000 	.word	0x40008000

0800dc68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b08a      	sub	sp, #40	; 0x28
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	4613      	mov	r3, r2
 800dc74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc7c:	2b20      	cmp	r3, #32
 800dc7e:	d137      	bne.n	800dcf0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d002      	beq.n	800dc8c <HAL_UART_Receive_DMA+0x24>
 800dc86:	88fb      	ldrh	r3, [r7, #6]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d101      	bne.n	800dc90 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	e030      	b.n	800dcf2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2200      	movs	r2, #0
 800dc94:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a18      	ldr	r2, [pc, #96]	; (800dcfc <HAL_UART_Receive_DMA+0x94>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d01f      	beq.n	800dce0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d018      	beq.n	800dce0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	e853 3f00 	ldrex	r3, [r3]
 800dcba:	613b      	str	r3, [r7, #16]
   return(result);
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dcc2:	627b      	str	r3, [r7, #36]	; 0x24
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	461a      	mov	r2, r3
 800dcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dccc:	623b      	str	r3, [r7, #32]
 800dcce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd0:	69f9      	ldr	r1, [r7, #28]
 800dcd2:	6a3a      	ldr	r2, [r7, #32]
 800dcd4:	e841 2300 	strex	r3, r2, [r1]
 800dcd8:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1e6      	bne.n	800dcae <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dce0:	88fb      	ldrh	r3, [r7, #6]
 800dce2:	461a      	mov	r2, r3
 800dce4:	68b9      	ldr	r1, [r7, #8]
 800dce6:	68f8      	ldr	r0, [r7, #12]
 800dce8:	f001 f84e 	bl	800ed88 <UART_Start_Receive_DMA>
 800dcec:	4603      	mov	r3, r0
 800dcee:	e000      	b.n	800dcf2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dcf0:	2302      	movs	r3, #2
  }
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3728      	adds	r7, #40	; 0x28
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	40008000 	.word	0x40008000

0800dd00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b0ba      	sub	sp, #232	; 0xe8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	69db      	ldr	r3, [r3, #28]
 800dd0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dd26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dd2a:	f640 030f 	movw	r3, #2063	; 0x80f
 800dd2e:	4013      	ands	r3, r2
 800dd30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dd34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d115      	bne.n	800dd68 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800dd3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd40:	f003 0320 	and.w	r3, r3, #32
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d00f      	beq.n	800dd68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dd48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd4c:	f003 0320 	and.w	r3, r3, #32
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d009      	beq.n	800dd68 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	f000 82ae 	beq.w	800e2ba <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	4798      	blx	r3
      }
      return;
 800dd66:	e2a8      	b.n	800e2ba <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800dd68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f000 8117 	beq.w	800dfa0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800dd72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd76:	f003 0301 	and.w	r3, r3, #1
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d106      	bne.n	800dd8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800dd7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dd82:	4b85      	ldr	r3, [pc, #532]	; (800df98 <HAL_UART_IRQHandler+0x298>)
 800dd84:	4013      	ands	r3, r2
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f000 810a 	beq.w	800dfa0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd90:	f003 0301 	and.w	r3, r3, #1
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d011      	beq.n	800ddbc <HAL_UART_IRQHandler+0xbc>
 800dd98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00b      	beq.n	800ddbc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2201      	movs	r2, #1
 800ddaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddb2:	f043 0201 	orr.w	r2, r3, #1
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddc0:	f003 0302 	and.w	r3, r3, #2
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d011      	beq.n	800ddec <HAL_UART_IRQHandler+0xec>
 800ddc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddcc:	f003 0301 	and.w	r3, r3, #1
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00b      	beq.n	800ddec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2202      	movs	r2, #2
 800ddda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dde2:	f043 0204 	orr.w	r2, r3, #4
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddf0:	f003 0304 	and.w	r3, r3, #4
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d011      	beq.n	800de1c <HAL_UART_IRQHandler+0x11c>
 800ddf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddfc:	f003 0301 	and.w	r3, r3, #1
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00b      	beq.n	800de1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2204      	movs	r2, #4
 800de0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de12:	f043 0202 	orr.w	r2, r3, #2
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800de1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de20:	f003 0308 	and.w	r3, r3, #8
 800de24:	2b00      	cmp	r3, #0
 800de26:	d017      	beq.n	800de58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800de28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de2c:	f003 0320 	and.w	r3, r3, #32
 800de30:	2b00      	cmp	r3, #0
 800de32:	d105      	bne.n	800de40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800de34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00b      	beq.n	800de58 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2208      	movs	r2, #8
 800de46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de4e:	f043 0208 	orr.w	r2, r3, #8
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800de58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de60:	2b00      	cmp	r3, #0
 800de62:	d012      	beq.n	800de8a <HAL_UART_IRQHandler+0x18a>
 800de64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d00c      	beq.n	800de8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de80:	f043 0220 	orr.w	r2, r3, #32
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de90:	2b00      	cmp	r3, #0
 800de92:	f000 8214 	beq.w	800e2be <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800de96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de9a:	f003 0320 	and.w	r3, r3, #32
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d00d      	beq.n	800debe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dea6:	f003 0320 	and.w	r3, r3, #32
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d007      	beq.n	800debe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d003      	beq.n	800debe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dec4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	689b      	ldr	r3, [r3, #8]
 800dece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded2:	2b40      	cmp	r3, #64	; 0x40
 800ded4:	d005      	beq.n	800dee2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ded6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800deda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d04f      	beq.n	800df82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f001 f816 	bl	800ef14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800def2:	2b40      	cmp	r3, #64	; 0x40
 800def4:	d141      	bne.n	800df7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	3308      	adds	r3, #8
 800defc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df04:	e853 3f00 	ldrex	r3, [r3]
 800df08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800df0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	3308      	adds	r3, #8
 800df1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800df22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800df26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800df2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800df32:	e841 2300 	strex	r3, r2, [r1]
 800df36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800df3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d1d9      	bne.n	800def6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df46:	2b00      	cmp	r3, #0
 800df48:	d013      	beq.n	800df72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df4e:	4a13      	ldr	r2, [pc, #76]	; (800df9c <HAL_UART_IRQHandler+0x29c>)
 800df50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df56:	4618      	mov	r0, r3
 800df58:	f7fc f8ba 	bl	800a0d0 <HAL_DMA_Abort_IT>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d017      	beq.n	800df92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800df6c:	4610      	mov	r0, r2
 800df6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df70:	e00f      	b.n	800df92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 f9c2 	bl	800e2fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df78:	e00b      	b.n	800df92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f9be 	bl	800e2fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df80:	e007      	b.n	800df92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f9ba 	bl	800e2fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2200      	movs	r2, #0
 800df8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800df90:	e195      	b.n	800e2be <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df92:	bf00      	nop
    return;
 800df94:	e193      	b.n	800e2be <HAL_UART_IRQHandler+0x5be>
 800df96:	bf00      	nop
 800df98:	04000120 	.word	0x04000120
 800df9c:	0800f1c5 	.word	0x0800f1c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	f040 814e 	bne.w	800e246 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dfaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfae:	f003 0310 	and.w	r3, r3, #16
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f000 8147 	beq.w	800e246 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dfb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfbc:	f003 0310 	and.w	r3, r3, #16
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f000 8140 	beq.w	800e246 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2210      	movs	r2, #16
 800dfcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfd8:	2b40      	cmp	r3, #64	; 0x40
 800dfda:	f040 80b8 	bne.w	800e14e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dfea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f000 8167 	beq.w	800e2c2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dffe:	429a      	cmp	r2, r3
 800e000:	f080 815f 	bcs.w	800e2c2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e00a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f003 0320 	and.w	r3, r3, #32
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	f040 8086 	bne.w	800e12c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e02c:	e853 3f00 	ldrex	r3, [r3]
 800e030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e03c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	461a      	mov	r2, r3
 800e046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e04a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e04e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e052:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e056:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e05a:	e841 2300 	strex	r3, r2, [r1]
 800e05e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e066:	2b00      	cmp	r3, #0
 800e068:	d1da      	bne.n	800e020 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	3308      	adds	r3, #8
 800e070:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e074:	e853 3f00 	ldrex	r3, [r3]
 800e078:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e07a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e07c:	f023 0301 	bic.w	r3, r3, #1
 800e080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	3308      	adds	r3, #8
 800e08a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e08e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e092:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e094:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e096:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e09a:	e841 2300 	strex	r3, r2, [r1]
 800e09e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e0a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1e1      	bne.n	800e06a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	3308      	adds	r3, #8
 800e0ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e0b0:	e853 3f00 	ldrex	r3, [r3]
 800e0b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	3308      	adds	r3, #8
 800e0c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e0ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e0cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e0d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e0d2:	e841 2300 	strex	r3, r2, [r1]
 800e0d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e0d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d1e3      	bne.n	800e0a6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2220      	movs	r2, #32
 800e0e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0f4:	e853 3f00 	ldrex	r3, [r3]
 800e0f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e0fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0fc:	f023 0310 	bic.w	r3, r3, #16
 800e100:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	461a      	mov	r2, r3
 800e10a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e10e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e110:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e112:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e116:	e841 2300 	strex	r3, r2, [r1]
 800e11a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1e4      	bne.n	800e0ec <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e126:	4618      	mov	r0, r3
 800e128:	f7fb ff94 	bl	800a054 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2202      	movs	r2, #2
 800e130:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e13e:	b29b      	uxth	r3, r3
 800e140:	1ad3      	subs	r3, r2, r3
 800e142:	b29b      	uxth	r3, r3
 800e144:	4619      	mov	r1, r3
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 f8e2 	bl	800e310 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e14c:	e0b9      	b.n	800e2c2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	1ad3      	subs	r3, r2, r3
 800e15e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e168:	b29b      	uxth	r3, r3
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f000 80ab 	beq.w	800e2c6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800e170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e174:	2b00      	cmp	r3, #0
 800e176:	f000 80a6 	beq.w	800e2c6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e182:	e853 3f00 	ldrex	r3, [r3]
 800e186:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e18a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e18e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	461a      	mov	r2, r3
 800e198:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e19c:	647b      	str	r3, [r7, #68]	; 0x44
 800e19e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1a4:	e841 2300 	strex	r3, r2, [r1]
 800e1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d1e4      	bne.n	800e17a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	3308      	adds	r3, #8
 800e1b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ba:	e853 3f00 	ldrex	r3, [r3]
 800e1be:	623b      	str	r3, [r7, #32]
   return(result);
 800e1c0:	6a3b      	ldr	r3, [r7, #32]
 800e1c2:	f023 0301 	bic.w	r3, r3, #1
 800e1c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	3308      	adds	r3, #8
 800e1d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e1d4:	633a      	str	r2, [r7, #48]	; 0x30
 800e1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1dc:	e841 2300 	strex	r3, r2, [r1]
 800e1e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d1e3      	bne.n	800e1b0 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2220      	movs	r2, #32
 800e1ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	e853 3f00 	ldrex	r3, [r3]
 800e208:	60fb      	str	r3, [r7, #12]
   return(result);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f023 0310 	bic.w	r3, r3, #16
 800e210:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	461a      	mov	r2, r3
 800e21a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e21e:	61fb      	str	r3, [r7, #28]
 800e220:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e222:	69b9      	ldr	r1, [r7, #24]
 800e224:	69fa      	ldr	r2, [r7, #28]
 800e226:	e841 2300 	strex	r3, r2, [r1]
 800e22a:	617b      	str	r3, [r7, #20]
   return(result);
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1e4      	bne.n	800e1fc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2202      	movs	r2, #2
 800e236:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e23c:	4619      	mov	r1, r3
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 f866 	bl	800e310 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e244:	e03f      	b.n	800e2c6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e24a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00e      	beq.n	800e270 <HAL_UART_IRQHandler+0x570>
 800e252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e256:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d008      	beq.n	800e270 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e266:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f001 f9a7 	bl	800f5bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e26e:	e02d      	b.n	800e2cc <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00e      	beq.n	800e29a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e284:	2b00      	cmp	r3, #0
 800e286:	d008      	beq.n	800e29a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d01c      	beq.n	800e2ca <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	4798      	blx	r3
    }
    return;
 800e298:	e017      	b.n	800e2ca <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d012      	beq.n	800e2cc <HAL_UART_IRQHandler+0x5cc>
 800e2a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00c      	beq.n	800e2cc <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 ff9c 	bl	800f1f0 <UART_EndTransmit_IT>
    return;
 800e2b8:	e008      	b.n	800e2cc <HAL_UART_IRQHandler+0x5cc>
      return;
 800e2ba:	bf00      	nop
 800e2bc:	e006      	b.n	800e2cc <HAL_UART_IRQHandler+0x5cc>
    return;
 800e2be:	bf00      	nop
 800e2c0:	e004      	b.n	800e2cc <HAL_UART_IRQHandler+0x5cc>
      return;
 800e2c2:	bf00      	nop
 800e2c4:	e002      	b.n	800e2cc <HAL_UART_IRQHandler+0x5cc>
      return;
 800e2c6:	bf00      	nop
 800e2c8:	e000      	b.n	800e2cc <HAL_UART_IRQHandler+0x5cc>
    return;
 800e2ca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e2cc:	37e8      	adds	r7, #232	; 0xe8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop

0800e2d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e2dc:	bf00      	nop
 800e2de:	370c      	adds	r7, #12
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e2f0:	bf00      	nop
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e304:	bf00      	nop
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	460b      	mov	r3, r1
 800e31a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e31c:	bf00      	nop
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e32c:	b08a      	sub	sp, #40	; 0x28
 800e32e:	af00      	add	r7, sp, #0
 800e330:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e332:	2300      	movs	r3, #0
 800e334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	689a      	ldr	r2, [r3, #8]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	691b      	ldr	r3, [r3, #16]
 800e340:	431a      	orrs	r2, r3
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	695b      	ldr	r3, [r3, #20]
 800e346:	431a      	orrs	r2, r3
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	69db      	ldr	r3, [r3, #28]
 800e34c:	4313      	orrs	r3, r2
 800e34e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	4ba4      	ldr	r3, [pc, #656]	; (800e5e8 <UART_SetConfig+0x2c0>)
 800e358:	4013      	ands	r3, r2
 800e35a:	68fa      	ldr	r2, [r7, #12]
 800e35c:	6812      	ldr	r2, [r2, #0]
 800e35e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e360:	430b      	orrs	r3, r1
 800e362:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	68da      	ldr	r2, [r3, #12]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	430a      	orrs	r2, r1
 800e378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	699b      	ldr	r3, [r3, #24]
 800e37e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a99      	ldr	r2, [pc, #612]	; (800e5ec <UART_SetConfig+0x2c4>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d004      	beq.n	800e394 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6a1b      	ldr	r3, [r3, #32]
 800e38e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e390:	4313      	orrs	r3, r2
 800e392:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3a4:	430a      	orrs	r2, r1
 800e3a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a90      	ldr	r2, [pc, #576]	; (800e5f0 <UART_SetConfig+0x2c8>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d126      	bne.n	800e400 <UART_SetConfig+0xd8>
 800e3b2:	4b90      	ldr	r3, [pc, #576]	; (800e5f4 <UART_SetConfig+0x2cc>)
 800e3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3b8:	f003 0303 	and.w	r3, r3, #3
 800e3bc:	2b03      	cmp	r3, #3
 800e3be:	d81b      	bhi.n	800e3f8 <UART_SetConfig+0xd0>
 800e3c0:	a201      	add	r2, pc, #4	; (adr r2, 800e3c8 <UART_SetConfig+0xa0>)
 800e3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c6:	bf00      	nop
 800e3c8:	0800e3d9 	.word	0x0800e3d9
 800e3cc:	0800e3e9 	.word	0x0800e3e9
 800e3d0:	0800e3e1 	.word	0x0800e3e1
 800e3d4:	0800e3f1 	.word	0x0800e3f1
 800e3d8:	2301      	movs	r3, #1
 800e3da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e3de:	e116      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e3e0:	2302      	movs	r3, #2
 800e3e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e3e6:	e112      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e3e8:	2304      	movs	r3, #4
 800e3ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e3ee:	e10e      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e3f0:	2308      	movs	r3, #8
 800e3f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e3f6:	e10a      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e3f8:	2310      	movs	r3, #16
 800e3fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e3fe:	e106      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a7c      	ldr	r2, [pc, #496]	; (800e5f8 <UART_SetConfig+0x2d0>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d138      	bne.n	800e47c <UART_SetConfig+0x154>
 800e40a:	4b7a      	ldr	r3, [pc, #488]	; (800e5f4 <UART_SetConfig+0x2cc>)
 800e40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e410:	f003 030c 	and.w	r3, r3, #12
 800e414:	2b0c      	cmp	r3, #12
 800e416:	d82d      	bhi.n	800e474 <UART_SetConfig+0x14c>
 800e418:	a201      	add	r2, pc, #4	; (adr r2, 800e420 <UART_SetConfig+0xf8>)
 800e41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41e:	bf00      	nop
 800e420:	0800e455 	.word	0x0800e455
 800e424:	0800e475 	.word	0x0800e475
 800e428:	0800e475 	.word	0x0800e475
 800e42c:	0800e475 	.word	0x0800e475
 800e430:	0800e465 	.word	0x0800e465
 800e434:	0800e475 	.word	0x0800e475
 800e438:	0800e475 	.word	0x0800e475
 800e43c:	0800e475 	.word	0x0800e475
 800e440:	0800e45d 	.word	0x0800e45d
 800e444:	0800e475 	.word	0x0800e475
 800e448:	0800e475 	.word	0x0800e475
 800e44c:	0800e475 	.word	0x0800e475
 800e450:	0800e46d 	.word	0x0800e46d
 800e454:	2300      	movs	r3, #0
 800e456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e45a:	e0d8      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e45c:	2302      	movs	r3, #2
 800e45e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e462:	e0d4      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e464:	2304      	movs	r3, #4
 800e466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e46a:	e0d0      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e46c:	2308      	movs	r3, #8
 800e46e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e472:	e0cc      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e474:	2310      	movs	r3, #16
 800e476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e47a:	e0c8      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4a5e      	ldr	r2, [pc, #376]	; (800e5fc <UART_SetConfig+0x2d4>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d125      	bne.n	800e4d2 <UART_SetConfig+0x1aa>
 800e486:	4b5b      	ldr	r3, [pc, #364]	; (800e5f4 <UART_SetConfig+0x2cc>)
 800e488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e48c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e490:	2b30      	cmp	r3, #48	; 0x30
 800e492:	d016      	beq.n	800e4c2 <UART_SetConfig+0x19a>
 800e494:	2b30      	cmp	r3, #48	; 0x30
 800e496:	d818      	bhi.n	800e4ca <UART_SetConfig+0x1a2>
 800e498:	2b20      	cmp	r3, #32
 800e49a:	d00a      	beq.n	800e4b2 <UART_SetConfig+0x18a>
 800e49c:	2b20      	cmp	r3, #32
 800e49e:	d814      	bhi.n	800e4ca <UART_SetConfig+0x1a2>
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d002      	beq.n	800e4aa <UART_SetConfig+0x182>
 800e4a4:	2b10      	cmp	r3, #16
 800e4a6:	d008      	beq.n	800e4ba <UART_SetConfig+0x192>
 800e4a8:	e00f      	b.n	800e4ca <UART_SetConfig+0x1a2>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e4b0:	e0ad      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e4b2:	2302      	movs	r3, #2
 800e4b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e4b8:	e0a9      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e4ba:	2304      	movs	r3, #4
 800e4bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e4c0:	e0a5      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e4c2:	2308      	movs	r3, #8
 800e4c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e4c8:	e0a1      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e4ca:	2310      	movs	r3, #16
 800e4cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e4d0:	e09d      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a4a      	ldr	r2, [pc, #296]	; (800e600 <UART_SetConfig+0x2d8>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d125      	bne.n	800e528 <UART_SetConfig+0x200>
 800e4dc:	4b45      	ldr	r3, [pc, #276]	; (800e5f4 <UART_SetConfig+0x2cc>)
 800e4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e4e6:	2bc0      	cmp	r3, #192	; 0xc0
 800e4e8:	d016      	beq.n	800e518 <UART_SetConfig+0x1f0>
 800e4ea:	2bc0      	cmp	r3, #192	; 0xc0
 800e4ec:	d818      	bhi.n	800e520 <UART_SetConfig+0x1f8>
 800e4ee:	2b80      	cmp	r3, #128	; 0x80
 800e4f0:	d00a      	beq.n	800e508 <UART_SetConfig+0x1e0>
 800e4f2:	2b80      	cmp	r3, #128	; 0x80
 800e4f4:	d814      	bhi.n	800e520 <UART_SetConfig+0x1f8>
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d002      	beq.n	800e500 <UART_SetConfig+0x1d8>
 800e4fa:	2b40      	cmp	r3, #64	; 0x40
 800e4fc:	d008      	beq.n	800e510 <UART_SetConfig+0x1e8>
 800e4fe:	e00f      	b.n	800e520 <UART_SetConfig+0x1f8>
 800e500:	2300      	movs	r3, #0
 800e502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e506:	e082      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e508:	2302      	movs	r3, #2
 800e50a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e50e:	e07e      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e510:	2304      	movs	r3, #4
 800e512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e516:	e07a      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e518:	2308      	movs	r3, #8
 800e51a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e51e:	e076      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e520:	2310      	movs	r3, #16
 800e522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e526:	e072      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a35      	ldr	r2, [pc, #212]	; (800e604 <UART_SetConfig+0x2dc>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d12a      	bne.n	800e588 <UART_SetConfig+0x260>
 800e532:	4b30      	ldr	r3, [pc, #192]	; (800e5f4 <UART_SetConfig+0x2cc>)
 800e534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e53c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e540:	d01a      	beq.n	800e578 <UART_SetConfig+0x250>
 800e542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e546:	d81b      	bhi.n	800e580 <UART_SetConfig+0x258>
 800e548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e54c:	d00c      	beq.n	800e568 <UART_SetConfig+0x240>
 800e54e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e552:	d815      	bhi.n	800e580 <UART_SetConfig+0x258>
 800e554:	2b00      	cmp	r3, #0
 800e556:	d003      	beq.n	800e560 <UART_SetConfig+0x238>
 800e558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e55c:	d008      	beq.n	800e570 <UART_SetConfig+0x248>
 800e55e:	e00f      	b.n	800e580 <UART_SetConfig+0x258>
 800e560:	2300      	movs	r3, #0
 800e562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e566:	e052      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e568:	2302      	movs	r3, #2
 800e56a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e56e:	e04e      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e570:	2304      	movs	r3, #4
 800e572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e576:	e04a      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e578:	2308      	movs	r3, #8
 800e57a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e57e:	e046      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e580:	2310      	movs	r3, #16
 800e582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e586:	e042      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a17      	ldr	r2, [pc, #92]	; (800e5ec <UART_SetConfig+0x2c4>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d13a      	bne.n	800e608 <UART_SetConfig+0x2e0>
 800e592:	4b18      	ldr	r3, [pc, #96]	; (800e5f4 <UART_SetConfig+0x2cc>)
 800e594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e59c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e5a0:	d01a      	beq.n	800e5d8 <UART_SetConfig+0x2b0>
 800e5a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e5a6:	d81b      	bhi.n	800e5e0 <UART_SetConfig+0x2b8>
 800e5a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5ac:	d00c      	beq.n	800e5c8 <UART_SetConfig+0x2a0>
 800e5ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5b2:	d815      	bhi.n	800e5e0 <UART_SetConfig+0x2b8>
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d003      	beq.n	800e5c0 <UART_SetConfig+0x298>
 800e5b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5bc:	d008      	beq.n	800e5d0 <UART_SetConfig+0x2a8>
 800e5be:	e00f      	b.n	800e5e0 <UART_SetConfig+0x2b8>
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e5c6:	e022      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e5c8:	2302      	movs	r3, #2
 800e5ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e5ce:	e01e      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e5d0:	2304      	movs	r3, #4
 800e5d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e5d6:	e01a      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e5d8:	2308      	movs	r3, #8
 800e5da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e5de:	e016      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e5e0:	2310      	movs	r3, #16
 800e5e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e5e6:	e012      	b.n	800e60e <UART_SetConfig+0x2e6>
 800e5e8:	efff69f3 	.word	0xefff69f3
 800e5ec:	40008000 	.word	0x40008000
 800e5f0:	40013800 	.word	0x40013800
 800e5f4:	40021000 	.word	0x40021000
 800e5f8:	40004400 	.word	0x40004400
 800e5fc:	40004800 	.word	0x40004800
 800e600:	40004c00 	.word	0x40004c00
 800e604:	40005000 	.word	0x40005000
 800e608:	2310      	movs	r3, #16
 800e60a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a9f      	ldr	r2, [pc, #636]	; (800e890 <UART_SetConfig+0x568>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d17a      	bne.n	800e70e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e61c:	2b08      	cmp	r3, #8
 800e61e:	d824      	bhi.n	800e66a <UART_SetConfig+0x342>
 800e620:	a201      	add	r2, pc, #4	; (adr r2, 800e628 <UART_SetConfig+0x300>)
 800e622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e626:	bf00      	nop
 800e628:	0800e64d 	.word	0x0800e64d
 800e62c:	0800e66b 	.word	0x0800e66b
 800e630:	0800e655 	.word	0x0800e655
 800e634:	0800e66b 	.word	0x0800e66b
 800e638:	0800e65b 	.word	0x0800e65b
 800e63c:	0800e66b 	.word	0x0800e66b
 800e640:	0800e66b 	.word	0x0800e66b
 800e644:	0800e66b 	.word	0x0800e66b
 800e648:	0800e663 	.word	0x0800e663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e64c:	f7fd fd3c 	bl	800c0c8 <HAL_RCC_GetPCLK1Freq>
 800e650:	61f8      	str	r0, [r7, #28]
        break;
 800e652:	e010      	b.n	800e676 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e654:	4b8f      	ldr	r3, [pc, #572]	; (800e894 <UART_SetConfig+0x56c>)
 800e656:	61fb      	str	r3, [r7, #28]
        break;
 800e658:	e00d      	b.n	800e676 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e65a:	f7fd fc9d 	bl	800bf98 <HAL_RCC_GetSysClockFreq>
 800e65e:	61f8      	str	r0, [r7, #28]
        break;
 800e660:	e009      	b.n	800e676 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e666:	61fb      	str	r3, [r7, #28]
        break;
 800e668:	e005      	b.n	800e676 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800e66a:	2300      	movs	r3, #0
 800e66c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e66e:	2301      	movs	r3, #1
 800e670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e674:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f000 80fb 	beq.w	800e874 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	685a      	ldr	r2, [r3, #4]
 800e682:	4613      	mov	r3, r2
 800e684:	005b      	lsls	r3, r3, #1
 800e686:	4413      	add	r3, r2
 800e688:	69fa      	ldr	r2, [r7, #28]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d305      	bcc.n	800e69a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e694:	69fa      	ldr	r2, [r7, #28]
 800e696:	429a      	cmp	r2, r3
 800e698:	d903      	bls.n	800e6a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800e69a:	2301      	movs	r3, #1
 800e69c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e6a0:	e0e8      	b.n	800e874 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	461c      	mov	r4, r3
 800e6a8:	4615      	mov	r5, r2
 800e6aa:	f04f 0200 	mov.w	r2, #0
 800e6ae:	f04f 0300 	mov.w	r3, #0
 800e6b2:	022b      	lsls	r3, r5, #8
 800e6b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e6b8:	0222      	lsls	r2, r4, #8
 800e6ba:	68f9      	ldr	r1, [r7, #12]
 800e6bc:	6849      	ldr	r1, [r1, #4]
 800e6be:	0849      	lsrs	r1, r1, #1
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	4688      	mov	r8, r1
 800e6c4:	4681      	mov	r9, r0
 800e6c6:	eb12 0a08 	adds.w	sl, r2, r8
 800e6ca:	eb43 0b09 	adc.w	fp, r3, r9
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	603b      	str	r3, [r7, #0]
 800e6d6:	607a      	str	r2, [r7, #4]
 800e6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6dc:	4650      	mov	r0, sl
 800e6de:	4659      	mov	r1, fp
 800e6e0:	f7f2 fab2 	bl	8000c48 <__aeabi_uldivmod>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e6ec:	69bb      	ldr	r3, [r7, #24]
 800e6ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e6f2:	d308      	bcc.n	800e706 <UART_SetConfig+0x3de>
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6fa:	d204      	bcs.n	800e706 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	69ba      	ldr	r2, [r7, #24]
 800e702:	60da      	str	r2, [r3, #12]
 800e704:	e0b6      	b.n	800e874 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800e706:	2301      	movs	r3, #1
 800e708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e70c:	e0b2      	b.n	800e874 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	69db      	ldr	r3, [r3, #28]
 800e712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e716:	d15e      	bne.n	800e7d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800e718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e71c:	2b08      	cmp	r3, #8
 800e71e:	d828      	bhi.n	800e772 <UART_SetConfig+0x44a>
 800e720:	a201      	add	r2, pc, #4	; (adr r2, 800e728 <UART_SetConfig+0x400>)
 800e722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e726:	bf00      	nop
 800e728:	0800e74d 	.word	0x0800e74d
 800e72c:	0800e755 	.word	0x0800e755
 800e730:	0800e75d 	.word	0x0800e75d
 800e734:	0800e773 	.word	0x0800e773
 800e738:	0800e763 	.word	0x0800e763
 800e73c:	0800e773 	.word	0x0800e773
 800e740:	0800e773 	.word	0x0800e773
 800e744:	0800e773 	.word	0x0800e773
 800e748:	0800e76b 	.word	0x0800e76b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e74c:	f7fd fcbc 	bl	800c0c8 <HAL_RCC_GetPCLK1Freq>
 800e750:	61f8      	str	r0, [r7, #28]
        break;
 800e752:	e014      	b.n	800e77e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e754:	f7fd fcce 	bl	800c0f4 <HAL_RCC_GetPCLK2Freq>
 800e758:	61f8      	str	r0, [r7, #28]
        break;
 800e75a:	e010      	b.n	800e77e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e75c:	4b4d      	ldr	r3, [pc, #308]	; (800e894 <UART_SetConfig+0x56c>)
 800e75e:	61fb      	str	r3, [r7, #28]
        break;
 800e760:	e00d      	b.n	800e77e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e762:	f7fd fc19 	bl	800bf98 <HAL_RCC_GetSysClockFreq>
 800e766:	61f8      	str	r0, [r7, #28]
        break;
 800e768:	e009      	b.n	800e77e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e76a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e76e:	61fb      	str	r3, [r7, #28]
        break;
 800e770:	e005      	b.n	800e77e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800e772:	2300      	movs	r3, #0
 800e774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e776:	2301      	movs	r3, #1
 800e778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e77c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d077      	beq.n	800e874 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	005a      	lsls	r2, r3, #1
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	085b      	lsrs	r3, r3, #1
 800e78e:	441a      	add	r2, r3
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	685b      	ldr	r3, [r3, #4]
 800e794:	fbb2 f3f3 	udiv	r3, r2, r3
 800e798:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	2b0f      	cmp	r3, #15
 800e79e:	d916      	bls.n	800e7ce <UART_SetConfig+0x4a6>
 800e7a0:	69bb      	ldr	r3, [r7, #24]
 800e7a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7a6:	d212      	bcs.n	800e7ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	f023 030f 	bic.w	r3, r3, #15
 800e7b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	085b      	lsrs	r3, r3, #1
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	f003 0307 	and.w	r3, r3, #7
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	8afb      	ldrh	r3, [r7, #22]
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	8afa      	ldrh	r2, [r7, #22]
 800e7ca:	60da      	str	r2, [r3, #12]
 800e7cc:	e052      	b.n	800e874 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e7d4:	e04e      	b.n	800e874 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e7d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e7da:	2b08      	cmp	r3, #8
 800e7dc:	d827      	bhi.n	800e82e <UART_SetConfig+0x506>
 800e7de:	a201      	add	r2, pc, #4	; (adr r2, 800e7e4 <UART_SetConfig+0x4bc>)
 800e7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e4:	0800e809 	.word	0x0800e809
 800e7e8:	0800e811 	.word	0x0800e811
 800e7ec:	0800e819 	.word	0x0800e819
 800e7f0:	0800e82f 	.word	0x0800e82f
 800e7f4:	0800e81f 	.word	0x0800e81f
 800e7f8:	0800e82f 	.word	0x0800e82f
 800e7fc:	0800e82f 	.word	0x0800e82f
 800e800:	0800e82f 	.word	0x0800e82f
 800e804:	0800e827 	.word	0x0800e827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e808:	f7fd fc5e 	bl	800c0c8 <HAL_RCC_GetPCLK1Freq>
 800e80c:	61f8      	str	r0, [r7, #28]
        break;
 800e80e:	e014      	b.n	800e83a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e810:	f7fd fc70 	bl	800c0f4 <HAL_RCC_GetPCLK2Freq>
 800e814:	61f8      	str	r0, [r7, #28]
        break;
 800e816:	e010      	b.n	800e83a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e818:	4b1e      	ldr	r3, [pc, #120]	; (800e894 <UART_SetConfig+0x56c>)
 800e81a:	61fb      	str	r3, [r7, #28]
        break;
 800e81c:	e00d      	b.n	800e83a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e81e:	f7fd fbbb 	bl	800bf98 <HAL_RCC_GetSysClockFreq>
 800e822:	61f8      	str	r0, [r7, #28]
        break;
 800e824:	e009      	b.n	800e83a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e82a:	61fb      	str	r3, [r7, #28]
        break;
 800e82c:	e005      	b.n	800e83a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800e82e:	2300      	movs	r3, #0
 800e830:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e838:	bf00      	nop
    }

    if (pclk != 0U)
 800e83a:	69fb      	ldr	r3, [r7, #28]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d019      	beq.n	800e874 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	085a      	lsrs	r2, r3, #1
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	441a      	add	r2, r3
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e852:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	2b0f      	cmp	r3, #15
 800e858:	d909      	bls.n	800e86e <UART_SetConfig+0x546>
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e860:	d205      	bcs.n	800e86e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	b29a      	uxth	r2, r3
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	60da      	str	r2, [r3, #12]
 800e86c:	e002      	b.n	800e874 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800e86e:	2301      	movs	r3, #1
 800e870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2200      	movs	r2, #0
 800e878:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2200      	movs	r2, #0
 800e87e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e880:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e884:	4618      	mov	r0, r3
 800e886:	3728      	adds	r7, #40	; 0x28
 800e888:	46bd      	mov	sp, r7
 800e88a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e88e:	bf00      	nop
 800e890:	40008000 	.word	0x40008000
 800e894:	00f42400 	.word	0x00f42400

0800e898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a4:	f003 0308 	and.w	r3, r3, #8
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00a      	beq.n	800e8c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	430a      	orrs	r2, r1
 800e8c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c6:	f003 0301 	and.w	r3, r3, #1
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00a      	beq.n	800e8e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	430a      	orrs	r2, r1
 800e8e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e8:	f003 0302 	and.w	r3, r3, #2
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00a      	beq.n	800e906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	430a      	orrs	r2, r1
 800e904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90a:	f003 0304 	and.w	r3, r3, #4
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d00a      	beq.n	800e928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	430a      	orrs	r2, r1
 800e926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e92c:	f003 0310 	and.w	r3, r3, #16
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00a      	beq.n	800e94a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	689b      	ldr	r3, [r3, #8]
 800e93a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	430a      	orrs	r2, r1
 800e948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e94e:	f003 0320 	and.w	r3, r3, #32
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00a      	beq.n	800e96c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	430a      	orrs	r2, r1
 800e96a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e974:	2b00      	cmp	r3, #0
 800e976:	d01a      	beq.n	800e9ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	430a      	orrs	r2, r1
 800e98c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e996:	d10a      	bne.n	800e9ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	430a      	orrs	r2, r1
 800e9ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d00a      	beq.n	800e9d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	430a      	orrs	r2, r1
 800e9ce:	605a      	str	r2, [r3, #4]
  }
}
 800e9d0:	bf00      	nop
 800e9d2:	370c      	adds	r7, #12
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr

0800e9dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b098      	sub	sp, #96	; 0x60
 800e9e0:	af02      	add	r7, sp, #8
 800e9e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e9ec:	f7fb f89e 	bl	8009b2c <HAL_GetTick>
 800e9f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f003 0308 	and.w	r3, r3, #8
 800e9fc:	2b08      	cmp	r3, #8
 800e9fe:	d12e      	bne.n	800ea5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 f88c 	bl	800eb2c <UART_WaitOnFlagUntilTimeout>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d021      	beq.n	800ea5e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea22:	e853 3f00 	ldrex	r3, [r3]
 800ea26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea2e:	653b      	str	r3, [r7, #80]	; 0x50
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	461a      	mov	r2, r3
 800ea36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea38:	647b      	str	r3, [r7, #68]	; 0x44
 800ea3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea40:	e841 2300 	strex	r3, r2, [r1]
 800ea44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d1e6      	bne.n	800ea1a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2220      	movs	r2, #32
 800ea50:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea5a:	2303      	movs	r3, #3
 800ea5c:	e062      	b.n	800eb24 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f003 0304 	and.w	r3, r3, #4
 800ea68:	2b04      	cmp	r3, #4
 800ea6a:	d149      	bne.n	800eb00 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea70:	9300      	str	r3, [sp, #0]
 800ea72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea74:	2200      	movs	r2, #0
 800ea76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f000 f856 	bl	800eb2c <UART_WaitOnFlagUntilTimeout>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d03c      	beq.n	800eb00 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8e:	e853 3f00 	ldrex	r3, [r3]
 800ea92:	623b      	str	r3, [r7, #32]
   return(result);
 800ea94:	6a3b      	ldr	r3, [r7, #32]
 800ea96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaa4:	633b      	str	r3, [r7, #48]	; 0x30
 800eaa6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eaaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaac:	e841 2300 	strex	r3, r2, [r1]
 800eab0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1e6      	bne.n	800ea86 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	3308      	adds	r3, #8
 800eabe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	e853 3f00 	ldrex	r3, [r3]
 800eac6:	60fb      	str	r3, [r7, #12]
   return(result);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f023 0301 	bic.w	r3, r3, #1
 800eace:	64bb      	str	r3, [r7, #72]	; 0x48
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	3308      	adds	r3, #8
 800ead6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ead8:	61fa      	str	r2, [r7, #28]
 800eada:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eadc:	69b9      	ldr	r1, [r7, #24]
 800eade:	69fa      	ldr	r2, [r7, #28]
 800eae0:	e841 2300 	strex	r3, r2, [r1]
 800eae4:	617b      	str	r3, [r7, #20]
   return(result);
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d1e5      	bne.n	800eab8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2220      	movs	r2, #32
 800eaf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eafc:	2303      	movs	r3, #3
 800eafe:	e011      	b.n	800eb24 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2220      	movs	r2, #32
 800eb04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2220      	movs	r2, #32
 800eb0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800eb22:	2300      	movs	r3, #0
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3758      	adds	r7, #88	; 0x58
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	60f8      	str	r0, [r7, #12]
 800eb34:	60b9      	str	r1, [r7, #8]
 800eb36:	603b      	str	r3, [r7, #0]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb3c:	e049      	b.n	800ebd2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb44:	d045      	beq.n	800ebd2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb46:	f7fa fff1 	bl	8009b2c <HAL_GetTick>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	1ad3      	subs	r3, r2, r3
 800eb50:	69ba      	ldr	r2, [r7, #24]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d302      	bcc.n	800eb5c <UART_WaitOnFlagUntilTimeout+0x30>
 800eb56:	69bb      	ldr	r3, [r7, #24]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d101      	bne.n	800eb60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800eb5c:	2303      	movs	r3, #3
 800eb5e:	e048      	b.n	800ebf2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f003 0304 	and.w	r3, r3, #4
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d031      	beq.n	800ebd2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	69db      	ldr	r3, [r3, #28]
 800eb74:	f003 0308 	and.w	r3, r3, #8
 800eb78:	2b08      	cmp	r3, #8
 800eb7a:	d110      	bne.n	800eb9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	2208      	movs	r2, #8
 800eb82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eb84:	68f8      	ldr	r0, [r7, #12]
 800eb86:	f000 f9c5 	bl	800ef14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2208      	movs	r2, #8
 800eb8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e029      	b.n	800ebf2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	69db      	ldr	r3, [r3, #28]
 800eba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ebac:	d111      	bne.n	800ebd2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f000 f9ab 	bl	800ef14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2220      	movs	r2, #32
 800ebc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ebce:	2303      	movs	r3, #3
 800ebd0:	e00f      	b.n	800ebf2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	69da      	ldr	r2, [r3, #28]
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	4013      	ands	r3, r2
 800ebdc:	68ba      	ldr	r2, [r7, #8]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	bf0c      	ite	eq
 800ebe2:	2301      	moveq	r3, #1
 800ebe4:	2300      	movne	r3, #0
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	461a      	mov	r2, r3
 800ebea:	79fb      	ldrb	r3, [r7, #7]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d0a6      	beq.n	800eb3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
	...

0800ebfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b097      	sub	sp, #92	; 0x5c
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	60f8      	str	r0, [r7, #12]
 800ec04:	60b9      	str	r1, [r7, #8]
 800ec06:	4613      	mov	r3, r2
 800ec08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	68ba      	ldr	r2, [r7, #8]
 800ec0e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	88fa      	ldrh	r2, [r7, #6]
 800ec14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	88fa      	ldrh	r2, [r7, #6]
 800ec1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	689b      	ldr	r3, [r3, #8]
 800ec2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec2e:	d10e      	bne.n	800ec4e <UART_Start_Receive_IT+0x52>
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	691b      	ldr	r3, [r3, #16]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d105      	bne.n	800ec44 <UART_Start_Receive_IT+0x48>
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ec3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ec42:	e02d      	b.n	800eca0 <UART_Start_Receive_IT+0xa4>
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	22ff      	movs	r2, #255	; 0xff
 800ec48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ec4c:	e028      	b.n	800eca0 <UART_Start_Receive_IT+0xa4>
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10d      	bne.n	800ec72 <UART_Start_Receive_IT+0x76>
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	691b      	ldr	r3, [r3, #16]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d104      	bne.n	800ec68 <UART_Start_Receive_IT+0x6c>
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	22ff      	movs	r2, #255	; 0xff
 800ec62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ec66:	e01b      	b.n	800eca0 <UART_Start_Receive_IT+0xa4>
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	227f      	movs	r2, #127	; 0x7f
 800ec6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ec70:	e016      	b.n	800eca0 <UART_Start_Receive_IT+0xa4>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ec7a:	d10d      	bne.n	800ec98 <UART_Start_Receive_IT+0x9c>
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	691b      	ldr	r3, [r3, #16]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d104      	bne.n	800ec8e <UART_Start_Receive_IT+0x92>
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	227f      	movs	r2, #127	; 0x7f
 800ec88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ec8c:	e008      	b.n	800eca0 <UART_Start_Receive_IT+0xa4>
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	223f      	movs	r2, #63	; 0x3f
 800ec92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ec96:	e003      	b.n	800eca0 <UART_Start_Receive_IT+0xa4>
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2200      	movs	r2, #0
 800eca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2222      	movs	r2, #34	; 0x22
 800ecac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	3308      	adds	r3, #8
 800ecb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecba:	e853 3f00 	ldrex	r3, [r3]
 800ecbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ecc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc2:	f043 0301 	orr.w	r3, r3, #1
 800ecc6:	657b      	str	r3, [r7, #84]	; 0x54
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	3308      	adds	r3, #8
 800ecce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ecd0:	64ba      	str	r2, [r7, #72]	; 0x48
 800ecd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ecd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecd8:	e841 2300 	strex	r3, r2, [r1]
 800ecdc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ecde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d1e5      	bne.n	800ecb0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecec:	d107      	bne.n	800ecfe <UART_Start_Receive_IT+0x102>
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	691b      	ldr	r3, [r3, #16]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d103      	bne.n	800ecfe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	4a21      	ldr	r2, [pc, #132]	; (800ed80 <UART_Start_Receive_IT+0x184>)
 800ecfa:	669a      	str	r2, [r3, #104]	; 0x68
 800ecfc:	e002      	b.n	800ed04 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	4a20      	ldr	r2, [pc, #128]	; (800ed84 <UART_Start_Receive_IT+0x188>)
 800ed02:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	691b      	ldr	r3, [r3, #16]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d019      	beq.n	800ed40 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed14:	e853 3f00 	ldrex	r3, [r3]
 800ed18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ed20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	461a      	mov	r2, r3
 800ed28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ed2c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed32:	e841 2300 	strex	r3, r2, [r1]
 800ed36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ed38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d1e6      	bne.n	800ed0c <UART_Start_Receive_IT+0x110>
 800ed3e:	e018      	b.n	800ed72 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	e853 3f00 	ldrex	r3, [r3]
 800ed4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	f043 0320 	orr.w	r3, r3, #32
 800ed54:	653b      	str	r3, [r7, #80]	; 0x50
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed5e:	623b      	str	r3, [r7, #32]
 800ed60:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed62:	69f9      	ldr	r1, [r7, #28]
 800ed64:	6a3a      	ldr	r2, [r7, #32]
 800ed66:	e841 2300 	strex	r3, r2, [r1]
 800ed6a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d1e6      	bne.n	800ed40 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	375c      	adds	r7, #92	; 0x5c
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	0800f401 	.word	0x0800f401
 800ed84:	0800f245 	.word	0x0800f245

0800ed88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b096      	sub	sp, #88	; 0x58
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	4613      	mov	r3, r2
 800ed94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	88fa      	ldrh	r2, [r7, #6]
 800eda0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2222      	movs	r2, #34	; 0x22
 800edb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d028      	beq.n	800ee0e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edc0:	4a3e      	ldr	r2, [pc, #248]	; (800eebc <UART_Start_Receive_DMA+0x134>)
 800edc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edc8:	4a3d      	ldr	r2, [pc, #244]	; (800eec0 <UART_Start_Receive_DMA+0x138>)
 800edca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edd0:	4a3c      	ldr	r2, [pc, #240]	; (800eec4 <UART_Start_Receive_DMA+0x13c>)
 800edd2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edd8:	2200      	movs	r2, #0
 800edda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	3324      	adds	r3, #36	; 0x24
 800ede6:	4619      	mov	r1, r3
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edec:	461a      	mov	r2, r3
 800edee:	88fb      	ldrh	r3, [r7, #6]
 800edf0:	f7fb f8d0 	bl	8009f94 <HAL_DMA_Start_IT>
 800edf4:	4603      	mov	r3, r0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d009      	beq.n	800ee0e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2210      	movs	r2, #16
 800edfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2220      	movs	r2, #32
 800ee06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800ee0a:	2301      	movs	r3, #1
 800ee0c:	e051      	b.n	800eeb2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	691b      	ldr	r3, [r3, #16]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d018      	beq.n	800ee48 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee1e:	e853 3f00 	ldrex	r3, [r3]
 800ee22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee2a:	657b      	str	r3, [r7, #84]	; 0x54
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	461a      	mov	r2, r3
 800ee32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee34:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee36:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee3c:	e841 2300 	strex	r3, r2, [r1]
 800ee40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ee42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1e6      	bne.n	800ee16 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3308      	adds	r3, #8
 800ee4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee52:	e853 3f00 	ldrex	r3, [r3]
 800ee56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5a:	f043 0301 	orr.w	r3, r3, #1
 800ee5e:	653b      	str	r3, [r7, #80]	; 0x50
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	3308      	adds	r3, #8
 800ee66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee68:	637a      	str	r2, [r7, #52]	; 0x34
 800ee6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee70:	e841 2300 	strex	r3, r2, [r1]
 800ee74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ee76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d1e5      	bne.n	800ee48 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	3308      	adds	r3, #8
 800ee82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	e853 3f00 	ldrex	r3, [r3]
 800ee8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3308      	adds	r3, #8
 800ee9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee9c:	623a      	str	r2, [r7, #32]
 800ee9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea0:	69f9      	ldr	r1, [r7, #28]
 800eea2:	6a3a      	ldr	r2, [r7, #32]
 800eea4:	e841 2300 	strex	r3, r2, [r1]
 800eea8:	61bb      	str	r3, [r7, #24]
   return(result);
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d1e5      	bne.n	800ee7c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3758      	adds	r7, #88	; 0x58
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	0800efdd 	.word	0x0800efdd
 800eec0:	0800f109 	.word	0x0800f109
 800eec4:	0800f147 	.word	0x0800f147

0800eec8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b089      	sub	sp, #36	; 0x24
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	e853 3f00 	ldrex	r3, [r3]
 800eedc:	60bb      	str	r3, [r7, #8]
   return(result);
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eee4:	61fb      	str	r3, [r7, #28]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	461a      	mov	r2, r3
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	61bb      	str	r3, [r7, #24]
 800eef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eef2:	6979      	ldr	r1, [r7, #20]
 800eef4:	69ba      	ldr	r2, [r7, #24]
 800eef6:	e841 2300 	strex	r3, r2, [r1]
 800eefa:	613b      	str	r3, [r7, #16]
   return(result);
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1e6      	bne.n	800eed0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2220      	movs	r2, #32
 800ef06:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800ef08:	bf00      	nop
 800ef0a:	3724      	adds	r7, #36	; 0x24
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b095      	sub	sp, #84	; 0x54
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef24:	e853 3f00 	ldrex	r3, [r3]
 800ef28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	461a      	mov	r2, r3
 800ef38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef3a:	643b      	str	r3, [r7, #64]	; 0x40
 800ef3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef42:	e841 2300 	strex	r3, r2, [r1]
 800ef46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d1e6      	bne.n	800ef1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	3308      	adds	r3, #8
 800ef54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef56:	6a3b      	ldr	r3, [r7, #32]
 800ef58:	e853 3f00 	ldrex	r3, [r3]
 800ef5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	f023 0301 	bic.w	r3, r3, #1
 800ef64:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	3308      	adds	r3, #8
 800ef6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ef70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef76:	e841 2300 	strex	r3, r2, [r1]
 800ef7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1e5      	bne.n	800ef4e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d118      	bne.n	800efbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	e853 3f00 	ldrex	r3, [r3]
 800ef96:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	f023 0310 	bic.w	r3, r3, #16
 800ef9e:	647b      	str	r3, [r7, #68]	; 0x44
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	461a      	mov	r2, r3
 800efa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efa8:	61bb      	str	r3, [r7, #24]
 800efaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efac:	6979      	ldr	r1, [r7, #20]
 800efae:	69ba      	ldr	r2, [r7, #24]
 800efb0:	e841 2300 	strex	r3, r2, [r1]
 800efb4:	613b      	str	r3, [r7, #16]
   return(result);
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1e6      	bne.n	800ef8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2220      	movs	r2, #32
 800efc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2200      	movs	r2, #0
 800efce:	669a      	str	r2, [r3, #104]	; 0x68
}
 800efd0:	bf00      	nop
 800efd2:	3754      	adds	r7, #84	; 0x54
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b09c      	sub	sp, #112	; 0x70
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efe8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f003 0320 	and.w	r3, r3, #32
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d171      	bne.n	800f0dc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800eff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800effa:	2200      	movs	r2, #0
 800effc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f008:	e853 3f00 	ldrex	r3, [r3]
 800f00c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f014:	66bb      	str	r3, [r7, #104]	; 0x68
 800f016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	461a      	mov	r2, r3
 800f01c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f01e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f020:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f022:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f026:	e841 2300 	strex	r3, r2, [r1]
 800f02a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d1e6      	bne.n	800f000 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	3308      	adds	r3, #8
 800f038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03c:	e853 3f00 	ldrex	r3, [r3]
 800f040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f044:	f023 0301 	bic.w	r3, r3, #1
 800f048:	667b      	str	r3, [r7, #100]	; 0x64
 800f04a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	3308      	adds	r3, #8
 800f050:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f052:	647a      	str	r2, [r7, #68]	; 0x44
 800f054:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f05a:	e841 2300 	strex	r3, r2, [r1]
 800f05e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f062:	2b00      	cmp	r3, #0
 800f064:	d1e5      	bne.n	800f032 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	3308      	adds	r3, #8
 800f06c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f070:	e853 3f00 	ldrex	r3, [r3]
 800f074:	623b      	str	r3, [r7, #32]
   return(result);
 800f076:	6a3b      	ldr	r3, [r7, #32]
 800f078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f07c:	663b      	str	r3, [r7, #96]	; 0x60
 800f07e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	3308      	adds	r3, #8
 800f084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f086:	633a      	str	r2, [r7, #48]	; 0x30
 800f088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f08c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f08e:	e841 2300 	strex	r3, r2, [r1]
 800f092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f096:	2b00      	cmp	r3, #0
 800f098:	d1e5      	bne.n	800f066 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f09a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f09c:	2220      	movs	r2, #32
 800f09e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d118      	bne.n	800f0dc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	e853 3f00 	ldrex	r3, [r3]
 800f0b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f023 0310 	bic.w	r3, r3, #16
 800f0be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0c8:	61fb      	str	r3, [r7, #28]
 800f0ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0cc:	69b9      	ldr	r1, [r7, #24]
 800f0ce:	69fa      	ldr	r2, [r7, #28]
 800f0d0:	e841 2300 	strex	r3, r2, [r1]
 800f0d4:	617b      	str	r3, [r7, #20]
   return(result);
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d1e6      	bne.n	800f0aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0de:	2200      	movs	r2, #0
 800f0e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d107      	bne.n	800f0fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f0f4:	f7ff f90c 	bl	800e310 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f0f8:	e002      	b.n	800f100 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800f0fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f0fc:	f000 faa4 	bl	800f648 <HAL_UART_RxCpltCallback>
}
 800f100:	bf00      	nop
 800f102:	3770      	adds	r7, #112	; 0x70
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f114:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2201      	movs	r2, #1
 800f11a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f120:	2b01      	cmp	r3, #1
 800f122:	d109      	bne.n	800f138 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f12a:	085b      	lsrs	r3, r3, #1
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	4619      	mov	r1, r3
 800f130:	68f8      	ldr	r0, [r7, #12]
 800f132:	f7ff f8ed 	bl	800e310 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f136:	e002      	b.n	800f13e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f138:	68f8      	ldr	r0, [r7, #12]
 800f13a:	f7ff f8d5 	bl	800e2e8 <HAL_UART_RxHalfCpltCallback>
}
 800f13e:	bf00      	nop
 800f140:	3710      	adds	r7, #16
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b086      	sub	sp, #24
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f152:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f158:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f160:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f16c:	2b80      	cmp	r3, #128	; 0x80
 800f16e:	d109      	bne.n	800f184 <UART_DMAError+0x3e>
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	2b21      	cmp	r3, #33	; 0x21
 800f174:	d106      	bne.n	800f184 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	2200      	movs	r2, #0
 800f17a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800f17e:	6978      	ldr	r0, [r7, #20]
 800f180:	f7ff fea2 	bl	800eec8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	689b      	ldr	r3, [r3, #8]
 800f18a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f18e:	2b40      	cmp	r3, #64	; 0x40
 800f190:	d109      	bne.n	800f1a6 <UART_DMAError+0x60>
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2b22      	cmp	r3, #34	; 0x22
 800f196:	d106      	bne.n	800f1a6 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	2200      	movs	r2, #0
 800f19c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800f1a0:	6978      	ldr	r0, [r7, #20]
 800f1a2:	f7ff feb7 	bl	800ef14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f1a6:	697b      	ldr	r3, [r7, #20]
 800f1a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1ac:	f043 0210 	orr.w	r2, r3, #16
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f1b6:	6978      	ldr	r0, [r7, #20]
 800f1b8:	f7ff f8a0 	bl	800e2fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1bc:	bf00      	nop
 800f1be:	3718      	adds	r7, #24
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	f7ff f88a 	bl	800e2fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1e8:	bf00      	nop
 800f1ea:	3710      	adds	r7, #16
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b088      	sub	sp, #32
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	e853 3f00 	ldrex	r3, [r3]
 800f204:	60bb      	str	r3, [r7, #8]
   return(result);
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f20c:	61fb      	str	r3, [r7, #28]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	461a      	mov	r2, r3
 800f214:	69fb      	ldr	r3, [r7, #28]
 800f216:	61bb      	str	r3, [r7, #24]
 800f218:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f21a:	6979      	ldr	r1, [r7, #20]
 800f21c:	69ba      	ldr	r2, [r7, #24]
 800f21e:	e841 2300 	strex	r3, r2, [r1]
 800f222:	613b      	str	r3, [r7, #16]
   return(result);
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d1e6      	bne.n	800f1f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2220      	movs	r2, #32
 800f22e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff f84c 	bl	800e2d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f23c:	bf00      	nop
 800f23e:	3720      	adds	r7, #32
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b09c      	sub	sp, #112	; 0x70
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f252:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f25c:	2b22      	cmp	r3, #34	; 0x22
 800f25e:	f040 80be 	bne.w	800f3de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f268:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f26c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f270:	b2d9      	uxtb	r1, r3
 800f272:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f276:	b2da      	uxtb	r2, r3
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f27c:	400a      	ands	r2, r1
 800f27e:	b2d2      	uxtb	r2, r2
 800f280:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f286:	1c5a      	adds	r2, r3, #1
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f292:	b29b      	uxth	r3, r3
 800f294:	3b01      	subs	r3, #1
 800f296:	b29a      	uxth	r2, r3
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f040 80a3 	bne.w	800f3f2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2b4:	e853 3f00 	ldrex	r3, [r3]
 800f2b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f2ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f2ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800f2cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f2d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f2d2:	e841 2300 	strex	r3, r2, [r1]
 800f2d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1e6      	bne.n	800f2ac <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	3308      	adds	r3, #8
 800f2e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e8:	e853 3f00 	ldrex	r3, [r3]
 800f2ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f0:	f023 0301 	bic.w	r3, r3, #1
 800f2f4:	667b      	str	r3, [r7, #100]	; 0x64
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3308      	adds	r3, #8
 800f2fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f2fe:	647a      	str	r2, [r7, #68]	; 0x44
 800f300:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f302:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f304:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f306:	e841 2300 	strex	r3, r2, [r1]
 800f30a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f30c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d1e5      	bne.n	800f2de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2220      	movs	r2, #32
 800f316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	4a34      	ldr	r2, [pc, #208]	; (800f3fc <UART_RxISR_8BIT+0x1b8>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d01f      	beq.n	800f370 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d018      	beq.n	800f370 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f346:	e853 3f00 	ldrex	r3, [r3]
 800f34a:	623b      	str	r3, [r7, #32]
   return(result);
 800f34c:	6a3b      	ldr	r3, [r7, #32]
 800f34e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f352:	663b      	str	r3, [r7, #96]	; 0x60
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	461a      	mov	r2, r3
 800f35a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f35c:	633b      	str	r3, [r7, #48]	; 0x30
 800f35e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f364:	e841 2300 	strex	r3, r2, [r1]
 800f368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1e6      	bne.n	800f33e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f374:	2b01      	cmp	r3, #1
 800f376:	d12e      	bne.n	800f3d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	e853 3f00 	ldrex	r3, [r3]
 800f38a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f023 0310 	bic.w	r3, r3, #16
 800f392:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	461a      	mov	r2, r3
 800f39a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f39c:	61fb      	str	r3, [r7, #28]
 800f39e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3a0:	69b9      	ldr	r1, [r7, #24]
 800f3a2:	69fa      	ldr	r2, [r7, #28]
 800f3a4:	e841 2300 	strex	r3, r2, [r1]
 800f3a8:	617b      	str	r3, [r7, #20]
   return(result);
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d1e6      	bne.n	800f37e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	69db      	ldr	r3, [r3, #28]
 800f3b6:	f003 0310 	and.w	r3, r3, #16
 800f3ba:	2b10      	cmp	r3, #16
 800f3bc:	d103      	bne.n	800f3c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2210      	movs	r2, #16
 800f3c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7fe ff9e 	bl	800e310 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f3d4:	e00d      	b.n	800f3f2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 f936 	bl	800f648 <HAL_UART_RxCpltCallback>
}
 800f3dc:	e009      	b.n	800f3f2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	8b1b      	ldrh	r3, [r3, #24]
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f042 0208 	orr.w	r2, r2, #8
 800f3ee:	b292      	uxth	r2, r2
 800f3f0:	831a      	strh	r2, [r3, #24]
}
 800f3f2:	bf00      	nop
 800f3f4:	3770      	adds	r7, #112	; 0x70
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
 800f3fa:	bf00      	nop
 800f3fc:	40008000 	.word	0x40008000

0800f400 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b09c      	sub	sp, #112	; 0x70
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f40e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f418:	2b22      	cmp	r3, #34	; 0x22
 800f41a:	f040 80be 	bne.w	800f59a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f424:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f42c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f42e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f432:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f436:	4013      	ands	r3, r2
 800f438:	b29a      	uxth	r2, r3
 800f43a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f43c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f442:	1c9a      	adds	r2, r3, #2
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f44e:	b29b      	uxth	r3, r3
 800f450:	3b01      	subs	r3, #1
 800f452:	b29a      	uxth	r2, r3
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f460:	b29b      	uxth	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	f040 80a3 	bne.w	800f5ae <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f470:	e853 3f00 	ldrex	r3, [r3]
 800f474:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f47c:	667b      	str	r3, [r7, #100]	; 0x64
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	461a      	mov	r2, r3
 800f484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f486:	657b      	str	r3, [r7, #84]	; 0x54
 800f488:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f48a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f48c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f48e:	e841 2300 	strex	r3, r2, [r1]
 800f492:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f496:	2b00      	cmp	r3, #0
 800f498:	d1e6      	bne.n	800f468 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	3308      	adds	r3, #8
 800f4a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4a4:	e853 3f00 	ldrex	r3, [r3]
 800f4a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ac:	f023 0301 	bic.w	r3, r3, #1
 800f4b0:	663b      	str	r3, [r7, #96]	; 0x60
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	3308      	adds	r3, #8
 800f4b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f4ba:	643a      	str	r2, [r7, #64]	; 0x40
 800f4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f4c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f4c2:	e841 2300 	strex	r3, r2, [r1]
 800f4c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d1e5      	bne.n	800f49a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2220      	movs	r2, #32
 800f4d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4a34      	ldr	r2, [pc, #208]	; (800f5b8 <UART_RxISR_16BIT+0x1b8>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d01f      	beq.n	800f52c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d018      	beq.n	800f52c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f500:	6a3b      	ldr	r3, [r7, #32]
 800f502:	e853 3f00 	ldrex	r3, [r3]
 800f506:	61fb      	str	r3, [r7, #28]
   return(result);
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f50e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	461a      	mov	r2, r3
 800f516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f51a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f51c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f51e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f520:	e841 2300 	strex	r3, r2, [r1]
 800f524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d1e6      	bne.n	800f4fa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f530:	2b01      	cmp	r3, #1
 800f532:	d12e      	bne.n	800f592 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2200      	movs	r2, #0
 800f538:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	e853 3f00 	ldrex	r3, [r3]
 800f546:	60bb      	str	r3, [r7, #8]
   return(result);
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	f023 0310 	bic.w	r3, r3, #16
 800f54e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	461a      	mov	r2, r3
 800f556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f558:	61bb      	str	r3, [r7, #24]
 800f55a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f55c:	6979      	ldr	r1, [r7, #20]
 800f55e:	69ba      	ldr	r2, [r7, #24]
 800f560:	e841 2300 	strex	r3, r2, [r1]
 800f564:	613b      	str	r3, [r7, #16]
   return(result);
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d1e6      	bne.n	800f53a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	69db      	ldr	r3, [r3, #28]
 800f572:	f003 0310 	and.w	r3, r3, #16
 800f576:	2b10      	cmp	r3, #16
 800f578:	d103      	bne.n	800f582 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	2210      	movs	r2, #16
 800f580:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f588:	4619      	mov	r1, r3
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f7fe fec0 	bl	800e310 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f590:	e00d      	b.n	800f5ae <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 f858 	bl	800f648 <HAL_UART_RxCpltCallback>
}
 800f598:	e009      	b.n	800f5ae <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	8b1b      	ldrh	r3, [r3, #24]
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f042 0208 	orr.w	r2, r2, #8
 800f5aa:	b292      	uxth	r2, r2
 800f5ac:	831a      	strh	r2, [r3, #24]
}
 800f5ae:	bf00      	nop
 800f5b0:	3770      	adds	r7, #112	; 0x70
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	40008000 	.word	0x40008000

0800f5bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f5c4:	bf00      	nop
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <line_append>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void line_append(uint8_t value)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {
 800f5da:	79fb      	ldrb	r3, [r7, #7]
 800f5dc:	2b0d      	cmp	r3, #13
 800f5de:	d002      	beq.n	800f5e6 <line_append+0x16>
 800f5e0:	79fb      	ldrb	r3, [r7, #7]
 800f5e2:	2b0a      	cmp	r3, #10
 800f5e4:	d113      	bne.n	800f60e <line_append+0x3e>
		// odebraliśmy znak końca linii
		if (line_length > 0) {
 800f5e6:	4b14      	ldr	r3, [pc, #80]	; (800f638 <line_append+0x68>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d01f      	beq.n	800f62e <line_append+0x5e>
			// jeśli bufor nie jest pusty to dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 800f5ee:	4b12      	ldr	r3, [pc, #72]	; (800f638 <line_append+0x68>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a12      	ldr	r2, [pc, #72]	; (800f63c <line_append+0x6c>)
 800f5f4:	2100      	movs	r1, #0
 800f5f6:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane
			strcpy(do_wyswietlenia, line_buffer);
 800f5f8:	4910      	ldr	r1, [pc, #64]	; (800f63c <line_append+0x6c>)
 800f5fa:	4811      	ldr	r0, [pc, #68]	; (800f640 <line_append+0x70>)
 800f5fc:	f00b fb45 	bl	801ac8a <strcpy>
			mozna_wyswietlic = true;
 800f600:	4b10      	ldr	r3, [pc, #64]	; (800f644 <line_append+0x74>)
 800f602:	2201      	movs	r2, #1
 800f604:	701a      	strb	r2, [r3, #0]
			// zaczynamy zbieranie danych od nowa
			line_length = 0;
 800f606:	4b0c      	ldr	r3, [pc, #48]	; (800f638 <line_append+0x68>)
 800f608:	2200      	movs	r2, #0
 800f60a:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 800f60c:	e00f      	b.n	800f62e <line_append+0x5e>
		}
	}
	else {
		if (line_length >= LINE_MAX_LENGTH) {
 800f60e:	4b0a      	ldr	r3, [pc, #40]	; (800f638 <line_append+0x68>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2b4f      	cmp	r3, #79	; 0x4f
 800f614:	d902      	bls.n	800f61c <line_append+0x4c>
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 800f616:	4b08      	ldr	r3, [pc, #32]	; (800f638 <line_append+0x68>)
 800f618:	2200      	movs	r2, #0
 800f61a:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 800f61c:	4b06      	ldr	r3, [pc, #24]	; (800f638 <line_append+0x68>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	1c5a      	adds	r2, r3, #1
 800f622:	4905      	ldr	r1, [pc, #20]	; (800f638 <line_append+0x68>)
 800f624:	600a      	str	r2, [r1, #0]
 800f626:	4905      	ldr	r1, [pc, #20]	; (800f63c <line_append+0x6c>)
 800f628:	79fa      	ldrb	r2, [r7, #7]
 800f62a:	54ca      	strb	r2, [r1, r3]
	}
}
 800f62c:	bf00      	nop
 800f62e:	bf00      	nop
 800f630:	3708      	adds	r7, #8
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	20001198 	.word	0x20001198
 800f63c:	20001144 	.word	0x20001144
 800f640:	200011e4 	.word	0x200011e4
 800f644:	200011e1 	.word	0x200011e1

0800f648 <HAL_UART_RxCpltCallback>:

void SystemClock_Config(void);

/* This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4a08      	ldr	r2, [pc, #32]	; (800f678 <HAL_UART_RxCpltCallback+0x30>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d109      	bne.n	800f66e <HAL_UART_RxCpltCallback+0x26>
  {
    /* Transmit one byte with 100 ms timeout */
	//lcd_print(1, 1, byte);
	line_append(byte);
 800f65a:	4b08      	ldr	r3, [pc, #32]	; (800f67c <HAL_UART_RxCpltCallback+0x34>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	4618      	mov	r0, r3
 800f660:	f7ff ffb6 	bl	800f5d0 <line_append>
    /* Receive one byte in interrupt mode */
    HAL_UART_Receive_IT(&huart2, &byte, 1);
 800f664:	2201      	movs	r2, #1
 800f666:	4905      	ldr	r1, [pc, #20]	; (800f67c <HAL_UART_RxCpltCallback+0x34>)
 800f668:	4805      	ldr	r0, [pc, #20]	; (800f680 <HAL_UART_RxCpltCallback+0x38>)
 800f66a:	f7fe fab1 	bl	800dbd0 <HAL_UART_Receive_IT>
  }
}
 800f66e:	bf00      	nop
 800f670:	3708      	adds	r7, #8
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	40004400 	.word	0x40004400
 800f67c:	2000123c 	.word	0x2000123c
 800f680:	20000edc 	.word	0x20000edc

0800f684 <uart_gpio_init>:

void uart_gpio_init()
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b086      	sub	sp, #24
 800f688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 800f68a:	4b10      	ldr	r3, [pc, #64]	; (800f6cc <uart_gpio_init+0x48>)
 800f68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f68e:	4a0f      	ldr	r2, [pc, #60]	; (800f6cc <uart_gpio_init+0x48>)
 800f690:	f043 0301 	orr.w	r3, r3, #1
 800f694:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f696:	4b0d      	ldr	r3, [pc, #52]	; (800f6cc <uart_gpio_init+0x48>)
 800f698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f69a:	f003 0301 	and.w	r3, r3, #1
 800f69e:	603b      	str	r3, [r7, #0]
 800f6a0:	683b      	ldr	r3, [r7, #0]

  /**USART2 GPIO Configuration
  PA2     ------> USART2_TX
  PA3     ------> USART2_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800f6a2:	230c      	movs	r3, #12
 800f6a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6a6:	2302      	movs	r3, #2
 800f6a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800f6b2:	2307      	movs	r3, #7
 800f6b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6b6:	1d3b      	adds	r3, r7, #4
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f6be:	f7fa fdd7 	bl	800a270 <HAL_GPIO_Init>
}
 800f6c2:	bf00      	nop
 800f6c4:	3718      	adds	r7, #24
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	40021000 	.word	0x40021000

0800f6d0 <uart_init>:

void uart_init()
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
  __USART2_CLK_ENABLE();
 800f6d6:	4b1a      	ldr	r3, [pc, #104]	; (800f740 <uart_init+0x70>)
 800f6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6da:	4a19      	ldr	r2, [pc, #100]	; (800f740 <uart_init+0x70>)
 800f6dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f6e0:	6593      	str	r3, [r2, #88]	; 0x58
 800f6e2:	4b17      	ldr	r3, [pc, #92]	; (800f740 <uart_init+0x70>)
 800f6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6ea:	607b      	str	r3, [r7, #4]
 800f6ec:	687b      	ldr	r3, [r7, #4]

  huart2.Instance = USART2;
 800f6ee:	4b15      	ldr	r3, [pc, #84]	; (800f744 <uart_init+0x74>)
 800f6f0:	4a15      	ldr	r2, [pc, #84]	; (800f748 <uart_init+0x78>)
 800f6f2:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800f6f4:	4b13      	ldr	r3, [pc, #76]	; (800f744 <uart_init+0x74>)
 800f6f6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800f6fa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800f6fc:	4b11      	ldr	r3, [pc, #68]	; (800f744 <uart_init+0x74>)
 800f6fe:	2200      	movs	r2, #0
 800f700:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800f702:	4b10      	ldr	r3, [pc, #64]	; (800f744 <uart_init+0x74>)
 800f704:	2200      	movs	r2, #0
 800f706:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800f708:	4b0e      	ldr	r3, [pc, #56]	; (800f744 <uart_init+0x74>)
 800f70a:	2200      	movs	r2, #0
 800f70c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800f70e:	4b0d      	ldr	r3, [pc, #52]	; (800f744 <uart_init+0x74>)
 800f710:	220c      	movs	r2, #12
 800f712:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f714:	4b0b      	ldr	r3, [pc, #44]	; (800f744 <uart_init+0x74>)
 800f716:	2200      	movs	r2, #0
 800f718:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800f71a:	4b0a      	ldr	r3, [pc, #40]	; (800f744 <uart_init+0x74>)
 800f71c:	2200      	movs	r2, #0
 800f71e:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart2);
 800f720:	4808      	ldr	r0, [pc, #32]	; (800f744 <uart_init+0x74>)
 800f722:	f7fe f973 	bl	800da0c <HAL_UART_Init>

  /* Peripheral interrupt init*/
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800f726:	2200      	movs	r2, #0
 800f728:	2100      	movs	r1, #0
 800f72a:	2026      	movs	r0, #38	; 0x26
 800f72c:	f7fa fb09 	bl	8009d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800f730:	2026      	movs	r0, #38	; 0x26
 800f732:	f7fa fb22 	bl	8009d7a <HAL_NVIC_EnableIRQ>
}
 800f736:	bf00      	nop
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	40021000 	.word	0x40021000
 800f744:	20000edc 	.word	0x20000edc
 800f748:	40004400 	.word	0x40004400

0800f74c <MX_MEMS_Init>:

void MX_MEMS_Init(void)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	af00      	add	r7, sp, #0

	/* USER CODE END MEMS_Init_PreTreatment */

	/* Initialize the peripherals and the MEMS components */

	MX_DataLogFusion_Init();
 800f750:	f000 f846 	bl	800f7e0 <MX_DataLogFusion_Init>

	// Inicjalizacja wyświetlacza
	lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 800f754:	2208      	movs	r2, #8
 800f756:	2100      	movs	r1, #0
 800f758:	2000      	movs	r0, #0
 800f75a:	f7f1 ff50 	bl	80015fe <lcd_init>
	lcd_clear();
 800f75e:	f7f1 ffc6 	bl	80016ee <lcd_clear>

	uart_gpio_init();
 800f762:	f7ff ff8f 	bl	800f684 <uart_gpio_init>
	uart_init();
 800f766:	f7ff ffb3 	bl	800f6d0 <uart_init>
	HAL_UART_Receive_IT(&huart2, &byte, 1);
 800f76a:	2201      	movs	r2, #1
 800f76c:	4902      	ldr	r1, [pc, #8]	; (800f778 <MX_MEMS_Init+0x2c>)
 800f76e:	4803      	ldr	r0, [pc, #12]	; (800f77c <MX_MEMS_Init+0x30>)
 800f770:	f7fe fa2e 	bl	800dbd0 <HAL_UART_Receive_IT>
	/* USER CODE BEGIN MEMS_Init_PostTreatment */

	/* USER CODE END MEMS_Init_PostTreatment */
}
 800f774:	bf00      	nop
 800f776:	bd80      	pop	{r7, pc}
 800f778:	2000123c 	.word	0x2000123c
 800f77c:	20000edc 	.word	0x20000edc

0800f780 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MEMS_Process_PreTreatment */

	/* USER CODE END MEMS_Process_PreTreatment */

	MX_DataLogFusion_Process();
 800f784:	f000 f8ae 	bl	800f8e4 <MX_DataLogFusion_Process>

	/* USER CODE BEGIN MEMS_Process_PostTreatment */
	if (mozna_wyswietlic){
 800f788:	4b07      	ldr	r3, [pc, #28]	; (800f7a8 <MX_MEMS_Process+0x28>)
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d009      	beq.n	800f7a4 <MX_MEMS_Process+0x24>
		lcd_clear();
 800f790:	f7f1 ffad 	bl	80016ee <lcd_clear>
		lcd_print(1, 1, do_wyswietlenia);
 800f794:	4a05      	ldr	r2, [pc, #20]	; (800f7ac <MX_MEMS_Process+0x2c>)
 800f796:	2101      	movs	r1, #1
 800f798:	2001      	movs	r0, #1
 800f79a:	f7f1 ff90 	bl	80016be <lcd_print>
		mozna_wyswietlic = false;
 800f79e:	4b02      	ldr	r3, [pc, #8]	; (800f7a8 <MX_MEMS_Process+0x28>)
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END MEMS_Process_PostTreatment */
}
 800f7a4:	bf00      	nop
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	200011e1 	.word	0x200011e1
 800f7ac:	200011e4 	.word	0x200011e4

0800f7b0 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	4b06      	ldr	r3, [pc, #24]	; (800f7d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d102      	bne.n	800f7ca <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		SensorReadRequest = 1;
 800f7c4:	4b05      	ldr	r3, [pc, #20]	; (800f7dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	701a      	strb	r2, [r3, #0]
	}
}
 800f7ca:	bf00      	nop
 800f7cc:	370c      	adds	r7, #12
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr
 800f7d6:	bf00      	nop
 800f7d8:	20000ca8 	.word	0x20000ca8
 800f7dc:	20000f94 	.word	0x20000f94

0800f7e0 <MX_DataLogFusion_Init>:
 * @brief  Initialize the application
 * @retval None
 */

static void MX_DataLogFusion_Init(void)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b086      	sub	sp, #24
 800f7e4:	af00      	add	r7, sp, #0
	float ans_float;

	/* Initialize button */
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800f7e6:	2101      	movs	r1, #1
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	f7f9 ff7f 	bl	80096ec <BSP_PB_Init>

	/* Check what is the Push Button State when the button is not pressed. It can change across families */
	PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800f7ee:	2000      	movs	r0, #0
 800f7f0:	f7f9 ffd0 	bl	8009794 <BSP_PB_GetState>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	bf0c      	ite	eq
 800f7fa:	2301      	moveq	r3, #1
 800f7fc:	2300      	movne	r3, #0
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	461a      	mov	r2, r3
 800f802:	4b32      	ldr	r3, [pc, #200]	; (800f8cc <MX_DataLogFusion_Init+0xec>)
 800f804:	601a      	str	r2, [r3, #0]

	/* Initialize LED */
	BSP_LED_Init(LED2);
 800f806:	2000      	movs	r0, #0
 800f808:	f7f9 fef4 	bl	80095f4 <BSP_LED_Init>

	/* Initialize Virtual COM Port */
	BSP_COM_Init(COM1);
 800f80c:	2000      	movs	r0, #0
 800f80e:	f7fa f81f 	bl	8009850 <BSP_COM_Init>

	/* Initialize Timer */
	BSP_IP_TIM_Init();
 800f812:	f7f2 f85b 	bl	80018cc <MX_TIM1_Init>

	/* Configure Timer to run with desired algorithm frequency */
	TIM_Config(ALGO_FREQ);
 800f816:	2064      	movs	r0, #100	; 0x64
 800f818:	f000 fbe2 	bl	800ffe0 <TIM_Config>

	/* Initialize (disabled) sensors */
	Init_Sensors();
 800f81c:	f000 f8b6 	bl	800f98c <Init_Sensors>

	/* Sensor Fusion API initialization function */
	MotionFX_manager_init();
 800f820:	f000 fd30 	bl	8010284 <MotionFX_manager_init>

	/* OPTIONAL */
	/* Get library version */
	MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 800f824:	492a      	ldr	r1, [pc, #168]	; (800f8d0 <MX_DataLogFusion_Init+0xf0>)
 800f826:	482b      	ldr	r0, [pc, #172]	; (800f8d4 <MX_DataLogFusion_Init+0xf4>)
 800f828:	f000 fda0 	bl	801036c <MotionFX_manager_get_version>

	/* Enable magnetometer calibration */
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800f82c:	200a      	movs	r0, #10
 800f82e:	f000 fdbc 	bl	80103aa <MotionFX_manager_MagCal_start>

	/* Test if calibration data are available */
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 800f832:	1d3b      	adds	r3, r7, #4
 800f834:	4618      	mov	r0, r3
 800f836:	f00a fb99 	bl	8019f6c <MotionFX_MagCal_getParams>

	/* If calibration data are available load HI coefficients */
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 800f83a:	7c3b      	ldrb	r3, [r7, #16]
 800f83c:	2b03      	cmp	r3, #3
 800f83e:	d132      	bne.n	800f8a6 <MX_DataLogFusion_Init+0xc6>
	{
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800f840:	edd7 7a01 	vldr	s15, [r7, #4]
 800f844:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800f8d8 <MX_DataLogFusion_Init+0xf8>
 800f848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f84c:	edc7 7a05 	vstr	s15, [r7, #20]
		MagOffset.x = (int32_t)ans_float;
 800f850:	edd7 7a05 	vldr	s15, [r7, #20]
 800f854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f858:	ee17 2a90 	vmov	r2, s15
 800f85c:	4b1f      	ldr	r3, [pc, #124]	; (800f8dc <MX_DataLogFusion_Init+0xfc>)
 800f85e:	601a      	str	r2, [r3, #0]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800f860:	edd7 7a02 	vldr	s15, [r7, #8]
 800f864:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800f8d8 <MX_DataLogFusion_Init+0xf8>
 800f868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f86c:	edc7 7a05 	vstr	s15, [r7, #20]
		MagOffset.y = (int32_t)ans_float;
 800f870:	edd7 7a05 	vldr	s15, [r7, #20]
 800f874:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f878:	ee17 2a90 	vmov	r2, s15
 800f87c:	4b17      	ldr	r3, [pc, #92]	; (800f8dc <MX_DataLogFusion_Init+0xfc>)
 800f87e:	605a      	str	r2, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800f880:	edd7 7a03 	vldr	s15, [r7, #12]
 800f884:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800f8d8 <MX_DataLogFusion_Init+0xf8>
 800f888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f88c:	edc7 7a05 	vstr	s15, [r7, #20]
		MagOffset.z = (int32_t)ans_float;
 800f890:	edd7 7a05 	vldr	s15, [r7, #20]
 800f894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f898:	ee17 2a90 	vmov	r2, s15
 800f89c:	4b0f      	ldr	r3, [pc, #60]	; (800f8dc <MX_DataLogFusion_Init+0xfc>)
 800f89e:	609a      	str	r2, [r3, #8]

		MagCalStatus = 1;
 800f8a0:	4b0f      	ldr	r3, [pc, #60]	; (800f8e0 <MX_DataLogFusion_Init+0x100>)
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	701a      	strb	r2, [r3, #0]
	}

	DWT_Init();
 800f8a6:	f000 fbcf 	bl	8010048 <DWT_Init>

	BSP_LED_On(LED2);
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	f7f9 feb4 	bl	8009618 <BSP_LED_On>
	HAL_Delay(500);
 800f8b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f8b4:	f7fa f946 	bl	8009b44 <HAL_Delay>
	BSP_LED_Off(LED2);
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	f7f9 fec3 	bl	8009644 <BSP_LED_Off>

	/* Start receiving messages via DMA */
	UART_StartReceiveMsg();
 800f8be:	f000 fbed 	bl	801009c <UART_StartReceiveMsg>
}
 800f8c2:	bf00      	nop
 800f8c4:	3718      	adds	r7, #24
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	20001140 	.word	0x20001140
 800f8d0:	20000f90 	.word	0x20000f90
 800f8d4:	20000f6c 	.word	0x20000f6c
 800f8d8:	43fa0000 	.word	0x43fa0000
 800f8dc:	200011d4 	.word	0x200011d4
 800f8e0:	200011e0 	.word	0x200011e0

0800f8e4 <MX_DataLogFusion_Process>:
/**
 * @brief  Process of the application
 * @retval None
 */
static void MX_DataLogFusion_Process(void)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	af00      	add	r7, sp, #0
	static TMsg msg_dat;
	static TMsg msg_cmd;
	static int discarded_count = 0;

	/* Acquire data from enabled sensors and fill Msg stream */
	RTC_Handler(&msg_dat);
 800f8e8:	4822      	ldr	r0, [pc, #136]	; (800f974 <MX_DataLogFusion_Process+0x90>)
 800f8ea:	f000 f869 	bl	800f9c0 <RTC_Handler>
	Accelero_Sensor_Handler(&msg_dat);
 800f8ee:	4821      	ldr	r0, [pc, #132]	; (800f974 <MX_DataLogFusion_Process+0x90>)
 800f8f0:	f000 f9b8 	bl	800fc64 <Accelero_Sensor_Handler>
	Gyro_Sensor_Handler(&msg_dat);
 800f8f4:	481f      	ldr	r0, [pc, #124]	; (800f974 <MX_DataLogFusion_Process+0x90>)
 800f8f6:	f000 f9ef 	bl	800fcd8 <Gyro_Sensor_Handler>
	Magneto_Sensor_Handler(&msg_dat);
 800f8fa:	481e      	ldr	r0, [pc, #120]	; (800f974 <MX_DataLogFusion_Process+0x90>)
 800f8fc:	f000 fa28 	bl	800fd50 <Magneto_Sensor_Handler>
	Humidity_Sensor_Handler(&msg_dat);
 800f900:	481c      	ldr	r0, [pc, #112]	; (800f974 <MX_DataLogFusion_Process+0x90>)
 800f902:	f000 fb45 	bl	800ff90 <Humidity_Sensor_Handler>
	Temperature_Sensor_Handler(&msg_dat);
 800f906:	481b      	ldr	r0, [pc, #108]	; (800f974 <MX_DataLogFusion_Process+0x90>)
 800f908:	f000 fb1a 	bl	800ff40 <Temperature_Sensor_Handler>
	Pressure_Sensor_Handler(&msg_dat);
 800f90c:	4819      	ldr	r0, [pc, #100]	; (800f974 <MX_DataLogFusion_Process+0x90>)
 800f90e:	f000 faef 	bl	800fef0 <Pressure_Sensor_Handler>

	/* Sensor Fusion specific part */
	FX_Data_Handler(&msg_dat);
 800f912:	4818      	ldr	r0, [pc, #96]	; (800f974 <MX_DataLogFusion_Process+0x90>)
 800f914:	f000 f8da 	bl	800facc <FX_Data_Handler>

	/* Send data stream */
	//INIT_STREAMING_HEADER(&msg_dat);
	//msg_dat.Len = STREAMING_MSG_LENGTH;

	if (UseOfflineData == 1U)
 800f918:	4b17      	ldr	r3, [pc, #92]	; (800f978 <MX_DataLogFusion_Process+0x94>)
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d11e      	bne.n	800f95e <MX_DataLogFusion_Process+0x7a>
	{
		OfflineDataCount--;
 800f920:	4b16      	ldr	r3, [pc, #88]	; (800f97c <MX_DataLogFusion_Process+0x98>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	3b01      	subs	r3, #1
 800f926:	4a15      	ldr	r2, [pc, #84]	; (800f97c <MX_DataLogFusion_Process+0x98>)
 800f928:	6013      	str	r3, [r2, #0]
		if (OfflineDataCount < 0)
 800f92a:	4b14      	ldr	r3, [pc, #80]	; (800f97c <MX_DataLogFusion_Process+0x98>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	da02      	bge.n	800f938 <MX_DataLogFusion_Process+0x54>
		{
			OfflineDataCount = 0;
 800f932:	4b12      	ldr	r3, [pc, #72]	; (800f97c <MX_DataLogFusion_Process+0x98>)
 800f934:	2200      	movs	r2, #0
 800f936:	601a      	str	r2, [r3, #0]
		}

		OfflineDataReadIndex++;
 800f938:	4b11      	ldr	r3, [pc, #68]	; (800f980 <MX_DataLogFusion_Process+0x9c>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	3301      	adds	r3, #1
 800f93e:	4a10      	ldr	r2, [pc, #64]	; (800f980 <MX_DataLogFusion_Process+0x9c>)
 800f940:	6013      	str	r3, [r2, #0]
		if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 800f942:	4b0f      	ldr	r3, [pc, #60]	; (800f980 <MX_DataLogFusion_Process+0x9c>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	2b07      	cmp	r3, #7
 800f948:	dd02      	ble.n	800f950 <MX_DataLogFusion_Process+0x6c>
		{
			OfflineDataReadIndex = 0;
 800f94a:	4b0d      	ldr	r3, [pc, #52]	; (800f980 <MX_DataLogFusion_Process+0x9c>)
 800f94c:	2200      	movs	r2, #0
 800f94e:	601a      	str	r2, [r3, #0]
		}

		if (OfflineDataCount > 0)
 800f950:	4b0a      	ldr	r3, [pc, #40]	; (800f97c <MX_DataLogFusion_Process+0x98>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	dd02      	ble.n	800f95e <MX_DataLogFusion_Process+0x7a>
		{
			SensorReadRequest = 1;
 800f958:	4b0a      	ldr	r3, [pc, #40]	; (800f984 <MX_DataLogFusion_Process+0xa0>)
 800f95a:	2201      	movs	r2, #1
 800f95c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (discarded_count >= SAMPLETODISCARD)
 800f95e:	4b0a      	ldr	r3, [pc, #40]	; (800f988 <MX_DataLogFusion_Process+0xa4>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2b0e      	cmp	r3, #14
 800f964:	dc04      	bgt.n	800f970 <MX_DataLogFusion_Process+0x8c>
	{
		//UART_SendMsg(&msg_dat);
	}
	else
	{
		discarded_count++;
 800f966:	4b08      	ldr	r3, [pc, #32]	; (800f988 <MX_DataLogFusion_Process+0xa4>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	3301      	adds	r3, #1
 800f96c:	4a06      	ldr	r2, [pc, #24]	; (800f988 <MX_DataLogFusion_Process+0xa4>)
 800f96e:	6013      	str	r3, [r2, #0]
	}
}
 800f970:	bf00      	nop
 800f972:	bd80      	pop	{r7, pc}
 800f974:	20001240 	.word	0x20001240
 800f978:	20000f95 	.word	0x20000f95
 800f97c:	2000113c 	.word	0x2000113c
 800f980:	20001138 	.word	0x20001138
 800f984:	20000f94 	.word	0x20000f94
 800f988:	20001344 	.word	0x20001344

0800f98c <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_Init();
 800f990:	f000 fb9e 	bl	80100d0 <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 800f994:	f000 fba4 	bl	80100e0 <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 800f998:	f000 fbaa 	bl	80100f0 <BSP_SENSOR_MAG_Init>
	BSP_SENSOR_PRESS_Init();
 800f99c:	f000 fbb0 	bl	8010100 <BSP_SENSOR_PRESS_Init>
	BSP_SENSOR_TEMP_Init();
 800f9a0:	f000 fbb6 	bl	8010110 <BSP_SENSOR_TEMP_Init>
	BSP_SENSOR_HUM_Init();
 800f9a4:	f000 fbbc 	bl	8010120 <BSP_SENSOR_HUM_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 800f9a8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800f9bc <Init_Sensors+0x30>
 800f9ac:	f000 fc0e 	bl	80101cc <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 800f9b0:	2004      	movs	r0, #4
 800f9b2:	f000 fc1a 	bl	80101ea <BSP_SENSOR_ACC_SetFullScale>
}
 800f9b6:	bf00      	nop
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	42c80000 	.word	0x42c80000

0800f9c0 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b08c      	sub	sp, #48	; 0x30
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	6078      	str	r0, [r7, #4]
	uint8_t sub_sec = 0;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructure;
	uint32_t ans_uint32;
	int32_t ans_int32;
	uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 800f9ce:	4b32      	ldr	r3, [pc, #200]	; (800fa98 <RTC_Handler+0xd8>)
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	62bb      	str	r3, [r7, #40]	; 0x28

	if (UseOfflineData == 1)
 800f9d4:	4b31      	ldr	r3, [pc, #196]	; (800fa9c <RTC_Handler+0xdc>)
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d12b      	bne.n	800fa34 <RTC_Handler+0x74>
	{
		Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 800f9dc:	4b30      	ldr	r3, [pc, #192]	; (800faa0 <RTC_Handler+0xe0>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4a30      	ldr	r2, [pc, #192]	; (800faa4 <RTC_Handler+0xe4>)
 800f9e2:	2134      	movs	r1, #52	; 0x34
 800f9e4:	fb01 f303 	mul.w	r3, r1, r3
 800f9e8:	4413      	add	r3, r2
 800f9ea:	781a      	ldrb	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	71da      	strb	r2, [r3, #7]
		Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 800f9f0:	4b2b      	ldr	r3, [pc, #172]	; (800faa0 <RTC_Handler+0xe0>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a2b      	ldr	r2, [pc, #172]	; (800faa4 <RTC_Handler+0xe4>)
 800f9f6:	2134      	movs	r1, #52	; 0x34
 800f9f8:	fb01 f303 	mul.w	r3, r1, r3
 800f9fc:	4413      	add	r3, r2
 800f9fe:	3301      	adds	r3, #1
 800fa00:	781a      	ldrb	r2, [r3, #0]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	721a      	strb	r2, [r3, #8]
		Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 800fa06:	4b26      	ldr	r3, [pc, #152]	; (800faa0 <RTC_Handler+0xe0>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	4a26      	ldr	r2, [pc, #152]	; (800faa4 <RTC_Handler+0xe4>)
 800fa0c:	2134      	movs	r1, #52	; 0x34
 800fa0e:	fb01 f303 	mul.w	r3, r1, r3
 800fa12:	4413      	add	r3, r2
 800fa14:	3302      	adds	r3, #2
 800fa16:	781a      	ldrb	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	725a      	strb	r2, [r3, #9]
		Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 800fa1c:	4b20      	ldr	r3, [pc, #128]	; (800faa0 <RTC_Handler+0xe0>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a20      	ldr	r2, [pc, #128]	; (800faa4 <RTC_Handler+0xe4>)
 800fa22:	2134      	movs	r1, #52	; 0x34
 800fa24:	fb01 f303 	mul.w	r3, r1, r3
 800fa28:	4413      	add	r3, r2
 800fa2a:	3303      	adds	r3, #3
 800fa2c:	781a      	ldrb	r2, [r3, #0]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	729a      	strb	r2, [r3, #10]
		Msg->Data[3] = (uint8_t)stimestructure.Hours;
		Msg->Data[4] = (uint8_t)stimestructure.Minutes;
		Msg->Data[5] = (uint8_t)stimestructure.Seconds;
		Msg->Data[6] = sub_sec;
	}
}
 800fa32:	e02d      	b.n	800fa90 <RTC_Handler+0xd0>
		(void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 800fa34:	f107 0308 	add.w	r3, r7, #8
 800fa38:	2200      	movs	r2, #0
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	4816      	ldr	r0, [pc, #88]	; (800fa98 <RTC_Handler+0xd8>)
 800fa3e:	f7fd f9c0 	bl	800cdc2 <HAL_RTC_GetTime>
		(void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 800fa42:	f107 031c 	add.w	r3, r7, #28
 800fa46:	2200      	movs	r2, #0
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4813      	ldr	r0, [pc, #76]	; (800fa98 <RTC_Handler+0xd8>)
 800fa4c:	f7fd fa9c 	bl	800cf88 <HAL_RTC_GetDate>
		ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa54:	1ad3      	subs	r3, r2, r3
 800fa56:	2264      	movs	r2, #100	; 0x64
 800fa58:	fb02 f303 	mul.w	r3, r2, r3
 800fa5c:	627b      	str	r3, [r7, #36]	; 0x24
		ans_int32 /= RtcSynchPrediv + 1;
 800fa5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa62:	3301      	adds	r3, #1
 800fa64:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa68:	627b      	str	r3, [r7, #36]	; 0x24
		ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	623b      	str	r3, [r7, #32]
		sub_sec = (uint8_t)ans_uint32;
 800fa70:	6a3b      	ldr	r3, [r7, #32]
 800fa72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800fa76:	7a3a      	ldrb	r2, [r7, #8]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	71da      	strb	r2, [r3, #7]
		Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 800fa7c:	7a7a      	ldrb	r2, [r7, #9]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	721a      	strb	r2, [r3, #8]
		Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800fa82:	7aba      	ldrb	r2, [r7, #10]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	725a      	strb	r2, [r3, #9]
		Msg->Data[6] = sub_sec;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fa8e:	729a      	strb	r2, [r3, #10]
}
 800fa90:	bf00      	nop
 800fa92:	3730      	adds	r7, #48	; 0x30
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	20000c84 	.word	0x20000c84
 800fa9c:	20000f95 	.word	0x20000f95
 800faa0:	20001138 	.word	0x20001138
 800faa4:	20000f98 	.word	0x20000f98

0800faa8 <f2CharArray>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */

void f2CharArray(double num, char charArray[]) {
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	ed87 0b02 	vstr	d0, [r7, #8]
 800fab2:	6078      	str	r0, [r7, #4]
	// Formatowanie liczby do ciągu znaków
	sprintf(charArray, "%+010.7f", num);
 800fab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fab8:	4903      	ldr	r1, [pc, #12]	; (800fac8 <f2CharArray+0x20>)
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f00b f802 	bl	801aac4 <siprintf>
}
 800fac0:	bf00      	nop
 800fac2:	3710      	adds	r7, #16
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	0801eb68 	.word	0x0801eb68

0800facc <FX_Data_Handler>:
static void FX_Data_Handler(TMsg *Msg)
{
 800facc:	b5b0      	push	{r4, r5, r7, lr}
 800face:	b0a8      	sub	sp, #160	; 0xa0
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
	uint32_t elapsed_time_us = 0U;
 800fad4:	2300      	movs	r3, #0
 800fad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	MFX_input_t data_in;
	MFX_input_t *pdata_in = &data_in;
 800fada:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800fade:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	MFX_output_t data_out;
	MFX_output_t *pdata_out = &data_out;
 800fae2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if (GYROSCOPE_SENSOR == GYROSCOPE_SENSOR)
		{
			if (MAGNETIC_SENSOR == MAGNETIC_SENSOR)
			{
				/* Convert angular velocity from [mdps] to [dps] */
				data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800faea:	4b4f      	ldr	r3, [pc, #316]	; (800fc28 <FX_Data_Handler+0x15c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	ee07 3a90 	vmov	s15, r3
 800faf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800faf6:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800fc2c <FX_Data_Handler+0x160>
 800fafa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fafe:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800fb02:	4b49      	ldr	r3, [pc, #292]	; (800fc28 <FX_Data_Handler+0x15c>)
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	ee07 3a90 	vmov	s15, r3
 800fb0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb0e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800fc2c <FX_Data_Handler+0x160>
 800fb12:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb16:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800fb1a:	4b43      	ldr	r3, [pc, #268]	; (800fc28 <FX_Data_Handler+0x15c>)
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	ee07 3a90 	vmov	s15, r3
 800fb22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb26:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800fc2c <FX_Data_Handler+0x160>
 800fb2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb2e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

				/* Convert acceleration from [mg] to [g] */
				data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800fb32:	4b3f      	ldr	r3, [pc, #252]	; (800fc30 <FX_Data_Handler+0x164>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	ee07 3a90 	vmov	s15, r3
 800fb3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb3e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800fc2c <FX_Data_Handler+0x160>
 800fb42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb46:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
				data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800fb4a:	4b39      	ldr	r3, [pc, #228]	; (800fc30 <FX_Data_Handler+0x164>)
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	ee07 3a90 	vmov	s15, r3
 800fb52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb56:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800fc2c <FX_Data_Handler+0x160>
 800fb5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb5e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
				data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800fb62:	4b33      	ldr	r3, [pc, #204]	; (800fc30 <FX_Data_Handler+0x164>)
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	ee07 3a90 	vmov	s15, r3
 800fb6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb6e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800fc2c <FX_Data_Handler+0x160>
 800fb72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb76:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

				/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
				data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800fb7a:	4b2e      	ldr	r3, [pc, #184]	; (800fc34 <FX_Data_Handler+0x168>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	ee07 3a90 	vmov	s15, r3
 800fb82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb86:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800fc38 <FX_Data_Handler+0x16c>
 800fb8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb8e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
				data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800fb92:	4b28      	ldr	r3, [pc, #160]	; (800fc34 <FX_Data_Handler+0x168>)
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	ee07 3a90 	vmov	s15, r3
 800fb9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb9e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800fc38 <FX_Data_Handler+0x16c>
 800fba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fba6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
				data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800fbaa:	4b22      	ldr	r3, [pc, #136]	; (800fc34 <FX_Data_Handler+0x168>)
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	ee07 3a90 	vmov	s15, r3
 800fbb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbb6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800fc38 <FX_Data_Handler+0x16c>
 800fbba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbbe:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

				/* Run Sensor Fusion algorithm */
				MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800fbc2:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800fc3c <FX_Data_Handler+0x170>
 800fbc6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800fbca:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800fbce:	f000 fbb1 	bl	8010334 <MotionFX_manager_run>

				char r1[20], r2[20];
				f2CharArray((double)pdata_out->rotation[1], r1);
 800fbd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7f0 fcb5 	bl	8000548 <__aeabi_f2d>
 800fbde:	4604      	mov	r4, r0
 800fbe0:	460d      	mov	r5, r1
 800fbe2:	f107 0320 	add.w	r3, r7, #32
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	ec45 4b10 	vmov	d0, r4, r5
 800fbec:	f7ff ff5c 	bl	800faa8 <f2CharArray>
				f2CharArray((double)pdata_out->rotation[2], r2);
 800fbf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f7f0 fca6 	bl	8000548 <__aeabi_f2d>
 800fbfc:	4604      	mov	r4, r0
 800fbfe:	460d      	mov	r5, r1
 800fc00:	f107 030c 	add.w	r3, r7, #12
 800fc04:	4618      	mov	r0, r3
 800fc06:	ec45 4b10 	vmov	d0, r4, r5
 800fc0a:	f7ff ff4d 	bl	800faa8 <f2CharArray>
				printf("%s %s\r\n\r\n", r1, r2);
 800fc0e:	f107 020c 	add.w	r2, r7, #12
 800fc12:	f107 0320 	add.w	r3, r7, #32
 800fc16:	4619      	mov	r1, r3
 800fc18:	4809      	ldr	r0, [pc, #36]	; (800fc40 <FX_Data_Handler+0x174>)
 800fc1a:	f00a ff41 	bl	801aaa0 <iprintf>
			}
		}
	}
}
 800fc1e:	bf00      	nop
 800fc20:	37a0      	adds	r7, #160	; 0xa0
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bdb0      	pop	{r4, r5, r7, pc}
 800fc26:	bf00      	nop
 800fc28:	200011a8 	.word	0x200011a8
 800fc2c:	3a83126f 	.word	0x3a83126f
 800fc30:	2000119c 	.word	0x2000119c
 800fc34:	200011b4 	.word	0x200011b4
 800fc38:	3b03126f 	.word	0x3b03126f
 800fc3c:	3c23d70a 	.word	0x3c23d70a
 800fc40:	0801eb74 	.word	0x0801eb74

0800fc44 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	71fb      	strb	r3, [r7, #7]
	MagCalRequest = 1U;
 800fc4e:	4b04      	ldr	r3, [pc, #16]	; (800fc60 <BSP_PB_Callback+0x1c>)
 800fc50:	2201      	movs	r2, #1
 800fc52:	701a      	strb	r2, [r3, #0]
}
 800fc54:	bf00      	nop
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	200011d0 	.word	0x200011d0

0800fc64 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
	if (ACCELEROMETER_SENSOR == ACCELEROMETER_SENSOR){
		if (UseOfflineData == 1){
 800fc6c:	4b16      	ldr	r3, [pc, #88]	; (800fcc8 <Accelero_Sensor_Handler+0x64>)
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d121      	bne.n	800fcb8 <Accelero_Sensor_Handler+0x54>
			AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800fc74:	4b15      	ldr	r3, [pc, #84]	; (800fccc <Accelero_Sensor_Handler+0x68>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a15      	ldr	r2, [pc, #84]	; (800fcd0 <Accelero_Sensor_Handler+0x6c>)
 800fc7a:	2134      	movs	r1, #52	; 0x34
 800fc7c:	fb01 f303 	mul.w	r3, r1, r3
 800fc80:	4413      	add	r3, r2
 800fc82:	3310      	adds	r3, #16
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	4a13      	ldr	r2, [pc, #76]	; (800fcd4 <Accelero_Sensor_Handler+0x70>)
 800fc88:	6013      	str	r3, [r2, #0]
			AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 800fc8a:	4b10      	ldr	r3, [pc, #64]	; (800fccc <Accelero_Sensor_Handler+0x68>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4a10      	ldr	r2, [pc, #64]	; (800fcd0 <Accelero_Sensor_Handler+0x6c>)
 800fc90:	2134      	movs	r1, #52	; 0x34
 800fc92:	fb01 f303 	mul.w	r3, r1, r3
 800fc96:	4413      	add	r3, r2
 800fc98:	3314      	adds	r3, #20
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a0d      	ldr	r2, [pc, #52]	; (800fcd4 <Accelero_Sensor_Handler+0x70>)
 800fc9e:	6053      	str	r3, [r2, #4]
			AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 800fca0:	4b0a      	ldr	r3, [pc, #40]	; (800fccc <Accelero_Sensor_Handler+0x68>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4a0a      	ldr	r2, [pc, #40]	; (800fcd0 <Accelero_Sensor_Handler+0x6c>)
 800fca6:	2134      	movs	r1, #52	; 0x34
 800fca8:	fb01 f303 	mul.w	r3, r1, r3
 800fcac:	4413      	add	r3, r2
 800fcae:	3318      	adds	r3, #24
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4a08      	ldr	r2, [pc, #32]	; (800fcd4 <Accelero_Sensor_Handler+0x70>)
 800fcb4:	6093      	str	r3, [r2, #8]
		}
		else{
			BSP_SENSOR_ACC_GetAxes(&AccValue);
		}
	}
}
 800fcb6:	e002      	b.n	800fcbe <Accelero_Sensor_Handler+0x5a>
			BSP_SENSOR_ACC_GetAxes(&AccValue);
 800fcb8:	4806      	ldr	r0, [pc, #24]	; (800fcd4 <Accelero_Sensor_Handler+0x70>)
 800fcba:	f000 fa39 	bl	8010130 <BSP_SENSOR_ACC_GetAxes>
}
 800fcbe:	bf00      	nop
 800fcc0:	3708      	adds	r7, #8
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	20000f95 	.word	0x20000f95
 800fccc:	20001138 	.word	0x20001138
 800fcd0:	20000f98 	.word	0x20000f98
 800fcd4:	2000119c 	.word	0x2000119c

0800fcd8 <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
	if (GYROSCOPE_SENSOR == GYROSCOPE_SENSOR)
	{
		if (UseOfflineData == 1)
 800fce0:	4b17      	ldr	r3, [pc, #92]	; (800fd40 <Gyro_Sensor_Handler+0x68>)
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d121      	bne.n	800fd2c <Gyro_Sensor_Handler+0x54>
		{
			GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 800fce8:	4b16      	ldr	r3, [pc, #88]	; (800fd44 <Gyro_Sensor_Handler+0x6c>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4a16      	ldr	r2, [pc, #88]	; (800fd48 <Gyro_Sensor_Handler+0x70>)
 800fcee:	2134      	movs	r1, #52	; 0x34
 800fcf0:	fb01 f303 	mul.w	r3, r1, r3
 800fcf4:	4413      	add	r3, r2
 800fcf6:	331c      	adds	r3, #28
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	4a14      	ldr	r2, [pc, #80]	; (800fd4c <Gyro_Sensor_Handler+0x74>)
 800fcfc:	6013      	str	r3, [r2, #0]
			GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 800fcfe:	4b11      	ldr	r3, [pc, #68]	; (800fd44 <Gyro_Sensor_Handler+0x6c>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	4a11      	ldr	r2, [pc, #68]	; (800fd48 <Gyro_Sensor_Handler+0x70>)
 800fd04:	2134      	movs	r1, #52	; 0x34
 800fd06:	fb01 f303 	mul.w	r3, r1, r3
 800fd0a:	4413      	add	r3, r2
 800fd0c:	3320      	adds	r3, #32
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a0e      	ldr	r2, [pc, #56]	; (800fd4c <Gyro_Sensor_Handler+0x74>)
 800fd12:	6053      	str	r3, [r2, #4]
			GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 800fd14:	4b0b      	ldr	r3, [pc, #44]	; (800fd44 <Gyro_Sensor_Handler+0x6c>)
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4a0b      	ldr	r2, [pc, #44]	; (800fd48 <Gyro_Sensor_Handler+0x70>)
 800fd1a:	2134      	movs	r1, #52	; 0x34
 800fd1c:	fb01 f303 	mul.w	r3, r1, r3
 800fd20:	4413      	add	r3, r2
 800fd22:	3324      	adds	r3, #36	; 0x24
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	4a09      	ldr	r2, [pc, #36]	; (800fd4c <Gyro_Sensor_Handler+0x74>)
 800fd28:	6093      	str	r3, [r2, #8]
		{
			DWT_Start();
			BSP_SENSOR_GYR_GetAxes(&GyrValue);
		}
	}
}
 800fd2a:	e004      	b.n	800fd36 <Gyro_Sensor_Handler+0x5e>
			DWT_Start();
 800fd2c:	f000 f9a4 	bl	8010078 <DWT_Start>
			BSP_SENSOR_GYR_GetAxes(&GyrValue);
 800fd30:	4806      	ldr	r0, [pc, #24]	; (800fd4c <Gyro_Sensor_Handler+0x74>)
 800fd32:	f000 fa0a 	bl	801014a <BSP_SENSOR_GYR_GetAxes>
}
 800fd36:	bf00      	nop
 800fd38:	3708      	adds	r7, #8
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	bd80      	pop	{r7, pc}
 800fd3e:	bf00      	nop
 800fd40:	20000f95 	.word	0x20000f95
 800fd44:	20001138 	.word	0x20001138
 800fd48:	20000f98 	.word	0x20000f98
 800fd4c:	200011a8 	.word	0x200011a8

0800fd50 <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b08c      	sub	sp, #48	; 0x30
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	if (MAGNETIC_SENSOR == MAGNETIC_SENSOR)
	{
		if (UseOfflineData == 1)
 800fd58:	4b5b      	ldr	r3, [pc, #364]	; (800fec8 <Magneto_Sensor_Handler+0x178>)
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d121      	bne.n	800fda4 <Magneto_Sensor_Handler+0x54>
		{
			MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 800fd60:	4b5a      	ldr	r3, [pc, #360]	; (800fecc <Magneto_Sensor_Handler+0x17c>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a5a      	ldr	r2, [pc, #360]	; (800fed0 <Magneto_Sensor_Handler+0x180>)
 800fd66:	2134      	movs	r1, #52	; 0x34
 800fd68:	fb01 f303 	mul.w	r3, r1, r3
 800fd6c:	4413      	add	r3, r2
 800fd6e:	3328      	adds	r3, #40	; 0x28
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a58      	ldr	r2, [pc, #352]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800fd74:	6013      	str	r3, [r2, #0]
			MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 800fd76:	4b55      	ldr	r3, [pc, #340]	; (800fecc <Magneto_Sensor_Handler+0x17c>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a55      	ldr	r2, [pc, #340]	; (800fed0 <Magneto_Sensor_Handler+0x180>)
 800fd7c:	2134      	movs	r1, #52	; 0x34
 800fd7e:	fb01 f303 	mul.w	r3, r1, r3
 800fd82:	4413      	add	r3, r2
 800fd84:	332c      	adds	r3, #44	; 0x2c
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4a52      	ldr	r2, [pc, #328]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800fd8a:	6053      	str	r3, [r2, #4]
			MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 800fd8c:	4b4f      	ldr	r3, [pc, #316]	; (800fecc <Magneto_Sensor_Handler+0x17c>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4a4f      	ldr	r2, [pc, #316]	; (800fed0 <Magneto_Sensor_Handler+0x180>)
 800fd92:	2134      	movs	r1, #52	; 0x34
 800fd94:	fb01 f303 	mul.w	r3, r1, r3
 800fd98:	4413      	add	r3, r2
 800fd9a:	3330      	adds	r3, #48	; 0x30
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	4a4d      	ldr	r2, [pc, #308]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800fda0:	6093      	str	r3, [r2, #8]
			MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
			MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
			MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
		}
	}
}
 800fda2:	e08d      	b.n	800fec0 <Magneto_Sensor_Handler+0x170>
			BSP_SENSOR_MAG_GetAxes(&MagValue);
 800fda4:	484b      	ldr	r0, [pc, #300]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800fda6:	f000 f9dd 	bl	8010164 <BSP_SENSOR_MAG_GetAxes>
			if (MagCalStatus == 0U)
 800fdaa:	4b4b      	ldr	r3, [pc, #300]	; (800fed8 <Magneto_Sensor_Handler+0x188>)
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d171      	bne.n	800fe96 <Magneto_Sensor_Handler+0x146>
				mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800fdb2:	4b48      	ldr	r3, [pc, #288]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	ee07 3a90 	vmov	s15, r3
 800fdba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdbe:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800fedc <Magneto_Sensor_Handler+0x18c>
 800fdc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdc6:	edc7 7a07 	vstr	s15, [r7, #28]
				mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800fdca:	4b42      	ldr	r3, [pc, #264]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	ee07 3a90 	vmov	s15, r3
 800fdd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdd6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800fedc <Magneto_Sensor_Handler+0x18c>
 800fdda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdde:	edc7 7a08 	vstr	s15, [r7, #32]
				mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800fde2:	4b3c      	ldr	r3, [pc, #240]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	ee07 3a90 	vmov	s15, r3
 800fdea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdee:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800fedc <Magneto_Sensor_Handler+0x18c>
 800fdf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fdf6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				pomiar_time_stamp = TimeStamp;
 800fdfa:	4b39      	ldr	r3, [pc, #228]	; (800fee0 <Magneto_Sensor_Handler+0x190>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	461a      	mov	r2, r3
 800fe00:	4b38      	ldr	r3, [pc, #224]	; (800fee4 <Magneto_Sensor_Handler+0x194>)
 800fe02:	601a      	str	r2, [r3, #0]
				mag_data_in.time_stamp = (int)TimeStamp;
 800fe04:	4b36      	ldr	r3, [pc, #216]	; (800fee0 <Magneto_Sensor_Handler+0x190>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	62bb      	str	r3, [r7, #40]	; 0x28
				TimeStamp += (uint32_t)ALGO_PERIOD;
 800fe0a:	4b35      	ldr	r3, [pc, #212]	; (800fee0 <Magneto_Sensor_Handler+0x190>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	330a      	adds	r3, #10
 800fe10:	4a33      	ldr	r2, [pc, #204]	; (800fee0 <Magneto_Sensor_Handler+0x190>)
 800fe12:	6013      	str	r3, [r2, #0]
				MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800fe14:	f107 020c 	add.w	r2, r7, #12
 800fe18:	f107 031c 	add.w	r3, r7, #28
 800fe1c:	4611      	mov	r1, r2
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f000 fab4 	bl	801038c <MotionFX_manager_MagCal_run>
				if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 800fe24:	7e3b      	ldrb	r3, [r7, #24]
 800fe26:	2b03      	cmp	r3, #3
 800fe28:	d135      	bne.n	800fe96 <Magneto_Sensor_Handler+0x146>
					MagCalStatus = 1;
 800fe2a:	4b2b      	ldr	r3, [pc, #172]	; (800fed8 <Magneto_Sensor_Handler+0x188>)
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	701a      	strb	r2, [r3, #0]
					ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800fe30:	edd7 7a03 	vldr	s15, [r7, #12]
 800fe34:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800fee8 <Magneto_Sensor_Handler+0x198>
 800fe38:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe3c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
					MagOffset.x = (int32_t)ans_float;
 800fe40:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fe44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe48:	ee17 2a90 	vmov	r2, s15
 800fe4c:	4b27      	ldr	r3, [pc, #156]	; (800feec <Magneto_Sensor_Handler+0x19c>)
 800fe4e:	601a      	str	r2, [r3, #0]
					ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800fe50:	edd7 7a04 	vldr	s15, [r7, #16]
 800fe54:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800fee8 <Magneto_Sensor_Handler+0x198>
 800fe58:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe5c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
					MagOffset.y = (int32_t)ans_float;
 800fe60:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fe64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe68:	ee17 2a90 	vmov	r2, s15
 800fe6c:	4b1f      	ldr	r3, [pc, #124]	; (800feec <Magneto_Sensor_Handler+0x19c>)
 800fe6e:	605a      	str	r2, [r3, #4]
					ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800fe70:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe74:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800fee8 <Magneto_Sensor_Handler+0x198>
 800fe78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe7c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
					MagOffset.z = (int32_t)ans_float;
 800fe80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800fe84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe88:	ee17 2a90 	vmov	r2, s15
 800fe8c:	4b17      	ldr	r3, [pc, #92]	; (800feec <Magneto_Sensor_Handler+0x19c>)
 800fe8e:	609a      	str	r2, [r3, #8]
					MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800fe90:	200a      	movs	r0, #10
 800fe92:	f000 fa96 	bl	80103c2 <MotionFX_manager_MagCal_stop>
			MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800fe96:	4b0f      	ldr	r3, [pc, #60]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	4b14      	ldr	r3, [pc, #80]	; (800feec <Magneto_Sensor_Handler+0x19c>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	1ad3      	subs	r3, r2, r3
 800fea0:	4a0c      	ldr	r2, [pc, #48]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800fea2:	6013      	str	r3, [r2, #0]
			MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800fea4:	4b0b      	ldr	r3, [pc, #44]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800fea6:	685a      	ldr	r2, [r3, #4]
 800fea8:	4b10      	ldr	r3, [pc, #64]	; (800feec <Magneto_Sensor_Handler+0x19c>)
 800feaa:	685b      	ldr	r3, [r3, #4]
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	4a09      	ldr	r2, [pc, #36]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800feb0:	6053      	str	r3, [r2, #4]
			MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800feb2:	4b08      	ldr	r3, [pc, #32]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800feb4:	689a      	ldr	r2, [r3, #8]
 800feb6:	4b0d      	ldr	r3, [pc, #52]	; (800feec <Magneto_Sensor_Handler+0x19c>)
 800feb8:	689b      	ldr	r3, [r3, #8]
 800feba:	1ad3      	subs	r3, r2, r3
 800febc:	4a05      	ldr	r2, [pc, #20]	; (800fed4 <Magneto_Sensor_Handler+0x184>)
 800febe:	6093      	str	r3, [r2, #8]
}
 800fec0:	bf00      	nop
 800fec2:	3730      	adds	r7, #48	; 0x30
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	20000f95 	.word	0x20000f95
 800fecc:	20001138 	.word	0x20001138
 800fed0:	20000f98 	.word	0x20000f98
 800fed4:	200011b4 	.word	0x200011b4
 800fed8:	200011e0 	.word	0x200011e0
 800fedc:	3b03126f 	.word	0x3b03126f
 800fee0:	200011cc 	.word	0x200011cc
 800fee4:	20001238 	.word	0x20001238
 800fee8:	43fa0000 	.word	0x43fa0000
 800feec:	200011d4 	.word	0x200011d4

0800fef0 <Pressure_Sensor_Handler>:
 * @brief  Handles the PRESS sensor data getting/sending.
 * @param  Msg the PRESS part of the stream
 * @retval None
 */
static void Pressure_Sensor_Handler(TMsg *Msg)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
	if (PRESSURE_SENSOR == PRESSURE_SENSOR)
	{
		if (UseOfflineData == 1)
 800fef8:	4b0d      	ldr	r3, [pc, #52]	; (800ff30 <Pressure_Sensor_Handler+0x40>)
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d10b      	bne.n	800ff18 <Pressure_Sensor_Handler+0x28>
		{
			PressValue = OfflineData[OfflineDataReadIndex].pressure;
 800ff00:	4b0c      	ldr	r3, [pc, #48]	; (800ff34 <Pressure_Sensor_Handler+0x44>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	4a0c      	ldr	r2, [pc, #48]	; (800ff38 <Pressure_Sensor_Handler+0x48>)
 800ff06:	2134      	movs	r1, #52	; 0x34
 800ff08:	fb01 f303 	mul.w	r3, r1, r3
 800ff0c:	4413      	add	r3, r2
 800ff0e:	3304      	adds	r3, #4
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	4a0a      	ldr	r2, [pc, #40]	; (800ff3c <Pressure_Sensor_Handler+0x4c>)
 800ff14:	6013      	str	r3, [r2, #0]
 800ff16:	e002      	b.n	800ff1e <Pressure_Sensor_Handler+0x2e>
		}
		else
		{
			BSP_SENSOR_PRESS_GetValue(&PressValue);
 800ff18:	4808      	ldr	r0, [pc, #32]	; (800ff3c <Pressure_Sensor_Handler+0x4c>)
 800ff1a:	f000 f930 	bl	801017e <BSP_SENSOR_PRESS_GetValue>
		}

		(void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	330b      	adds	r3, #11
 800ff22:	4a06      	ldr	r2, [pc, #24]	; (800ff3c <Pressure_Sensor_Handler+0x4c>)
 800ff24:	6812      	ldr	r2, [r2, #0]
 800ff26:	601a      	str	r2, [r3, #0]
	}
}
 800ff28:	bf00      	nop
 800ff2a:	3708      	adds	r7, #8
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	20000f95 	.word	0x20000f95
 800ff34:	20001138 	.word	0x20001138
 800ff38:	20000f98 	.word	0x20000f98
 800ff3c:	200011c0 	.word	0x200011c0

0800ff40 <Temperature_Sensor_Handler>:
 * @brief  Handles the TEMP axes data getting/sending
 * @param  Msg the TEMP part of the stream
 * @retval None
 */
static void Temperature_Sensor_Handler(TMsg *Msg)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
	if (TEMPERATURE_SENSOR == TEMPERATURE_SENSOR)
	{
		if (UseOfflineData == 1)
 800ff48:	4b0d      	ldr	r3, [pc, #52]	; (800ff80 <Temperature_Sensor_Handler+0x40>)
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	d10b      	bne.n	800ff68 <Temperature_Sensor_Handler+0x28>
		{
			TempValue = OfflineData[OfflineDataReadIndex].temperature;
 800ff50:	4b0c      	ldr	r3, [pc, #48]	; (800ff84 <Temperature_Sensor_Handler+0x44>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4a0c      	ldr	r2, [pc, #48]	; (800ff88 <Temperature_Sensor_Handler+0x48>)
 800ff56:	2134      	movs	r1, #52	; 0x34
 800ff58:	fb01 f303 	mul.w	r3, r1, r3
 800ff5c:	4413      	add	r3, r2
 800ff5e:	330c      	adds	r3, #12
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4a0a      	ldr	r2, [pc, #40]	; (800ff8c <Temperature_Sensor_Handler+0x4c>)
 800ff64:	6013      	str	r3, [r2, #0]
 800ff66:	e002      	b.n	800ff6e <Temperature_Sensor_Handler+0x2e>
		}
		else
		{
			BSP_SENSOR_TEMP_GetValue(&TempValue);
 800ff68:	4808      	ldr	r0, [pc, #32]	; (800ff8c <Temperature_Sensor_Handler+0x4c>)
 800ff6a:	f000 f915 	bl	8010198 <BSP_SENSOR_TEMP_GetValue>
		}

		(void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	330f      	adds	r3, #15
 800ff72:	4a06      	ldr	r2, [pc, #24]	; (800ff8c <Temperature_Sensor_Handler+0x4c>)
 800ff74:	6812      	ldr	r2, [r2, #0]
 800ff76:	601a      	str	r2, [r3, #0]
	}
}
 800ff78:	bf00      	nop
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	20000f95 	.word	0x20000f95
 800ff84:	20001138 	.word	0x20001138
 800ff88:	20000f98 	.word	0x20000f98
 800ff8c:	200011c4 	.word	0x200011c4

0800ff90 <Humidity_Sensor_Handler>:
 * @brief  Handles the HUM axes data getting/sending
 * @param  Msg the HUM part of the stream
 * @retval None
 */
static void Humidity_Sensor_Handler(TMsg *Msg)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
	if (HUMIDITY_SENSOR == HUMIDITY_SENSOR)
	{
		if (UseOfflineData == 1)
 800ff98:	4b0d      	ldr	r3, [pc, #52]	; (800ffd0 <Humidity_Sensor_Handler+0x40>)
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d10b      	bne.n	800ffb8 <Humidity_Sensor_Handler+0x28>
		{
			HumValue = OfflineData[OfflineDataReadIndex].humidity;
 800ffa0:	4b0c      	ldr	r3, [pc, #48]	; (800ffd4 <Humidity_Sensor_Handler+0x44>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	4a0c      	ldr	r2, [pc, #48]	; (800ffd8 <Humidity_Sensor_Handler+0x48>)
 800ffa6:	2134      	movs	r1, #52	; 0x34
 800ffa8:	fb01 f303 	mul.w	r3, r1, r3
 800ffac:	4413      	add	r3, r2
 800ffae:	3308      	adds	r3, #8
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a0a      	ldr	r2, [pc, #40]	; (800ffdc <Humidity_Sensor_Handler+0x4c>)
 800ffb4:	6013      	str	r3, [r2, #0]
 800ffb6:	e002      	b.n	800ffbe <Humidity_Sensor_Handler+0x2e>
		}
		else
		{
			BSP_SENSOR_HUM_GetValue(&HumValue);
 800ffb8:	4808      	ldr	r0, [pc, #32]	; (800ffdc <Humidity_Sensor_Handler+0x4c>)
 800ffba:	f000 f8fa 	bl	80101b2 <BSP_SENSOR_HUM_GetValue>
		}

		(void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	3313      	adds	r3, #19
 800ffc2:	4a06      	ldr	r2, [pc, #24]	; (800ffdc <Humidity_Sensor_Handler+0x4c>)
 800ffc4:	6812      	ldr	r2, [r2, #0]
 800ffc6:	601a      	str	r2, [r3, #0]
	}
}
 800ffc8:	bf00      	nop
 800ffca:	3708      	adds	r7, #8
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	20000f95 	.word	0x20000f95
 800ffd4:	20001138 	.word	0x20001138
 800ffd8:	20000f98 	.word	0x20000f98
 800ffdc:	200011c8 	.word	0x200011c8

0800ffe0 <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b086      	sub	sp, #24
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
	const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800ffe8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ffec:	617b      	str	r3, [r7, #20]
	uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800ffee:	4b14      	ldr	r3, [pc, #80]	; (8010040 <TIM_Config+0x60>)
 800fff0:	681a      	ldr	r2, [r3, #0]
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fff8:	3b01      	subs	r3, #1
 800fffa:	613b      	str	r3, [r7, #16]
	uint32_t period = (tim_counter_clock / Freq) - 1;
 800fffc:	697a      	ldr	r2, [r7, #20]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	fbb2 f3f3 	udiv	r3, r2, r3
 8010004:	3b01      	subs	r3, #1
 8010006:	60fb      	str	r3, [r7, #12]

	BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8010008:	4a0e      	ldr	r2, [pc, #56]	; (8010044 <TIM_Config+0x64>)
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	6053      	str	r3, [r2, #4]
	BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 801000e:	4b0d      	ldr	r3, [pc, #52]	; (8010044 <TIM_Config+0x64>)
 8010010:	2200      	movs	r2, #0
 8010012:	609a      	str	r2, [r3, #8]
	BSP_IP_TIM_Handle.Init.Period = period;
 8010014:	4a0b      	ldr	r2, [pc, #44]	; (8010044 <TIM_Config+0x64>)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	60d3      	str	r3, [r2, #12]
	BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801001a:	4b0a      	ldr	r3, [pc, #40]	; (8010044 <TIM_Config+0x64>)
 801001c:	2200      	movs	r2, #0
 801001e:	611a      	str	r2, [r3, #16]
	BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8010020:	4b08      	ldr	r3, [pc, #32]	; (8010044 <TIM_Config+0x64>)
 8010022:	2200      	movs	r2, #0
 8010024:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8010026:	4807      	ldr	r0, [pc, #28]	; (8010044 <TIM_Config+0x64>)
 8010028:	f7fd f8cc 	bl	800d1c4 <HAL_TIM_Base_Init>
 801002c:	4603      	mov	r3, r0
 801002e:	2b00      	cmp	r3, #0
 8010030:	d001      	beq.n	8010036 <TIM_Config+0x56>
	{
		Error_Handler();
 8010032:	f7f1 fd2b 	bl	8001a8c <Error_Handler>
	}
}
 8010036:	bf00      	nop
 8010038:	3718      	adds	r7, #24
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	20000004 	.word	0x20000004
 8010044:	20000ca8 	.word	0x20000ca8

08010048 <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 8010048:	b480      	push	{r7}
 801004a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801004c:	4b08      	ldr	r3, [pc, #32]	; (8010070 <DWT_Init+0x28>)
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	4a07      	ldr	r2, [pc, #28]	; (8010070 <DWT_Init+0x28>)
 8010052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010056:	60d3      	str	r3, [r2, #12]
	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8010058:	4b06      	ldr	r3, [pc, #24]	; (8010074 <DWT_Init+0x2c>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4a05      	ldr	r2, [pc, #20]	; (8010074 <DWT_Init+0x2c>)
 801005e:	f023 0301 	bic.w	r3, r3, #1
 8010062:	6013      	str	r3, [r2, #0]
}
 8010064:	bf00      	nop
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	e000edf0 	.word	0xe000edf0
 8010074:	e0001000 	.word	0xe0001000

08010078 <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 8010078:	b480      	push	{r7}
 801007a:	af00      	add	r7, sp, #0
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 801007c:	4b06      	ldr	r3, [pc, #24]	; (8010098 <DWT_Start+0x20>)
 801007e:	2200      	movs	r2, #0
 8010080:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 8010082:	4b05      	ldr	r3, [pc, #20]	; (8010098 <DWT_Start+0x20>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a04      	ldr	r2, [pc, #16]	; (8010098 <DWT_Start+0x20>)
 8010088:	f043 0301 	orr.w	r3, r3, #1
 801008c:	6013      	str	r3, [r2, #0]
}
 801008e:	bf00      	nop
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr
 8010098:	e0001000 	.word	0xe0001000

0801009c <UART_StartReceiveMsg>:
  * @brief  Start receiving messages via DMA
  * @param  None
  * @retval None
  */
void UART_StartReceiveMsg(void)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 80100a0:	4b09      	ldr	r3, [pc, #36]	; (80100c8 <UART_StartReceiveMsg+0x2c>)
 80100a2:	4a0a      	ldr	r2, [pc, #40]	; (80100cc <UART_StartReceiveMsg+0x30>)
 80100a4:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 80100a6:	4b08      	ldr	r3, [pc, #32]	; (80100c8 <UART_StartReceiveMsg+0x2c>)
 80100a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80100ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 80100b0:	4b05      	ldr	r3, [pc, #20]	; (80100c8 <UART_StartReceiveMsg+0x2c>)
 80100b2:	2200      	movs	r2, #0
 80100b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 80100b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80100bc:	4903      	ldr	r1, [pc, #12]	; (80100cc <UART_StartReceiveMsg+0x30>)
 80100be:	4802      	ldr	r0, [pc, #8]	; (80100c8 <UART_StartReceiveMsg+0x2c>)
 80100c0:	f7fd fdd2 	bl	800dc68 <HAL_UART_Receive_DMA>
}
 80100c4:	bf00      	nop
 80100c6:	bd80      	pop	{r7, pc}
 80100c8:	20000edc 	.word	0x20000edc
 80100cc:	20001348 	.word	0x20001348

080100d0 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 80100d4:	2102      	movs	r1, #2
 80100d6:	2000      	movs	r0, #0
 80100d8:	f7f8 feb2 	bl	8008e40 <IKS01A3_MOTION_SENSOR_Init>
}
 80100dc:	bf00      	nop
 80100de:	bd80      	pop	{r7, pc}

080100e0 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 80100e4:	2101      	movs	r1, #1
 80100e6:	2000      	movs	r0, #0
 80100e8:	f7f8 feaa 	bl	8008e40 <IKS01A3_MOTION_SENSOR_Init>
}
 80100ec:	bf00      	nop
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 80100f4:	2104      	movs	r1, #4
 80100f6:	2002      	movs	r0, #2
 80100f8:	f7f8 fea2 	bl	8008e40 <IKS01A3_MOTION_SENSOR_Init>
}
 80100fc:	bf00      	nop
 80100fe:	bd80      	pop	{r7, pc}

08010100 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 8010104:	2102      	movs	r1, #2
 8010106:	2001      	movs	r0, #1
 8010108:	f7f8 fb02 	bl	8008710 <IKS01A3_ENV_SENSOR_Init>
}
 801010c:	bf00      	nop
 801010e:	bd80      	pop	{r7, pc}

08010110 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 8010114:	2101      	movs	r1, #1
 8010116:	2000      	movs	r0, #0
 8010118:	f7f8 fafa 	bl	8008710 <IKS01A3_ENV_SENSOR_Init>
}
 801011c:	bf00      	nop
 801011e:	bd80      	pop	{r7, pc}

08010120 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY);
 8010124:	2104      	movs	r1, #4
 8010126:	2000      	movs	r0, #0
 8010128:	f7f8 faf2 	bl	8008710 <IKS01A3_ENV_SENSOR_Init>
}
 801012c:	bf00      	nop
 801012e:	bd80      	pop	{r7, pc}

08010130 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	2102      	movs	r1, #2
 801013c:	2000      	movs	r0, #0
 801013e:	f7f8 ff7b 	bl	8009038 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 8010142:	bf00      	nop
 8010144:	3708      	adds	r7, #8
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b082      	sub	sp, #8
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	2101      	movs	r1, #1
 8010156:	2000      	movs	r0, #0
 8010158:	f7f8 ff6e 	bl	8009038 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 801015c:	bf00      	nop
 801015e:	3708      	adds	r7, #8
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2MDL_0, MOTION_MAGNETO, Axes);
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	2104      	movs	r1, #4
 8010170:	2002      	movs	r0, #2
 8010172:	f7f8 ff61 	bl	8009038 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 8010176:	bf00      	nop
 8010178:	3708      	adds	r7, #8
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b082      	sub	sp, #8
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, Value);
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	2102      	movs	r1, #2
 801018a:	2001      	movs	r0, #1
 801018c:	f7f8 fbce 	bl	800892c <IKS01A3_ENV_SENSOR_GetValue>
}
 8010190:	bf00      	nop
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, Value);
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	2101      	movs	r1, #1
 80101a4:	2000      	movs	r0, #0
 80101a6:	f7f8 fbc1 	bl	800892c <IKS01A3_ENV_SENSOR_GetValue>
}
 80101aa:	bf00      	nop
 80101ac:	3708      	adds	r7, #8
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b082      	sub	sp, #8
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, Value);
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	2104      	movs	r1, #4
 80101be:	2000      	movs	r0, #0
 80101c0:	f7f8 fbb4 	bl	800892c <IKS01A3_ENV_SENSOR_GetValue>
}
 80101c4:	bf00      	nop
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 80101d6:	ed97 0a01 	vldr	s0, [r7, #4]
 80101da:	2102      	movs	r1, #2
 80101dc:	2000      	movs	r0, #0
 80101de:	f7f8 ff6f 	bl	80090c0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 80101e2:	bf00      	nop
 80101e4:	3708      	adds	r7, #8
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}

080101ea <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b082      	sub	sp, #8
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	2102      	movs	r1, #2
 80101f6:	2000      	movs	r0, #0
 80101f8:	f7f8 ffa8 	bl	800914c <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 80101fc:	bf00      	nop
 80101fe:	3708      	adds	r7, #8
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8010204:	b480      	push	{r7}
 8010206:	b083      	sub	sp, #12
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2273      	movs	r2, #115	; 0x73
 8010210:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	3301      	adds	r3, #1
 8010216:	2265      	movs	r2, #101	; 0x65
 8010218:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	3302      	adds	r3, #2
 801021e:	2275      	movs	r2, #117	; 0x75
 8010220:	701a      	strb	r2, [r3, #0]
}
 8010222:	bf00      	nop
 8010224:	370c      	adds	r7, #12
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr

0801022e <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 801022e:	b480      	push	{r7}
 8010230:	b083      	sub	sp, #12
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2273      	movs	r2, #115	; 0x73
 801023a:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	3301      	adds	r3, #1
 8010240:	2265      	movs	r2, #101	; 0x65
 8010242:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	3302      	adds	r3, #2
 8010248:	2275      	movs	r2, #117	; 0x75
 801024a:	701a      	strb	r2, [r3, #0]
}
 801024c:	bf00      	nop
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	226e      	movs	r2, #110	; 0x6e
 8010264:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	3301      	adds	r3, #1
 801026a:	2265      	movs	r2, #101	; 0x65
 801026c:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	3302      	adds	r3, #2
 8010272:	2275      	movs	r2, #117	; 0x75
 8010274:	701a      	strb	r2, [r3, #0]
}
 8010276:	bf00      	nop
 8010278:	370c      	adds	r7, #12
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr
	...

08010284 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8010288:	f009 f8e6 	bl	8019458 <MotionFX_GetStateSize>
 801028c:	4603      	mov	r3, r0
 801028e:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8010292:	d901      	bls.n	8010298 <MotionFX_manager_init+0x14>
    Error_Handler();
 8010294:	f7f1 fbfa 	bl	8001a8c <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8010298:	4821      	ldr	r0, [pc, #132]	; (8010320 <MotionFX_manager_init+0x9c>)
 801029a:	f009 f8e1 	bl	8019460 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 801029e:	4b21      	ldr	r3, [pc, #132]	; (8010324 <MotionFX_manager_init+0xa0>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4619      	mov	r1, r3
 80102a4:	481e      	ldr	r0, [pc, #120]	; (8010320 <MotionFX_manager_init+0x9c>)
 80102a6:	f009 f9e1 	bl	801966c <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 80102aa:	4b1e      	ldr	r3, [pc, #120]	; (8010324 <MotionFX_manager_init+0xa0>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	331d      	adds	r3, #29
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7ff ffa7 	bl	8010204 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 80102b6:	4b1b      	ldr	r3, [pc, #108]	; (8010324 <MotionFX_manager_init+0xa0>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	3321      	adds	r3, #33	; 0x21
 80102bc:	4618      	mov	r0, r3
 80102be:	f7ff ffb6 	bl	801022e <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 80102c2:	4b18      	ldr	r3, [pc, #96]	; (8010324 <MotionFX_manager_init+0xa0>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	3325      	adds	r3, #37	; 0x25
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7ff ffc5 	bl	8010258 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 80102ce:	4b15      	ldr	r3, [pc, #84]	; (8010324 <MotionFX_manager_init+0xa0>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a15      	ldr	r2, [pc, #84]	; (8010328 <MotionFX_manager_init+0xa4>)
 80102d4:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 80102d6:	4b13      	ldr	r3, [pc, #76]	; (8010324 <MotionFX_manager_init+0xa0>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4a14      	ldr	r2, [pc, #80]	; (801032c <MotionFX_manager_init+0xa8>)
 80102dc:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 80102de:	4b11      	ldr	r3, [pc, #68]	; (8010324 <MotionFX_manager_init+0xa0>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4a13      	ldr	r2, [pc, #76]	; (8010330 <MotionFX_manager_init+0xac>)
 80102e4:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80102e6:	4b0f      	ldr	r3, [pc, #60]	; (8010324 <MotionFX_manager_init+0xa0>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2201      	movs	r2, #1
 80102ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 80102f0:	4b0c      	ldr	r3, [pc, #48]	; (8010324 <MotionFX_manager_init+0xa0>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	2201      	movs	r2, #1
 80102f6:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 80102f8:	4b0a      	ldr	r3, [pc, #40]	; (8010324 <MotionFX_manager_init+0xa0>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2201      	movs	r2, #1
 80102fe:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8010300:	4b08      	ldr	r3, [pc, #32]	; (8010324 <MotionFX_manager_init+0xa0>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4619      	mov	r1, r3
 8010306:	4806      	ldr	r0, [pc, #24]	; (8010320 <MotionFX_manager_init+0x9c>)
 8010308:	f009 f964 	bl	80195d4 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 801030c:	2100      	movs	r1, #0
 801030e:	4804      	ldr	r0, [pc, #16]	; (8010320 <MotionFX_manager_init+0x9c>)
 8010310:	f009 f9ea 	bl	80196e8 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8010314:	2100      	movs	r1, #0
 8010316:	4802      	ldr	r0, [pc, #8]	; (8010320 <MotionFX_manager_init+0x9c>)
 8010318:	f009 fa06 	bl	8019728 <MotionFX_enable_9X>
}
 801031c:	bf00      	nop
 801031e:	bd80      	pop	{r7, pc}
 8010320:	20001578 	.word	0x20001578
 8010324:	200001b0 	.word	0x200001b0
 8010328:	3ac88a48 	.word	0x3ac88a48
 801032c:	3b83126f 	.word	0x3b83126f
 8010330:	3b449ba6 	.word	0x3b449ba6

08010334 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b086      	sub	sp, #24
 8010338:	af02      	add	r7, sp, #8
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	60b9      	str	r1, [r7, #8]
 801033e:	ed87 0a01 	vstr	s0, [r7, #4]
  MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8010342:	1d3b      	adds	r3, r7, #4
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	68b9      	ldr	r1, [r7, #8]
 8010348:	4807      	ldr	r0, [pc, #28]	; (8010368 <MotionFX_manager_run+0x34>)
 801034a:	f009 fa1d 	bl	8019788 <MotionFX_propagate>
  MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 801034e:	1d3b      	adds	r3, r7, #4
 8010350:	2200      	movs	r2, #0
 8010352:	9200      	str	r2, [sp, #0]
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	68b9      	ldr	r1, [r7, #8]
 8010358:	4803      	ldr	r0, [pc, #12]	; (8010368 <MotionFX_manager_run+0x34>)
 801035a:	f009 fa05 	bl	8019768 <MotionFX_update>
}
 801035e:	bf00      	nop
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	20001578 	.word	0x20001578

0801036c <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f009 fe3e 	bl	8019ff8 <MotionFX_GetLibVersion>
 801037c:	4603      	mov	r3, r0
 801037e:	461a      	mov	r2, r3
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	601a      	str	r2, [r3, #0]
}
 8010384:	bf00      	nop
 8010386:	3708      	adds	r7, #8
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}

0801038c <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f009 fbd6 	bl	8019b48 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 801039c:	6838      	ldr	r0, [r7, #0]
 801039e:	f009 fde5 	bl	8019f6c <MotionFX_MagCal_getParams>
}
 80103a2:	bf00      	nop
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b082      	sub	sp, #8
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 80103b2:	2101      	movs	r1, #1
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f009 fb37 	bl	8019a28 <MotionFX_MagCal_init>
}
 80103ba:	bf00      	nop
 80103bc:	3708      	adds	r7, #8
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 80103c2:	b580      	push	{r7, lr}
 80103c4:	b082      	sub	sp, #8
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 80103ca:	2100      	movs	r1, #0
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f009 fb2b 	bl	8019a28 <MotionFX_MagCal_init>
}
 80103d2:	bf00      	nop
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}
	...

080103dc <DataHist_parameters>:
 80103dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80103e2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80103e6:	7020      	strb	r0, [r4, #0]
 80103e8:	6808      	ldr	r0, [r1, #0]
 80103ea:	6060      	str	r0, [r4, #4]
 80103ec:	6848      	ldr	r0, [r1, #4]
 80103ee:	60a0      	str	r0, [r4, #8]
 80103f0:	6888      	ldr	r0, [r1, #8]
 80103f2:	60e0      	str	r0, [r4, #12]
 80103f4:	68c8      	ldr	r0, [r1, #12]
 80103f6:	6120      	str	r0, [r4, #16]
 80103f8:	6908      	ldr	r0, [r1, #16]
 80103fa:	6160      	str	r0, [r4, #20]
 80103fc:	6948      	ldr	r0, [r1, #20]
 80103fe:	61a0      	str	r0, [r4, #24]
 8010400:	6988      	ldr	r0, [r1, #24]
 8010402:	61e0      	str	r0, [r4, #28]
 8010404:	69c8      	ldr	r0, [r1, #28]
 8010406:	6220      	str	r0, [r4, #32]
 8010408:	6a09      	ldr	r1, [r1, #32]
 801040a:	6261      	str	r1, [r4, #36]	; 0x24
 801040c:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 8010410:	8811      	ldrh	r1, [r2, #0]
 8010412:	edd2 7a01 	vldr	s15, [r2, #4]
 8010416:	8521      	strh	r1, [r4, #40]	; 0x28
 8010418:	f102 0e80 	add.w	lr, r2, #128	; 0x80
 801041c:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8010420:	2700      	movs	r7, #0
 8010422:	f1ae 0278 	sub.w	r2, lr, #120	; 0x78
 8010426:	4641      	mov	r1, r8
 8010428:	f852 0b04 	ldr.w	r0, [r2], #4
 801042c:	f841 0b04 	str.w	r0, [r1], #4
 8010430:	4572      	cmp	r2, lr
 8010432:	d1f9      	bne.n	8010428 <DataHist_parameters+0x4c>
 8010434:	371e      	adds	r7, #30
 8010436:	2f5a      	cmp	r7, #90	; 0x5a
 8010438:	f108 0878 	add.w	r8, r8, #120	; 0x78
 801043c:	f102 0e78 	add.w	lr, r2, #120	; 0x78
 8010440:	d1ef      	bne.n	8010422 <DataHist_parameters+0x46>
 8010442:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
 8010446:	881a      	ldrh	r2, [r3, #0]
 8010448:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801044c:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 8010450:	f103 0e80 	add.w	lr, r3, #128	; 0x80
 8010454:	f504 77d0 	add.w	r7, r4, #416	; 0x1a0
 8010458:	2000      	movs	r0, #0
 801045a:	f1ae 0378 	sub.w	r3, lr, #120	; 0x78
 801045e:	463a      	mov	r2, r7
 8010460:	f853 1b04 	ldr.w	r1, [r3], #4
 8010464:	f842 1b04 	str.w	r1, [r2], #4
 8010468:	4573      	cmp	r3, lr
 801046a:	d1f9      	bne.n	8010460 <DataHist_parameters+0x84>
 801046c:	301e      	adds	r0, #30
 801046e:	285a      	cmp	r0, #90	; 0x5a
 8010470:	f107 0778 	add.w	r7, r7, #120	; 0x78
 8010474:	f103 0e78 	add.w	lr, r3, #120	; 0x78
 8010478:	d1ef      	bne.n	801045a <DataHist_parameters+0x7e>
 801047a:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 801047e:	f8bc 3000 	ldrh.w	r3, [ip]
 8010482:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8010486:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 801048a:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 801048e:	f504 7e44 	add.w	lr, r4, #784	; 0x310
 8010492:	2000      	movs	r0, #0
 8010494:	f1ac 0378 	sub.w	r3, ip, #120	; 0x78
 8010498:	4672      	mov	r2, lr
 801049a:	f853 1b04 	ldr.w	r1, [r3], #4
 801049e:	f842 1b04 	str.w	r1, [r2], #4
 80104a2:	4563      	cmp	r3, ip
 80104a4:	d1f9      	bne.n	801049a <DataHist_parameters+0xbe>
 80104a6:	301e      	adds	r0, #30
 80104a8:	285a      	cmp	r0, #90	; 0x5a
 80104aa:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 80104ae:	f103 0c78 	add.w	ip, r3, #120	; 0x78
 80104b2:	d1ef      	bne.n	8010494 <DataHist_parameters+0xb8>
 80104b4:	f8c4 730c 	str.w	r7, [r4, #780]	; 0x30c
 80104b8:	8833      	ldrh	r3, [r6, #0]
 80104ba:	6877      	ldr	r7, [r6, #4]
 80104bc:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 80104c0:	f106 0080 	add.w	r0, r6, #128	; 0x80
 80104c4:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 80104c8:	2600      	movs	r6, #0
 80104ca:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 80104ce:	4662      	mov	r2, ip
 80104d0:	f853 1b04 	ldr.w	r1, [r3], #4
 80104d4:	f842 1b04 	str.w	r1, [r2], #4
 80104d8:	4283      	cmp	r3, r0
 80104da:	d1f9      	bne.n	80104d0 <DataHist_parameters+0xf4>
 80104dc:	361e      	adds	r6, #30
 80104de:	2e5a      	cmp	r6, #90	; 0x5a
 80104e0:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 80104e4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80104e8:	d1ef      	bne.n	80104ca <DataHist_parameters+0xee>
 80104ea:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 80104ee:	69aa      	ldr	r2, [r5, #24]
 80104f0:	605f      	str	r7, [r3, #4]
 80104f2:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 80104f6:	7829      	ldrb	r1, [r5, #0]
 80104f8:	f884 15e8 	strb.w	r1, [r4, #1512]	; 0x5e8
 80104fc:	619a      	str	r2, [r3, #24]
 80104fe:	6869      	ldr	r1, [r5, #4]
 8010500:	6059      	str	r1, [r3, #4]
 8010502:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 8010506:	68a9      	ldr	r1, [r5, #8]
 8010508:	6011      	str	r1, [r2, #0]
 801050a:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 801050e:	68e9      	ldr	r1, [r5, #12]
 8010510:	6011      	str	r1, [r2, #0]
 8010512:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 8010516:	6929      	ldr	r1, [r5, #16]
 8010518:	6011      	str	r1, [r2, #0]
 801051a:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 801051e:	6969      	ldr	r1, [r5, #20]
 8010520:	6011      	str	r1, [r2, #0]
 8010522:	69e9      	ldr	r1, [r5, #28]
 8010524:	61d9      	str	r1, [r3, #28]
 8010526:	f504 62c1 	add.w	r2, r4, #1544	; 0x608
 801052a:	6a2b      	ldr	r3, [r5, #32]
 801052c:	6013      	str	r3, [r2, #0]
 801052e:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 8010532:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8010534:	601a      	str	r2, [r3, #0]
 8010536:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 801053a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801053c:	601a      	str	r2, [r3, #0]
 801053e:	f204 6414 	addw	r4, r4, #1556	; 0x614
 8010542:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010544:	6023      	str	r3, [r4, #0]
 8010546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801054a:	bf00      	nop

0801054c <rotVect>:
 801054c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8010550:	ed92 7a01 	vldr	s14, [r2, #4]
 8010554:	ed92 6a00 	vldr	s12, [r2]
 8010558:	ee07 3a90 	vmov	s15, r3
 801055c:	f991 3000 	ldrsb.w	r3, [r1]
 8010560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010564:	ee06 3a90 	vmov	s13, r3
 8010568:	ee67 7a87 	vmul.f32	s15, s15, s14
 801056c:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8010570:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010574:	ee07 3a10 	vmov	s14, r3
 8010578:	eee6 7a86 	vfma.f32	s15, s13, s12
 801057c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010580:	edd2 6a02 	vldr	s13, [r2, #8]
 8010584:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010588:	edc0 7a00 	vstr	s15, [r0]
 801058c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8010590:	ed92 7a01 	vldr	s14, [r2, #4]
 8010594:	ed92 6a00 	vldr	s12, [r2]
 8010598:	ee07 3a90 	vmov	s15, r3
 801059c:	f991 3003 	ldrsb.w	r3, [r1, #3]
 80105a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80105a4:	ee06 3a90 	vmov	s13, r3
 80105a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105ac:	f991 3005 	ldrsb.w	r3, [r1, #5]
 80105b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80105b4:	ee07 3a10 	vmov	s14, r3
 80105b8:	eee6 7a86 	vfma.f32	s15, s13, s12
 80105bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80105c0:	edd2 6a02 	vldr	s13, [r2, #8]
 80105c4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80105c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80105cc:	f991 3007 	ldrsb.w	r3, [r1, #7]
 80105d0:	ed92 7a01 	vldr	s14, [r2, #4]
 80105d4:	ed92 6a00 	vldr	s12, [r2]
 80105d8:	ee07 3a90 	vmov	s15, r3
 80105dc:	f991 3006 	ldrsb.w	r3, [r1, #6]
 80105e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80105e4:	ee06 3a90 	vmov	s13, r3
 80105e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80105f0:	f991 3008 	ldrsb.w	r3, [r1, #8]
 80105f4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80105f8:	ee07 3a10 	vmov	s14, r3
 80105fc:	edd2 6a02 	vldr	s13, [r2, #8]
 8010600:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010604:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010608:	edc0 7a02 	vstr	s15, [r0, #8]
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop

08010610 <findAxis>:
 8010610:	f990 3000 	ldrsb.w	r3, [r0]
 8010614:	2b01      	cmp	r3, #1
 8010616:	d027      	beq.n	8010668 <findAxis+0x58>
 8010618:	3301      	adds	r3, #1
 801061a:	d00e      	beq.n	801063a <findAxis+0x2a>
 801061c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8010620:	2b01      	cmp	r3, #1
 8010622:	d053      	beq.n	80106cc <findAxis+0xbc>
 8010624:	3301      	adds	r3, #1
 8010626:	d048      	beq.n	80106ba <findAxis+0xaa>
 8010628:	f990 3006 	ldrsb.w	r3, [r0, #6]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d053      	beq.n	80106d8 <findAxis+0xc8>
 8010630:	3301      	adds	r3, #1
 8010632:	d104      	bne.n	801063e <findAxis+0x2e>
 8010634:	2364      	movs	r3, #100	; 0x64
 8010636:	700b      	strb	r3, [r1, #0]
 8010638:	e001      	b.n	801063e <findAxis+0x2e>
 801063a:	2377      	movs	r3, #119	; 0x77
 801063c:	700b      	strb	r3, [r1, #0]
 801063e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010642:	2b01      	cmp	r3, #1
 8010644:	d016      	beq.n	8010674 <findAxis+0x64>
 8010646:	3301      	adds	r3, #1
 8010648:	d02e      	beq.n	80106a8 <findAxis+0x98>
 801064a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 801064e:	2b01      	cmp	r3, #1
 8010650:	d039      	beq.n	80106c6 <findAxis+0xb6>
 8010652:	3301      	adds	r3, #1
 8010654:	d034      	beq.n	80106c0 <findAxis+0xb0>
 8010656:	f990 3007 	ldrsb.w	r3, [r0, #7]
 801065a:	2b01      	cmp	r3, #1
 801065c:	d03f      	beq.n	80106de <findAxis+0xce>
 801065e:	3301      	adds	r3, #1
 8010660:	d10a      	bne.n	8010678 <findAxis+0x68>
 8010662:	2364      	movs	r3, #100	; 0x64
 8010664:	704b      	strb	r3, [r1, #1]
 8010666:	e007      	b.n	8010678 <findAxis+0x68>
 8010668:	2365      	movs	r3, #101	; 0x65
 801066a:	700b      	strb	r3, [r1, #0]
 801066c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010670:	2b01      	cmp	r3, #1
 8010672:	d1e8      	bne.n	8010646 <findAxis+0x36>
 8010674:	2365      	movs	r3, #101	; 0x65
 8010676:	704b      	strb	r3, [r1, #1]
 8010678:	f990 3002 	ldrsb.w	r3, [r0, #2]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d010      	beq.n	80106a2 <findAxis+0x92>
 8010680:	3301      	adds	r3, #1
 8010682:	d014      	beq.n	80106ae <findAxis+0x9e>
 8010684:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8010688:	2b01      	cmp	r3, #1
 801068a:	d022      	beq.n	80106d2 <findAxis+0xc2>
 801068c:	3301      	adds	r3, #1
 801068e:	d011      	beq.n	80106b4 <findAxis+0xa4>
 8010690:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010694:	2b01      	cmp	r3, #1
 8010696:	d025      	beq.n	80106e4 <findAxis+0xd4>
 8010698:	3301      	adds	r3, #1
 801069a:	bf04      	itt	eq
 801069c:	2364      	moveq	r3, #100	; 0x64
 801069e:	708b      	strbeq	r3, [r1, #2]
 80106a0:	4770      	bx	lr
 80106a2:	2365      	movs	r3, #101	; 0x65
 80106a4:	708b      	strb	r3, [r1, #2]
 80106a6:	4770      	bx	lr
 80106a8:	2377      	movs	r3, #119	; 0x77
 80106aa:	704b      	strb	r3, [r1, #1]
 80106ac:	e7e4      	b.n	8010678 <findAxis+0x68>
 80106ae:	2377      	movs	r3, #119	; 0x77
 80106b0:	708b      	strb	r3, [r1, #2]
 80106b2:	4770      	bx	lr
 80106b4:	2373      	movs	r3, #115	; 0x73
 80106b6:	708b      	strb	r3, [r1, #2]
 80106b8:	4770      	bx	lr
 80106ba:	2373      	movs	r3, #115	; 0x73
 80106bc:	700b      	strb	r3, [r1, #0]
 80106be:	e7be      	b.n	801063e <findAxis+0x2e>
 80106c0:	2373      	movs	r3, #115	; 0x73
 80106c2:	704b      	strb	r3, [r1, #1]
 80106c4:	e7d8      	b.n	8010678 <findAxis+0x68>
 80106c6:	236e      	movs	r3, #110	; 0x6e
 80106c8:	704b      	strb	r3, [r1, #1]
 80106ca:	e7d5      	b.n	8010678 <findAxis+0x68>
 80106cc:	236e      	movs	r3, #110	; 0x6e
 80106ce:	700b      	strb	r3, [r1, #0]
 80106d0:	e7b5      	b.n	801063e <findAxis+0x2e>
 80106d2:	236e      	movs	r3, #110	; 0x6e
 80106d4:	708b      	strb	r3, [r1, #2]
 80106d6:	4770      	bx	lr
 80106d8:	2375      	movs	r3, #117	; 0x75
 80106da:	700b      	strb	r3, [r1, #0]
 80106dc:	e7af      	b.n	801063e <findAxis+0x2e>
 80106de:	2375      	movs	r3, #117	; 0x75
 80106e0:	704b      	strb	r3, [r1, #1]
 80106e2:	e7c9      	b.n	8010678 <findAxis+0x68>
 80106e4:	2375      	movs	r3, #117	; 0x75
 80106e6:	708b      	strb	r3, [r1, #2]
 80106e8:	4770      	bx	lr
 80106ea:	bf00      	nop
 80106ec:	0000      	movs	r0, r0
	...

080106f0 <findDirection>:
 80106f0:	b5d0      	push	{r4, r6, r7, lr}
 80106f2:	ed2d 8b04 	vpush	{d8-d9}
 80106f6:	eef0 8ac0 	vabs.f32	s17, s0
 80106fa:	eeb0 8ae0 	vabs.f32	s16, s1
 80106fe:	eef4 8ac8 	vcmpe.f32	s17, s16
 8010702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010706:	4604      	mov	r4, r0
 8010708:	eeb0 9ac1 	vabs.f32	s18, s2
 801070c:	dd36      	ble.n	801077c <findDirection+0x8c>
 801070e:	eef4 8ac9 	vcmpe.f32	s17, s18
 8010712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010716:	dd31      	ble.n	801077c <findDirection+0x8c>
 8010718:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010720:	ee18 0a90 	vmov	r0, s17
 8010724:	f340 8094 	ble.w	8010850 <findDirection+0x160>
 8010728:	f7ef ff0e 	bl	8000548 <__aeabi_f2d>
 801072c:	4606      	mov	r6, r0
 801072e:	ee18 0a10 	vmov	r0, s16
 8010732:	460f      	mov	r7, r1
 8010734:	f7ef ff08 	bl	8000548 <__aeabi_f2d>
 8010738:	a387      	add	r3, pc, #540	; (adr r3, 8010958 <findDirection+0x268>)
 801073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073e:	f7ef ff5b 	bl	80005f8 <__aeabi_dmul>
 8010742:	4602      	mov	r2, r0
 8010744:	460b      	mov	r3, r1
 8010746:	4630      	mov	r0, r6
 8010748:	4639      	mov	r1, r7
 801074a:	f7f0 f9e5 	bl	8000b18 <__aeabi_dcmpgt>
 801074e:	b188      	cbz	r0, 8010774 <findDirection+0x84>
 8010750:	ee19 0a10 	vmov	r0, s18
 8010754:	f7ef fef8 	bl	8000548 <__aeabi_f2d>
 8010758:	a37f      	add	r3, pc, #508	; (adr r3, 8010958 <findDirection+0x268>)
 801075a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075e:	f7ef ff4b 	bl	80005f8 <__aeabi_dmul>
 8010762:	4602      	mov	r2, r0
 8010764:	460b      	mov	r3, r1
 8010766:	4630      	mov	r0, r6
 8010768:	4639      	mov	r1, r7
 801076a:	f7f0 f9d5 	bl	8000b18 <__aeabi_dcmpgt>
 801076e:	2800      	cmp	r0, #0
 8010770:	bf18      	it	ne
 8010772:	2404      	movne	r4, #4
 8010774:	ecbd 8b04 	vpop	{d8-d9}
 8010778:	4620      	mov	r0, r4
 801077a:	bdd0      	pop	{r4, r6, r7, pc}
 801077c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8010780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010784:	dd32      	ble.n	80107ec <findDirection+0xfc>
 8010786:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 801078a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801078e:	ee18 0a10 	vmov	r0, s16
 8010792:	f340 8086 	ble.w	80108a2 <findDirection+0x1b2>
 8010796:	f7ef fed7 	bl	8000548 <__aeabi_f2d>
 801079a:	4606      	mov	r6, r0
 801079c:	ee18 0a90 	vmov	r0, s17
 80107a0:	460f      	mov	r7, r1
 80107a2:	f7ef fed1 	bl	8000548 <__aeabi_f2d>
 80107a6:	a36c      	add	r3, pc, #432	; (adr r3, 8010958 <findDirection+0x268>)
 80107a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ac:	f7ef ff24 	bl	80005f8 <__aeabi_dmul>
 80107b0:	4602      	mov	r2, r0
 80107b2:	460b      	mov	r3, r1
 80107b4:	4630      	mov	r0, r6
 80107b6:	4639      	mov	r1, r7
 80107b8:	f7f0 f9ae 	bl	8000b18 <__aeabi_dcmpgt>
 80107bc:	2800      	cmp	r0, #0
 80107be:	d0d9      	beq.n	8010774 <findDirection+0x84>
 80107c0:	ee19 0a10 	vmov	r0, s18
 80107c4:	f7ef fec0 	bl	8000548 <__aeabi_f2d>
 80107c8:	a363      	add	r3, pc, #396	; (adr r3, 8010958 <findDirection+0x268>)
 80107ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ce:	f7ef ff13 	bl	80005f8 <__aeabi_dmul>
 80107d2:	4602      	mov	r2, r0
 80107d4:	460b      	mov	r3, r1
 80107d6:	4630      	mov	r0, r6
 80107d8:	4639      	mov	r1, r7
 80107da:	f7f0 f99d 	bl	8000b18 <__aeabi_dcmpgt>
 80107de:	ecbd 8b04 	vpop	{d8-d9}
 80107e2:	2800      	cmp	r0, #0
 80107e4:	bf18      	it	ne
 80107e6:	2401      	movne	r4, #1
 80107e8:	4620      	mov	r0, r4
 80107ea:	bdd0      	pop	{r4, r6, r7, pc}
 80107ec:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80107f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f4:	ee19 0a10 	vmov	r0, s18
 80107f8:	dd7f      	ble.n	80108fa <findDirection+0x20a>
 80107fa:	f7ef fea5 	bl	8000548 <__aeabi_f2d>
 80107fe:	4606      	mov	r6, r0
 8010800:	ee18 0a10 	vmov	r0, s16
 8010804:	460f      	mov	r7, r1
 8010806:	f7ef fe9f 	bl	8000548 <__aeabi_f2d>
 801080a:	a353      	add	r3, pc, #332	; (adr r3, 8010958 <findDirection+0x268>)
 801080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010810:	f7ef fef2 	bl	80005f8 <__aeabi_dmul>
 8010814:	4602      	mov	r2, r0
 8010816:	460b      	mov	r3, r1
 8010818:	4630      	mov	r0, r6
 801081a:	4639      	mov	r1, r7
 801081c:	f7f0 f97c 	bl	8000b18 <__aeabi_dcmpgt>
 8010820:	2800      	cmp	r0, #0
 8010822:	d0a7      	beq.n	8010774 <findDirection+0x84>
 8010824:	ee18 0a90 	vmov	r0, s17
 8010828:	f7ef fe8e 	bl	8000548 <__aeabi_f2d>
 801082c:	a34a      	add	r3, pc, #296	; (adr r3, 8010958 <findDirection+0x268>)
 801082e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010832:	f7ef fee1 	bl	80005f8 <__aeabi_dmul>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	4630      	mov	r0, r6
 801083c:	4639      	mov	r1, r7
 801083e:	f7f0 f96b 	bl	8000b18 <__aeabi_dcmpgt>
 8010842:	ecbd 8b04 	vpop	{d8-d9}
 8010846:	2800      	cmp	r0, #0
 8010848:	bf18      	it	ne
 801084a:	2400      	movne	r4, #0
 801084c:	4620      	mov	r0, r4
 801084e:	bdd0      	pop	{r4, r6, r7, pc}
 8010850:	f7ef fe7a 	bl	8000548 <__aeabi_f2d>
 8010854:	4606      	mov	r6, r0
 8010856:	ee18 0a10 	vmov	r0, s16
 801085a:	460f      	mov	r7, r1
 801085c:	f7ef fe74 	bl	8000548 <__aeabi_f2d>
 8010860:	a33d      	add	r3, pc, #244	; (adr r3, 8010958 <findDirection+0x268>)
 8010862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010866:	f7ef fec7 	bl	80005f8 <__aeabi_dmul>
 801086a:	4602      	mov	r2, r0
 801086c:	460b      	mov	r3, r1
 801086e:	4630      	mov	r0, r6
 8010870:	4639      	mov	r1, r7
 8010872:	f7f0 f951 	bl	8000b18 <__aeabi_dcmpgt>
 8010876:	2800      	cmp	r0, #0
 8010878:	f43f af7c 	beq.w	8010774 <findDirection+0x84>
 801087c:	ee19 0a10 	vmov	r0, s18
 8010880:	f7ef fe62 	bl	8000548 <__aeabi_f2d>
 8010884:	a334      	add	r3, pc, #208	; (adr r3, 8010958 <findDirection+0x268>)
 8010886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088a:	f7ef feb5 	bl	80005f8 <__aeabi_dmul>
 801088e:	4602      	mov	r2, r0
 8010890:	460b      	mov	r3, r1
 8010892:	4630      	mov	r0, r6
 8010894:	4639      	mov	r1, r7
 8010896:	f7f0 f93f 	bl	8000b18 <__aeabi_dcmpgt>
 801089a:	2800      	cmp	r0, #0
 801089c:	bf18      	it	ne
 801089e:	2405      	movne	r4, #5
 80108a0:	e768      	b.n	8010774 <findDirection+0x84>
 80108a2:	f7ef fe51 	bl	8000548 <__aeabi_f2d>
 80108a6:	4606      	mov	r6, r0
 80108a8:	ee18 0a90 	vmov	r0, s17
 80108ac:	460f      	mov	r7, r1
 80108ae:	f7ef fe4b 	bl	8000548 <__aeabi_f2d>
 80108b2:	a329      	add	r3, pc, #164	; (adr r3, 8010958 <findDirection+0x268>)
 80108b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b8:	f7ef fe9e 	bl	80005f8 <__aeabi_dmul>
 80108bc:	4602      	mov	r2, r0
 80108be:	460b      	mov	r3, r1
 80108c0:	4630      	mov	r0, r6
 80108c2:	4639      	mov	r1, r7
 80108c4:	f7f0 f928 	bl	8000b18 <__aeabi_dcmpgt>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	f43f af53 	beq.w	8010774 <findDirection+0x84>
 80108ce:	ee19 0a10 	vmov	r0, s18
 80108d2:	f7ef fe39 	bl	8000548 <__aeabi_f2d>
 80108d6:	a320      	add	r3, pc, #128	; (adr r3, 8010958 <findDirection+0x268>)
 80108d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108dc:	f7ef fe8c 	bl	80005f8 <__aeabi_dmul>
 80108e0:	4602      	mov	r2, r0
 80108e2:	460b      	mov	r3, r1
 80108e4:	4630      	mov	r0, r6
 80108e6:	4639      	mov	r1, r7
 80108e8:	f7f0 f916 	bl	8000b18 <__aeabi_dcmpgt>
 80108ec:	ecbd 8b04 	vpop	{d8-d9}
 80108f0:	2800      	cmp	r0, #0
 80108f2:	bf18      	it	ne
 80108f4:	2403      	movne	r4, #3
 80108f6:	4620      	mov	r0, r4
 80108f8:	bdd0      	pop	{r4, r6, r7, pc}
 80108fa:	f7ef fe25 	bl	8000548 <__aeabi_f2d>
 80108fe:	4606      	mov	r6, r0
 8010900:	ee18 0a10 	vmov	r0, s16
 8010904:	460f      	mov	r7, r1
 8010906:	f7ef fe1f 	bl	8000548 <__aeabi_f2d>
 801090a:	a313      	add	r3, pc, #76	; (adr r3, 8010958 <findDirection+0x268>)
 801090c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010910:	f7ef fe72 	bl	80005f8 <__aeabi_dmul>
 8010914:	4602      	mov	r2, r0
 8010916:	460b      	mov	r3, r1
 8010918:	4630      	mov	r0, r6
 801091a:	4639      	mov	r1, r7
 801091c:	f7f0 f8fc 	bl	8000b18 <__aeabi_dcmpgt>
 8010920:	2800      	cmp	r0, #0
 8010922:	f43f af27 	beq.w	8010774 <findDirection+0x84>
 8010926:	ee18 0a90 	vmov	r0, s17
 801092a:	f7ef fe0d 	bl	8000548 <__aeabi_f2d>
 801092e:	a30a      	add	r3, pc, #40	; (adr r3, 8010958 <findDirection+0x268>)
 8010930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010934:	f7ef fe60 	bl	80005f8 <__aeabi_dmul>
 8010938:	4602      	mov	r2, r0
 801093a:	460b      	mov	r3, r1
 801093c:	4630      	mov	r0, r6
 801093e:	4639      	mov	r1, r7
 8010940:	f7f0 f8ea 	bl	8000b18 <__aeabi_dcmpgt>
 8010944:	ecbd 8b04 	vpop	{d8-d9}
 8010948:	2800      	cmp	r0, #0
 801094a:	bf18      	it	ne
 801094c:	2402      	movne	r4, #2
 801094e:	4620      	mov	r0, r4
 8010950:	bdd0      	pop	{r4, r6, r7, pc}
 8010952:	bf00      	nop
 8010954:	f3af 8000 	nop.w
 8010958:	e0000000 	.word	0xe0000000
 801095c:	3ff6b851 	.word	0x3ff6b851

08010960 <updateOrientation>:
 8010960:	2300      	movs	r3, #0
 8010962:	6003      	str	r3, [r0, #0]
 8010964:	6043      	str	r3, [r0, #4]
 8010966:	7203      	strb	r3, [r0, #8]
 8010968:	f891 c000 	ldrb.w	ip, [r1]
 801096c:	784a      	ldrb	r2, [r1, #1]
 801096e:	f1ac 0342 	sub.w	r3, ip, #66	; 0x42
 8010972:	2b17      	cmp	r3, #23
 8010974:	bf98      	it	ls
 8010976:	f10c 0c20 	addls.w	ip, ip, #32
 801097a:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 801097e:	bf98      	it	ls
 8010980:	fa5f fc8c 	uxtbls.w	ip, ip
 8010984:	2b17      	cmp	r3, #23
 8010986:	788b      	ldrb	r3, [r1, #2]
 8010988:	bf98      	it	ls
 801098a:	3220      	addls	r2, #32
 801098c:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 8010990:	bf98      	it	ls
 8010992:	b2d2      	uxtbls	r2, r2
 8010994:	2917      	cmp	r1, #23
 8010996:	bf98      	it	ls
 8010998:	3320      	addls	r3, #32
 801099a:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 801099e:	bf98      	it	ls
 80109a0:	b2db      	uxtbls	r3, r3
 80109a2:	f1bc 0f13 	cmp.w	ip, #19
 80109a6:	d80d      	bhi.n	80109c4 <updateOrientation+0x64>
 80109a8:	e8df f00c 	tbb	[pc, ip]
 80109ac:	0c0c0a32 	.word	0x0c0c0a32
 80109b0:	0c0c0c0c 	.word	0x0c0c0c0c
 80109b4:	0c350c0c 	.word	0x0c350c0c
 80109b8:	380c0c0c 	.word	0x380c0c0c
 80109bc:	3e0c3b0c 	.word	0x3e0c3b0c
 80109c0:	2101      	movs	r1, #1
 80109c2:	7001      	strb	r1, [r0, #0]
 80109c4:	3a64      	subs	r2, #100	; 0x64
 80109c6:	2a13      	cmp	r2, #19
 80109c8:	d80d      	bhi.n	80109e6 <updateOrientation+0x86>
 80109ca:	e8df f002 	tbb	[pc, r2]
 80109ce:	0a30      	.short	0x0a30
 80109d0:	0c0c0c0c 	.word	0x0c0c0c0c
 80109d4:	0c0c0c0c 	.word	0x0c0c0c0c
 80109d8:	0c0c0c33 	.word	0x0c0c0c33
 80109dc:	390c360c 	.word	0x390c360c
 80109e0:	3c0c      	.short	0x3c0c
 80109e2:	2201      	movs	r2, #1
 80109e4:	7042      	strb	r2, [r0, #1]
 80109e6:	3b64      	subs	r3, #100	; 0x64
 80109e8:	2b13      	cmp	r3, #19
 80109ea:	d80d      	bhi.n	8010a08 <updateOrientation+0xa8>
 80109ec:	e8df f003 	tbb	[pc, r3]
 80109f0:	0c0c2e0a 	.word	0x0c0c2e0a
 80109f4:	0c0c0c0c 	.word	0x0c0c0c0c
 80109f8:	0c310c0c 	.word	0x0c310c0c
 80109fc:	340c0c0c 	.word	0x340c0c0c
 8010a00:	0d0c370c 	.word	0x0d0c370c
 8010a04:	23ff      	movs	r3, #255	; 0xff
 8010a06:	7203      	strb	r3, [r0, #8]
 8010a08:	4770      	bx	lr
 8010a0a:	23ff      	movs	r3, #255	; 0xff
 8010a0c:	7083      	strb	r3, [r0, #2]
 8010a0e:	4770      	bx	lr
 8010a10:	21ff      	movs	r1, #255	; 0xff
 8010a12:	7181      	strb	r1, [r0, #6]
 8010a14:	e7d6      	b.n	80109c4 <updateOrientation+0x64>
 8010a16:	2101      	movs	r1, #1
 8010a18:	70c1      	strb	r1, [r0, #3]
 8010a1a:	e7d3      	b.n	80109c4 <updateOrientation+0x64>
 8010a1c:	21ff      	movs	r1, #255	; 0xff
 8010a1e:	70c1      	strb	r1, [r0, #3]
 8010a20:	e7d0      	b.n	80109c4 <updateOrientation+0x64>
 8010a22:	2101      	movs	r1, #1
 8010a24:	7181      	strb	r1, [r0, #6]
 8010a26:	e7cd      	b.n	80109c4 <updateOrientation+0x64>
 8010a28:	21ff      	movs	r1, #255	; 0xff
 8010a2a:	7001      	strb	r1, [r0, #0]
 8010a2c:	e7ca      	b.n	80109c4 <updateOrientation+0x64>
 8010a2e:	22ff      	movs	r2, #255	; 0xff
 8010a30:	71c2      	strb	r2, [r0, #7]
 8010a32:	e7d8      	b.n	80109e6 <updateOrientation+0x86>
 8010a34:	2201      	movs	r2, #1
 8010a36:	7102      	strb	r2, [r0, #4]
 8010a38:	e7d5      	b.n	80109e6 <updateOrientation+0x86>
 8010a3a:	22ff      	movs	r2, #255	; 0xff
 8010a3c:	7102      	strb	r2, [r0, #4]
 8010a3e:	e7d2      	b.n	80109e6 <updateOrientation+0x86>
 8010a40:	2201      	movs	r2, #1
 8010a42:	71c2      	strb	r2, [r0, #7]
 8010a44:	e7cf      	b.n	80109e6 <updateOrientation+0x86>
 8010a46:	22ff      	movs	r2, #255	; 0xff
 8010a48:	7042      	strb	r2, [r0, #1]
 8010a4a:	e7cc      	b.n	80109e6 <updateOrientation+0x86>
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	7083      	strb	r3, [r0, #2]
 8010a50:	4770      	bx	lr
 8010a52:	2301      	movs	r3, #1
 8010a54:	7143      	strb	r3, [r0, #5]
 8010a56:	4770      	bx	lr
 8010a58:	23ff      	movs	r3, #255	; 0xff
 8010a5a:	7143      	strb	r3, [r0, #5]
 8010a5c:	4770      	bx	lr
 8010a5e:	2301      	movs	r3, #1
 8010a60:	7203      	strb	r3, [r0, #8]
 8010a62:	4770      	bx	lr

08010a64 <qmult>:
 8010a64:	ed91 2a03 	vldr	s4, [r1, #12]
 8010a68:	ed90 3a01 	vldr	s6, [r0, #4]
 8010a6c:	edd0 5a02 	vldr	s11, [r0, #8]
 8010a70:	edd1 4a01 	vldr	s9, [r1, #4]
 8010a74:	ed90 4a00 	vldr	s8, [r0]
 8010a78:	ed91 5a02 	vldr	s10, [r1, #8]
 8010a7c:	edd1 3a00 	vldr	s7, [r1]
 8010a80:	edd0 2a03 	vldr	s5, [r0, #12]
 8010a84:	ee25 6aa4 	vmul.f32	s12, s11, s9
 8010a88:	ee62 6a03 	vmul.f32	s13, s4, s6
 8010a8c:	ee22 7a25 	vmul.f32	s14, s4, s11
 8010a90:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 8010a94:	eea4 6a02 	vfma.f32	s12, s8, s4
 8010a98:	eee4 6a05 	vfma.f32	s13, s8, s10
 8010a9c:	eea3 7a23 	vfma.f32	s14, s6, s7
 8010aa0:	eee4 7a63 	vfms.f32	s15, s8, s7
 8010aa4:	eea2 6aa3 	vfma.f32	s12, s5, s7
 8010aa8:	eee4 6aa2 	vfma.f32	s13, s9, s5
 8010aac:	eea5 7a22 	vfma.f32	s14, s10, s5
 8010ab0:	eee2 7a22 	vfma.f32	s15, s4, s5
 8010ab4:	eea3 6a45 	vfms.f32	s12, s6, s10
 8010ab8:	eee5 6ae3 	vfms.f32	s13, s11, s7
 8010abc:	eea4 7a64 	vfms.f32	s14, s8, s9
 8010ac0:	eee5 7a65 	vfms.f32	s15, s10, s11
 8010ac4:	ed82 6a00 	vstr	s12, [r2]
 8010ac8:	edc2 6a01 	vstr	s13, [r2, #4]
 8010acc:	ed82 7a02 	vstr	s14, [r2, #8]
 8010ad0:	edc2 7a03 	vstr	s15, [r2, #12]
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <dataDerivative5>:
 8010ad8:	ed90 7a01 	vldr	s14, [r0, #4]
 8010adc:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8010ae0:	edd0 6a04 	vldr	s13, [r0, #16]
 8010ae4:	ed90 6a00 	vldr	s12, [r0]
 8010ae8:	ed90 4a02 	vldr	s8, [r0, #8]
 8010aec:	edd0 4a09 	vldr	s9, [r0, #36]	; 0x24
 8010af0:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
 8010af4:	eee7 7a05 	vfma.f32	s15, s14, s10
 8010af8:	ed90 7a03 	vldr	s14, [r0, #12]
 8010afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010b00:	edd0 6a0b 	vldr	s13, [r0, #44]	; 0x2c
 8010b04:	ee96 7a05 	vfnms.f32	s14, s12, s10
 8010b08:	eee4 6a05 	vfma.f32	s13, s8, s10
 8010b0c:	ed90 6a0d 	vldr	s12, [r0, #52]	; 0x34
 8010b10:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
 8010b14:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8010b18:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010b1c:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010b20:	eeb0 6a66 	vmov.f32	s12, s13
 8010b24:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8010b60 <dataDerivative5+0x88>
 8010b28:	eea5 7a25 	vfma.f32	s14, s10, s11
 8010b2c:	ee60 6a26 	vmul.f32	s13, s0, s13
 8010b30:	ed90 5a05 	vldr	s10, [r0, #20]
 8010b34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b38:	ee36 6a45 	vsub.f32	s12, s12, s10
 8010b3c:	ed90 5a0e 	vldr	s10, [r0, #56]	; 0x38
 8010b40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010b44:	eea5 6a25 	vfma.f32	s12, s10, s11
 8010b48:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8010b4c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010b50:	eea7 0a07 	vfma.f32	s0, s14, s14
 8010b54:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8010b58:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop
 8010b60:	3dcccccd 	.word	0x3dcccccd

08010b64 <b_dcm2q>:
 8010b64:	ed90 5a08 	vldr	s10, [r0, #32]
 8010b68:	edd0 7a00 	vldr	s15, [r0]
 8010b6c:	edd0 6a04 	vldr	s13, [r0, #16]
 8010b70:	ee37 7a85 	vadd.f32	s14, s15, s10
 8010b74:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8010b78:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010b7c:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 8010b80:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8010b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b88:	bfc5      	ittet	gt
 8010b8a:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 8010b8e:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 8010b92:	eddf 5a43 	vldrle	s11, [pc, #268]	; 8010ca0 <b_dcm2q+0x13c>
 8010b96:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 8010b9a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8010b9e:	ee35 6a47 	vsub.f32	s12, s10, s14
 8010ba2:	ee35 7a07 	vadd.f32	s14, s10, s14
 8010ba6:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8010baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bae:	bfc5      	ittet	gt
 8010bb0:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 8010bb4:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 8010bb8:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 8010ca0 <b_dcm2q+0x13c>
 8010bbc:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 8010bc0:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 8010bc4:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8010bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bcc:	dd5b      	ble.n	8010c86 <b_dcm2q+0x122>
 8010bce:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8010bd2:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010bd6:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8010bda:	eef1 4ac7 	vsqrt.f32	s9, s14
 8010bde:	ee64 4a84 	vmul.f32	s9, s9, s8
 8010be2:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010be6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010bea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010bee:	edd0 6a07 	vldr	s13, [r0, #28]
 8010bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfa:	bf85      	ittet	hi
 8010bfc:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8010c00:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8010c04:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 8010ca0 <b_dcm2q+0x13c>
 8010c08:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 8010c0c:	edd0 7a05 	vldr	s15, [r0, #20]
 8010c10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1c:	d43c      	bmi.n	8010c98 <b_dcm2q+0x134>
 8010c1e:	bfd8      	it	le
 8010c20:	ee27 7a27 	vmulle.f32	s14, s14, s15
 8010c24:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010c2c:	ed81 7a00 	vstr	s14, [r1]
 8010c30:	edd0 7a06 	vldr	s15, [r0, #24]
 8010c34:	ed90 7a02 	vldr	s14, [r0, #8]
 8010c38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c44:	d425      	bmi.n	8010c92 <b_dcm2q+0x12e>
 8010c46:	bfd8      	it	le
 8010c48:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 8010c4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010c50:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8010c54:	edc1 5a01 	vstr	s11, [r1, #4]
 8010c58:	edd0 7a01 	vldr	s15, [r0, #4]
 8010c5c:	ed90 7a03 	vldr	s14, [r0, #12]
 8010c60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c6c:	d40e      	bmi.n	8010c8c <b_dcm2q+0x128>
 8010c6e:	bfd8      	it	le
 8010c70:	ee26 6a27 	vmulle.f32	s12, s12, s15
 8010c74:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010c78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8010c7c:	edc1 4a03 	vstr	s9, [r1, #12]
 8010c80:	ed81 6a02 	vstr	s12, [r1, #8]
 8010c84:	4770      	bx	lr
 8010c86:	eddf 4a06 	vldr	s9, [pc, #24]	; 8010ca0 <b_dcm2q+0x13c>
 8010c8a:	e7aa      	b.n	8010be2 <b_dcm2q+0x7e>
 8010c8c:	eeb1 6a46 	vneg.f32	s12, s12
 8010c90:	e7f0      	b.n	8010c74 <b_dcm2q+0x110>
 8010c92:	eef1 5a65 	vneg.f32	s11, s11
 8010c96:	e7d9      	b.n	8010c4c <b_dcm2q+0xe8>
 8010c98:	eeb1 7a47 	vneg.f32	s14, s14
 8010c9c:	e7c2      	b.n	8010c24 <b_dcm2q+0xc0>
 8010c9e:	bf00      	nop
 8010ca0:	00000000 	.word	0x00000000

08010ca4 <getRotationMatrix>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	4605      	mov	r5, r0
 8010caa:	460c      	mov	r4, r1
 8010cac:	4618      	mov	r0, r3
 8010cae:	2224      	movs	r2, #36	; 0x24
 8010cb0:	2100      	movs	r1, #0
 8010cb2:	f009 ff6a 	bl	801ab8a <memset>
 8010cb6:	edd5 5a00 	vldr	s11, [r5]
 8010cba:	ed9f 3a49 	vldr	s6, [pc, #292]	; 8010de0 <getRotationMatrix+0x13c>
 8010cbe:	edc0 5a02 	vstr	s11, [r0, #8]
 8010cc2:	edd5 4a01 	vldr	s9, [r5, #4]
 8010cc6:	edc0 4a05 	vstr	s9, [r0, #20]
 8010cca:	ed95 5a02 	vldr	s10, [r5, #8]
 8010cce:	ed80 5a08 	vstr	s10, [r0, #32]
 8010cd2:	ed94 4a02 	vldr	s8, [r4, #8]
 8010cd6:	edd4 3a01 	vldr	s7, [r4, #4]
 8010cda:	ed94 6a00 	vldr	s12, [r4]
 8010cde:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 8010ce2:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 8010ce6:	eee3 6a85 	vfma.f32	s13, s7, s10
 8010cea:	4603      	mov	r3, r0
 8010cec:	eee6 7a24 	vfma.f32	s15, s12, s9
 8010cf0:	ee25 7a46 	vnmul.f32	s14, s10, s12
 8010cf4:	eeb0 6ae6 	vabs.f32	s12, s13
 8010cf8:	eeb4 6ac3 	vcmpe.f32	s12, s6
 8010cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d00:	eea4 7a25 	vfma.f32	s14, s8, s11
 8010d04:	bfdc      	itt	le
 8010d06:	ee86 4a83 	vdivle.f32	s8, s13, s6
 8010d0a:	eeb0 6a43 	vmovle.f32	s12, s6
 8010d0e:	eef0 3ac7 	vabs.f32	s7, s14
 8010d12:	eeb4 6ae3 	vcmpe.f32	s12, s7
 8010d16:	bfd4      	ite	le
 8010d18:	ee24 4a04 	vmulle.f32	s8, s8, s8
 8010d1c:	eeb7 4a00 	vmovgt.f32	s8, #112	; 0x3f800000  1.0
 8010d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d24:	ed80 7a03 	vstr	s14, [r0, #12]
 8010d28:	edc0 7a06 	vstr	s15, [r0, #24]
 8010d2c:	d43f      	bmi.n	8010dae <getRotationMatrix+0x10a>
 8010d2e:	eec7 3a06 	vdiv.f32	s7, s14, s12
 8010d32:	eea3 4aa3 	vfma.f32	s8, s7, s7
 8010d36:	eeb0 3a44 	vmov.f32	s6, s8
 8010d3a:	eeb0 4ae7 	vabs.f32	s8, s15
 8010d3e:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8010d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d46:	d543      	bpl.n	8010dd0 <getRotationMatrix+0x12c>
 8010d48:	eec6 2a04 	vdiv.f32	s5, s12, s8
 8010d4c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8010d50:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8010d54:	eeb0 6a44 	vmov.f32	s12, s8
 8010d58:	eee3 3a22 	vfma.f32	s7, s6, s5
 8010d5c:	eeb1 4ae3 	vsqrt.f32	s8, s7
 8010d60:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8010d64:	ee24 6a06 	vmul.f32	s12, s8, s12
 8010d68:	ee83 4a86 	vdiv.f32	s8, s7, s12
 8010d6c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010d70:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010d74:	ee66 6a84 	vmul.f32	s13, s13, s8
 8010d78:	ee65 3a47 	vnmul.f32	s7, s10, s14
 8010d7c:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 8010d80:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 8010d84:	eee7 3aa4 	vfma.f32	s7, s15, s9
 8010d88:	eef0 4a44 	vmov.f32	s9, s8
 8010d8c:	eee6 4a85 	vfma.f32	s9, s13, s10
 8010d90:	eea7 6a25 	vfma.f32	s12, s14, s11
 8010d94:	edc3 6a00 	vstr	s13, [r3]
 8010d98:	ed83 7a03 	vstr	s14, [r3, #12]
 8010d9c:	edc3 7a06 	vstr	s15, [r3, #24]
 8010da0:	edc3 3a01 	vstr	s7, [r3, #4]
 8010da4:	edc3 4a04 	vstr	s9, [r3, #16]
 8010da8:	ed83 6a07 	vstr	s12, [r3, #28]
 8010dac:	bd38      	pop	{r3, r4, r5, pc}
 8010dae:	eec6 2a23 	vdiv.f32	s5, s12, s7
 8010db2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8010db6:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8010dba:	eeb0 6a63 	vmov.f32	s12, s7
 8010dbe:	eea4 3a22 	vfma.f32	s6, s8, s5
 8010dc2:	eeb0 4ae7 	vabs.f32	s8, s15
 8010dc6:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8010dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dce:	d4bb      	bmi.n	8010d48 <getRotationMatrix+0xa4>
 8010dd0:	ee87 4a86 	vdiv.f32	s8, s15, s12
 8010dd4:	eef0 3a43 	vmov.f32	s7, s6
 8010dd8:	eee4 3a04 	vfma.f32	s7, s8, s8
 8010ddc:	e7be      	b.n	8010d5c <getRotationMatrix+0xb8>
 8010dde:	bf00      	nop
 8010de0:	00000000 	.word	0x00000000

08010de4 <kf_update>:
 8010de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de8:	ed2d 8b10 	vpush	{d8-d15}
 8010dec:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
 8010df0:	3901      	subs	r1, #1
 8010df2:	f8dd 4490 	ldr.w	r4, [sp, #1168]	; 0x490
 8010df6:	9303      	str	r3, [sp, #12]
 8010df8:	ed94 2a00 	vldr	s4, [r4]
 8010dfc:	edd4 2a01 	vldr	s5, [r4, #4]
 8010e00:	ed94 3a02 	vldr	s6, [r4, #8]
 8010e04:	edd4 3a03 	vldr	s7, [r4, #12]
 8010e08:	ed94 4a04 	vldr	s8, [r4, #16]
 8010e0c:	edd4 4a05 	vldr	s9, [r4, #20]
 8010e10:	ed94 5a06 	vldr	s10, [r4, #24]
 8010e14:	edd4 5a07 	vldr	s11, [r4, #28]
 8010e18:	ed94 6a08 	vldr	s12, [r4, #32]
 8010e1c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8010e20:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8010e24:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010e28:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8010e9c <kf_update+0xb8>
 8010e2c:	9104      	str	r1, [sp, #16]
 8010e2e:	ab0b      	add	r3, sp, #44	; 0x2c
 8010e30:	ee22 2a02 	vmul.f32	s4, s4, s4
 8010e34:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8010e38:	ee23 3a03 	vmul.f32	s6, s6, s6
 8010e3c:	ee63 3aa3 	vmul.f32	s7, s7, s7
 8010e40:	ee24 4a04 	vmul.f32	s8, s8, s8
 8010e44:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8010e48:	ee25 5a05 	vmul.f32	s10, s10, s10
 8010e4c:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8010e50:	ee26 6a06 	vmul.f32	s12, s12, s12
 8010e54:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8010e58:	ee27 7a07 	vmul.f32	s14, s14, s14
 8010e5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010e60:	9302      	str	r3, [sp, #8]
 8010e62:	2300      	movs	r3, #0
 8010e64:	4606      	mov	r6, r0
 8010e66:	9200      	str	r2, [sp, #0]
 8010e68:	ed8d 2a0b 	vstr	s4, [sp, #44]	; 0x2c
 8010e6c:	edcd 2a0c 	vstr	s5, [sp, #48]	; 0x30
 8010e70:	ed8d 3a0d 	vstr	s6, [sp, #52]	; 0x34
 8010e74:	edcd 3a0e 	vstr	s7, [sp, #56]	; 0x38
 8010e78:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 8010e7c:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
 8010e80:	ed8d 5a11 	vstr	s10, [sp, #68]	; 0x44
 8010e84:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 8010e88:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8010e8c:	edcd 6a14 	vstr	s13, [sp, #80]	; 0x50
 8010e90:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 8010e94:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 8010e98:	9301      	str	r3, [sp, #4]
 8010e9a:	e010      	b.n	8010ebe <kf_update+0xda>
 8010e9c:	00000000 	.word	0x00000000
 8010ea0:	9a00      	ldr	r2, [sp, #0]
 8010ea2:	9b01      	ldr	r3, [sp, #4]
 8010ea4:	3204      	adds	r2, #4
 8010ea6:	9200      	str	r2, [sp, #0]
 8010ea8:	9a02      	ldr	r2, [sp, #8]
 8010eaa:	3204      	adds	r2, #4
 8010eac:	9202      	str	r2, [sp, #8]
 8010eae:	9a03      	ldr	r2, [sp, #12]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	3204      	adds	r2, #4
 8010eb4:	2b0c      	cmp	r3, #12
 8010eb6:	9301      	str	r3, [sp, #4]
 8010eb8:	9203      	str	r2, [sp, #12]
 8010eba:	f000 857b 	beq.w	80119b4 <kf_update+0xbd0>
 8010ebe:	9a04      	ldr	r2, [sp, #16]
 8010ec0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010ec4:	9204      	str	r2, [sp, #16]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d0ea      	beq.n	8010ea0 <kf_update+0xbc>
 8010eca:	9a03      	ldr	r2, [sp, #12]
 8010ecc:	ed8d 8a17 	vstr	s16, [sp, #92]	; 0x5c
 8010ed0:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8010ed4:	ac17      	add	r4, sp, #92	; 0x5c
 8010ed6:	edd2 da00 	vldr	s27, [r2]
 8010eda:	ed92 ea0c 	vldr	s28, [r2, #48]	; 0x30
 8010ede:	edd2 ea18 	vldr	s29, [r2, #96]	; 0x60
 8010ee2:	ed92 fa24 	vldr	s30, [r2, #144]	; 0x90
 8010ee6:	edd2 fa30 	vldr	s31, [r2, #192]	; 0xc0
 8010eea:	edd2 6a3c 	vldr	s13, [r2, #240]	; 0xf0
 8010eee:	ed92 6a48 	vldr	s12, [r2, #288]	; 0x120
 8010ef2:	edd2 5a54 	vldr	s11, [r2, #336]	; 0x150
 8010ef6:	ed92 5a60 	vldr	s10, [r2, #384]	; 0x180
 8010efa:	9305      	str	r3, [sp, #20]
 8010efc:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
 8010f00:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
 8010f04:	ed8d 8a1a 	vstr	s16, [sp, #104]	; 0x68
 8010f08:	ed8d 8a1b 	vstr	s16, [sp, #108]	; 0x6c
 8010f0c:	ed8d 8a1c 	vstr	s16, [sp, #112]	; 0x70
 8010f10:	ed8d 8a1d 	vstr	s16, [sp, #116]	; 0x74
 8010f14:	ed8d 8a1e 	vstr	s16, [sp, #120]	; 0x78
 8010f18:	ed8d 8a1f 	vstr	s16, [sp, #124]	; 0x7c
 8010f1c:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8010f20:	4622      	mov	r2, r4
 8010f22:	ecb3 7a01 	vldmia	r3!, {s14}
 8010f26:	ecf2 7a01 	vldmia	r2!, {s15}
 8010f2a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f32:	d006      	beq.n	8010f42 <kf_update+0x15e>
 8010f34:	eef5 da40 	vcmp.f32	s27, #0.0
 8010f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f3c:	bf18      	it	ne
 8010f3e:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 8010f42:	ed93 7a08 	vldr	s14, [r3, #32]
 8010f46:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4e:	d006      	beq.n	8010f5e <kf_update+0x17a>
 8010f50:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8010f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f58:	bf18      	it	ne
 8010f5a:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8010f5e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8010f62:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6a:	d006      	beq.n	8010f7a <kf_update+0x196>
 8010f6c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8010f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f74:	bf18      	it	ne
 8010f76:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8010f7a:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8010f7e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f86:	d006      	beq.n	8010f96 <kf_update+0x1b2>
 8010f88:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8010f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f90:	bf18      	it	ne
 8010f92:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8010f96:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8010f9a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa2:	d006      	beq.n	8010fb2 <kf_update+0x1ce>
 8010fa4:	eef5 fa40 	vcmp.f32	s31, #0.0
 8010fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fac:	bf18      	it	ne
 8010fae:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8010fb2:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8010fb6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fbe:	d006      	beq.n	8010fce <kf_update+0x1ea>
 8010fc0:	eef5 6a40 	vcmp.f32	s13, #0.0
 8010fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc8:	bf18      	it	ne
 8010fca:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8010fce:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8010fd2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fda:	d006      	beq.n	8010fea <kf_update+0x206>
 8010fdc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8010fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe4:	bf18      	it	ne
 8010fe6:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8010fea:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8010fee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff6:	d006      	beq.n	8011006 <kf_update+0x222>
 8010ff8:	eef5 5a40 	vcmp.f32	s11, #0.0
 8010ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011000:	bf18      	it	ne
 8011002:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8011006:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 801100a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011012:	d006      	beq.n	8011022 <kf_update+0x23e>
 8011014:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8011018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801101c:	bf18      	it	ne
 801101e:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8011022:	4299      	cmp	r1, r3
 8011024:	ed42 7a01 	vstr	s15, [r2, #-4]
 8011028:	f47f af7b 	bne.w	8010f22 <kf_update+0x13e>
 801102c:	eef5 da40 	vcmp.f32	s27, #0.0
 8011030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011034:	eddd ba17 	vldr	s23, [sp, #92]	; 0x5c
 8011038:	f040 8492 	bne.w	8011960 <kf_update+0xb7c>
 801103c:	eef0 7a6d 	vmov.f32	s15, s27
 8011040:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8011044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011048:	ed9d ca18 	vldr	s24, [sp, #96]	; 0x60
 801104c:	d006      	beq.n	801105c <kf_update+0x278>
 801104e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8011052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011056:	bf18      	it	ne
 8011058:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 801105c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8011060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011064:	ed9d aa19 	vldr	s20, [sp, #100]	; 0x64
 8011068:	d006      	beq.n	8011078 <kf_update+0x294>
 801106a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011072:	bf18      	it	ne
 8011074:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 8011078:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011080:	ed9d da1a 	vldr	s26, [sp, #104]	; 0x68
 8011084:	d006      	beq.n	8011094 <kf_update+0x2b0>
 8011086:	eeb5 da40 	vcmp.f32	s26, #0.0
 801108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801108e:	bf18      	it	ne
 8011090:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 8011094:	eef5 fa40 	vcmp.f32	s31, #0.0
 8011098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801109c:	eddd ca1b 	vldr	s25, [sp, #108]	; 0x6c
 80110a0:	d006      	beq.n	80110b0 <kf_update+0x2cc>
 80110a2:	eef5 ca40 	vcmp.f32	s25, #0.0
 80110a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110aa:	bf18      	it	ne
 80110ac:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 80110b0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80110b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b8:	ed9d ba1c 	vldr	s22, [sp, #112]	; 0x70
 80110bc:	d006      	beq.n	80110cc <kf_update+0x2e8>
 80110be:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80110c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c6:	bf18      	it	ne
 80110c8:	eeeb 7a26 	vfmane.f32	s15, s22, s13
 80110cc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80110d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d4:	eddd aa1d 	vldr	s21, [sp, #116]	; 0x74
 80110d8:	d006      	beq.n	80110e8 <kf_update+0x304>
 80110da:	eef5 aa40 	vcmp.f32	s21, #0.0
 80110de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e2:	bf18      	it	ne
 80110e4:	eeea 7a86 	vfmane.f32	s15, s21, s12
 80110e8:	eef5 5a40 	vcmp.f32	s11, #0.0
 80110ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f0:	eddd 9a1e 	vldr	s19, [sp, #120]	; 0x78
 80110f4:	d006      	beq.n	8011104 <kf_update+0x320>
 80110f6:	eef5 9a40 	vcmp.f32	s19, #0.0
 80110fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110fe:	bf18      	it	ne
 8011100:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 8011104:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8011108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801110c:	ed9d 9a1f 	vldr	s18, [sp, #124]	; 0x7c
 8011110:	d006      	beq.n	8011120 <kf_update+0x33c>
 8011112:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801111a:	bf18      	it	ne
 801111c:	eee9 7a05 	vfmane.f32	s15, s18, s10
 8011120:	9b02      	ldr	r3, [sp, #8]
 8011122:	ed93 7a00 	vldr	s14, [r3]
 8011126:	9b01      	ldr	r3, [sp, #4]
 8011128:	ee77 7a87 	vadd.f32	s15, s15, s14
 801112c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8011130:	ee84 7aa7 	vdiv.f32	s14, s9, s15
 8011134:	2b05      	cmp	r3, #5
 8011136:	ee6b ba87 	vmul.f32	s23, s23, s14
 801113a:	ee2c ca07 	vmul.f32	s24, s24, s14
 801113e:	ee2a aa07 	vmul.f32	s20, s20, s14
 8011142:	ee2d da07 	vmul.f32	s26, s26, s14
 8011146:	ee67 ca2c 	vmul.f32	s25, s14, s25
 801114a:	ee27 ba0b 	vmul.f32	s22, s14, s22
 801114e:	ee67 aa2a 	vmul.f32	s21, s14, s21
 8011152:	ee69 9a87 	vmul.f32	s19, s19, s14
 8011156:	ee29 9a07 	vmul.f32	s18, s18, s14
 801115a:	edcd ba17 	vstr	s23, [sp, #92]	; 0x5c
 801115e:	ed8d ca18 	vstr	s24, [sp, #96]	; 0x60
 8011162:	ed8d aa19 	vstr	s20, [sp, #100]	; 0x64
 8011166:	ed8d da1a 	vstr	s26, [sp, #104]	; 0x68
 801116a:	edcd ca1b 	vstr	s25, [sp, #108]	; 0x6c
 801116e:	ed8d ba1c 	vstr	s22, [sp, #112]	; 0x70
 8011172:	edcd aa1d 	vstr	s21, [sp, #116]	; 0x74
 8011176:	edcd 9a1e 	vstr	s19, [sp, #120]	; 0x78
 801117a:	ed8d 9a1f 	vstr	s18, [sp, #124]	; 0x7c
 801117e:	f340 83eb 	ble.w	8011958 <kf_update+0xb74>
 8011182:	eef5 da40 	vcmp.f32	s27, #0.0
 8011186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118a:	f000 8456 	beq.w	8011a3a <kf_update+0xc56>
 801118e:	edd6 7a01 	vldr	s15, [r6, #4]
 8011192:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801119a:	f040 8477 	bne.w	8011a8c <kf_update+0xca8>
 801119e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80111a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a6:	d008      	beq.n	80111ba <kf_update+0x3d6>
 80111a8:	ed96 7a02 	vldr	s14, [r6, #8]
 80111ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80111b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b4:	bf18      	it	ne
 80111b6:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 80111ba:	eef5 ea40 	vcmp.f32	s29, #0.0
 80111be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c2:	d008      	beq.n	80111d6 <kf_update+0x3f2>
 80111c4:	ed96 7a03 	vldr	s14, [r6, #12]
 80111c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80111cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d0:	bf18      	it	ne
 80111d2:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 80111d6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80111da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111de:	d008      	beq.n	80111f2 <kf_update+0x40e>
 80111e0:	ed96 7a04 	vldr	s14, [r6, #16]
 80111e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80111e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ec:	bf18      	it	ne
 80111ee:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 80111f2:	eef5 fa40 	vcmp.f32	s31, #0.0
 80111f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fa:	d008      	beq.n	801120e <kf_update+0x42a>
 80111fc:	ed96 7a05 	vldr	s14, [r6, #20]
 8011200:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011208:	bf18      	it	ne
 801120a:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 801120e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011216:	d008      	beq.n	801122a <kf_update+0x446>
 8011218:	ed96 7a06 	vldr	s14, [r6, #24]
 801121c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011224:	bf18      	it	ne
 8011226:	eee7 7a26 	vfmane.f32	s15, s14, s13
 801122a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011232:	d008      	beq.n	8011246 <kf_update+0x462>
 8011234:	ed96 7a07 	vldr	s14, [r6, #28]
 8011238:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011240:	bf18      	it	ne
 8011242:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8011246:	eef5 5a40 	vcmp.f32	s11, #0.0
 801124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801124e:	d008      	beq.n	8011262 <kf_update+0x47e>
 8011250:	ed96 7a08 	vldr	s14, [r6, #32]
 8011254:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801125c:	bf18      	it	ne
 801125e:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8011262:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8011266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126a:	d008      	beq.n	801127e <kf_update+0x49a>
 801126c:	ed96 7a09 	vldr	s14, [r6, #36]	; 0x24
 8011270:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011278:	bf18      	it	ne
 801127a:	eee7 7a05 	vfmane.f32	s15, s14, s10
 801127e:	9b00      	ldr	r3, [sp, #0]
 8011280:	edd3 8a00 	vldr	s17, [r3]
 8011284:	ee78 8ae7 	vsub.f32	s17, s17, s15
 8011288:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801128c:	2100      	movs	r1, #0
 801128e:	a868      	add	r0, sp, #416	; 0x1a0
 8011290:	ed8d 5a09 	vstr	s10, [sp, #36]	; 0x24
 8011294:	edcd 5a08 	vstr	s11, [sp, #32]
 8011298:	ed8d 6a07 	vstr	s12, [sp, #28]
 801129c:	edcd 6a06 	vstr	s13, [sp, #24]
 80112a0:	f009 fc73 	bl	801ab8a <memset>
 80112a4:	ab68      	add	r3, sp, #416	; 0x1a0
 80112a6:	ed9d 5a09 	vldr	s10, [sp, #36]	; 0x24
 80112aa:	eddd 5a08 	vldr	s11, [sp, #32]
 80112ae:	ed9d 6a07 	vldr	s12, [sp, #28]
 80112b2:	eddd 6a06 	vldr	s13, [sp, #24]
 80112b6:	a971      	add	r1, sp, #452	; 0x1c4
 80112b8:	461a      	mov	r2, r3
 80112ba:	ecf4 7a01 	vldmia	r4!, {s15}
 80112be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80112c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c6:	d062      	beq.n	801138e <kf_update+0x5aa>
 80112c8:	eef5 da40 	vcmp.f32	s27, #0.0
 80112cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d0:	d005      	beq.n	80112de <kf_update+0x4fa>
 80112d2:	ed92 7a00 	vldr	s14, [r2]
 80112d6:	eea7 7aad 	vfma.f32	s14, s15, s27
 80112da:	ed82 7a00 	vstr	s14, [r2]
 80112de:	eeb5 ea40 	vcmp.f32	s28, #0.0
 80112e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e6:	d005      	beq.n	80112f4 <kf_update+0x510>
 80112e8:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 80112ec:	eea7 7a8e 	vfma.f32	s14, s15, s28
 80112f0:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 80112f4:	eef5 ea40 	vcmp.f32	s29, #0.0
 80112f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fc:	d005      	beq.n	801130a <kf_update+0x526>
 80112fe:	ed92 7a12 	vldr	s14, [r2, #72]	; 0x48
 8011302:	eea7 7aae 	vfma.f32	s14, s15, s29
 8011306:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
 801130a:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011312:	d005      	beq.n	8011320 <kf_update+0x53c>
 8011314:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 8011318:	eea7 7a8f 	vfma.f32	s14, s15, s30
 801131c:	ed82 7a1b 	vstr	s14, [r2, #108]	; 0x6c
 8011320:	eef5 fa40 	vcmp.f32	s31, #0.0
 8011324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011328:	d005      	beq.n	8011336 <kf_update+0x552>
 801132a:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
 801132e:	eea7 7aaf 	vfma.f32	s14, s15, s31
 8011332:	ed82 7a24 	vstr	s14, [r2, #144]	; 0x90
 8011336:	eef5 6a40 	vcmp.f32	s13, #0.0
 801133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133e:	d005      	beq.n	801134c <kf_update+0x568>
 8011340:	ed92 7a2d 	vldr	s14, [r2, #180]	; 0xb4
 8011344:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011348:	ed82 7a2d 	vstr	s14, [r2, #180]	; 0xb4
 801134c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011354:	d005      	beq.n	8011362 <kf_update+0x57e>
 8011356:	ed92 7a36 	vldr	s14, [r2, #216]	; 0xd8
 801135a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801135e:	ed82 7a36 	vstr	s14, [r2, #216]	; 0xd8
 8011362:	eef5 5a40 	vcmp.f32	s11, #0.0
 8011366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801136a:	d005      	beq.n	8011378 <kf_update+0x594>
 801136c:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
 8011370:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8011374:	ed82 7a3f 	vstr	s14, [r2, #252]	; 0xfc
 8011378:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011380:	d005      	beq.n	801138e <kf_update+0x5aa>
 8011382:	ed92 7a48 	vldr	s14, [r2, #288]	; 0x120
 8011386:	eea7 7a85 	vfma.f32	s14, s15, s10
 801138a:	ed82 7a48 	vstr	s14, [r2, #288]	; 0x120
 801138e:	3204      	adds	r2, #4
 8011390:	4291      	cmp	r1, r2
 8011392:	d192      	bne.n	80112ba <kf_update+0x4d6>
 8011394:	afb9      	add	r7, sp, #740	; 0x2e4
 8011396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801139a:	a868      	add	r0, sp, #416	; 0x1a0
 801139c:	463a      	mov	r2, r7
 801139e:	f04f 0b02 	mov.w	fp, #2
 80113a2:	f04f 0e03 	mov.w	lr, #3
 80113a6:	f04f 0c04 	mov.w	ip, #4
 80113aa:	f04f 0a05 	mov.w	sl, #5
 80113ae:	f04f 0906 	mov.w	r9, #6
 80113b2:	f04f 0807 	mov.w	r8, #7
 80113b6:	2408      	movs	r4, #8
 80113b8:	2100      	movs	r1, #0
 80113ba:	9306      	str	r3, [sp, #24]
 80113bc:	e07b      	b.n	80114b6 <kf_update+0x6d2>
 80113be:	edd0 7a00 	vldr	s15, [r0]
 80113c2:	ed82 8a01 	vstr	s16, [r2, #4]
 80113c6:	eef1 7a67 	vneg.f32	s15, s15
 80113ca:	2901      	cmp	r1, #1
 80113cc:	edc0 7a00 	vstr	s15, [r0]
 80113d0:	f1a4 0507 	sub.w	r5, r4, #7
 80113d4:	f000 8110 	beq.w	80115f8 <kf_update+0x814>
 80113d8:	ab68      	add	r3, sp, #416	; 0x1a0
 80113da:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80113de:	edd5 7a00 	vldr	s15, [r5]
 80113e2:	ed82 8a02 	vstr	s16, [r2, #8]
 80113e6:	eef1 7a67 	vneg.f32	s15, s15
 80113ea:	2902      	cmp	r1, #2
 80113ec:	edc5 7a00 	vstr	s15, [r5]
 80113f0:	f000 80ef 	beq.w	80115d2 <kf_update+0x7ee>
 80113f4:	ab68      	add	r3, sp, #416	; 0x1a0
 80113f6:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 80113fa:	edd5 7a00 	vldr	s15, [r5]
 80113fe:	ed82 8a03 	vstr	s16, [r2, #12]
 8011402:	eef1 7a67 	vneg.f32	s15, s15
 8011406:	2903      	cmp	r1, #3
 8011408:	edc5 7a00 	vstr	s15, [r5]
 801140c:	d176      	bne.n	80114fc <kf_update+0x718>
 801140e:	edd0 7a03 	vldr	s15, [r0, #12]
 8011412:	ed82 8a04 	vstr	s16, [r2, #16]
 8011416:	ee77 7a67 	vsub.f32	s15, s14, s15
 801141a:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 801141e:	edc0 7a03 	vstr	s15, [r0, #12]
 8011422:	edd5 7a00 	vldr	s15, [r5]
 8011426:	ed82 8a05 	vstr	s16, [r2, #20]
 801142a:	eef1 7a67 	vneg.f32	s15, s15
 801142e:	edc5 7a00 	vstr	s15, [r5]
 8011432:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8011436:	edd5 7a00 	vldr	s15, [r5]
 801143a:	ed82 8a06 	vstr	s16, [r2, #24]
 801143e:	eef1 7a67 	vneg.f32	s15, s15
 8011442:	edc5 7a00 	vstr	s15, [r5]
 8011446:	ab68      	add	r3, sp, #416	; 0x1a0
 8011448:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 801144c:	edd5 7a00 	vldr	s15, [r5]
 8011450:	ed82 8a07 	vstr	s16, [r2, #28]
 8011454:	eef1 7a67 	vneg.f32	s15, s15
 8011458:	2907      	cmp	r1, #7
 801145a:	edc5 7a00 	vstr	s15, [r5]
 801145e:	f040 80a4 	bne.w	80115aa <kf_update+0x7c6>
 8011462:	edd0 7a07 	vldr	s15, [r0, #28]
 8011466:	ed82 8a08 	vstr	s16, [r2, #32]
 801146a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801146e:	edc0 7a07 	vstr	s15, [r0, #28]
 8011472:	ab68      	add	r3, sp, #416	; 0x1a0
 8011474:	eb03 0584 	add.w	r5, r3, r4, lsl #2
 8011478:	edd5 7a00 	vldr	s15, [r5]
 801147c:	00a5      	lsls	r5, r4, #2
 801147e:	eef1 7a67 	vneg.f32	s15, s15
 8011482:	ab68      	add	r3, sp, #416	; 0x1a0
 8011484:	3101      	adds	r1, #1
 8011486:	441d      	add	r5, r3
 8011488:	2909      	cmp	r1, #9
 801148a:	edc5 7a00 	vstr	s15, [r5]
 801148e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8011492:	f104 0409 	add.w	r4, r4, #9
 8011496:	f100 0024 	add.w	r0, r0, #36	; 0x24
 801149a:	f108 0809 	add.w	r8, r8, #9
 801149e:	f109 0909 	add.w	r9, r9, #9
 80114a2:	f10a 0a09 	add.w	sl, sl, #9
 80114a6:	f10c 0c09 	add.w	ip, ip, #9
 80114aa:	f10e 0e09 	add.w	lr, lr, #9
 80114ae:	f10b 0b09 	add.w	fp, fp, #9
 80114b2:	f000 80d2 	beq.w	801165a <kf_update+0x876>
 80114b6:	ed82 8a00 	vstr	s16, [r2]
 80114ba:	2900      	cmp	r1, #0
 80114bc:	f47f af7f 	bne.w	80113be <kf_update+0x5da>
 80114c0:	eddd 7a68 	vldr	s15, [sp, #416]	; 0x1a0
 80114c4:	ed82 8a01 	vstr	s16, [r2, #4]
 80114c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114cc:	ab68      	add	r3, sp, #416	; 0x1a0
 80114ce:	1fe5      	subs	r5, r4, #7
 80114d0:	edc0 7a00 	vstr	s15, [r0]
 80114d4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80114d8:	edd5 7a00 	vldr	s15, [r5]
 80114dc:	ed82 8a02 	vstr	s16, [r2, #8]
 80114e0:	eef1 7a67 	vneg.f32	s15, s15
 80114e4:	edc5 7a00 	vstr	s15, [r5]
 80114e8:	ed82 8a03 	vstr	s16, [r2, #12]
 80114ec:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 80114f0:	edd5 7a00 	vldr	s15, [r5]
 80114f4:	eef1 7a67 	vneg.f32	s15, s15
 80114f8:	edc5 7a00 	vstr	s15, [r5]
 80114fc:	ab68      	add	r3, sp, #416	; 0x1a0
 80114fe:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8011502:	edd5 7a00 	vldr	s15, [r5]
 8011506:	ed82 8a04 	vstr	s16, [r2, #16]
 801150a:	eef1 7a67 	vneg.f32	s15, s15
 801150e:	2904      	cmp	r1, #4
 8011510:	edc5 7a00 	vstr	s15, [r5]
 8011514:	d02d      	beq.n	8011572 <kf_update+0x78e>
 8011516:	ab68      	add	r3, sp, #416	; 0x1a0
 8011518:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 801151c:	edd5 7a00 	vldr	s15, [r5]
 8011520:	ed82 8a05 	vstr	s16, [r2, #20]
 8011524:	eef1 7a67 	vneg.f32	s15, s15
 8011528:	2905      	cmp	r1, #5
 801152a:	edc5 7a00 	vstr	s15, [r5]
 801152e:	d077      	beq.n	8011620 <kf_update+0x83c>
 8011530:	ab68      	add	r3, sp, #416	; 0x1a0
 8011532:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8011536:	edd5 7a00 	vldr	s15, [r5]
 801153a:	ed82 8a06 	vstr	s16, [r2, #24]
 801153e:	eef1 7a67 	vneg.f32	s15, s15
 8011542:	2906      	cmp	r1, #6
 8011544:	edc5 7a00 	vstr	s15, [r5]
 8011548:	f47f af7d 	bne.w	8011446 <kf_update+0x662>
 801154c:	edd0 7a06 	vldr	s15, [r0, #24]
 8011550:	ed82 8a07 	vstr	s16, [r2, #28]
 8011554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011558:	ed82 8a08 	vstr	s16, [r2, #32]
 801155c:	edc0 7a06 	vstr	s15, [r0, #24]
 8011560:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8011564:	edd5 7a00 	vldr	s15, [r5]
 8011568:	eef1 7a67 	vneg.f32	s15, s15
 801156c:	edc5 7a00 	vstr	s15, [r5]
 8011570:	e77f      	b.n	8011472 <kf_update+0x68e>
 8011572:	edd0 7a04 	vldr	s15, [r0, #16]
 8011576:	ed82 8a05 	vstr	s16, [r2, #20]
 801157a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801157e:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8011582:	edc0 7a04 	vstr	s15, [r0, #16]
 8011586:	edd5 7a00 	vldr	s15, [r5]
 801158a:	ed82 8a06 	vstr	s16, [r2, #24]
 801158e:	eef1 7a67 	vneg.f32	s15, s15
 8011592:	edc5 7a00 	vstr	s15, [r5]
 8011596:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 801159a:	edd5 7a00 	vldr	s15, [r5]
 801159e:	ed82 8a07 	vstr	s16, [r2, #28]
 80115a2:	eef1 7a67 	vneg.f32	s15, s15
 80115a6:	edc5 7a00 	vstr	s15, [r5]
 80115aa:	ab68      	add	r3, sp, #416	; 0x1a0
 80115ac:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 80115b0:	edd5 7a00 	vldr	s15, [r5]
 80115b4:	ed82 8a08 	vstr	s16, [r2, #32]
 80115b8:	eef1 7a67 	vneg.f32	s15, s15
 80115bc:	2908      	cmp	r1, #8
 80115be:	edc5 7a00 	vstr	s15, [r5]
 80115c2:	f47f af56 	bne.w	8011472 <kf_update+0x68e>
 80115c6:	edd0 7a08 	vldr	s15, [r0, #32]
 80115ca:	00a5      	lsls	r5, r4, #2
 80115cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115d0:	e757      	b.n	8011482 <kf_update+0x69e>
 80115d2:	edd0 7a02 	vldr	s15, [r0, #8]
 80115d6:	ed82 8a03 	vstr	s16, [r2, #12]
 80115da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80115de:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 80115e2:	edc0 7a02 	vstr	s15, [r0, #8]
 80115e6:	edd5 7a00 	vldr	s15, [r5]
 80115ea:	ed82 8a04 	vstr	s16, [r2, #16]
 80115ee:	eef1 7a67 	vneg.f32	s15, s15
 80115f2:	edc5 7a00 	vstr	s15, [r5]
 80115f6:	e78e      	b.n	8011516 <kf_update+0x732>
 80115f8:	edd0 7a01 	vldr	s15, [r0, #4]
 80115fc:	ed82 8a02 	vstr	s16, [r2, #8]
 8011600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011604:	ab68      	add	r3, sp, #416	; 0x1a0
 8011606:	ed82 8a03 	vstr	s16, [r2, #12]
 801160a:	edc0 7a01 	vstr	s15, [r0, #4]
 801160e:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8011612:	edd5 7a00 	vldr	s15, [r5]
 8011616:	eef1 7a67 	vneg.f32	s15, s15
 801161a:	edc5 7a00 	vstr	s15, [r5]
 801161e:	e76d      	b.n	80114fc <kf_update+0x718>
 8011620:	edd0 7a05 	vldr	s15, [r0, #20]
 8011624:	ed82 8a06 	vstr	s16, [r2, #24]
 8011628:	ee77 7a67 	vsub.f32	s15, s14, s15
 801162c:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 8011630:	edc0 7a05 	vstr	s15, [r0, #20]
 8011634:	edd5 7a00 	vldr	s15, [r5]
 8011638:	ed82 8a07 	vstr	s16, [r2, #28]
 801163c:	eef1 7a67 	vneg.f32	s15, s15
 8011640:	edc5 7a00 	vstr	s15, [r5]
 8011644:	ed82 8a08 	vstr	s16, [r2, #32]
 8011648:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 801164c:	edd5 7a00 	vldr	s15, [r5]
 8011650:	eef1 7a67 	vneg.f32	s15, s15
 8011654:	edc5 7a00 	vstr	s15, [r5]
 8011658:	e70b      	b.n	8011472 <kf_update+0x68e>
 801165a:	9b06      	ldr	r3, [sp, #24]
 801165c:	2400      	movs	r4, #0
 801165e:	f506 70a2 	add.w	r0, r6, #324	; 0x144
 8011662:	ecf3 3a01 	vldmia	r3!, {s7}
 8011666:	ed93 4a08 	vldr	s8, [r3, #32]
 801166a:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 801166e:	ed93 5a1a 	vldr	s10, [r3, #104]	; 0x68
 8011672:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8011676:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 801167a:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 801167e:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8011682:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 8011686:	4632      	mov	r2, r6
 8011688:	4639      	mov	r1, r7
 801168a:	eef5 3a40 	vcmp.f32	s7, #0.0
 801168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011692:	d00c      	beq.n	80116ae <kf_update+0x8ca>
 8011694:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
 8011698:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a0:	d005      	beq.n	80116ae <kf_update+0x8ca>
 80116a2:	edd1 2a00 	vldr	s5, [r1]
 80116a6:	eee3 2a83 	vfma.f32	s5, s7, s6
 80116aa:	edc1 2a00 	vstr	s5, [r1]
 80116ae:	eeb5 4a40 	vcmp.f32	s8, #0.0
 80116b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b6:	d00c      	beq.n	80116d2 <kf_update+0x8ee>
 80116b8:	ed92 3a0b 	vldr	s6, [r2, #44]	; 0x2c
 80116bc:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80116c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c4:	d005      	beq.n	80116d2 <kf_update+0x8ee>
 80116c6:	edd1 2a00 	vldr	s5, [r1]
 80116ca:	eee4 2a03 	vfma.f32	s5, s8, s6
 80116ce:	edc1 2a00 	vstr	s5, [r1]
 80116d2:	eef5 4a40 	vcmp.f32	s9, #0.0
 80116d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116da:	d00c      	beq.n	80116f6 <kf_update+0x912>
 80116dc:	ed92 3a0c 	vldr	s6, [r2, #48]	; 0x30
 80116e0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80116e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116e8:	d005      	beq.n	80116f6 <kf_update+0x912>
 80116ea:	edd1 2a00 	vldr	s5, [r1]
 80116ee:	eee4 2a83 	vfma.f32	s5, s9, s6
 80116f2:	edc1 2a00 	vstr	s5, [r1]
 80116f6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80116fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fe:	d00c      	beq.n	801171a <kf_update+0x936>
 8011700:	ed92 3a0d 	vldr	s6, [r2, #52]	; 0x34
 8011704:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801170c:	d005      	beq.n	801171a <kf_update+0x936>
 801170e:	edd1 2a00 	vldr	s5, [r1]
 8011712:	eee5 2a03 	vfma.f32	s5, s10, s6
 8011716:	edc1 2a00 	vstr	s5, [r1]
 801171a:	eef5 5a40 	vcmp.f32	s11, #0.0
 801171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011722:	d00c      	beq.n	801173e <kf_update+0x95a>
 8011724:	ed92 3a0e 	vldr	s6, [r2, #56]	; 0x38
 8011728:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011730:	d005      	beq.n	801173e <kf_update+0x95a>
 8011732:	edd1 2a00 	vldr	s5, [r1]
 8011736:	eee5 2a83 	vfma.f32	s5, s11, s6
 801173a:	edc1 2a00 	vstr	s5, [r1]
 801173e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011746:	d00c      	beq.n	8011762 <kf_update+0x97e>
 8011748:	ed92 3a0f 	vldr	s6, [r2, #60]	; 0x3c
 801174c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011754:	d005      	beq.n	8011762 <kf_update+0x97e>
 8011756:	edd1 2a00 	vldr	s5, [r1]
 801175a:	eee6 2a03 	vfma.f32	s5, s12, s6
 801175e:	edc1 2a00 	vstr	s5, [r1]
 8011762:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801176a:	d00c      	beq.n	8011786 <kf_update+0x9a2>
 801176c:	ed92 3a10 	vldr	s6, [r2, #64]	; 0x40
 8011770:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011778:	d005      	beq.n	8011786 <kf_update+0x9a2>
 801177a:	edd1 2a00 	vldr	s5, [r1]
 801177e:	eee6 2a83 	vfma.f32	s5, s13, s6
 8011782:	edc1 2a00 	vstr	s5, [r1]
 8011786:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801178e:	d00c      	beq.n	80117aa <kf_update+0x9c6>
 8011790:	ed92 3a11 	vldr	s6, [r2, #68]	; 0x44
 8011794:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8011798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179c:	d005      	beq.n	80117aa <kf_update+0x9c6>
 801179e:	edd1 2a00 	vldr	s5, [r1]
 80117a2:	eee7 2a03 	vfma.f32	s5, s14, s6
 80117a6:	edc1 2a00 	vstr	s5, [r1]
 80117aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80117ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117b2:	d00c      	beq.n	80117ce <kf_update+0x9ea>
 80117b4:	ed92 3a12 	vldr	s6, [r2, #72]	; 0x48
 80117b8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80117bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c0:	d005      	beq.n	80117ce <kf_update+0x9ea>
 80117c2:	edd1 2a00 	vldr	s5, [r1]
 80117c6:	eee7 2a83 	vfma.f32	s5, s15, s6
 80117ca:	edc1 2a00 	vstr	s5, [r1]
 80117ce:	3224      	adds	r2, #36	; 0x24
 80117d0:	4282      	cmp	r2, r0
 80117d2:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80117d6:	f47f af58 	bne.w	801168a <kf_update+0x8a6>
 80117da:	3401      	adds	r4, #1
 80117dc:	2c09      	cmp	r4, #9
 80117de:	f107 0704 	add.w	r7, r7, #4
 80117e2:	f47f af3e 	bne.w	8011662 <kf_update+0x87e>
 80117e6:	9805      	ldr	r0, [sp, #20]
 80117e8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80117ec:	a9b9      	add	r1, sp, #740	; 0x2e4
 80117ee:	f009 fa54 	bl	801ac9a <memcpy>
 80117f2:	eef5 ba40 	vcmp.f32	s23, #0.0
 80117f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117fa:	d05f      	beq.n	80118bc <kf_update+0xad8>
 80117fc:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011804:	d05a      	beq.n	80118bc <kf_update+0xad8>
 8011806:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801180e:	ee68 baab 	vmul.f32	s23, s17, s23
 8011812:	f000 812c 	beq.w	8011a6e <kf_update+0xc8a>
 8011816:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801181e:	ee2c ca28 	vmul.f32	s24, s24, s17
 8011822:	f000 8121 	beq.w	8011a68 <kf_update+0xc84>
 8011826:	eeb5 da40 	vcmp.f32	s26, #0.0
 801182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182e:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8011832:	f000 8114 	beq.w	8011a5e <kf_update+0xc7a>
 8011836:	eef5 ca40 	vcmp.f32	s25, #0.0
 801183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801183e:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8011842:	eeb0 aa4c 	vmov.f32	s20, s24
 8011846:	f040 812f 	bne.w	8011aa8 <kf_update+0xcc4>
 801184a:	eef0 ca47 	vmov.f32	s25, s14
 801184e:	eeb0 da67 	vmov.f32	s26, s15
 8011852:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8011856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185a:	d065      	beq.n	8011928 <kf_update+0xb44>
 801185c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011864:	f000 80f0 	beq.w	8011a48 <kf_update+0xc64>
 8011868:	eef0 7a48 	vmov.f32	s15, s16
 801186c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8011870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011874:	ee28 7a8b 	vmul.f32	s14, s17, s22
 8011878:	d17d      	bne.n	8011976 <kf_update+0xb92>
 801187a:	eef0 aa47 	vmov.f32	s21, s14
 801187e:	eeb0 ba67 	vmov.f32	s22, s15
 8011882:	eef5 9a40 	vcmp.f32	s19, #0.0
 8011886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801188a:	f000 8082 	beq.w	8011992 <kf_update+0xbae>
 801188e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011896:	f000 80da 	beq.w	8011a4e <kf_update+0xc6a>
 801189a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a2:	ee28 7aa9 	vmul.f32	s14, s17, s19
 80118a6:	eef0 7a48 	vmov.f32	s15, s16
 80118aa:	f040 812a 	bne.w	8011b02 <kf_update+0xd1e>
 80118ae:	eef0 8a49 	vmov.f32	s17, s18
 80118b2:	eef0 9a67 	vmov.f32	s19, s15
 80118b6:	eeb0 9a47 	vmov.f32	s18, s14
 80118ba:	e086      	b.n	80119ca <kf_update+0xbe6>
 80118bc:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80118c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c4:	d005      	beq.n	80118d2 <kf_update+0xaee>
 80118c6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80118ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ce:	f040 80f9 	bne.w	8011ac4 <kf_update+0xce0>
 80118d2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80118d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118da:	d071      	beq.n	80119c0 <kf_update+0xbdc>
 80118dc:	eef5 8a40 	vcmp.f32	s17, #0.0
 80118e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e4:	f040 8116 	bne.w	8011b14 <kf_update+0xd30>
 80118e8:	eeb0 aa68 	vmov.f32	s20, s17
 80118ec:	eef0 ba68 	vmov.f32	s23, s17
 80118f0:	eeb5 da40 	vcmp.f32	s26, #0.0
 80118f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f8:	d007      	beq.n	801190a <kf_update+0xb26>
 80118fa:	eef5 8a40 	vcmp.f32	s17, #0.0
 80118fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011902:	f040 80c7 	bne.w	8011a94 <kf_update+0xcb0>
 8011906:	eeb0 da68 	vmov.f32	s26, s17
 801190a:	eef5 ca40 	vcmp.f32	s25, #0.0
 801190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011912:	d09e      	beq.n	8011852 <kf_update+0xa6e>
 8011914:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191c:	f040 80f7 	bne.w	8011b0e <kf_update+0xd2a>
 8011920:	eeb0 ba68 	vmov.f32	s22, s17
 8011924:	eef0 ca68 	vmov.f32	s25, s17
 8011928:	eef5 aa40 	vcmp.f32	s21, #0.0
 801192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011930:	d0a7      	beq.n	8011882 <kf_update+0xa9e>
 8011932:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193a:	f040 80ce 	bne.w	8011ada <kf_update+0xcf6>
 801193e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8011942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011946:	f000 8087 	beq.w	8011a58 <kf_update+0xc74>
 801194a:	eeb0 9a68 	vmov.f32	s18, s17
 801194e:	eef0 9a68 	vmov.f32	s19, s17
 8011952:	eef0 aa68 	vmov.f32	s21, s17
 8011956:	e038      	b.n	80119ca <kf_update+0xbe6>
 8011958:	9b00      	ldr	r3, [sp, #0]
 801195a:	edd3 8a00 	vldr	s17, [r3]
 801195e:	e493      	b.n	8011288 <kf_update+0x4a4>
 8011960:	eef5 ba40 	vcmp.f32	s23, #0.0
 8011964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011968:	bf14      	ite	ne
 801196a:	ee6b 7aad 	vmulne.f32	s15, s23, s27
 801196e:	eef0 7a6b 	vmoveq.f32	s15, s23
 8011972:	f7ff bb65 	b.w	8011040 <kf_update+0x25c>
 8011976:	eef5 9a40 	vcmp.f32	s19, #0.0
 801197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197e:	eeb0 ba67 	vmov.f32	s22, s15
 8011982:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8011986:	f040 80b2 	bne.w	8011aee <kf_update+0xd0a>
 801198a:	eef0 9a67 	vmov.f32	s19, s15
 801198e:	eef0 aa47 	vmov.f32	s21, s14
 8011992:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199a:	d014      	beq.n	80119c6 <kf_update+0xbe2>
 801199c:	eef5 8a40 	vcmp.f32	s17, #0.0
 80119a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a4:	d04d      	beq.n	8011a42 <kf_update+0xc5e>
 80119a6:	eeb0 7a48 	vmov.f32	s14, s16
 80119aa:	ee68 8a89 	vmul.f32	s17, s17, s18
 80119ae:	eeb0 9a47 	vmov.f32	s18, s14
 80119b2:	e00a      	b.n	80119ca <kf_update+0xbe6>
 80119b4:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
 80119b8:	ecbd 8b10 	vpop	{d8-d15}
 80119bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c0:	eef0 ba4a 	vmov.f32	s23, s20
 80119c4:	e794      	b.n	80118f0 <kf_update+0xb0c>
 80119c6:	eef0 8a49 	vmov.f32	s17, s18
 80119ca:	edd6 3a01 	vldr	s7, [r6, #4]
 80119ce:	ed96 4a02 	vldr	s8, [r6, #8]
 80119d2:	edd6 4a03 	vldr	s9, [r6, #12]
 80119d6:	ed96 5a04 	vldr	s10, [r6, #16]
 80119da:	edd6 5a05 	vldr	s11, [r6, #20]
 80119de:	ed96 6a06 	vldr	s12, [r6, #24]
 80119e2:	edd6 6a07 	vldr	s13, [r6, #28]
 80119e6:	ed96 7a08 	vldr	s14, [r6, #32]
 80119ea:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
 80119ee:	ee73 baab 	vadd.f32	s23, s7, s23
 80119f2:	ee34 aa0a 	vadd.f32	s20, s8, s20
 80119f6:	ee34 da8d 	vadd.f32	s26, s9, s26
 80119fa:	ee75 ca2c 	vadd.f32	s25, s10, s25
 80119fe:	ee35 ba8b 	vadd.f32	s22, s11, s22
 8011a02:	ee76 aa2a 	vadd.f32	s21, s12, s21
 8011a06:	ee76 9aa9 	vadd.f32	s19, s13, s19
 8011a0a:	ee37 9a09 	vadd.f32	s18, s14, s18
 8011a0e:	ee77 8aa8 	vadd.f32	s17, s15, s17
 8011a12:	edc6 ba01 	vstr	s23, [r6, #4]
 8011a16:	ed86 aa02 	vstr	s20, [r6, #8]
 8011a1a:	ed86 da03 	vstr	s26, [r6, #12]
 8011a1e:	edc6 ca04 	vstr	s25, [r6, #16]
 8011a22:	ed86 ba05 	vstr	s22, [r6, #20]
 8011a26:	edc6 aa06 	vstr	s21, [r6, #24]
 8011a2a:	edc6 9a07 	vstr	s19, [r6, #28]
 8011a2e:	ed86 9a08 	vstr	s18, [r6, #32]
 8011a32:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
 8011a36:	f7ff ba33 	b.w	8010ea0 <kf_update+0xbc>
 8011a3a:	eef0 7a6d 	vmov.f32	s15, s27
 8011a3e:	f7ff bbae 	b.w	801119e <kf_update+0x3ba>
 8011a42:	eeb0 9a68 	vmov.f32	s18, s17
 8011a46:	e7c0      	b.n	80119ca <kf_update+0xbe6>
 8011a48:	eeb0 ba68 	vmov.f32	s22, s17
 8011a4c:	e76c      	b.n	8011928 <kf_update+0xb44>
 8011a4e:	eeb0 9a68 	vmov.f32	s18, s17
 8011a52:	eef0 9a68 	vmov.f32	s19, s17
 8011a56:	e7b8      	b.n	80119ca <kf_update+0xbe6>
 8011a58:	eef0 aa69 	vmov.f32	s21, s19
 8011a5c:	e799      	b.n	8011992 <kf_update+0xbae>
 8011a5e:	eeb0 da67 	vmov.f32	s26, s15
 8011a62:	eeb0 aa4c 	vmov.f32	s20, s24
 8011a66:	e750      	b.n	801190a <kf_update+0xb26>
 8011a68:	eeb0 aa4c 	vmov.f32	s20, s24
 8011a6c:	e740      	b.n	80118f0 <kf_update+0xb0c>
 8011a6e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8011a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a76:	f43f af3b 	beq.w	80118f0 <kf_update+0xb0c>
 8011a7a:	eeb5 da40 	vcmp.f32	s26, #0.0
 8011a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a82:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8011a86:	f47f aed6 	bne.w	8011836 <kf_update+0xa52>
 8011a8a:	e7e8      	b.n	8011a5e <kf_update+0xc7a>
 8011a8c:	ee67 7aad 	vmul.f32	s15, s15, s27
 8011a90:	f7ff bb85 	b.w	801119e <kf_update+0x3ba>
 8011a94:	eef5 ca40 	vcmp.f32	s25, #0.0
 8011a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9c:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8011aa0:	eef0 7a48 	vmov.f32	s15, s16
 8011aa4:	f43f aed1 	beq.w	801184a <kf_update+0xa66>
 8011aa8:	eeb0 da67 	vmov.f32	s26, s15
 8011aac:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8011ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab4:	ee68 7aac 	vmul.f32	s15, s17, s25
 8011ab8:	d126      	bne.n	8011b08 <kf_update+0xd24>
 8011aba:	eeb0 ba67 	vmov.f32	s22, s15
 8011abe:	eef0 ca47 	vmov.f32	s25, s14
 8011ac2:	e731      	b.n	8011928 <kf_update+0xb44>
 8011ac4:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8011ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011acc:	ee2c ca28 	vmul.f32	s24, s24, s17
 8011ad0:	eef0 ba48 	vmov.f32	s23, s16
 8011ad4:	f47f aea7 	bne.w	8011826 <kf_update+0xa42>
 8011ad8:	e7c6      	b.n	8011a68 <kf_update+0xc84>
 8011ada:	eef5 9a40 	vcmp.f32	s19, #0.0
 8011ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae2:	ee68 7aaa 	vmul.f32	s15, s17, s21
 8011ae6:	eeb0 7a48 	vmov.f32	s14, s16
 8011aea:	f43f af4e 	beq.w	801198a <kf_update+0xba6>
 8011aee:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af6:	eef0 aa47 	vmov.f32	s21, s14
 8011afa:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8011afe:	f43f aed6 	beq.w	80118ae <kf_update+0xaca>
 8011b02:	eef0 9a67 	vmov.f32	s19, s15
 8011b06:	e750      	b.n	80119aa <kf_update+0xbc6>
 8011b08:	eef0 ca47 	vmov.f32	s25, s14
 8011b0c:	e6ae      	b.n	801186c <kf_update+0xa88>
 8011b0e:	eeb0 7a48 	vmov.f32	s14, s16
 8011b12:	e7cb      	b.n	8011aac <kf_update+0xcc8>
 8011b14:	ed9f ca06 	vldr	s24, [pc, #24]	; 8011b30 <kf_update+0xd4c>
 8011b18:	eeb5 da40 	vcmp.f32	s26, #0.0
 8011b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b20:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8011b24:	eef0 ba4c 	vmov.f32	s23, s24
 8011b28:	f47f ae85 	bne.w	8011836 <kf_update+0xa52>
 8011b2c:	e797      	b.n	8011a5e <kf_update+0xc7a>
 8011b2e:	bf00      	nop
 8011b30:	00000000 	.word	0x00000000

08011b34 <q2hpr>:
 8011b34:	b510      	push	{r4, lr}
 8011b36:	ed90 7a00 	vldr	s14, [r0]
 8011b3a:	edd0 6a01 	vldr	s13, [r0, #4]
 8011b3e:	edd0 7a02 	vldr	s15, [r0, #8]
 8011b42:	edd0 4a03 	vldr	s9, [r0, #12]
 8011b46:	ed2d 8b0a 	vpush	{d8-d12}
 8011b4a:	ee27 0a26 	vmul.f32	s0, s14, s13
 8011b4e:	ee27 5a27 	vmul.f32	s10, s14, s15
 8011b52:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8011b56:	ee67 0a07 	vmul.f32	s1, s14, s14
 8011b5a:	ee26 aaa6 	vmul.f32	s20, s13, s13
 8011b5e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011b62:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011b66:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011b6a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011b6e:	ee70 9aa0 	vadd.f32	s19, s1, s1
 8011b72:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8011b76:	ee36 ba06 	vadd.f32	s22, s12, s12
 8011b7a:	ee70 aa00 	vadd.f32	s21, s0, s0
 8011b7e:	ee35 ca05 	vadd.f32	s24, s10, s10
 8011b82:	ee77 8a07 	vadd.f32	s17, s14, s14
 8011b86:	ee75 baa5 	vadd.f32	s23, s11, s11
 8011b8a:	ee36 9aa6 	vadd.f32	s18, s13, s13
 8011b8e:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8011b92:	460c      	mov	r4, r1
 8011b94:	bb8a      	cbnz	r2, 8011bfa <q2hpr+0xc6>
 8011b96:	ee79 0a8b 	vadd.f32	s1, s19, s22
 8011b9a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8011b9e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8011ba2:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 8011ba6:	f00b f979 	bl	801ce9c <atan2f>
 8011baa:	eeb0 8a40 	vmov.f32	s16, s0
 8011bae:	ed84 8a00 	vstr	s16, [r4]
 8011bb2:	ee38 0aab 	vadd.f32	s0, s17, s23
 8011bb6:	f00b f945 	bl	801ce44 <asinf>
 8011bba:	ee79 0a8a 	vadd.f32	s1, s19, s20
 8011bbe:	eef0 8a40 	vmov.f32	s17, s0
 8011bc2:	ee7b 0a60 	vsub.f32	s1, s22, s1
 8011bc6:	ee3c 0a49 	vsub.f32	s0, s24, s18
 8011bca:	f00b f967 	bl	801ce9c <atan2f>
 8011bce:	eef1 8a68 	vneg.f32	s17, s17
 8011bd2:	eeb0 9a40 	vmov.f32	s18, s0
 8011bd6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bde:	ed84 9a02 	vstr	s18, [r4, #8]
 8011be2:	edc4 8a01 	vstr	s17, [r4, #4]
 8011be6:	d505      	bpl.n	8011bf4 <q2hpr+0xc0>
 8011be8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8011c40 <q2hpr+0x10c>
 8011bec:	ee38 8a00 	vadd.f32	s16, s16, s0
 8011bf0:	ed84 8a00 	vstr	s16, [r4]
 8011bf4:	ecbd 8b0a 	vpop	{d8-d12}
 8011bf8:	bd10      	pop	{r4, pc}
 8011bfa:	ee3c 0a49 	vsub.f32	s0, s24, s18
 8011bfe:	f00b f921 	bl	801ce44 <asinf>
 8011c02:	ee79 0a8a 	vadd.f32	s1, s19, s20
 8011c06:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8011c0a:	ee79 0ae0 	vsub.f32	s1, s19, s1
 8011c0e:	eeb0 9a40 	vmov.f32	s18, s0
 8011c12:	ee38 0aab 	vadd.f32	s0, s17, s23
 8011c16:	f00b f941 	bl	801ce9c <atan2f>
 8011c1a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 8011c1e:	eef0 8a40 	vmov.f32	s17, s0
 8011c22:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8011c26:	ee79 0ae0 	vsub.f32	s1, s19, s1
 8011c2a:	eeb1 0a40 	vneg.f32	s0, s0
 8011c2e:	f00b f935 	bl	801ce9c <atan2f>
 8011c32:	eef1 8a68 	vneg.f32	s17, s17
 8011c36:	eeb0 8a40 	vmov.f32	s16, s0
 8011c3a:	ed84 0a00 	vstr	s0, [r4]
 8011c3e:	e7ca      	b.n	8011bd6 <q2hpr+0xa2>
 8011c40:	40c90fdb 	.word	0x40c90fdb

08011c44 <llEvaluate.constprop.0>:
 8011c44:	ed92 7a00 	vldr	s14, [r2]
 8011c48:	edd0 7a00 	vldr	s15, [r0]
 8011c4c:	edd0 1a04 	vldr	s3, [r0, #16]
 8011c50:	ed92 6a01 	vldr	s12, [r2, #4]
 8011c54:	ed90 3a05 	vldr	s6, [r0, #20]
 8011c58:	ed90 2a08 	vldr	s4, [r0, #32]
 8011c5c:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 8011c60:	edd0 3a09 	vldr	s7, [r0, #36]	; 0x24
 8011c64:	edd0 4a0a 	vldr	s9, [r0, #40]	; 0x28
 8011c68:	ed90 4a0d 	vldr	s8, [r0, #52]	; 0x34
 8011c6c:	ed90 5a0e 	vldr	s10, [r0, #56]	; 0x38
 8011c70:	edd0 5a0f 	vldr	s11, [r0, #60]	; 0x3c
 8011c74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c7c:	b085      	sub	sp, #20
 8011c7e:	f10d 0810 	add.w	r8, sp, #16
 8011c82:	2404      	movs	r4, #4
 8011c84:	f101 0c10 	add.w	ip, r1, #16
 8011c88:	2c04      	cmp	r4, #4
 8011c8a:	4606      	mov	r6, r0
 8011c8c:	f04f 0703 	mov.w	r7, #3
 8011c90:	f04f 0502 	mov.w	r5, #2
 8011c94:	ed92 7a02 	vldr	s14, [r2, #8]
 8011c98:	edd2 7a03 	vldr	s15, [r2, #12]
 8011c9c:	edcd 6a00 	vstr	s13, [sp]
 8011ca0:	eea1 6ae6 	vfms.f32	s12, s3, s13
 8011ca4:	b263      	sxtb	r3, r4
 8011ca6:	eea6 7ac2 	vfms.f32	s14, s13, s4
 8011caa:	eee6 7ae2 	vfms.f32	s15, s13, s5
 8011cae:	eec6 6a03 	vdiv.f32	s13, s12, s6
 8011cb2:	eea6 7ae3 	vfms.f32	s14, s13, s7
 8011cb6:	eee6 7ac4 	vfms.f32	s15, s13, s8
 8011cba:	edcd 6a01 	vstr	s13, [sp, #4]
 8011cbe:	eec7 6a24 	vdiv.f32	s13, s14, s9
 8011cc2:	eee6 7ac5 	vfms.f32	s15, s13, s10
 8011cc6:	edcd 6a02 	vstr	s13, [sp, #8]
 8011cca:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8011cce:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011cd2:	ed78 7a01 	vldmdb	r8!, {s15}
 8011cd6:	ed6c 7a01 	vstmdb	ip!, {s15}
 8011cda:	d02a      	beq.n	8011d32 <llEvaluate.constprop.0+0xee>
 8011cdc:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 8011ce0:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 8011ce4:	eb01 0983 	add.w	r9, r1, r3, lsl #2
 8011ce8:	4472      	add	r2, lr
 8011cea:	edd2 6a00 	vldr	s13, [r2]
 8011cee:	ed99 7a00 	vldr	s14, [r9]
 8011cf2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	b2da      	uxtb	r2, r3
 8011cfa:	2a04      	cmp	r2, #4
 8011cfc:	b25b      	sxtb	r3, r3
 8011cfe:	edcc 7a00 	vstr	s15, [ip]
 8011d02:	d1ed      	bne.n	8011ce0 <llEvaluate.constprop.0+0x9c>
 8011d04:	edd6 6a0f 	vldr	s13, [r6, #60]	; 0x3c
 8011d08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011d0c:	2dff      	cmp	r5, #255	; 0xff
 8011d0e:	ed8c 7a00 	vstr	s14, [ip]
 8011d12:	d015      	beq.n	8011d40 <llEvaluate.constprop.0+0xfc>
 8011d14:	3c01      	subs	r4, #1
 8011d16:	b2e4      	uxtb	r4, r4
 8011d18:	ed78 7a01 	vldmdb	r8!, {s15}
 8011d1c:	3d01      	subs	r5, #1
 8011d1e:	2c04      	cmp	r4, #4
 8011d20:	b2ed      	uxtb	r5, r5
 8011d22:	f1a6 0614 	sub.w	r6, r6, #20
 8011d26:	f107 37ff 	add.w	r7, r7, #4294967295
 8011d2a:	b263      	sxtb	r3, r4
 8011d2c:	ed6c 7a01 	vstmdb	ip!, {s15}
 8011d30:	d1d4      	bne.n	8011cdc <llEvaluate.constprop.0+0x98>
 8011d32:	edd6 6a0f 	vldr	s13, [r6, #60]	; 0x3c
 8011d36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011d3a:	ed8c 7a00 	vstr	s14, [ip]
 8011d3e:	e7e9      	b.n	8011d14 <llEvaluate.constprop.0+0xd0>
 8011d40:	b005      	add	sp, #20
 8011d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d46:	bf00      	nop

08011d48 <getMagStats.constprop.0>:
 8011d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4c:	4d74      	ldr	r5, [pc, #464]	; (8011f20 <getMagStats.constprop.0+0x1d8>)
 8011d4e:	2400      	movs	r4, #0
 8011d50:	601c      	str	r4, [r3, #0]
 8011d52:	6014      	str	r4, [r2, #0]
 8011d54:	f895 40a1 	ldrb.w	r4, [r5, #161]	; 0xa1
 8011d58:	f995 60a2 	ldrsb.w	r6, [r5, #162]	; 0xa2
 8011d5c:	4684      	mov	ip, r0
 8011d5e:	f895 00a0 	ldrb.w	r0, [r5, #160]	; 0xa0
 8011d62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011d66:	42a0      	cmp	r0, r4
 8011d68:	eec7 5a80 	vdiv.f32	s11, s15, s0
 8011d6c:	f106 0601 	add.w	r6, r6, #1
 8011d70:	f000 80c9 	beq.w	8011f06 <getMagStats.constprop.0+0x1be>
 8011d74:	1a36      	subs	r6, r6, r0
 8011d76:	fb96 fef4 	sdiv	lr, r6, r4
 8011d7a:	fb04 661e 	mls	r6, r4, lr, r6
 8011d7e:	2e00      	cmp	r6, #0
 8011d80:	bfb8      	it	lt
 8011d82:	1936      	addlt	r6, r6, r4
 8011d84:	fa0f fe86 	sxth.w	lr, r6
 8011d88:	ee04 0a90 	vmov	s9, r0
 8011d8c:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8011f24 <getMagStats.constprop.0+0x1dc>
 8011d90:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8011d94:	ee25 5a85 	vmul.f32	s10, s11, s10
 8011d98:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	f000 80bc 	beq.w	8011f1a <getMagStats.constprop.0+0x1d2>
 8011da2:	3801      	subs	r0, #1
 8011da4:	fa5e f980 	uxtab	r9, lr, r0
 8011da8:	ed9f 3a5f 	vldr	s6, [pc, #380]	; 8011f28 <getMagStats.constprop.0+0x1e0>
 8011dac:	f8bc 8000 	ldrh.w	r8, [ip]
 8011db0:	f8bc 7002 	ldrh.w	r7, [ip, #2]
 8011db4:	f8bc 6004 	ldrh.w	r6, [ip, #4]
 8011db8:	2000      	movs	r0, #0
 8011dba:	e003      	b.n	8011dc4 <getMagStats.constprop.0+0x7c>
 8011dbc:	ed92 3a00 	vldr	s6, [r2]
 8011dc0:	f10e 0e01 	add.w	lr, lr, #1
 8011dc4:	fb9e fcf4 	sdiv	ip, lr, r4
 8011dc8:	fb04 ec1c 	mls	ip, r4, ip, lr
 8011dcc:	fa5f fc8c 	uxtb.w	ip, ip
 8011dd0:	f10c 0c04 	add.w	ip, ip, #4
 8011dd4:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8011dd8:	edd1 3a00 	vldr	s7, [r1]
 8011ddc:	f8bc a0a2 	ldrh.w	sl, [ip, #162]	; 0xa2
 8011de0:	f8bc b0a4 	ldrh.w	fp, [ip, #164]	; 0xa4
 8011de4:	f8bc c0a6 	ldrh.w	ip, [ip, #166]	; 0xa6
 8011de8:	ed91 4a04 	vldr	s8, [r1, #16]
 8011dec:	ed91 6a08 	vldr	s12, [r1, #32]
 8011df0:	ebaa 0a08 	sub.w	sl, sl, r8
 8011df4:	ebab 0b07 	sub.w	fp, fp, r7
 8011df8:	fa0f fa8a 	sxth.w	sl, sl
 8011dfc:	ee07 aa10 	vmov	s14, sl
 8011e00:	fa0f fa8b 	sxth.w	sl, fp
 8011e04:	ee06 aa90 	vmov	s13, sl
 8011e08:	ebac 0c06 	sub.w	ip, ip, r6
 8011e0c:	fa0f fc8c 	sxth.w	ip, ip
 8011e10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011e14:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011e18:	ee07 ca90 	vmov	s15, ip
 8011e1c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8011e20:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e28:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011e2c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8011e30:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011e34:	ee16 ca90 	vmov	ip, s13
 8011e38:	ee17 aa10 	vmov	sl, s14
 8011e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e40:	fb1c fc0c 	smulbb	ip, ip, ip
 8011e44:	fa0f fa8a 	sxth.w	sl, sl
 8011e48:	fb0a ca0a 	mla	sl, sl, sl, ip
 8011e4c:	ee17 ca90 	vmov	ip, s15
 8011e50:	fa0f fc8c 	sxth.w	ip, ip
 8011e54:	fb0c ac0c 	mla	ip, ip, ip, sl
 8011e58:	ee07 ca90 	vmov	s15, ip
 8011e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e60:	f100 0b01 	add.w	fp, r0, #1
 8011e64:	eef1 6ae7 	vsqrt.f32	s13, s15
 8011e68:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8011e6c:	ee17 ca90 	vmov	ip, s15
 8011e70:	fa0f fc8c 	sxth.w	ip, ip
 8011e74:	ee07 ca10 	vmov	s14, ip
 8011e78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011e7c:	ee77 7a45 	vsub.f32	s15, s14, s10
 8011e80:	ee37 7a03 	vadd.f32	s14, s14, s6
 8011e84:	eef0 7ae7 	vabs.f32	s15, s15
 8011e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e8c:	ed82 7a00 	vstr	s14, [r2]
 8011e90:	ee17 ca90 	vmov	ip, s15
 8011e94:	fa0f fc8c 	sxth.w	ip, ip
 8011e98:	fb0c fa0c 	mul.w	sl, ip, ip
 8011e9c:	ee07 aa90 	vmov	s15, sl
 8011ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011ea4:	ee07 ca90 	vmov	s15, ip
 8011ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011eac:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011eb0:	edd3 7a00 	vldr	s15, [r3]
 8011eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ebc:	bf48      	it	mi
 8011ebe:	fa5f f08b 	uxtbmi.w	r0, fp
 8011ec2:	45f1      	cmp	r9, lr
 8011ec4:	edc3 7a00 	vstr	s15, [r3]
 8011ec8:	f47f af78 	bne.w	8011dbc <getMagStats.constprop.0+0x74>
 8011ecc:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8011ed0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8011f2c <getMagStats.constprop.0+0x1e4>
 8011ed4:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 8011ed8:	eef1 7ae6 	vsqrt.f32	s15, s13
 8011edc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee8:	bfb8      	it	lt
 8011eea:	eef0 7a47 	vmovlt.f32	s15, s14
 8011eee:	edc3 7a00 	vstr	s15, [r3]
 8011ef2:	edd2 7a00 	vldr	s15, [r2]
 8011ef6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011efa:	eec0 7a24 	vdiv.f32	s15, s0, s9
 8011efe:	edc2 7a00 	vstr	s15, [r2]
 8011f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f06:	fb96 fef0 	sdiv	lr, r6, r0
 8011f0a:	fb00 661e 	mls	r6, r0, lr, r6
 8011f0e:	ee04 0a90 	vmov	s9, r0
 8011f12:	fa0f fe86 	sxth.w	lr, r6
 8011f16:	4604      	mov	r4, r0
 8011f18:	e738      	b.n	8011d8c <getMagStats.constprop.0+0x44>
 8011f1a:	eddf 7a03 	vldr	s15, [pc, #12]	; 8011f28 <getMagStats.constprop.0+0x1e0>
 8011f1e:	e7d5      	b.n	8011ecc <getMagStats.constprop.0+0x184>
 8011f20:	200003ac 	.word	0x200003ac
 8011f24:	423c0000 	.word	0x423c0000
 8011f28:	00000000 	.word	0x00000000
 8011f2c:	3f59999a 	.word	0x3f59999a

08011f30 <MEMS_updateMagBufferIndex.constprop.0>:
 8011f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f34:	4e6e      	ldr	r6, [pc, #440]	; (80120f0 <MEMS_updateMagBufferIndex.constprop.0+0x1c0>)
 8011f36:	2300      	movs	r3, #0
 8011f38:	ed2d 8b02 	vpush	{d8}
 8011f3c:	f896 20a0 	ldrb.w	r2, [r6, #160]	; 0xa0
 8011f40:	f896 80a1 	ldrb.w	r8, [r6, #161]	; 0xa1
 8011f44:	e9c6 332a 	strd	r3, r3, [r6, #168]	; 0xa8
 8011f48:	e9c6 332c 	strd	r3, r3, [r6, #176]	; 0xb0
 8011f4c:	e9c6 332e 	strd	r3, r3, [r6, #184]	; 0xb8
 8011f50:	f996 30a2 	ldrsb.w	r3, [r6, #162]	; 0xa2
 8011f54:	4542      	cmp	r2, r8
 8011f56:	b089      	sub	sp, #36	; 0x24
 8011f58:	4682      	mov	sl, r0
 8011f5a:	f103 0301 	add.w	r3, r3, #1
 8011f5e:	f000 80c0 	beq.w	80120e2 <MEMS_updateMagBufferIndex.constprop.0+0x1b2>
 8011f62:	1a9b      	subs	r3, r3, r2
 8011f64:	fb93 f5f8 	sdiv	r5, r3, r8
 8011f68:	fb08 3315 	mls	r3, r8, r5, r3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	bfb8      	it	lt
 8011f70:	4443      	addlt	r3, r8
 8011f72:	b21d      	sxth	r5, r3
 8011f74:	b93a      	cbnz	r2, 8011f86 <MEMS_updateMagBufferIndex.constprop.0+0x56>
 8011f76:	23ff      	movs	r3, #255	; 0xff
 8011f78:	f886 30a2 	strb.w	r3, [r6, #162]	; 0xa2
 8011f7c:	b009      	add	sp, #36	; 0x24
 8011f7e:	ecbd 8b02 	vpop	{d8}
 8011f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f86:	f04f 0900 	mov.w	r9, #0
 8011f8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f8e:	1953      	adds	r3, r2, r5
 8011f90:	ee87 8a80 	vdiv.f32	s16, s15, s0
 8011f94:	e9cd 9902 	strd	r9, r9, [sp, #8]
 8011f98:	e9cd 9904 	strd	r9, r9, [sp, #16]
 8011f9c:	9307      	str	r3, [sp, #28]
 8011f9e:	f8cd 9018 	str.w	r9, [sp, #24]
 8011fa2:	2701      	movs	r7, #1
 8011fa4:	e01b      	b.n	8011fde <MEMS_updateMagBufferIndex.constprop.0+0xae>
 8011fa6:	9a06      	ldr	r2, [sp, #24]
 8011fa8:	3c20      	subs	r4, #32
 8011faa:	fa07 f404 	lsl.w	r4, r7, r4
 8011fae:	4322      	orrs	r2, r4
 8011fb0:	f1bb 0f1f 	cmp.w	fp, #31
 8011fb4:	9206      	str	r2, [sp, #24]
 8011fb6:	d971      	bls.n	801209c <MEMS_updateMagBufferIndex.constprop.0+0x16c>
 8011fb8:	9904      	ldr	r1, [sp, #16]
 8011fba:	f1ab 0220 	sub.w	r2, fp, #32
 8011fbe:	fa07 f202 	lsl.w	r2, r7, r2
 8011fc2:	4311      	orrs	r1, r2
 8011fc4:	2b1f      	cmp	r3, #31
 8011fc6:	9104      	str	r1, [sp, #16]
 8011fc8:	d96f      	bls.n	80120aa <MEMS_updateMagBufferIndex.constprop.0+0x17a>
 8011fca:	9a02      	ldr	r2, [sp, #8]
 8011fcc:	3b20      	subs	r3, #32
 8011fce:	fa07 f303 	lsl.w	r3, r7, r3
 8011fd2:	431a      	orrs	r2, r3
 8011fd4:	9b07      	ldr	r3, [sp, #28]
 8011fd6:	9202      	str	r2, [sp, #8]
 8011fd8:	3501      	adds	r5, #1
 8011fda:	42ab      	cmp	r3, r5
 8011fdc:	d06d      	beq.n	80120ba <MEMS_updateMagBufferIndex.constprop.0+0x18a>
 8011fde:	fb95 f3f8 	sdiv	r3, r5, r8
 8011fe2:	fb08 5313 	mls	r3, r8, r3, r5
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	f103 0b04 	add.w	fp, r3, #4
 8011fec:	eb06 02cb 	add.w	r2, r6, fp, lsl #3
 8011ff0:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	; 0xa2
 8011ff4:	fb92 f0fa 	sdiv	r0, r2, sl
 8011ff8:	fb0a 2210 	mls	r2, sl, r0, r2
 8011ffc:	2a00      	cmp	r2, #0
 8011ffe:	bfb8      	it	lt
 8012000:	4452      	addlt	r2, sl
 8012002:	b213      	sxth	r3, r2
 8012004:	ee00 3a10 	vmov	s0, r3
 8012008:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801200c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012010:	f00b f9e6 	bl	801d3e0 <roundf>
 8012014:	eb06 02cb 	add.w	r2, r6, fp, lsl #3
 8012018:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801201c:	f9b2 20a4 	ldrsh.w	r2, [r2, #164]	; 0xa4
 8012020:	fb92 f0fa 	sdiv	r0, r2, sl
 8012024:	fb0a 2210 	mls	r2, sl, r0, r2
 8012028:	2a00      	cmp	r2, #0
 801202a:	bfb8      	it	lt
 801202c:	4452      	addlt	r2, sl
 801202e:	b213      	sxth	r3, r2
 8012030:	ee00 3a10 	vmov	s0, r3
 8012034:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012038:	edcd 7a01 	vstr	s15, [sp, #4]
 801203c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012040:	f00b f9ce 	bl	801d3e0 <roundf>
 8012044:	eb06 03cb 	add.w	r3, r6, fp, lsl #3
 8012048:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801204c:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 8012050:	fb93 f2fa 	sdiv	r2, r3, sl
 8012054:	fb0a 3312 	mls	r3, sl, r2, r3
 8012058:	2b00      	cmp	r3, #0
 801205a:	bfb8      	it	lt
 801205c:	4453      	addlt	r3, sl
 801205e:	b21b      	sxth	r3, r3
 8012060:	ee00 3a10 	vmov	s0, r3
 8012064:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012068:	f89d 4004 	ldrb.w	r4, [sp, #4]
 801206c:	edcd 7a01 	vstr	s15, [sp, #4]
 8012070:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012074:	f00b f9b4 	bl	801d3e0 <roundf>
 8012078:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801207c:	f89d b004 	ldrb.w	fp, [sp, #4]
 8012080:	edcd 7a01 	vstr	s15, [sp, #4]
 8012084:	2c1f      	cmp	r4, #31
 8012086:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801208a:	d88c      	bhi.n	8011fa6 <MEMS_updateMagBufferIndex.constprop.0+0x76>
 801208c:	9a05      	ldr	r2, [sp, #20]
 801208e:	fa07 f404 	lsl.w	r4, r7, r4
 8012092:	4322      	orrs	r2, r4
 8012094:	f1bb 0f1f 	cmp.w	fp, #31
 8012098:	9205      	str	r2, [sp, #20]
 801209a:	d88d      	bhi.n	8011fb8 <MEMS_updateMagBufferIndex.constprop.0+0x88>
 801209c:	9903      	ldr	r1, [sp, #12]
 801209e:	fa07 f20b 	lsl.w	r2, r7, fp
 80120a2:	4311      	orrs	r1, r2
 80120a4:	2b1f      	cmp	r3, #31
 80120a6:	9103      	str	r1, [sp, #12]
 80120a8:	d88f      	bhi.n	8011fca <MEMS_updateMagBufferIndex.constprop.0+0x9a>
 80120aa:	fa07 f303 	lsl.w	r3, r7, r3
 80120ae:	ea49 0903 	orr.w	r9, r9, r3
 80120b2:	9b07      	ldr	r3, [sp, #28]
 80120b4:	3501      	adds	r5, #1
 80120b6:	42ab      	cmp	r3, r5
 80120b8:	d191      	bne.n	8011fde <MEMS_updateMagBufferIndex.constprop.0+0xae>
 80120ba:	9b06      	ldr	r3, [sp, #24]
 80120bc:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
 80120c0:	9b05      	ldr	r3, [sp, #20]
 80120c2:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
 80120c6:	9b04      	ldr	r3, [sp, #16]
 80120c8:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 80120cc:	9b03      	ldr	r3, [sp, #12]
 80120ce:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
 80120d2:	9b02      	ldr	r3, [sp, #8]
 80120d4:	e9c6 932e 	strd	r9, r3, [r6, #184]	; 0xb8
 80120d8:	b009      	add	sp, #36	; 0x24
 80120da:	ecbd 8b02 	vpop	{d8}
 80120de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e2:	fb93 f5f2 	sdiv	r5, r3, r2
 80120e6:	fb02 3315 	mls	r3, r2, r5, r3
 80120ea:	4690      	mov	r8, r2
 80120ec:	b21d      	sxth	r5, r3
 80120ee:	e741      	b.n	8011f74 <MEMS_updateMagBufferIndex.constprop.0+0x44>
 80120f0:	200003ac 	.word	0x200003ac

080120f4 <output_update>:
 80120f4:	edd0 7a01 	vldr	s15, [r0, #4]
 80120f8:	edd0 5a00 	vldr	s11, [r0]
 80120fc:	edd0 6a02 	vldr	s13, [r0, #8]
 8012100:	ed90 5a03 	vldr	s10, [r0, #12]
 8012104:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801210c:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8012110:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8012114:	4615      	mov	r5, r2
 8012116:	f89d 201c 	ldrb.w	r2, [sp, #28]
 801211a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801211e:	eea5 7a85 	vfma.f32	s14, s11, s10
 8012122:	460f      	mov	r7, r1
 8012124:	461e      	mov	r6, r3
 8012126:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801212a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801212e:	ee36 6a06 	vadd.f32	s12, s12, s12
 8012132:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012136:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801213a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801213e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8012142:	ee35 5ac6 	vsub.f32	s10, s11, s12
 8012146:	2a00      	cmp	r2, #0
 8012148:	d145      	bne.n	80121d6 <output_update+0xe2>
 801214a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801214e:	eeb1 7a47 	vneg.f32	s14, s14
 8012152:	ed83 7a00 	vstr	s14, [r3]
 8012156:	edc3 7a01 	vstr	s15, [r3, #4]
 801215a:	ed83 5a02 	vstr	s10, [r3, #8]
 801215e:	4629      	mov	r1, r5
 8012160:	4604      	mov	r4, r0
 8012162:	f7ff fce7 	bl	8011b34 <q2hpr>
 8012166:	ed95 7a01 	vldr	s14, [r5, #4]
 801216a:	edd5 7a02 	vldr	s15, [r5, #8]
 801216e:	edd5 6a00 	vldr	s13, [r5]
 8012172:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012280 <output_update+0x18c>
 8012176:	ee27 7a46 	vnmul.f32	s14, s14, s12
 801217a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 801217e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012182:	ed85 7a01 	vstr	s14, [r5, #4]
 8012186:	edc5 6a00 	vstr	s13, [r5]
 801218a:	edc5 7a02 	vstr	s15, [r5, #8]
 801218e:	ed97 7a01 	vldr	s14, [r7, #4]
 8012192:	edd6 7a00 	vldr	s15, [r6]
 8012196:	6823      	ldr	r3, [r4, #0]
 8012198:	ee77 7a87 	vadd.f32	s15, s15, s14
 801219c:	edc8 7a00 	vstr	s15, [r8]
 80121a0:	ed97 7a00 	vldr	s14, [r7]
 80121a4:	edd6 7a01 	vldr	s15, [r6, #4]
 80121a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80121ac:	edc8 7a01 	vstr	s15, [r8, #4]
 80121b0:	edd6 7a02 	vldr	s15, [r6, #8]
 80121b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80121b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80121bc:	edc8 7a02 	vstr	s15, [r8, #8]
 80121c0:	edd4 7a02 	vldr	s15, [r4, #8]
 80121c4:	6862      	ldr	r2, [r4, #4]
 80121c6:	6022      	str	r2, [r4, #0]
 80121c8:	eef1 7a67 	vneg.f32	s15, s15
 80121cc:	6063      	str	r3, [r4, #4]
 80121ce:	edc4 7a02 	vstr	s15, [r4, #8]
 80121d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121d6:	2a01      	cmp	r2, #1
 80121d8:	d015      	beq.n	8012206 <output_update+0x112>
 80121da:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8012280 <output_update+0x18c>
 80121de:	edd5 6a00 	vldr	s13, [r5]
 80121e2:	ed95 7a01 	vldr	s14, [r5, #4]
 80121e6:	edd5 7a02 	vldr	s15, [r5, #8]
 80121ea:	ee66 6a86 	vmul.f32	s13, s13, s12
 80121ee:	ee27 7a06 	vmul.f32	s14, s14, s12
 80121f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80121f6:	edc5 6a00 	vstr	s13, [r5]
 80121fa:	ed85 7a01 	vstr	s14, [r5, #4]
 80121fe:	edc5 7a02 	vstr	s15, [r5, #8]
 8012202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012206:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801220a:	ee36 6a65 	vsub.f32	s12, s12, s11
 801220e:	eeb1 7a47 	vneg.f32	s14, s14
 8012212:	edc3 7a00 	vstr	s15, [r3]
 8012216:	ed83 7a01 	vstr	s14, [r3, #4]
 801221a:	ed83 6a02 	vstr	s12, [r3, #8]
 801221e:	4629      	mov	r1, r5
 8012220:	f7ff fc88 	bl	8011b34 <q2hpr>
 8012224:	edd5 6a00 	vldr	s13, [r5]
 8012228:	ed95 7a01 	vldr	s14, [r5, #4]
 801222c:	edd5 7a02 	vldr	s15, [r5, #8]
 8012230:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8012280 <output_update+0x18c>
 8012234:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012238:	ee67 7a86 	vmul.f32	s15, s15, s12
 801223c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012240:	ed85 7a01 	vstr	s14, [r5, #4]
 8012244:	edc5 6a00 	vstr	s13, [r5]
 8012248:	edc5 7a02 	vstr	s15, [r5, #8]
 801224c:	ed97 7a00 	vldr	s14, [r7]
 8012250:	edd6 7a00 	vldr	s15, [r6]
 8012254:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012258:	edc8 7a00 	vstr	s15, [r8]
 801225c:	ed97 7a01 	vldr	s14, [r7, #4]
 8012260:	edd6 7a01 	vldr	s15, [r6, #4]
 8012264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012268:	edc8 7a01 	vstr	s15, [r8, #4]
 801226c:	edd6 7a02 	vldr	s15, [r6, #8]
 8012270:	ed97 7a02 	vldr	s14, [r7, #8]
 8012274:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012278:	edc8 7a02 	vstr	s15, [r8, #8]
 801227c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012280:	42652ee1 	.word	0x42652ee1
 8012284:	00000000 	.word	0x00000000

08012288 <MFX_emptyAttitude>:
 8012288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228c:	ed2d 8b02 	vpush	{d8}
 8012290:	4fe9      	ldr	r7, [pc, #932]	; (8012638 <MFX_emptyAttitude+0x3b0>)
 8012292:	eddf 8aea 	vldr	s17, [pc, #936]	; 801263c <MFX_emptyAttitude+0x3b4>
 8012296:	f6ad 4dd4 	subw	sp, sp, #3284	; 0xcd4
 801229a:	f50d 64d7 	add.w	r4, sp, #1720	; 0x6b8
 801229e:	f04f 0800 	mov.w	r8, #0
 80122a2:	46bc      	mov	ip, r7
 80122a4:	e9c4 8800 	strd	r8, r8, [r4]
 80122a8:	f83c 3b04 	ldrh.w	r3, [ip], #4
 80122ac:	f8c4 8008 	str.w	r8, [r4, #8]
 80122b0:	f88d 854a 	strb.w	r8, [sp, #1354]	; 0x54a
 80122b4:	f8ad 3548 	strh.w	r3, [sp, #1352]	; 0x548
 80122b8:	4681      	mov	r9, r0
 80122ba:	f8dd 3548 	ldr.w	r3, [sp, #1352]	; 0x548
 80122be:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 80122c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80122c6:	0c1b      	lsrs	r3, r3, #16
 80122c8:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80122cc:	ab2b      	add	r3, sp, #172	; 0xac
 80122ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122d2:	ab2e      	add	r3, sp, #184	; 0xb8
 80122d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122d8:	ab31      	add	r3, sp, #196	; 0xc4
 80122da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122de:	ab34      	add	r3, sp, #208	; 0xd0
 80122e0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80122e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122e8:	ab37      	add	r3, sp, #220	; 0xdc
 80122ea:	edcd 8a08 	vstr	s17, [sp, #32]
 80122ee:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 80122f2:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 80122f6:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80122fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122fe:	ab3a      	add	r3, sp, #232	; 0xe8
 8012300:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012304:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012308:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 801230c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012310:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012314:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012318:	f44f 75b4 	mov.w	r5, #360	; 0x168
 801231c:	f8dc 3000 	ldr.w	r3, [ip]
 8012320:	f8ce 3000 	str.w	r3, [lr]
 8012324:	462a      	mov	r2, r5
 8012326:	4641      	mov	r1, r8
 8012328:	4620      	mov	r0, r4
 801232a:	f008 fc2e 	bl	801ab8a <memset>
 801232e:	f44f 56f0 	mov.w	r6, #7680	; 0x1e00
 8012332:	462a      	mov	r2, r5
 8012334:	4621      	mov	r1, r4
 8012336:	a840      	add	r0, sp, #256	; 0x100
 8012338:	f8ad 60f8 	strh.w	r6, [sp, #248]	; 0xf8
 801233c:	f008 fcad 	bl	801ac9a <memcpy>
 8012340:	462a      	mov	r2, r5
 8012342:	4641      	mov	r1, r8
 8012344:	4620      	mov	r0, r4
 8012346:	ed8d 8a3f 	vstr	s16, [sp, #252]	; 0xfc
 801234a:	f008 fc1e 	bl	801ab8a <memset>
 801234e:	462a      	mov	r2, r5
 8012350:	4621      	mov	r1, r4
 8012352:	a89c      	add	r0, sp, #624	; 0x270
 8012354:	f8ad 6268 	strh.w	r6, [sp, #616]	; 0x268
 8012358:	f008 fc9f 	bl	801ac9a <memcpy>
 801235c:	462a      	mov	r2, r5
 801235e:	4641      	mov	r1, r8
 8012360:	4620      	mov	r0, r4
 8012362:	ed8d 8a9b 	vstr	s16, [sp, #620]	; 0x26c
 8012366:	f008 fc10 	bl	801ab8a <memset>
 801236a:	462a      	mov	r2, r5
 801236c:	4621      	mov	r1, r4
 801236e:	a8f8      	add	r0, sp, #992	; 0x3e0
 8012370:	f8ad 63d8 	strh.w	r6, [sp, #984]	; 0x3d8
 8012374:	f008 fc91 	bl	801ac9a <memcpy>
 8012378:	462a      	mov	r2, r5
 801237a:	4641      	mov	r1, r8
 801237c:	4620      	mov	r0, r4
 801237e:	ed8d 8af7 	vstr	s16, [sp, #988]	; 0x3dc
 8012382:	f008 fc02 	bl	801ab8a <memset>
 8012386:	462a      	mov	r2, r5
 8012388:	4621      	mov	r1, r4
 801238a:	f50d 60aa 	add.w	r0, sp, #1360	; 0x550
 801238e:	f8ad 6548 	strh.w	r6, [sp, #1352]	; 0x548
 8012392:	f008 fc82 	bl	801ac9a <memcpy>
 8012396:	f04f 0301 	mov.w	r3, #1
 801239a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 801239e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80123a2:	4ba7      	ldr	r3, [pc, #668]	; (8012640 <MFX_emptyAttitude+0x3b8>)
 80123a4:	9320      	str	r3, [sp, #128]	; 0x80
 80123a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80123a8:	ae0c      	add	r6, sp, #48	; 0x30
 80123aa:	46b3      	mov	fp, r6
 80123ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80123ae:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80123b2:	e9c4 8800 	strd	r8, r8, [r4]
 80123b6:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80123ba:	f8c4 8010 	str.w	r8, [r4, #16]
 80123be:	f10d 0c6c 	add.w	ip, sp, #108	; 0x6c
 80123c2:	46a6      	mov	lr, r4
 80123c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123cc:	f50d 6aa9 	add.w	sl, sp, #1352	; 0x548
 80123d0:	682d      	ldr	r5, [r5, #0]
 80123d2:	f8cc 5000 	str.w	r5, [ip]
 80123d6:	af21      	add	r7, sp, #132	; 0x84
 80123d8:	ed8a 8a01 	vstr	s16, [sl, #4]
 80123dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123de:	ab1a      	add	r3, sp, #104	; 0x68
 80123e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80123e4:	abf6      	add	r3, sp, #984	; 0x3d8
 80123e6:	9300      	str	r3, [sp, #0]
 80123e8:	aa3e      	add	r2, sp, #248	; 0xf8
 80123ea:	f8c7 8000 	str.w	r8, [r7]
 80123ee:	ab9a      	add	r3, sp, #616	; 0x268
 80123f0:	a911      	add	r1, sp, #68	; 0x44
 80123f2:	9403      	str	r4, [sp, #12]
 80123f4:	2001      	movs	r0, #1
 80123f6:	f7fd fff1 	bl	80103dc <DataHist_parameters>
 80123fa:	4b92      	ldr	r3, [pc, #584]	; (8012644 <MFX_emptyAttitude+0x3bc>)
 80123fc:	f8c9 3018 	str.w	r3, [r9, #24]
 8012400:	4b91      	ldr	r3, [pc, #580]	; (8012648 <MFX_emptyAttitude+0x3c0>)
 8012402:	f8c9 301c 	str.w	r3, [r9, #28]
 8012406:	4b91      	ldr	r3, [pc, #580]	; (801264c <MFX_emptyAttitude+0x3c4>)
 8012408:	f8c9 3020 	str.w	r3, [r9, #32]
 801240c:	4b90      	ldr	r3, [pc, #576]	; (8012650 <MFX_emptyAttitude+0x3c8>)
 801240e:	f8c9 3024 	str.w	r3, [r9, #36]	; 0x24
 8012412:	ae2b      	add	r6, sp, #172	; 0xac
 8012414:	4b8f      	ldr	r3, [pc, #572]	; (8012654 <MFX_emptyAttitude+0x3cc>)
 8012416:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 801241a:	ce07      	ldmia	r6!, {r0, r1, r2}
 801241c:	4b8e      	ldr	r3, [pc, #568]	; (8012658 <MFX_emptyAttitude+0x3d0>)
 801241e:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
 8012422:	4b8e      	ldr	r3, [pc, #568]	; (801265c <MFX_emptyAttitude+0x3d4>)
 8012424:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
 8012428:	4b8d      	ldr	r3, [pc, #564]	; (8012660 <MFX_emptyAttitude+0x3d8>)
 801242a:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 801242e:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 8012432:	f8a9 3070 	strh.w	r3, [r9, #112]	; 0x70
 8012436:	ad2e      	add	r5, sp, #184	; 0xb8
 8012438:	f89d 30aa 	ldrb.w	r3, [sp, #170]	; 0xaa
 801243c:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 8012440:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
 8012444:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
 8012448:	cd07      	ldmia	r5!, {r0, r1, r2}
 801244a:	f889 3072 	strb.w	r3, [r9, #114]	; 0x72
 801244e:	f240 1301 	movw	r3, #257	; 0x101
 8012452:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012630 <MFX_emptyAttitude+0x3a8>
 8012456:	f8a9 3000 	strh.w	r3, [r9]
 801245a:	f8a9 3004 	strh.w	r3, [r9, #4]
 801245e:	4b81      	ldr	r3, [pc, #516]	; (8012664 <MFX_emptyAttitude+0x3dc>)
 8012460:	f8c9 300c 	str.w	r3, [r9, #12]
 8012464:	4b80      	ldr	r3, [pc, #512]	; (8012668 <MFX_emptyAttitude+0x3e0>)
 8012466:	f8c9 3014 	str.w	r3, [r9, #20]
 801246a:	f509 7346 	add.w	r3, r9, #792	; 0x318
 801246e:	9304      	str	r3, [sp, #16]
 8012470:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
 8012474:	ed89 6b16 	vstr	d6, [r9, #88]	; 0x58
 8012478:	ed89 6b18 	vstr	d6, [r9, #96]	; 0x60
 801247c:	f10d 0ac4 	add.w	sl, sp, #196	; 0xc4
 8012480:	f8a9 8002 	strh.w	r8, [r9, #2]
 8012484:	ed89 8a02 	vstr	s16, [r9, #8]
 8012488:	ed89 8a04 	vstr	s16, [r9, #16]
 801248c:	ed89 6b1a 	vstr	d6, [r9, #104]	; 0x68
 8012490:	f8c9 1084 	str.w	r1, [r9, #132]	; 0x84
 8012494:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
 8012498:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 801249c:	f10d 0bd0 	add.w	fp, sp, #208	; 0xd0
 80124a0:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
 80124a4:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
 80124a8:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
 80124ac:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 80124b0:	af37      	add	r7, sp, #220	; 0xdc
 80124b2:	f8c9 0098 	str.w	r0, [r9, #152]	; 0x98
 80124b6:	f8c9 109c 	str.w	r1, [r9, #156]	; 0x9c
 80124ba:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
 80124be:	cf07      	ldmia	r7!, {r0, r1, r2}
 80124c0:	f10d 0ee8 	add.w	lr, sp, #232	; 0xe8
 80124c4:	f8c9 00a4 	str.w	r0, [r9, #164]	; 0xa4
 80124c8:	f8c9 10a8 	str.w	r1, [r9, #168]	; 0xa8
 80124cc:	f8c9 20ac 	str.w	r2, [r9, #172]	; 0xac
 80124d0:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 80124d4:	eddf 7a65 	vldr	s15, [pc, #404]	; 801266c <MFX_emptyAttitude+0x3e4>
 80124d8:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8012670 <MFX_emptyAttitude+0x3e8>
 80124dc:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8012674 <MFX_emptyAttitude+0x3ec>
 80124e0:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
 80124e4:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 80124e8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80124ec:	f8c9 10b4 	str.w	r1, [r9, #180]	; 0xb4
 80124f0:	ed89 5a65 	vstr	s10, [r9, #404]	; 0x194
 80124f4:	edc9 5a66 	vstr	s11, [r9, #408]	; 0x198
 80124f8:	ed89 7a67 	vstr	s14, [r9, #412]	; 0x19c
 80124fc:	edc9 8a64 	vstr	s17, [r9, #400]	; 0x190
 8012500:	edc9 8a30 	vstr	s17, [r9, #192]	; 0xc0
 8012504:	edc9 8a4a 	vstr	s17, [r9, #296]	; 0x128
 8012508:	edc9 8a31 	vstr	s17, [r9, #196]	; 0xc4
 801250c:	f04f 0101 	mov.w	r1, #1
 8012510:	f8c9 20b8 	str.w	r2, [r9, #184]	; 0xb8
 8012514:	edc9 8a4b 	vstr	s17, [r9, #300]	; 0x12c
 8012518:	edc9 8a32 	vstr	s17, [r9, #200]	; 0xc8
 801251c:	edc9 8a4c 	vstr	s17, [r9, #304]	; 0x130
 8012520:	edc9 8a33 	vstr	s17, [r9, #204]	; 0xcc
 8012524:	edc9 8a4d 	vstr	s17, [r9, #308]	; 0x134
 8012528:	edc9 8a34 	vstr	s17, [r9, #208]	; 0xd0
 801252c:	edc9 8a4e 	vstr	s17, [r9, #312]	; 0x138
 8012530:	edc9 8a35 	vstr	s17, [r9, #212]	; 0xd4
 8012534:	edc9 8a4f 	vstr	s17, [r9, #316]	; 0x13c
 8012538:	edc9 8a36 	vstr	s17, [r9, #216]	; 0xd8
 801253c:	edc9 8a50 	vstr	s17, [r9, #320]	; 0x140
 8012540:	edc9 8a37 	vstr	s17, [r9, #220]	; 0xdc
 8012544:	edc9 8a51 	vstr	s17, [r9, #324]	; 0x144
 8012548:	edc9 8a38 	vstr	s17, [r9, #224]	; 0xe0
 801254c:	edc9 8a52 	vstr	s17, [r9, #328]	; 0x148
 8012550:	edc9 8a39 	vstr	s17, [r9, #228]	; 0xe4
 8012554:	edc9 8a53 	vstr	s17, [r9, #332]	; 0x14c
 8012558:	edc9 8a3a 	vstr	s17, [r9, #232]	; 0xe8
 801255c:	edc9 8a54 	vstr	s17, [r9, #336]	; 0x150
 8012560:	edc9 8a3b 	vstr	s17, [r9, #236]	; 0xec
 8012564:	edc9 8a55 	vstr	s17, [r9, #340]	; 0x154
 8012568:	edc9 8a3c 	vstr	s17, [r9, #240]	; 0xf0
 801256c:	edc9 8a56 	vstr	s17, [r9, #344]	; 0x158
 8012570:	edc9 8a3d 	vstr	s17, [r9, #244]	; 0xf4
 8012574:	edc9 8a57 	vstr	s17, [r9, #348]	; 0x15c
 8012578:	edc9 8a3e 	vstr	s17, [r9, #248]	; 0xf8
 801257c:	edc9 8a58 	vstr	s17, [r9, #352]	; 0x160
 8012580:	edc9 8a3f 	vstr	s17, [r9, #252]	; 0xfc
 8012584:	edc9 8a59 	vstr	s17, [r9, #356]	; 0x164
 8012588:	edc9 8a40 	vstr	s17, [r9, #256]	; 0x100
 801258c:	edc9 8a5a 	vstr	s17, [r9, #360]	; 0x168
 8012590:	edc9 8a41 	vstr	s17, [r9, #260]	; 0x104
 8012594:	edc9 8a5b 	vstr	s17, [r9, #364]	; 0x16c
 8012598:	f8c9 c1a0 	str.w	ip, [r9, #416]	; 0x1a0
 801259c:	edc9 7a75 	vstr	s15, [r9, #468]	; 0x1d4
 80125a0:	edc9 7a7f 	vstr	s15, [r9, #508]	; 0x1fc
 80125a4:	edc9 8a42 	vstr	s17, [r9, #264]	; 0x108
 80125a8:	edc9 8a5c 	vstr	s17, [r9, #368]	; 0x170
 80125ac:	edc9 8a43 	vstr	s17, [r9, #268]	; 0x10c
 80125b0:	edc9 8a5d 	vstr	s17, [r9, #372]	; 0x174
 80125b4:	edc9 8a44 	vstr	s17, [r9, #272]	; 0x110
 80125b8:	edc9 8a5e 	vstr	s17, [r9, #376]	; 0x178
 80125bc:	edc9 8a45 	vstr	s17, [r9, #276]	; 0x114
 80125c0:	edc9 8a5f 	vstr	s17, [r9, #380]	; 0x17c
 80125c4:	edc9 8a46 	vstr	s17, [r9, #280]	; 0x118
 80125c8:	edc9 8a60 	vstr	s17, [r9, #384]	; 0x180
 80125cc:	edc9 8a47 	vstr	s17, [r9, #284]	; 0x11c
 80125d0:	edc9 8a61 	vstr	s17, [r9, #388]	; 0x184
 80125d4:	edc9 8a48 	vstr	s17, [r9, #288]	; 0x120
 80125d8:	edc9 8a62 	vstr	s17, [r9, #392]	; 0x188
 80125dc:	edc9 8a49 	vstr	s17, [r9, #292]	; 0x124
 80125e0:	edc9 8a63 	vstr	s17, [r9, #396]	; 0x18c
 80125e4:	f889 81a4 	strb.w	r8, [r9, #420]	; 0x1a4
 80125e8:	f8c9 81a6 	str.w	r8, [r9, #422]	; 0x1a6
 80125ec:	edc9 8a6c 	vstr	s17, [r9, #432]	; 0x1b0
 80125f0:	edc9 8a76 	vstr	s17, [r9, #472]	; 0x1d8
 80125f4:	edc9 8a77 	vstr	s17, [r9, #476]	; 0x1dc
 80125f8:	edc9 8a78 	vstr	s17, [r9, #480]	; 0x1e0
 80125fc:	edc9 8a79 	vstr	s17, [r9, #484]	; 0x1e4
 8012600:	edc9 8a7a 	vstr	s17, [r9, #488]	; 0x1e8
 8012604:	edc9 8a7b 	vstr	s17, [r9, #492]	; 0x1ec
 8012608:	edc9 8a7c 	vstr	s17, [r9, #496]	; 0x1f0
 801260c:	edc9 8a7d 	vstr	s17, [r9, #500]	; 0x1f4
 8012610:	edc9 8a6d 	vstr	s17, [r9, #436]	; 0x1b4
 8012614:	edc9 8a7e 	vstr	s17, [r9, #504]	; 0x1f8
 8012618:	edc9 8a80 	vstr	s17, [r9, #512]	; 0x200
 801261c:	edc9 7a89 	vstr	s15, [r9, #548]	; 0x224
 8012620:	edc9 7a93 	vstr	s15, [r9, #588]	; 0x24c
 8012624:	edc9 7a9d 	vstr	s15, [r9, #628]	; 0x274
 8012628:	e026      	b.n	8012678 <MFX_emptyAttitude+0x3f0>
 801262a:	bf00      	nop
 801262c:	f3af 8000 	nop.w
	...
 8012638:	0801eb80 	.word	0x0801eb80
 801263c:	00000000 	.word	0x00000000
 8012640:	40a00000 	.word	0x40a00000
 8012644:	3a9d4952 	.word	0x3a9d4952
 8012648:	3ac49ba6 	.word	0x3ac49ba6
 801264c:	3b03126f 	.word	0x3b03126f
 8012650:	3a83126f 	.word	0x3a83126f
 8012654:	3f639581 	.word	0x3f639581
 8012658:	402ab021 	.word	0x402ab021
 801265c:	3f13f7cf 	.word	0x3f13f7cf
 8012660:	3f2ac083 	.word	0x3f2ac083
 8012664:	01010100 	.word	0x01010100
 8012668:	41200000 	.word	0x41200000
 801266c:	447a0000 	.word	0x447a0000
 8012670:	3f4ccccd 	.word	0x3f4ccccd
 8012674:	3f333333 	.word	0x3f333333
 8012678:	edc9 8a81 	vstr	s17, [r9, #516]	; 0x204
 801267c:	edc9 8a82 	vstr	s17, [r9, #520]	; 0x208
 8012680:	edc9 8a83 	vstr	s17, [r9, #524]	; 0x20c
 8012684:	edc9 8a84 	vstr	s17, [r9, #528]	; 0x210
 8012688:	edc9 8a85 	vstr	s17, [r9, #532]	; 0x214
 801268c:	edc9 8a86 	vstr	s17, [r9, #536]	; 0x218
 8012690:	edc9 8a6e 	vstr	s17, [r9, #440]	; 0x1b8
 8012694:	edc9 8a87 	vstr	s17, [r9, #540]	; 0x21c
 8012698:	edc9 8a88 	vstr	s17, [r9, #544]	; 0x220
 801269c:	edc9 8a8a 	vstr	s17, [r9, #552]	; 0x228
 80126a0:	edc9 8a8b 	vstr	s17, [r9, #556]	; 0x22c
 80126a4:	edc9 8a8c 	vstr	s17, [r9, #560]	; 0x230
 80126a8:	edc9 8a8d 	vstr	s17, [r9, #564]	; 0x234
 80126ac:	edc9 8a8e 	vstr	s17, [r9, #568]	; 0x238
 80126b0:	edc9 8a8f 	vstr	s17, [r9, #572]	; 0x23c
 80126b4:	edc9 8a6f 	vstr	s17, [r9, #444]	; 0x1bc
 80126b8:	edc9 8a90 	vstr	s17, [r9, #576]	; 0x240
 80126bc:	edc9 8a91 	vstr	s17, [r9, #580]	; 0x244
 80126c0:	edc9 8a92 	vstr	s17, [r9, #584]	; 0x248
 80126c4:	edc9 8a94 	vstr	s17, [r9, #592]	; 0x250
 80126c8:	edc9 8a95 	vstr	s17, [r9, #596]	; 0x254
 80126cc:	edc9 8a96 	vstr	s17, [r9, #600]	; 0x258
 80126d0:	edc9 8a97 	vstr	s17, [r9, #604]	; 0x25c
 80126d4:	edc9 8a98 	vstr	s17, [r9, #608]	; 0x260
 80126d8:	edc9 8a70 	vstr	s17, [r9, #448]	; 0x1c0
 80126dc:	edc9 8a99 	vstr	s17, [r9, #612]	; 0x264
 80126e0:	edc9 8a9a 	vstr	s17, [r9, #616]	; 0x268
 80126e4:	edc9 8a9b 	vstr	s17, [r9, #620]	; 0x26c
 80126e8:	edc9 8a9c 	vstr	s17, [r9, #624]	; 0x270
 80126ec:	edc9 8a9e 	vstr	s17, [r9, #632]	; 0x278
 80126f0:	edc9 7aa7 	vstr	s15, [r9, #668]	; 0x29c
 80126f4:	edc9 7ab1 	vstr	s15, [r9, #708]	; 0x2c4
 80126f8:	edc9 7abb 	vstr	s15, [r9, #748]	; 0x2ec
 80126fc:	edc9 8a9f 	vstr	s17, [r9, #636]	; 0x27c
 8012700:	edc9 8aa0 	vstr	s17, [r9, #640]	; 0x280
 8012704:	edc9 8aa1 	vstr	s17, [r9, #644]	; 0x284
 8012708:	edc9 8a71 	vstr	s17, [r9, #452]	; 0x1c4
 801270c:	edc9 8aa2 	vstr	s17, [r9, #648]	; 0x288
 8012710:	edc9 8aa3 	vstr	s17, [r9, #652]	; 0x28c
 8012714:	edc9 8aa4 	vstr	s17, [r9, #656]	; 0x290
 8012718:	edc9 8aa5 	vstr	s17, [r9, #660]	; 0x294
 801271c:	edc9 8aa6 	vstr	s17, [r9, #664]	; 0x298
 8012720:	edc9 8aa8 	vstr	s17, [r9, #672]	; 0x2a0
 8012724:	edc9 8aa9 	vstr	s17, [r9, #676]	; 0x2a4
 8012728:	edc9 8aaa 	vstr	s17, [r9, #680]	; 0x2a8
 801272c:	edc9 8a72 	vstr	s17, [r9, #456]	; 0x1c8
 8012730:	edc9 8aab 	vstr	s17, [r9, #684]	; 0x2ac
 8012734:	edc9 8aac 	vstr	s17, [r9, #688]	; 0x2b0
 8012738:	edc9 8aad 	vstr	s17, [r9, #692]	; 0x2b4
 801273c:	edc9 8aae 	vstr	s17, [r9, #696]	; 0x2b8
 8012740:	edc9 8aaf 	vstr	s17, [r9, #700]	; 0x2bc
 8012744:	edc9 8ab0 	vstr	s17, [r9, #704]	; 0x2c0
 8012748:	edc9 8ab2 	vstr	s17, [r9, #712]	; 0x2c8
 801274c:	edc9 8ab3 	vstr	s17, [r9, #716]	; 0x2cc
 8012750:	edc9 8a73 	vstr	s17, [r9, #460]	; 0x1cc
 8012754:	edc9 8ab4 	vstr	s17, [r9, #720]	; 0x2d0
 8012758:	edc9 8ab5 	vstr	s17, [r9, #724]	; 0x2d4
 801275c:	edc9 8ab6 	vstr	s17, [r9, #728]	; 0x2d8
 8012760:	edc9 8ab7 	vstr	s17, [r9, #732]	; 0x2dc
 8012764:	edc9 8ab8 	vstr	s17, [r9, #736]	; 0x2e0
 8012768:	edc9 8ab9 	vstr	s17, [r9, #740]	; 0x2e4
 801276c:	edc9 8aba 	vstr	s17, [r9, #744]	; 0x2e8
 8012770:	edc9 8abc 	vstr	s17, [r9, #752]	; 0x2f0
 8012774:	9a04      	ldr	r2, [sp, #16]
 8012776:	f889 11ac 	strb.w	r1, [r9, #428]	; 0x1ac
 801277a:	edc9 8a74 	vstr	s17, [r9, #464]	; 0x1d0
 801277e:	edc9 7ac5 	vstr	s15, [r9, #788]	; 0x314
 8012782:	9203      	str	r2, [sp, #12]
 8012784:	f50d 624a 	add.w	r2, sp, #3232	; 0xca0
 8012788:	9202      	str	r2, [sp, #8]
 801278a:	f50d 6233 	add.w	r2, sp, #2864	; 0xb30
 801278e:	9201      	str	r2, [sp, #4]
 8012790:	f50d 621c 	add.w	r2, sp, #2496	; 0x9c0
 8012794:	9200      	str	r2, [sp, #0]
 8012796:	7820      	ldrb	r0, [r4, #0]
 8012798:	edc9 8abd 	vstr	s17, [r9, #756]	; 0x2f4
 801279c:	f50d 6305 	add.w	r3, sp, #2128	; 0x850
 80127a0:	f50d 62dc 	add.w	r2, sp, #1760	; 0x6e0
 80127a4:	f20d 61bc 	addw	r1, sp, #1724	; 0x6bc
 80127a8:	edc9 8abe 	vstr	s17, [r9, #760]	; 0x2f8
 80127ac:	edc9 8abf 	vstr	s17, [r9, #764]	; 0x2fc
 80127b0:	edc9 8ac0 	vstr	s17, [r9, #768]	; 0x300
 80127b4:	edc9 8ac1 	vstr	s17, [r9, #772]	; 0x304
 80127b8:	edc9 8ac2 	vstr	s17, [r9, #776]	; 0x308
 80127bc:	edc9 8ac3 	vstr	s17, [r9, #780]	; 0x30c
 80127c0:	edc9 8ac4 	vstr	s17, [r9, #784]	; 0x310
 80127c4:	f7fd fe0a 	bl	80103dc <DataHist_parameters>
 80127c8:	f609 1344 	addw	r3, r9, #2372	; 0x944
 80127cc:	f509 6216 	add.w	r2, r9, #2400	; 0x960
 80127d0:	f609 1168 	addw	r1, r9, #2408	; 0x968
 80127d4:	f509 6017 	add.w	r0, r9, #2416	; 0x970
 80127d8:	f10d 0c20 	add.w	ip, sp, #32
 80127dc:	9304      	str	r3, [sp, #16]
 80127de:	9205      	str	r2, [sp, #20]
 80127e0:	9106      	str	r1, [sp, #24]
 80127e2:	9007      	str	r0, [sp, #28]
 80127e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80127e8:	f8c9 393c 	str.w	r3, [r9, #2364]	; 0x93c
 80127ec:	9b04      	ldr	r3, [sp, #16]
 80127ee:	f8c9 0930 	str.w	r0, [r9, #2352]	; 0x930
 80127f2:	f8c9 1934 	str.w	r1, [r9, #2356]	; 0x934
 80127f6:	f8c9 2938 	str.w	r2, [r9, #2360]	; 0x938
 80127fa:	9906      	ldr	r1, [sp, #24]
 80127fc:	9a05      	ldr	r2, [sp, #20]
 80127fe:	9807      	ldr	r0, [sp, #28]
 8012800:	f509 6b14 	add.w	fp, r9, #2368	; 0x940
 8012804:	f609 1a5c 	addw	sl, r9, #2396	; 0x95c
 8012808:	edcb 8a00 	vstr	s17, [fp]
 801280c:	f609 1748 	addw	r7, r9, #2376	; 0x948
 8012810:	edca 8a00 	vstr	s17, [sl]
 8012814:	f609 1664 	addw	r6, r9, #2404	; 0x964
 8012818:	edc3 8a00 	vstr	s17, [r3]
 801281c:	f609 1554 	addw	r5, r9, #2388	; 0x954
 8012820:	f609 1458 	addw	r4, r9, #2392	; 0x958
 8012824:	f609 1e6c 	addw	lr, r9, #2412	; 0x96c
 8012828:	230a      	movs	r3, #10
 801282a:	edc2 8a00 	vstr	s17, [r2]
 801282e:	edc7 8a00 	vstr	s17, [r7]
 8012832:	edc6 8a00 	vstr	s17, [r6]
 8012836:	f8c9 894c 	str.w	r8, [r9, #2380]	; 0x94c
 801283a:	f8a9 8950 	strh.w	r8, [r9, #2384]	; 0x950
 801283e:	edc5 8a00 	vstr	s17, [r5]
 8012842:	ed84 8a00 	vstr	s16, [r4]
 8012846:	edc1 8a00 	vstr	s17, [r1]
 801284a:	edc0 8a00 	vstr	s17, [r0]
 801284e:	edce 8a00 	vstr	s17, [lr]
 8012852:	f8c9 3974 	str.w	r3, [r9, #2420]	; 0x974
 8012856:	f889 8978 	strb.w	r8, [r9, #2424]	; 0x978
 801285a:	f60d 4dd4 	addw	sp, sp, #3284	; 0xcd4
 801285e:	ecbd 8b02 	vpop	{d8}
 8012862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012866:	bf00      	nop

08012868 <MEMS_runMagCal.constprop.0>:
 8012868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801286c:	f8df b4b4 	ldr.w	fp, [pc, #1204]	; 8012d24 <MEMS_runMagCal.constprop.0+0x4bc>
 8012870:	ed2d 8b0c 	vpush	{d8-d13}
 8012874:	f8bb 5008 	ldrh.w	r5, [fp, #8]
 8012878:	2d82      	cmp	r5, #130	; 0x82
 801287a:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 801287e:	f240 823b 	bls.w	8012cf8 <MEMS_runMagCal.constprop.0+0x490>
 8012882:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8012886:	f8db 100c 	ldr.w	r1, [fp, #12]
 801288a:	1e6b      	subs	r3, r5, #1
 801288c:	fb02 1113 	mls	r1, r2, r3, r1
 8012890:	2381      	movs	r3, #129	; 0x81
 8012892:	fb12 1303 	smlabb	r3, r2, r3, r1
 8012896:	f105 067e 	add.w	r6, r5, #126	; 0x7e
 801289a:	9303      	str	r3, [sp, #12]
 801289c:	2382      	movs	r3, #130	; 0x82
 801289e:	9102      	str	r1, [sp, #8]
 80128a0:	b2f6      	uxtb	r6, r6
 80128a2:	9301      	str	r3, [sp, #4]
 80128a4:	4618      	mov	r0, r3
 80128a6:	f8db 4010 	ldr.w	r4, [fp, #16]
 80128aa:	2300      	movs	r3, #0
 80128ac:	f50d 7a9c 	add.w	sl, sp, #312	; 0x138
 80128b0:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 80128b4:	f814 7033 	ldrb.w	r7, [r4, r3, lsl #3]
 80128b8:	f80a 7033 	strb.w	r7, [sl, r3, lsl #3]
 80128bc:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 80128c0:	3301      	adds	r3, #1
 80128c2:	f8d1 c002 	ldr.w	ip, [r1, #2]
 80128c6:	88cf      	ldrh	r7, [r1, #6]
 80128c8:	f8c2 c002 	str.w	ip, [r2, #2]
 80128cc:	b2d9      	uxtb	r1, r3
 80128ce:	4281      	cmp	r1, r0
 80128d0:	80d7      	strh	r7, [r2, #6]
 80128d2:	460b      	mov	r3, r1
 80128d4:	d3ec      	bcc.n	80128b0 <MEMS_runMagCal.constprop.0+0x48>
 80128d6:	2d82      	cmp	r5, #130	; 0x82
 80128d8:	bf86      	itte	hi
 80128da:	f1a5 0382 	subhi.w	r3, r5, #130	; 0x82
 80128de:	b29b      	uxthhi	r3, r3
 80128e0:	2300      	movls	r3, #0
 80128e2:	f8ab 3008 	strh.w	r3, [fp, #8]
 80128e6:	b1c6      	cbz	r6, 801291a <MEMS_runMagCal.constprop.0+0xb2>
 80128e8:	f8db 3010 	ldr.w	r3, [fp, #16]
 80128ec:	3e01      	subs	r6, #1
 80128ee:	f103 050a 	add.w	r5, r3, #10
 80128f2:	b2f6      	uxtb	r6, r6
 80128f4:	2700      	movs	r7, #0
 80128f6:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 80128fa:	3302      	adds	r3, #2
 80128fc:	f893 440e 	ldrb.w	r4, [r3, #1038]	; 0x40e
 8012900:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 8012904:	f8b3 2414 	ldrh.w	r2, [r3, #1044]	; 0x414
 8012908:	f803 4c02 	strb.w	r4, [r3, #-2]
 801290c:	6019      	str	r1, [r3, #0]
 801290e:	809a      	strh	r2, [r3, #4]
 8012910:	f883 740e 	strb.w	r7, [r3, #1038]	; 0x40e
 8012914:	3308      	adds	r3, #8
 8012916:	42ab      	cmp	r3, r5
 8012918:	d1f0      	bne.n	80128fc <MEMS_runMagCal.constprop.0+0x94>
 801291a:	9a03      	ldr	r2, [sp, #12]
 801291c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012920:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 8012924:	f502 31c3 	add.w	r1, r2, #99840	; 0x18600
 8012928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801292c:	31a0      	adds	r1, #160	; 0xa0
 801292e:	fb03 f202 	mul.w	r2, r3, r2
 8012932:	4291      	cmp	r1, r2
 8012934:	f080 8202 	bcs.w	8012d3c <MEMS_runMagCal.constprop.0+0x4d4>
 8012938:	3b00      	subs	r3, #0
 801293a:	bf18      	it	ne
 801293c:	2301      	movne	r3, #1
 801293e:	e9cb 3306 	strd	r3, r3, [fp, #24]
 8012942:	2300      	movs	r3, #0
 8012944:	f88b 30a0 	strb.w	r3, [fp, #160]	; 0xa0
 8012948:	f8cb 3020 	str.w	r3, [fp, #32]
 801294c:	2300      	movs	r3, #0
 801294e:	e9cb 332a 	strd	r3, r3, [fp, #168]	; 0xa8
 8012952:	e9cb 332c 	strd	r3, r3, [fp, #176]	; 0xb0
 8012956:	e9cb 332e 	strd	r3, r3, [fp, #184]	; 0xb8
 801295a:	23ff      	movs	r3, #255	; 0xff
 801295c:	f88b 30a2 	strb.w	r3, [fp, #162]	; 0xa2
 8012960:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 8012964:	f100 38ff 	add.w	r8, r0, #4294967295
 8012968:	932e      	str	r3, [sp, #184]	; 0xb8
 801296a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801296e:	ed9f 7aea 	vldr	s14, [pc, #936]	; 8012d18 <MEMS_runMagCal.constprop.0+0x4b0>
 8012972:	ed9b 8a01 	vldr	s16, [fp, #4]
 8012976:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 801297a:	fa1f f888 	uxth.w	r8, r8
 801297e:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 8012982:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012986:	933e      	str	r3, [sp, #248]	; 0xf8
 8012988:	2100      	movs	r1, #0
 801298a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801298e:	f1b8 0f03 	cmp.w	r8, #3
 8012992:	ed9b 6a1f 	vldr	s12, [fp, #124]	; 0x7c
 8012996:	eddb 5a1c 	vldr	s11, [fp, #112]	; 0x70
 801299a:	ed9b 5a23 	vldr	s10, [fp, #140]	; 0x8c
 801299e:	eddb 4a1d 	vldr	s9, [fp, #116]	; 0x74
 80129a2:	ed9b 4a27 	vldr	s8, [fp, #156]	; 0x9c
 80129a6:	eddb 3a1e 	vldr	s7, [fp, #120]	; 0x78
 80129aa:	f8ad 30fc 	strh.w	r3, [sp, #252]	; 0xfc
 80129ae:	eec7 8a88 	vdiv.f32	s17, s15, s16
 80129b2:	46c6      	mov	lr, r8
 80129b4:	4652      	mov	r2, sl
 80129b6:	bf28      	it	cs
 80129b8:	f04f 0e03 	movcs.w	lr, #3
 80129bc:	460b      	mov	r3, r1
 80129be:	eef0 7a47 	vmov.f32	s15, s14
 80129c2:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
 80129c6:	7814      	ldrb	r4, [r2, #0]
 80129c8:	3301      	adds	r3, #1
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	2c00      	cmp	r4, #0
 80129ce:	d052      	beq.n	8012a76 <MEMS_runMagCal.constprop.0+0x20e>
 80129d0:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80129d4:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80129d8:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
 80129dc:	f9bd 60b8 	ldrsh.w	r6, [sp, #184]	; 0xb8
 80129e0:	f9bd 70f8 	ldrsh.w	r7, [sp, #248]	; 0xf8
 80129e4:	ee07 ca10 	vmov	s14, ip
 80129e8:	ee06 4a90 	vmov	s13, r4
 80129ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80129f0:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
 80129f4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80129f8:	ee33 3a65 	vsub.f32	s6, s6, s11
 80129fc:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012a00:	42a6      	cmp	r6, r4
 8012a02:	ee23 3a06 	vmul.f32	s6, s6, s12
 8012a06:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012a0a:	ee06 5a90 	vmov	s13, r5
 8012a0e:	bfb8      	it	lt
 8012a10:	4626      	movlt	r6, r4
 8012a12:	42bc      	cmp	r4, r7
 8012a14:	bfa8      	it	ge
 8012a16:	463c      	movge	r4, r7
 8012a18:	eea3 7a03 	vfma.f32	s14, s6, s6
 8012a1c:	f9bd 70ba 	ldrsh.w	r7, [sp, #186]	; 0xba
 8012a20:	f8ad 40f8 	strh.w	r4, [sp, #248]	; 0xf8
 8012a24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012a28:	f9bd 40fa 	ldrsh.w	r4, [sp, #250]	; 0xfa
 8012a2c:	f8ad 60b8 	strh.w	r6, [sp, #184]	; 0xb8
 8012a30:	4567      	cmp	r7, ip
 8012a32:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8012a36:	bfb8      	it	lt
 8012a38:	4667      	movlt	r7, ip
 8012a3a:	4564      	cmp	r4, ip
 8012a3c:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	; 0xbc
 8012a40:	f8ad 70ba 	strh.w	r7, [sp, #186]	; 0xba
 8012a44:	bfa8      	it	ge
 8012a46:	4664      	movge	r4, ip
 8012a48:	ee66 6a84 	vmul.f32	s13, s13, s8
 8012a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a50:	f8ad 40fa 	strh.w	r4, [sp, #250]	; 0xfa
 8012a54:	f9bd 40fc 	ldrsh.w	r4, [sp, #252]	; 0xfc
 8012a58:	42ae      	cmp	r6, r5
 8012a5a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8012a5e:	bfb8      	it	lt
 8012a60:	462e      	movlt	r6, r5
 8012a62:	42ac      	cmp	r4, r5
 8012a64:	f101 0101 	add.w	r1, r1, #1
 8012a68:	bfa8      	it	ge
 8012a6a:	462c      	movge	r4, r5
 8012a6c:	f8ad 60bc 	strh.w	r6, [sp, #188]	; 0xbc
 8012a70:	f8ad 40fc 	strh.w	r4, [sp, #252]	; 0xfc
 8012a74:	b249      	sxtb	r1, r1
 8012a76:	4573      	cmp	r3, lr
 8012a78:	f102 0208 	add.w	r2, r2, #8
 8012a7c:	d9a3      	bls.n	80129c6 <MEMS_runMagCal.constprop.0+0x15e>
 8012a7e:	4283      	cmp	r3, r0
 8012a80:	f080 856e 	bcs.w	8013560 <MEMS_runMagCal.constprop.0+0xcf8>
 8012a84:	eba8 0803 	sub.w	r8, r8, r3
 8012a88:	fa13 f888 	uxtah	r8, r3, r8
 8012a8c:	f10a 0708 	add.w	r7, sl, #8
 8012a90:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8012a94:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8012a98:	f04f 0c00 	mov.w	ip, #0
 8012a9c:	781a      	ldrb	r2, [r3, #0]
 8012a9e:	1c4d      	adds	r5, r1, #1
 8012aa0:	2a00      	cmp	r2, #0
 8012aa2:	f000 8096 	beq.w	8012bd2 <MEMS_runMagCal.constprop.0+0x36a>
 8012aa6:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8012aaa:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8012aae:	f933 6c16 	ldrsh.w	r6, [r3, #-22]
 8012ab2:	f933 2c06 	ldrsh.w	r2, [r3, #-6]
 8012ab6:	f933 1c1e 	ldrsh.w	r1, [r3, #-30]
 8012aba:	f933 ec1a 	ldrsh.w	lr, [r3, #-26]
 8012abe:	1a61      	subs	r1, r4, r1
 8012ac0:	ee06 0a90 	vmov	s13, r0
 8012ac4:	1b92      	subs	r2, r2, r6
 8012ac6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8012aca:	ee03 4a10 	vmov	s6, r4
 8012ace:	ee07 2a10 	vmov	s14, r2
 8012ad2:	f933 6c14 	ldrsh.w	r6, [r3, #-20]
 8012ad6:	f933 2c04 	ldrsh.w	r2, [r3, #-4]
 8012ada:	f933 1c1c 	ldrsh.w	r1, [r3, #-28]
 8012ade:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012ae2:	1a41      	subs	r1, r0, r1
 8012ae4:	eef8 2ac3 	vcvt.f32.s32	s5, s6
 8012ae8:	1b92      	subs	r2, r2, r6
 8012aea:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012aee:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8012af2:	ee03 2a10 	vmov	s6, r2
 8012af6:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 8012afa:	f933 2c12 	ldrsh.w	r2, [r3, #-18]
 8012afe:	f9bd 60f8 	ldrsh.w	r6, [sp, #248]	; 0xf8
 8012b02:	ee72 2ae5 	vsub.f32	s5, s5, s11
 8012b06:	ee66 6a85 	vmul.f32	s13, s13, s10
 8012b0a:	1a8a      	subs	r2, r1, r2
 8012b0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b10:	f9bd 10b8 	ldrsh.w	r1, [sp, #184]	; 0xb8
 8012b14:	ee62 2a86 	vmul.f32	s5, s5, s12
 8012b18:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012b1c:	42a1      	cmp	r1, r4
 8012b1e:	eee2 6aa2 	vfma.f32	s13, s5, s5
 8012b22:	bfb8      	it	lt
 8012b24:	4621      	movlt	r1, r4
 8012b26:	f8ad 10b8 	strh.w	r1, [sp, #184]	; 0xb8
 8012b2a:	eeb0 7ac7 	vabs.f32	s14, s14
 8012b2e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012b32:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8012b36:	b269      	sxtb	r1, r5
 8012b38:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8012b3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012b40:	42b4      	cmp	r4, r6
 8012b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012b46:	eeb0 3ac3 	vabs.f32	s6, s6
 8012b4a:	ee06 5a90 	vmov	s13, r5
 8012b4e:	eba5 0e0e 	sub.w	lr, r5, lr
 8012b52:	bfa8      	it	ge
 8012b54:	4634      	movge	r4, r6
 8012b56:	ee37 7a03 	vadd.f32	s14, s14, s6
 8012b5a:	f9bd 60ba 	ldrsh.w	r6, [sp, #186]	; 0xba
 8012b5e:	f8ad 40f8 	strh.w	r4, [sp, #248]	; 0xf8
 8012b62:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 8012b66:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
 8012b6a:	ee06 2a90 	vmov	s13, r2
 8012b6e:	4286      	cmp	r6, r0
 8012b70:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012b74:	4632      	mov	r2, r6
 8012b76:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012b7a:	bfb8      	it	lt
 8012b7c:	4602      	movlt	r2, r0
 8012b7e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012b82:	f8ad 20ba 	strh.w	r2, [sp, #186]	; 0xba
 8012b86:	f9bd 20fa 	ldrsh.w	r2, [sp, #250]	; 0xfa
 8012b8a:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	; 0xbc
 8012b8e:	eef0 6ae6 	vabs.f32	s13, s13
 8012b92:	4290      	cmp	r0, r2
 8012b94:	ee33 3a63 	vsub.f32	s6, s6, s7
 8012b98:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012b9c:	bfa8      	it	ge
 8012b9e:	4610      	movge	r0, r2
 8012ba0:	f9bd 20fc 	ldrsh.w	r2, [sp, #252]	; 0xfc
 8012ba4:	f8ad 00fa 	strh.w	r0, [sp, #250]	; 0xfa
 8012ba8:	42ae      	cmp	r6, r5
 8012baa:	ee23 3a04 	vmul.f32	s6, s6, s8
 8012bae:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012bb2:	bfb8      	it	lt
 8012bb4:	462e      	movlt	r6, r5
 8012bb6:	4295      	cmp	r5, r2
 8012bb8:	bfa8      	it	ge
 8012bba:	4615      	movge	r5, r2
 8012bbc:	eee3 7a03 	vfma.f32	s15, s6, s6
 8012bc0:	f8ad 60bc 	strh.w	r6, [sp, #188]	; 0xbc
 8012bc4:	f8ad 50fc 	strh.w	r5, [sp, #252]	; 0xfc
 8012bc8:	ee17 2a10 	vmov	r2, s14
 8012bcc:	4594      	cmp	ip, r2
 8012bce:	bf38      	it	cc
 8012bd0:	4694      	movcc	ip, r2
 8012bd2:	3308      	adds	r3, #8
 8012bd4:	429f      	cmp	r7, r3
 8012bd6:	f47f af61 	bne.w	8012a9c <MEMS_runMagCal.constprop.0+0x234>
 8012bda:	2900      	cmp	r1, #0
 8012bdc:	f000 833e 	beq.w	801325c <MEMS_runMagCal.constprop.0+0x9f4>
 8012be0:	f9bd 00b8 	ldrsh.w	r0, [sp, #184]	; 0xb8
 8012be4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8012be8:	f280 80b3 	bge.w	8012d52 <MEMS_runMagCal.constprop.0+0x4ea>
 8012bec:	f9bd 20f8 	ldrsh.w	r2, [sp, #248]	; 0xf8
 8012bf0:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8012bf4:	f2c0 80ad 	blt.w	8012d52 <MEMS_runMagCal.constprop.0+0x4ea>
 8012bf8:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
 8012bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012c00:	f280 80a7 	bge.w	8012d52 <MEMS_runMagCal.constprop.0+0x4ea>
 8012c04:	f9bd 60fa 	ldrsh.w	r6, [sp, #250]	; 0xfa
 8012c08:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8012c0c:	f2c0 80a1 	blt.w	8012d52 <MEMS_runMagCal.constprop.0+0x4ea>
 8012c10:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8012c14:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8012c18:	f280 809b 	bge.w	8012d52 <MEMS_runMagCal.constprop.0+0x4ea>
 8012c1c:	f9bd 50fc 	ldrsh.w	r5, [sp, #252]	; 0xfc
 8012c20:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8012c24:	f2c0 8095 	blt.w	8012d52 <MEMS_runMagCal.constprop.0+0x4ea>
 8012c28:	ee07 1a10 	vmov	s14, r1
 8012c2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c30:	1a80      	subs	r0, r0, r2
 8012c32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012c36:	1b9a      	subs	r2, r3, r6
 8012c38:	4290      	cmp	r0, r2
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	eba4 0105 	sub.w	r1, r4, r5
 8012c40:	bfb8      	it	lt
 8012c42:	4613      	movlt	r3, r2
 8012c44:	428b      	cmp	r3, r1
 8012c46:	bfb8      	it	lt
 8012c48:	460b      	movlt	r3, r1
 8012c4a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012d1c <MEMS_runMagCal.constprop.0+0x4b4>
 8012c4e:	eef1 7ae6 	vsqrt.f32	s15, s13
 8012c52:	ee06 3a90 	vmov	s13, r3
 8012c56:	ee28 7a87 	vmul.f32	s14, s17, s14
 8012c5a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012c5e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8012c62:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c6a:	d472      	bmi.n	8012d52 <MEMS_runMagCal.constprop.0+0x4ea>
 8012c6c:	ee07 ca10 	vmov	s14, ip
 8012c70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012c74:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8012d20 <MEMS_runMagCal.constprop.0+0x4b8>
 8012c78:	ee27 7a08 	vmul.f32	s14, s14, s16
 8012c7c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8012c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c84:	dc65      	bgt.n	8012d52 <MEMS_runMagCal.constprop.0+0x4ea>
 8012c86:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8012c8a:	ee28 6a86 	vmul.f32	s12, s17, s12
 8012c8e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8012c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c96:	f300 875c 	bgt.w	8013b52 <MEMS_runMagCal.constprop.0+0x12ea>
 8012c9a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8012c9e:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012ca2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012caa:	f340 832c 	ble.w	8013306 <MEMS_runMagCal.constprop.0+0xa9e>
 8012cae:	ee07 0a10 	vmov	s14, r0
 8012cb2:	ee36 6a06 	vadd.f32	s12, s12, s12
 8012cb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012cba:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8012cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc2:	f340 8320 	ble.w	8013306 <MEMS_runMagCal.constprop.0+0xa9e>
 8012cc6:	ee07 2a10 	vmov	s14, r2
 8012cca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012cce:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8012cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd6:	f140 8316 	bpl.w	8013306 <MEMS_runMagCal.constprop.0+0xa9e>
 8012cda:	ee07 1a10 	vmov	s14, r1
 8012cde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ce2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8012ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cea:	bf4c      	ite	mi
 8012cec:	2301      	movmi	r3, #1
 8012cee:	2300      	movpl	r3, #0
 8012cf0:	9308      	str	r3, [sp, #32]
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	9304      	str	r3, [sp, #16]
 8012cf6:	e309      	b.n	801330c <MEMS_runMagCal.constprop.0+0xaa4>
 8012cf8:	f8db 100c 	ldr.w	r1, [fp, #12]
 8012cfc:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 8012d00:	9103      	str	r1, [sp, #12]
 8012d02:	1e6b      	subs	r3, r5, #1
 8012d04:	fb02 1313 	mls	r3, r2, r3, r1
 8012d08:	9501      	str	r5, [sp, #4]
 8012d0a:	9302      	str	r3, [sp, #8]
 8012d0c:	2d00      	cmp	r5, #0
 8012d0e:	f000 82f0 	beq.w	80132f2 <MEMS_runMagCal.constprop.0+0xa8a>
 8012d12:	4628      	mov	r0, r5
 8012d14:	2600      	movs	r6, #0
 8012d16:	e5c6      	b.n	80128a6 <MEMS_runMagCal.constprop.0+0x3e>
 8012d18:	00000000 	.word	0x00000000
 8012d1c:	43020000 	.word	0x43020000
 8012d20:	447a0000 	.word	0x447a0000
 8012d24:	200003ac 	.word	0x200003ac
 8012d28:	4423d666 	.word	0x4423d666
 8012d2c:	42c80000 	.word	0x42c80000
 8012d30:	427c0000 	.word	0x427c0000
 8012d34:	3f666666 	.word	0x3f666666
 8012d38:	3eaaaaab 	.word	0x3eaaaaab
 8012d3c:	f8db 20a4 	ldr.w	r2, [fp, #164]	; 0xa4
 8012d40:	4291      	cmp	r1, r2
 8012d42:	f4ff adf9 	bcc.w	8012938 <MEMS_runMagCal.constprop.0+0xd0>
 8012d46:	f89b 30a0 	ldrb.w	r3, [fp, #160]	; 0xa0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	f47f ae08 	bne.w	8012960 <MEMS_runMagCal.constprop.0+0xf8>
 8012d50:	e5fc      	b.n	801294c <MEMS_runMagCal.constprop.0+0xe4>
 8012d52:	f04f 0902 	mov.w	r9, #2
 8012d56:	2300      	movs	r3, #0
 8012d58:	9308      	str	r3, [sp, #32]
 8012d5a:	9304      	str	r3, [sp, #16]
 8012d5c:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8012d28 <MEMS_runMagCal.constprop.0+0x4c0>
 8012d60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d68:	f140 826c 	bpl.w	8013244 <MEMS_runMagCal.constprop.0+0x9dc>
 8012d6c:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 8012d2c <MEMS_runMagCal.constprop.0+0x4c4>
 8012d70:	f89b 406c 	ldrb.w	r4, [fp, #108]	; 0x6c
 8012d74:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012d78:	2c01      	cmp	r4, #1
 8012d7a:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8012d7e:	d911      	bls.n	8012da4 <MEMS_runMagCal.constprop.0+0x53c>
 8012d80:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012d84:	ee17 3a90 	vmov	r3, s15
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	2bc7      	cmp	r3, #199	; 0xc7
 8012d8c:	f201 8085 	bhi.w	8013e9a <MEMS_runMagCal.constprop.0+0x1632>
 8012d90:	2400      	movs	r4, #0
 8012d92:	23ff      	movs	r3, #255	; 0xff
 8012d94:	f88b 406c 	strb.w	r4, [fp, #108]	; 0x6c
 8012d98:	f88b 40a0 	strb.w	r4, [fp, #160]	; 0xa0
 8012d9c:	f88b 4054 	strb.w	r4, [fp, #84]	; 0x54
 8012da0:	f88b 30a2 	strb.w	r3, [fp, #162]	; 0xa2
 8012da4:	f1b9 0f00 	cmp.w	r9, #0
 8012da8:	f040 823d 	bne.w	8013226 <MEMS_runMagCal.constprop.0+0x9be>
 8012dac:	f99b 3026 	ldrsb.w	r3, [fp, #38]	; 0x26
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	f2c0 83b2 	blt.w	801351a <MEMS_runMagCal.constprop.0+0xcb2>
 8012db6:	f89b 7025 	ldrb.w	r7, [fp, #37]	; 0x25
 8012dba:	3301      	adds	r3, #1
 8012dbc:	fbb3 f2f7 	udiv	r2, r3, r7
 8012dc0:	fb07 3312 	mls	r3, r7, r2, r3
 8012dc4:	b25b      	sxtb	r3, r3
 8012dc6:	461e      	mov	r6, r3
 8012dc8:	f89b 5024 	ldrb.w	r5, [fp, #36]	; 0x24
 8012dcc:	f88b 3026 	strb.w	r3, [fp, #38]	; 0x26
 8012dd0:	3501      	adds	r5, #1
 8012dd2:	42bd      	cmp	r5, r7
 8012dd4:	bfa8      	it	ge
 8012dd6:	463d      	movge	r5, r7
 8012dd8:	fa5f f885 	uxtb.w	r8, r5
 8012ddc:	f88b 8024 	strb.w	r8, [fp, #36]	; 0x24
 8012de0:	f00a fafe 	bl	801d3e0 <roundf>
 8012de4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012de8:	eb0b 0346 	add.w	r3, fp, r6, lsl #1
 8012dec:	ee10 2a10 	vmov	r2, s0
 8012df0:	851a      	strh	r2, [r3, #40]	; 0x28
 8012df2:	f1b9 0f00 	cmp.w	r9, #0
 8012df6:	f040 8216 	bne.w	8013226 <MEMS_runMagCal.constprop.0+0x9be>
 8012dfa:	f8db 1020 	ldr.w	r1, [fp, #32]
 8012dfe:	b129      	cbz	r1, 8012e0c <MEMS_runMagCal.constprop.0+0x5a4>
 8012e00:	9a03      	ldr	r2, [sp, #12]
 8012e02:	f501 6396 	add.w	r3, r1, #1200	; 0x4b0
 8012e06:	4293      	cmp	r3, r2
 8012e08:	f200 8216 	bhi.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 8012e0c:	9b04      	ldr	r3, [sp, #16]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	f040 8212 	bne.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 8012e14:	1ea3      	subs	r3, r4, #2
 8012e16:	2b01      	cmp	r3, #1
 8012e18:	f240 822f 	bls.w	801327a <MEMS_runMagCal.constprop.0+0xa12>
 8012e1c:	eef0 9a08 	vmov.f32	s19, #8	; 0x40400000  3.0
 8012e20:	ee68 9aa9 	vmul.f32	s19, s17, s19
 8012e24:	ed5f 7a3e 	vldr	s15, [pc, #-248]	; 8012d30 <MEMS_runMagCal.constprop.0+0x4c8>
 8012e28:	f8db 20a4 	ldr.w	r2, [fp, #164]	; 0xa4
 8012e2c:	9903      	ldr	r1, [sp, #12]
 8012e2e:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8012e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e36:	ee17 3a90 	vmov	r3, s15
 8012e3a:	fa1f f983 	uxth.w	r9, r3
 8012e3e:	f502 531c 	add.w	r3, r2, #9984	; 0x2700
 8012e42:	3310      	adds	r3, #16
 8012e44:	428b      	cmp	r3, r1
 8012e46:	f080 820b 	bcs.w	8013260 <MEMS_runMagCal.constprop.0+0x9f8>
 8012e4a:	f242 3328 	movw	r3, #9000	; 0x2328
 8012e4e:	4299      	cmp	r1, r3
 8012e50:	f89b 60a0 	ldrb.w	r6, [fp, #160]	; 0xa0
 8012e54:	f89b 00a1 	ldrb.w	r0, [fp, #161]	; 0xa1
 8012e58:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	; 0xa2
 8012e5c:	bf1a      	itte	ne
 8012e5e:	f5a1 550c 	subne.w	r5, r1, #8960	; 0x2300
 8012e62:	3d28      	subne	r5, #40	; 0x28
 8012e64:	2500      	moveq	r5, #0
 8012e66:	4286      	cmp	r6, r0
 8012e68:	f000 86dd 	beq.w	8013c26 <MEMS_runMagCal.constprop.0+0x13be>
 8012e6c:	1c59      	adds	r1, r3, #1
 8012e6e:	1b89      	subs	r1, r1, r6
 8012e70:	fb91 f3f0 	sdiv	r3, r1, r0
 8012e74:	fb00 1113 	mls	r1, r0, r3, r1
 8012e78:	2900      	cmp	r1, #0
 8012e7a:	bfb8      	it	lt
 8012e7c:	1809      	addlt	r1, r1, r0
 8012e7e:	b209      	sxth	r1, r1
 8012e80:	b346      	cbz	r6, 8012ed4 <MEMS_runMagCal.constprop.0+0x66c>
 8012e82:	1b52      	subs	r2, r2, r5
 8012e84:	f8dd c010 	ldr.w	ip, [sp, #16]
 8012e88:	b294      	uxth	r4, r2
 8012e8a:	1877      	adds	r7, r6, r1
 8012e8c:	e002      	b.n	8012e94 <MEMS_runMagCal.constprop.0+0x62c>
 8012e8e:	3101      	adds	r1, #1
 8012e90:	428f      	cmp	r7, r1
 8012e92:	d019      	beq.n	8012ec8 <MEMS_runMagCal.constprop.0+0x660>
 8012e94:	fb91 f3f0 	sdiv	r3, r1, r0
 8012e98:	fb00 1313 	mls	r3, r0, r3, r1
 8012e9c:	b2db      	uxtb	r3, r3
 8012e9e:	3304      	adds	r3, #4
 8012ea0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012ea4:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8012ea8:	4422      	add	r2, r4
 8012eaa:	b212      	sxth	r2, r2
 8012eac:	2a00      	cmp	r2, #0
 8012eae:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8012eb2:	daec      	bge.n	8012e8e <MEMS_runMagCal.constprop.0+0x626>
 8012eb4:	1e73      	subs	r3, r6, #1
 8012eb6:	2e00      	cmp	r6, #0
 8012eb8:	f000 832c 	beq.w	8013514 <MEMS_runMagCal.constprop.0+0xcac>
 8012ebc:	3101      	adds	r1, #1
 8012ebe:	428f      	cmp	r7, r1
 8012ec0:	b2de      	uxtb	r6, r3
 8012ec2:	f04f 0c01 	mov.w	ip, #1
 8012ec6:	d1e5      	bne.n	8012e94 <MEMS_runMagCal.constprop.0+0x62c>
 8012ec8:	f1bc 0f01 	cmp.w	ip, #1
 8012ecc:	f88b 60a0 	strb.w	r6, [fp, #160]	; 0xa0
 8012ed0:	f000 8693 	beq.w	8013bfa <MEMS_runMagCal.constprop.0+0x1392>
 8012ed4:	f8cb 50a4 	str.w	r5, [fp, #164]	; 0xa4
 8012ed8:	2e00      	cmp	r6, #0
 8012eda:	f000 81c7 	beq.w	801326c <MEMS_runMagCal.constprop.0+0xa04>
 8012ede:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	; 0xa2
 8012ee2:	9a02      	ldr	r2, [sp, #8]
 8012ee4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012ee8:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8012eec:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8012ef0:	3308      	adds	r3, #8
 8012ef2:	442b      	add	r3, r5
 8012ef4:	4293      	cmp	r3, r2
 8012ef6:	f0c0 8689 	bcc.w	8013c0c <MEMS_runMagCal.constprop.0+0x13a4>
 8012efa:	9b08      	ldr	r3, [sp, #32]
 8012efc:	b923      	cbnz	r3, 8012f08 <MEMS_runMagCal.constprop.0+0x6a0>
 8012efe:	f89b 30a0 	ldrb.w	r3, [fp, #160]	; 0xa0
 8012f02:	2b0a      	cmp	r3, #10
 8012f04:	f240 81b6 	bls.w	8013274 <MEMS_runMagCal.constprop.0+0xa0c>
 8012f08:	ee29 aaa9 	vmul.f32	s20, s19, s19
 8012f0c:	ed5f 6a77 	vldr	s13, [pc, #-476]	; 8012d34 <MEMS_runMagCal.constprop.0+0x4cc>
 8012f10:	ed5f 7a77 	vldr	s15, [pc, #-476]	; 8012d38 <MEMS_runMagCal.constprop.0+0x4d0>
 8012f14:	9b04      	ldr	r3, [sp, #16]
 8012f16:	930a      	str	r3, [sp, #40]	; 0x28
 8012f18:	eeb7 9a08 	vmov.f32	s18, #120	; 0x3fc00000  1.5
 8012f1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012f20:	2200      	movs	r2, #0
 8012f22:	ee2a aa26 	vmul.f32	s20, s20, s13
 8012f26:	ee29 9a89 	vmul.f32	s18, s19, s18
 8012f2a:	ee68 8a87 	vmul.f32	s17, s17, s14
 8012f2e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012f32:	4617      	mov	r7, r2
 8012f34:	f81a 1037 	ldrb.w	r1, [sl, r7, lsl #3]
 8012f38:	eb0a 03c7 	add.w	r3, sl, r7, lsl #3
 8012f3c:	2900      	cmp	r1, #0
 8012f3e:	f000 8250 	beq.w	80133e2 <MEMS_runMagCal.constprop.0+0xb7a>
 8012f42:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8012f46:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8012f4a:	ee07 4a90 	vmov	s15, r4
 8012f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f52:	eef0 7ae7 	vabs.f32	s15, s15
 8012f56:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f5e:	f100 8226 	bmi.w	80133ae <MEMS_runMagCal.constprop.0+0xb46>
 8012f62:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8012f66:	f89b 00a0 	ldrb.w	r0, [fp, #160]	; 0xa0
 8012f6a:	2800      	cmp	r0, #0
 8012f6c:	f000 823b 	beq.w	80133e6 <MEMS_runMagCal.constprop.0+0xb7e>
 8012f70:	f9bb 33ba 	ldrsh.w	r3, [fp, #954]	; 0x3ba
 8012f74:	1b9b      	subs	r3, r3, r6
 8012f76:	fb03 f203 	mul.w	r2, r3, r3
 8012f7a:	f9bb 33b8 	ldrsh.w	r3, [fp, #952]	; 0x3b8
 8012f7e:	1b1b      	subs	r3, r3, r4
 8012f80:	fb03 2203 	mla	r2, r3, r3, r2
 8012f84:	f9bb 33bc 	ldrsh.w	r3, [fp, #956]	; 0x3bc
 8012f88:	eba3 0308 	sub.w	r3, r3, r8
 8012f8c:	fb03 2303 	mla	r3, r3, r3, r2
 8012f90:	ee07 3a90 	vmov	s15, r3
 8012f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f98:	eeb4 aae7 	vcmpe.f32	s20, s15
 8012f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa0:	f300 821f 	bgt.w	80133e2 <MEMS_runMagCal.constprop.0+0xb7a>
 8012fa4:	fb94 f3f9 	sdiv	r3, r4, r9
 8012fa8:	fb09 4313 	mls	r3, r9, r3, r4
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	bfb8      	it	lt
 8012fb0:	444b      	addlt	r3, r9
 8012fb2:	b21b      	sxth	r3, r3
 8012fb4:	ee00 3a10 	vmov	s0, r3
 8012fb8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012fbc:	9006      	str	r0, [sp, #24]
 8012fbe:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012fc2:	f00a fa0d 	bl	801d3e0 <roundf>
 8012fc6:	fb96 f3f9 	sdiv	r3, r6, r9
 8012fca:	fb09 6313 	mls	r3, r9, r3, r6
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	bfb8      	it	lt
 8012fd2:	444b      	addlt	r3, r9
 8012fd4:	b21b      	sxth	r3, r3
 8012fd6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012fda:	ee00 3a10 	vmov	s0, r3
 8012fde:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012fe2:	edcd 7a05 	vstr	s15, [sp, #20]
 8012fe6:	9806      	ldr	r0, [sp, #24]
 8012fe8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012fec:	9205      	str	r2, [sp, #20]
 8012fee:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012ff2:	9007      	str	r0, [sp, #28]
 8012ff4:	f00a f9f4 	bl	801d3e0 <roundf>
 8012ff8:	fb98 f3f9 	sdiv	r3, r8, r9
 8012ffc:	fb09 8313 	mls	r3, r9, r3, r8
 8013000:	2b00      	cmp	r3, #0
 8013002:	bfb8      	it	lt
 8013004:	444b      	addlt	r3, r9
 8013006:	b21b      	sxth	r3, r3
 8013008:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801300c:	ee00 3a10 	vmov	s0, r3
 8013010:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013014:	edcd 7a06 	vstr	s15, [sp, #24]
 8013018:	9807      	ldr	r0, [sp, #28]
 801301a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801301e:	9206      	str	r2, [sp, #24]
 8013020:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013024:	9009      	str	r0, [sp, #36]	; 0x24
 8013026:	f00a f9db 	bl	801d3e0 <roundf>
 801302a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801302e:	e9db 322a 	ldrd	r3, r2, [fp, #168]	; 0xa8
 8013032:	edcd 7a07 	vstr	s15, [sp, #28]
 8013036:	f89d 101c 	ldrb.w	r1, [sp, #28]
 801303a:	9107      	str	r1, [sp, #28]
 801303c:	9905      	ldr	r1, [sp, #20]
 801303e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013040:	291f      	cmp	r1, #31
 8013042:	f240 8261 	bls.w	8013508 <MEMS_runMagCal.constprop.0+0xca0>
 8013046:	f1a1 0220 	sub.w	r2, r1, #32
 801304a:	2101      	movs	r1, #1
 801304c:	fa01 f202 	lsl.w	r2, r1, r2
 8013050:	401a      	ands	r2, r3
 8013052:	9d06      	ldr	r5, [sp, #24]
 8013054:	2d1f      	cmp	r5, #31
 8013056:	e9db 312c 	ldrd	r3, r1, [fp, #176]	; 0xb0
 801305a:	f240 8243 	bls.w	80134e4 <MEMS_runMagCal.constprop.0+0xc7c>
 801305e:	f1a5 0120 	sub.w	r1, r5, #32
 8013062:	2501      	movs	r5, #1
 8013064:	fa05 f101 	lsl.w	r1, r5, r1
 8013068:	ea01 0c03 	and.w	ip, r1, r3
 801306c:	9907      	ldr	r1, [sp, #28]
 801306e:	291f      	cmp	r1, #31
 8013070:	e9db 532e 	ldrd	r5, r3, [fp, #184]	; 0xb8
 8013074:	f240 8242 	bls.w	80134fc <MEMS_runMagCal.constprop.0+0xc94>
 8013078:	f1a1 0520 	sub.w	r5, r1, #32
 801307c:	2101      	movs	r1, #1
 801307e:	fa01 f505 	lsl.w	r5, r1, r5
 8013082:	402b      	ands	r3, r5
 8013084:	2b00      	cmp	r3, #0
 8013086:	f040 8144 	bne.w	8013312 <MEMS_runMagCal.constprop.0+0xaaa>
 801308a:	ea52 030c 	orrs.w	r3, r2, ip
 801308e:	f040 8144 	bne.w	801331a <MEMS_runMagCal.constprop.0+0xab2>
 8013092:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	; 0xa2
 8013096:	f89b 20a1 	ldrb.w	r2, [fp, #161]	; 0xa1
 801309a:	9209      	str	r2, [sp, #36]	; 0x24
 801309c:	3301      	adds	r3, #1
 801309e:	930b      	str	r3, [sp, #44]	; 0x2c
 80130a0:	4694      	mov	ip, r2
 80130a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80130a4:	fb91 f2fc 	sdiv	r2, r1, ip
 80130a8:	fb0c 1212 	mls	r2, ip, r2, r1
 80130ac:	b252      	sxtb	r2, r2
 80130ae:	f88b 20a2 	strb.w	r2, [fp, #162]	; 0xa2
 80130b2:	3204      	adds	r2, #4
 80130b4:	eb0b 01c2 	add.w	r1, fp, r2, lsl #3
 80130b8:	1c43      	adds	r3, r0, #1
 80130ba:	f8db 20a4 	ldr.w	r2, [fp, #164]	; 0xa4
 80130be:	9802      	ldr	r0, [sp, #8]
 80130c0:	f8ab 43b8 	strh.w	r4, [fp, #952]	; 0x3b8
 80130c4:	1a80      	subs	r0, r0, r2
 80130c6:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 80130ca:	f8ab 63ba 	strh.w	r6, [fp, #954]	; 0x3ba
 80130ce:	b2bf      	uxth	r7, r7
 80130d0:	4563      	cmp	r3, ip
 80130d2:	fb12 0207 	smlabb	r2, r2, r7, r0
 80130d6:	bfa8      	it	ge
 80130d8:	4663      	movge	r3, ip
 80130da:	f8a1 20a0 	strh.w	r2, [r1, #160]	; 0xa0
 80130de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130e0:	f8ab 83bc 	strh.w	r8, [fp, #956]	; 0x3bc
 80130e4:	b2db      	uxtb	r3, r3
 80130e6:	4293      	cmp	r3, r2
 80130e8:	f88b 30a0 	strb.w	r3, [fp, #160]	; 0xa0
 80130ec:	f8a1 40a2 	strh.w	r4, [r1, #162]	; 0xa2
 80130f0:	f8a1 60a4 	strh.w	r6, [r1, #164]	; 0xa4
 80130f4:	f8a1 80a6 	strh.w	r8, [r1, #166]	; 0xa6
 80130f8:	f000 859e 	beq.w	8013c38 <MEMS_runMagCal.constprop.0+0x13d0>
 80130fc:	9b05      	ldr	r3, [sp, #20]
 80130fe:	2b1f      	cmp	r3, #31
 8013100:	f240 853b 	bls.w	8013b7a <MEMS_runMagCal.constprop.0+0x1312>
 8013104:	2201      	movs	r2, #1
 8013106:	3b20      	subs	r3, #32
 8013108:	fa02 f303 	lsl.w	r3, r2, r3
 801310c:	f8db 20a8 	ldr.w	r2, [fp, #168]	; 0xa8
 8013110:	4313      	orrs	r3, r2
 8013112:	f8cb 30a8 	str.w	r3, [fp, #168]	; 0xa8
 8013116:	9b06      	ldr	r3, [sp, #24]
 8013118:	2b1f      	cmp	r3, #31
 801311a:	f240 8524 	bls.w	8013b66 <MEMS_runMagCal.constprop.0+0x12fe>
 801311e:	2201      	movs	r2, #1
 8013120:	3b20      	subs	r3, #32
 8013122:	fa02 f303 	lsl.w	r3, r2, r3
 8013126:	f8db 20b0 	ldr.w	r2, [fp, #176]	; 0xb0
 801312a:	4313      	orrs	r3, r2
 801312c:	f8cb 30b0 	str.w	r3, [fp, #176]	; 0xb0
 8013130:	9b07      	ldr	r3, [sp, #28]
 8013132:	2b1f      	cmp	r3, #31
 8013134:	f240 8513 	bls.w	8013b5e <MEMS_runMagCal.constprop.0+0x12f6>
 8013138:	3b20      	subs	r3, #32
 801313a:	2201      	movs	r2, #1
 801313c:	fa02 f303 	lsl.w	r3, r2, r3
 8013140:	f8db 20bc 	ldr.w	r2, [fp, #188]	; 0xbc
 8013144:	4313      	orrs	r3, r2
 8013146:	f8cb 30bc 	str.w	r3, [fp, #188]	; 0xbc
 801314a:	2301      	movs	r3, #1
 801314c:	930a      	str	r3, [sp, #40]	; 0x28
 801314e:	9b01      	ldr	r3, [sp, #4]
 8013150:	3701      	adds	r7, #1
 8013152:	b23f      	sxth	r7, r7
 8013154:	429f      	cmp	r7, r3
 8013156:	463a      	mov	r2, r7
 8013158:	f6ff aeec 	blt.w	8012f34 <MEMS_runMagCal.constprop.0+0x6cc>
 801315c:	f89b 3014 	ldrb.w	r3, [fp, #20]
 8013160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013162:	431a      	orrs	r2, r3
 8013164:	b2d3      	uxtb	r3, r2
 8013166:	f88b 3014 	strb.w	r3, [fp, #20]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d064      	beq.n	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 801316e:	f89b 30a0 	ldrb.w	r3, [fp, #160]	; 0xa0
 8013172:	9305      	str	r3, [sp, #20]
 8013174:	2b19      	cmp	r3, #25
 8013176:	d95f      	bls.n	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 8013178:	f8db 301c 	ldr.w	r3, [fp, #28]
 801317c:	9306      	str	r3, [sp, #24]
 801317e:	b123      	cbz	r3, 801318a <MEMS_runMagCal.constprop.0+0x922>
 8013180:	f8db 3018 	ldr.w	r3, [fp, #24]
 8013184:	2b00      	cmp	r3, #0
 8013186:	f040 850c 	bne.w	8013ba2 <MEMS_runMagCal.constprop.0+0x133a>
 801318a:	9b08      	ldr	r3, [sp, #32]
 801318c:	2b00      	cmp	r3, #0
 801318e:	f040 855a 	bne.w	8013c46 <MEMS_runMagCal.constprop.0+0x13de>
 8013192:	f8db 20b0 	ldr.w	r2, [fp, #176]	; 0xb0
 8013196:	9904      	ldr	r1, [sp, #16]
 8013198:	9202      	str	r2, [sp, #8]
 801319a:	2300      	movs	r3, #0
 801319c:	f8db 20bc 	ldr.w	r2, [fp, #188]	; 0xbc
 80131a0:	eddb 8a01 	vldr	s17, [fp, #4]
 80131a4:	9325      	str	r3, [sp, #148]	; 0x94
 80131a6:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
 80131aa:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 80131ae:	e9db ea2a 	ldrd	lr, sl, [fp, #168]	; 0xa8
 80131b2:	e9db 982d 	ldrd	r9, r8, [fp, #180]	; 0xb4
 80131b6:	9201      	str	r2, [sp, #4]
 80131b8:	460c      	mov	r4, r1
 80131ba:	4608      	mov	r0, r1
 80131bc:	2601      	movs	r6, #1
 80131be:	e014      	b.n	80131ea <MEMS_runMagCal.constprop.0+0x982>
 80131c0:	9d02      	ldr	r5, [sp, #8]
 80131c2:	4015      	ands	r5, r2
 80131c4:	2d00      	cmp	r5, #0
 80131c6:	bf18      	it	ne
 80131c8:	3001      	addne	r0, #1
 80131ca:	9d01      	ldr	r5, [sp, #4]
 80131cc:	402a      	ands	r2, r5
 80131ce:	f1bc 0f00 	cmp.w	ip, #0
 80131d2:	bf18      	it	ne
 80131d4:	3101      	addne	r1, #1
 80131d6:	2a00      	cmp	r2, #0
 80131d8:	bf18      	it	ne
 80131da:	3401      	addne	r4, #1
 80131dc:	2f3f      	cmp	r7, #63	; 0x3f
 80131de:	b2c9      	uxtb	r1, r1
 80131e0:	b2c0      	uxtb	r0, r0
 80131e2:	b2e4      	uxtb	r4, r4
 80131e4:	f000 81c8 	beq.w	8013578 <MEMS_runMagCal.constprop.0+0xd10>
 80131e8:	3301      	adds	r3, #1
 80131ea:	f1a3 0220 	sub.w	r2, r3, #32
 80131ee:	fa06 f202 	lsl.w	r2, r6, r2
 80131f2:	2b1f      	cmp	r3, #31
 80131f4:	ea0e 0c02 	and.w	ip, lr, r2
 80131f8:	b2df      	uxtb	r7, r3
 80131fa:	fa06 f503 	lsl.w	r5, r6, r3
 80131fe:	d8df      	bhi.n	80131c0 <MEMS_runMagCal.constprop.0+0x958>
 8013200:	ea0a 0205 	and.w	r2, sl, r5
 8013204:	2a00      	cmp	r2, #0
 8013206:	bf18      	it	ne
 8013208:	3101      	addne	r1, #1
 801320a:	ea09 0205 	and.w	r2, r9, r5
 801320e:	ea05 0508 	and.w	r5, r5, r8
 8013212:	2a00      	cmp	r2, #0
 8013214:	bf18      	it	ne
 8013216:	3001      	addne	r0, #1
 8013218:	2d00      	cmp	r5, #0
 801321a:	bf18      	it	ne
 801321c:	3401      	addne	r4, #1
 801321e:	b2c9      	uxtb	r1, r1
 8013220:	b2c0      	uxtb	r0, r0
 8013222:	b2e4      	uxtb	r4, r4
 8013224:	e7e0      	b.n	80131e8 <MEMS_runMagCal.constprop.0+0x980>
 8013226:	9903      	ldr	r1, [sp, #12]
 8013228:	f8cb 1020 	str.w	r1, [fp, #32]
 801322c:	2200      	movs	r2, #0
 801322e:	23ff      	movs	r3, #255	; 0xff
 8013230:	f88b 20a0 	strb.w	r2, [fp, #160]	; 0xa0
 8013234:	f88b 30a2 	strb.w	r3, [fp, #162]	; 0xa2
 8013238:	f20d 5d4c 	addw	sp, sp, #1356	; 0x54c
 801323c:	ecbd 8b0c 	vpop	{d8-d13}
 8013240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013244:	f89b 406c 	ldrb.w	r4, [fp, #108]	; 0x6c
 8013248:	eddf 7ac7 	vldr	s15, [pc, #796]	; 8013568 <MEMS_runMagCal.constprop.0+0xd00>
 801324c:	2c01      	cmp	r4, #1
 801324e:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 8013252:	eeb0 0a67 	vmov.f32	s0, s15
 8013256:	f63f ad9b 	bhi.w	8012d90 <MEMS_runMagCal.constprop.0+0x528>
 801325a:	e5a3      	b.n	8012da4 <MEMS_runMagCal.constprop.0+0x53c>
 801325c:	4689      	mov	r9, r1
 801325e:	e57a      	b.n	8012d56 <MEMS_runMagCal.constprop.0+0x4ee>
 8013260:	f89b 60a0 	ldrb.w	r6, [fp, #160]	; 0xa0
 8013264:	4615      	mov	r5, r2
 8013266:	2e00      	cmp	r6, #0
 8013268:	f47f ae39 	bne.w	8012ede <MEMS_runMagCal.constprop.0+0x676>
 801326c:	9b08      	ldr	r3, [sp, #32]
 801326e:	2b00      	cmp	r3, #0
 8013270:	f47f ae4a 	bne.w	8012f08 <MEMS_runMagCal.constprop.0+0x6a0>
 8013274:	9b04      	ldr	r3, [sp, #16]
 8013276:	930a      	str	r3, [sp, #40]	; 0x28
 8013278:	e770      	b.n	801315c <MEMS_runMagCal.constprop.0+0x8f4>
 801327a:	45b8      	cmp	r8, r7
 801327c:	f000 8510 	beq.w	8013ca0 <MEMS_runMagCal.constprop.0+0x1438>
 8013280:	2c03      	cmp	r4, #3
 8013282:	f47f adcb 	bne.w	8012e1c <MEMS_runMagCal.constprop.0+0x5b4>
 8013286:	ee07 1a90 	vmov	s15, r1
 801328a:	eddf 6ab8 	vldr	s13, [pc, #736]	; 801356c <MEMS_runMagCal.constprop.0+0xd04>
 801328e:	ed9b 7a06 	vldr	s14, [fp, #24]
 8013292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013296:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801329a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801329e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80132a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a6:	f77f adb9 	ble.w	8012e1c <MEMS_runMagCal.constprop.0+0x5b4>
 80132aa:	f8db 301c 	ldr.w	r3, [fp, #28]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	f43f adb4 	beq.w	8012e1c <MEMS_runMagCal.constprop.0+0x5b4>
 80132b4:	eddd 7a03 	vldr	s15, [sp, #12]
 80132b8:	330a      	adds	r3, #10
 80132ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80132be:	ee07 3a90 	vmov	s15, r3
 80132c2:	ee67 6a26 	vmul.f32	s13, s14, s13
 80132c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132ca:	eef4 6ae7 	vcmpe.f32	s13, s15
 80132ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d2:	f77f ada3 	ble.w	8012e1c <MEMS_runMagCal.constprop.0+0x5b4>
 80132d6:	f89b 3015 	ldrb.w	r3, [fp, #21]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	f47f ad9e 	bne.w	8012e1c <MEMS_runMagCal.constprop.0+0x5b4>
 80132e0:	f89b 3054 	ldrb.w	r3, [fp, #84]	; 0x54
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d0a7      	beq.n	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 80132e8:	f89b 305c 	ldrb.w	r3, [fp, #92]	; 0x5c
 80132ec:	2bff      	cmp	r3, #255	; 0xff
 80132ee:	d1a3      	bne.n	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 80132f0:	e594      	b.n	8012e1c <MEMS_runMagCal.constprop.0+0x5b4>
 80132f2:	f8ab 5008 	strh.w	r5, [fp, #8]
 80132f6:	f8cb 104c 	str.w	r1, [fp, #76]	; 0x4c
 80132fa:	f20d 5d4c 	addw	sp, sp, #1356	; 0x54c
 80132fe:	ecbd 8b0c 	vpop	{d8-d13}
 8013302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013306:	2300      	movs	r3, #0
 8013308:	9308      	str	r3, [sp, #32]
 801330a:	9304      	str	r3, [sp, #16]
 801330c:	f04f 0900 	mov.w	r9, #0
 8013310:	e524      	b.n	8012d5c <MEMS_runMagCal.constprop.0+0x4f4>
 8013312:	b112      	cbz	r2, 801331a <MEMS_runMagCal.constprop.0+0xab2>
 8013314:	f1bc 0f00 	cmp.w	ip, #0
 8013318:	d163      	bne.n	80133e2 <MEMS_runMagCal.constprop.0+0xb7a>
 801331a:	f89b 30a1 	ldrb.w	r3, [fp, #161]	; 0xa1
 801331e:	9309      	str	r3, [sp, #36]	; 0x24
 8013320:	461a      	mov	r2, r3
 8013322:	4290      	cmp	r0, r2
 8013324:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	; 0xa2
 8013328:	f000 8431 	beq.w	8013b8e <MEMS_runMagCal.constprop.0+0x1326>
 801332c:	3301      	adds	r3, #1
 801332e:	4611      	mov	r1, r2
 8013330:	930b      	str	r3, [sp, #44]	; 0x2c
 8013332:	1a1b      	subs	r3, r3, r0
 8013334:	fb93 f2f2 	sdiv	r2, r3, r2
 8013338:	fb01 3212 	mls	r2, r1, r2, r3
 801333c:	2a00      	cmp	r2, #0
 801333e:	bfbc      	itt	lt
 8013340:	460b      	movlt	r3, r1
 8013342:	18d2      	addlt	r2, r2, r3
 8013344:	468c      	mov	ip, r1
 8013346:	b212      	sxth	r2, r2
 8013348:	eb00 0e02 	add.w	lr, r0, r2
 801334c:	fb92 f3fc 	sdiv	r3, r2, ip
 8013350:	fb0c 2313 	mls	r3, ip, r3, r2
 8013354:	b2db      	uxtb	r3, r3
 8013356:	3304      	adds	r3, #4
 8013358:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801335c:	3201      	adds	r2, #1
 801335e:	f9b3 50a2 	ldrsh.w	r5, [r3, #162]	; 0xa2
 8013362:	f9b3 10a4 	ldrsh.w	r1, [r3, #164]	; 0xa4
 8013366:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 801336a:	1b65      	subs	r5, r4, r5
 801336c:	1a71      	subs	r1, r6, r1
 801336e:	ee07 5a90 	vmov	s15, r5
 8013372:	ee06 1a90 	vmov	s13, r1
 8013376:	eba8 0303 	sub.w	r3, r8, r3
 801337a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801337e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013382:	ee07 3a10 	vmov	s14, r3
 8013386:	eef0 7ae7 	vabs.f32	s15, s15
 801338a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801338e:	eef0 6ae6 	vabs.f32	s13, s13
 8013392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013396:	eeb0 7ac7 	vabs.f32	s14, s14
 801339a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801339e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80133a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a6:	dc1c      	bgt.n	80133e2 <MEMS_runMagCal.constprop.0+0xb7a>
 80133a8:	4596      	cmp	lr, r2
 80133aa:	d1cf      	bne.n	801334c <MEMS_runMagCal.constprop.0+0xae4>
 80133ac:	e679      	b.n	80130a2 <MEMS_runMagCal.constprop.0+0x83a>
 80133ae:	ee07 6a90 	vmov	s15, r6
 80133b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133b6:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80133ba:	eef0 7ae7 	vabs.f32	s15, s15
 80133be:	eef4 8ae7 	vcmpe.f32	s17, s15
 80133c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c6:	f77f adce 	ble.w	8012f66 <MEMS_runMagCal.constprop.0+0x6fe>
 80133ca:	ee07 8a90 	vmov	s15, r8
 80133ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133d2:	eef0 7ae7 	vabs.f32	s15, s15
 80133d6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80133da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133de:	f77f adc2 	ble.w	8012f66 <MEMS_runMagCal.constprop.0+0x6fe>
 80133e2:	b2bf      	uxth	r7, r7
 80133e4:	e6b3      	b.n	801314e <MEMS_runMagCal.constprop.0+0x8e6>
 80133e6:	f04f 0301 	mov.w	r3, #1
 80133ea:	9902      	ldr	r1, [sp, #8]
 80133ec:	f88b 30a0 	strb.w	r3, [fp, #160]	; 0xa0
 80133f0:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 80133f4:	f8ab 40c2 	strh.w	r4, [fp, #194]	; 0xc2
 80133f8:	fb02 1203 	mla	r2, r2, r3, r1
 80133fc:	f8ab 43b8 	strh.w	r4, [fp, #952]	; 0x3b8
 8013400:	fb94 f3f9 	sdiv	r3, r4, r9
 8013404:	fb09 4413 	mls	r4, r9, r3, r4
 8013408:	2c00      	cmp	r4, #0
 801340a:	bfb8      	it	lt
 801340c:	444c      	addlt	r4, r9
 801340e:	b224      	sxth	r4, r4
 8013410:	ee07 4a90 	vmov	s15, r4
 8013414:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013418:	f88b 00a2 	strb.w	r0, [fp, #162]	; 0xa2
 801341c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013420:	f8ab 00c0 	strh.w	r0, [fp, #192]	; 0xc0
 8013424:	f8cb 20a4 	str.w	r2, [fp, #164]	; 0xa4
 8013428:	f8ab 60c4 	strh.w	r6, [fp, #196]	; 0xc4
 801342c:	f8ab 63ba 	strh.w	r6, [fp, #954]	; 0x3ba
 8013430:	f8ab 80c6 	strh.w	r8, [fp, #198]	; 0xc6
 8013434:	f8ab 83bc 	strh.w	r8, [fp, #956]	; 0x3bc
 8013438:	f009 ffd2 	bl	801d3e0 <roundf>
 801343c:	fb96 f3f9 	sdiv	r3, r6, r9
 8013440:	fb09 6613 	mls	r6, r9, r3, r6
 8013444:	2e00      	cmp	r6, #0
 8013446:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801344a:	bfb8      	it	lt
 801344c:	444e      	addlt	r6, r9
 801344e:	b236      	sxth	r6, r6
 8013450:	edcd 7a05 	vstr	s15, [sp, #20]
 8013454:	ee07 6a90 	vmov	s15, r6
 8013458:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801345c:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8013460:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013464:	f009 ffbc 	bl	801d3e0 <roundf>
 8013468:	fb98 f3f9 	sdiv	r3, r8, r9
 801346c:	fb09 8813 	mls	r8, r9, r3, r8
 8013470:	f1b8 0f00 	cmp.w	r8, #0
 8013474:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013478:	bfb8      	it	lt
 801347a:	44c8      	addlt	r8, r9
 801347c:	fa0f f888 	sxth.w	r8, r8
 8013480:	edcd 7a05 	vstr	s15, [sp, #20]
 8013484:	ee07 8a90 	vmov	s15, r8
 8013488:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801348c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8013490:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013494:	f009 ffa4 	bl	801d3e0 <roundf>
 8013498:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801349c:	2c1f      	cmp	r4, #31
 801349e:	edcd 7a05 	vstr	s15, [sp, #20]
 80134a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80134a6:	d952      	bls.n	801354e <MEMS_runMagCal.constprop.0+0xce6>
 80134a8:	2101      	movs	r1, #1
 80134aa:	f1a4 0220 	sub.w	r2, r4, #32
 80134ae:	fa01 f202 	lsl.w	r2, r1, r2
 80134b2:	f8db 10a8 	ldr.w	r1, [fp, #168]	; 0xa8
 80134b6:	430a      	orrs	r2, r1
 80134b8:	f8cb 20a8 	str.w	r2, [fp, #168]	; 0xa8
 80134bc:	2d1f      	cmp	r5, #31
 80134be:	d93d      	bls.n	801353c <MEMS_runMagCal.constprop.0+0xcd4>
 80134c0:	2101      	movs	r1, #1
 80134c2:	f1a5 0220 	sub.w	r2, r5, #32
 80134c6:	fa01 f202 	lsl.w	r2, r1, r2
 80134ca:	f8db 10b0 	ldr.w	r1, [fp, #176]	; 0xb0
 80134ce:	430a      	orrs	r2, r1
 80134d0:	f8cb 20b0 	str.w	r2, [fp, #176]	; 0xb0
 80134d4:	2b1f      	cmp	r3, #31
 80134d6:	d925      	bls.n	8013524 <MEMS_runMagCal.constprop.0+0xcbc>
 80134d8:	3b20      	subs	r3, #32
 80134da:	2201      	movs	r2, #1
 80134dc:	fa02 f303 	lsl.w	r3, r2, r3
 80134e0:	b2bf      	uxth	r7, r7
 80134e2:	e62d      	b.n	8013140 <MEMS_runMagCal.constprop.0+0x8d8>
 80134e4:	462b      	mov	r3, r5
 80134e6:	2501      	movs	r5, #1
 80134e8:	fa05 f303 	lsl.w	r3, r5, r3
 80134ec:	ea01 0c03 	and.w	ip, r1, r3
 80134f0:	9907      	ldr	r1, [sp, #28]
 80134f2:	291f      	cmp	r1, #31
 80134f4:	e9db 532e 	ldrd	r5, r3, [fp, #184]	; 0xb8
 80134f8:	f63f adbe 	bhi.w	8013078 <MEMS_runMagCal.constprop.0+0x810>
 80134fc:	460b      	mov	r3, r1
 80134fe:	2101      	movs	r1, #1
 8013500:	fa01 f303 	lsl.w	r3, r1, r3
 8013504:	402b      	ands	r3, r5
 8013506:	e5bd      	b.n	8013084 <MEMS_runMagCal.constprop.0+0x81c>
 8013508:	460b      	mov	r3, r1
 801350a:	2101      	movs	r1, #1
 801350c:	fa01 f303 	lsl.w	r3, r1, r3
 8013510:	401a      	ands	r2, r3
 8013512:	e59e      	b.n	8013052 <MEMS_runMagCal.constprop.0+0x7ea>
 8013514:	f04f 0c01 	mov.w	ip, #1
 8013518:	e4b9      	b.n	8012e8e <MEMS_runMagCal.constprop.0+0x626>
 801351a:	2600      	movs	r6, #0
 801351c:	f89b 7025 	ldrb.w	r7, [fp, #37]	; 0x25
 8013520:	4633      	mov	r3, r6
 8013522:	e451      	b.n	8012dc8 <MEMS_runMagCal.constprop.0+0x560>
 8013524:	2201      	movs	r2, #1
 8013526:	fa02 f303 	lsl.w	r3, r2, r3
 801352a:	b2bf      	uxth	r7, r7
 801352c:	f8db 20b8 	ldr.w	r2, [fp, #184]	; 0xb8
 8013530:	4313      	orrs	r3, r2
 8013532:	f8cb 30b8 	str.w	r3, [fp, #184]	; 0xb8
 8013536:	2301      	movs	r3, #1
 8013538:	930a      	str	r3, [sp, #40]	; 0x28
 801353a:	e608      	b.n	801314e <MEMS_runMagCal.constprop.0+0x8e6>
 801353c:	2201      	movs	r2, #1
 801353e:	fa02 f505 	lsl.w	r5, r2, r5
 8013542:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 8013546:	4315      	orrs	r5, r2
 8013548:	f8cb 50b4 	str.w	r5, [fp, #180]	; 0xb4
 801354c:	e7c2      	b.n	80134d4 <MEMS_runMagCal.constprop.0+0xc6c>
 801354e:	2201      	movs	r2, #1
 8013550:	fa02 f404 	lsl.w	r4, r2, r4
 8013554:	f8db 20ac 	ldr.w	r2, [fp, #172]	; 0xac
 8013558:	4314      	orrs	r4, r2
 801355a:	f8cb 40ac 	str.w	r4, [fp, #172]	; 0xac
 801355e:	e7ad      	b.n	80134bc <MEMS_runMagCal.constprop.0+0xc54>
 8013560:	f04f 0c00 	mov.w	ip, #0
 8013564:	f7ff bb39 	b.w	8012bda <MEMS_runMagCal.constprop.0+0x372>
 8013568:	477fff00 	.word	0x477fff00
 801356c:	3a83126f 	.word	0x3a83126f
 8013570:	42340000 	.word	0x42340000
 8013574:	3faccccd 	.word	0x3faccccd
 8013578:	2905      	cmp	r1, #5
 801357a:	f240 82e5 	bls.w	8013b48 <MEMS_runMagCal.constprop.0+0x12e0>
 801357e:	2805      	cmp	r0, #5
 8013580:	f240 82e2 	bls.w	8013b48 <MEMS_runMagCal.constprop.0+0x12e0>
 8013584:	2c05      	cmp	r4, #5
 8013586:	f240 82df 	bls.w	8013b48 <MEMS_runMagCal.constprop.0+0x12e0>
 801358a:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	; 0xa2
 801358e:	9301      	str	r3, [sp, #4]
 8013590:	f89b a0a1 	ldrb.w	sl, [fp, #161]	; 0xa1
 8013594:	9b05      	ldr	r3, [sp, #20]
 8013596:	4553      	cmp	r3, sl
 8013598:	9b01      	ldr	r3, [sp, #4]
 801359a:	f103 0501 	add.w	r5, r3, #1
 801359e:	9b05      	ldr	r3, [sp, #20]
 80135a0:	f000 8405 	beq.w	8013dae <MEMS_runMagCal.constprop.0+0x1546>
 80135a4:	1aea      	subs	r2, r5, r3
 80135a6:	fb92 f3fa 	sdiv	r3, r2, sl
 80135aa:	fb0a 2213 	mls	r2, sl, r3, r2
 80135ae:	2a00      	cmp	r2, #0
 80135b0:	bfb8      	it	lt
 80135b2:	4452      	addlt	r2, sl
 80135b4:	46d1      	mov	r9, sl
 80135b6:	b212      	sxth	r2, r2
 80135b8:	f102 0315 	add.w	r3, r2, #21
 80135bc:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80135c0:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 80135c4:	f9b3 c01c 	ldrsh.w	ip, [r3, #28]
 80135c8:	f9b3 701e 	ldrsh.w	r7, [r3, #30]
 80135cc:	9b05      	ldr	r3, [sp, #20]
 80135ce:	4638      	mov	r0, r7
 80135d0:	eb03 0802 	add.w	r8, r3, r2
 80135d4:	4664      	mov	r4, ip
 80135d6:	468e      	mov	lr, r1
 80135d8:	fb92 f3f9 	sdiv	r3, r2, r9
 80135dc:	fb09 2313 	mls	r3, r9, r3, r2
 80135e0:	b2db      	uxtb	r3, r3
 80135e2:	3315      	adds	r3, #21
 80135e4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80135e8:	3201      	adds	r2, #1
 80135ea:	f9b3 601a 	ldrsh.w	r6, [r3, #26]
 80135ee:	42b1      	cmp	r1, r6
 80135f0:	bfb8      	it	lt
 80135f2:	4631      	movlt	r1, r6
 80135f4:	45b6      	cmp	lr, r6
 80135f6:	bfa8      	it	ge
 80135f8:	46b6      	movge	lr, r6
 80135fa:	f9b3 601c 	ldrsh.w	r6, [r3, #28]
 80135fe:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013602:	45b4      	cmp	ip, r6
 8013604:	bfb8      	it	lt
 8013606:	46b4      	movlt	ip, r6
 8013608:	42b4      	cmp	r4, r6
 801360a:	bfa8      	it	ge
 801360c:	4634      	movge	r4, r6
 801360e:	429f      	cmp	r7, r3
 8013610:	bfb8      	it	lt
 8013612:	461f      	movlt	r7, r3
 8013614:	4298      	cmp	r0, r3
 8013616:	bfa8      	it	ge
 8013618:	4618      	movge	r0, r3
 801361a:	4542      	cmp	r2, r8
 801361c:	d1dc      	bne.n	80135d8 <MEMS_runMagCal.constprop.0+0xd70>
 801361e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013622:	ee87 9aa8 	vdiv.f32	s18, s15, s17
 8013626:	eba1 010e 	sub.w	r1, r1, lr
 801362a:	b209      	sxth	r1, r1
 801362c:	ebac 0404 	sub.w	r4, ip, r4
 8013630:	1a38      	subs	r0, r7, r0
 8013632:	b224      	sxth	r4, r4
 8013634:	b200      	sxth	r0, r0
 8013636:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 8013570 <MEMS_runMagCal.constprop.0+0xd08>
 801363a:	ee06 1a90 	vmov	s13, r1
 801363e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8013642:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013646:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801364a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801364e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8013652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013656:	f300 838c 	bgt.w	8013d72 <MEMS_runMagCal.constprop.0+0x150a>
 801365a:	ee06 4a90 	vmov	s13, r4
 801365e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013662:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801366a:	f100 8382 	bmi.w	8013d72 <MEMS_runMagCal.constprop.0+0x150a>
 801366e:	ee05 0a90 	vmov	s11, r0
 8013672:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013676:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801367e:	f100 8378 	bmi.w	8013d72 <MEMS_runMagCal.constprop.0+0x150a>
 8013682:	428c      	cmp	r4, r1
 8013684:	4623      	mov	r3, r4
 8013686:	bfb8      	it	lt
 8013688:	460b      	movlt	r3, r1
 801368a:	4283      	cmp	r3, r0
 801368c:	bfb8      	it	lt
 801368e:	4603      	movlt	r3, r0
 8013690:	ee08 3a10 	vmov	s16, r3
 8013694:	4288      	cmp	r0, r1
 8013696:	f89b 306c 	ldrb.w	r3, [fp, #108]	; 0x6c
 801369a:	9301      	str	r3, [sp, #4]
 801369c:	4602      	mov	r2, r0
 801369e:	ee18 3a10 	vmov	r3, s16
 80136a2:	bfa8      	it	ge
 80136a4:	460a      	movge	r2, r1
 80136a6:	42a2      	cmp	r2, r4
 80136a8:	bfa8      	it	ge
 80136aa:	4622      	movge	r2, r4
 80136ac:	428b      	cmp	r3, r1
 80136ae:	f89b 6054 	ldrb.w	r6, [fp, #84]	; 0x54
 80136b2:	f300 83d2 	bgt.w	8013e5a <MEMS_runMagCal.constprop.0+0x15f2>
 80136b6:	4613      	mov	r3, r2
 80136b8:	ee18 1a10 	vmov	r1, s16
 80136bc:	42a1      	cmp	r1, r4
 80136be:	dd02      	ble.n	80136c6 <MEMS_runMagCal.constprop.0+0xe5e>
 80136c0:	42a2      	cmp	r2, r4
 80136c2:	bfb8      	it	lt
 80136c4:	4623      	movlt	r3, r4
 80136c6:	ee18 1a10 	vmov	r1, s16
 80136ca:	4288      	cmp	r0, r1
 80136cc:	da02      	bge.n	80136d4 <MEMS_runMagCal.constprop.0+0xe6c>
 80136ce:	4290      	cmp	r0, r2
 80136d0:	bfc8      	it	gt
 80136d2:	4603      	movgt	r3, r0
 80136d4:	9901      	ldr	r1, [sp, #4]
 80136d6:	4331      	orrs	r1, r6
 80136d8:	f040 8384 	bne.w	8013de4 <MEMS_runMagCal.constprop.0+0x157c>
 80136dc:	eef4 7ac6 	vcmpe.f32	s15, s12
 80136e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136e4:	f300 83d6 	bgt.w	8013e94 <MEMS_runMagCal.constprop.0+0x162c>
 80136e8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80136ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f0:	f300 83d0 	bgt.w	8013e94 <MEMS_runMagCal.constprop.0+0x162c>
 80136f4:	eef4 7ae5 	vcmpe.f32	s15, s11
 80136f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136fc:	bfcc      	ite	gt
 80136fe:	f04f 0801 	movgt.w	r8, #1
 8013702:	f04f 0800 	movle.w	r8, #0
 8013706:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 8013574 <MEMS_runMagCal.constprop.0+0xd0c>
 801370a:	eeb8 5ac8 	vcvt.f32.s32	s10, s16
 801370e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013712:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8013716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801371a:	f2c0 81fd 	blt.w	8013b18 <MEMS_runMagCal.constprop.0+0x12b0>
 801371e:	ee07 3a10 	vmov	s14, r3
 8013722:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8013726:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801372a:	ee27 5a85 	vmul.f32	s10, s15, s10
 801372e:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8013732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013736:	f2c0 81ef 	blt.w	8013b18 <MEMS_runMagCal.constprop.0+0x12b0>
 801373a:	ee18 3a10 	vmov	r3, s16
 801373e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8013742:	f280 81e9 	bge.w	8013b18 <MEMS_runMagCal.constprop.0+0x12b0>
 8013746:	ee07 2a10 	vmov	s14, r2
 801374a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801374e:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8013752:	ee27 7a05 	vmul.f32	s14, s14, s10
 8013756:	eef4 7ac7 	vcmpe.f32	s15, s14
 801375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801375e:	f140 81db 	bpl.w	8013b18 <MEMS_runMagCal.constprop.0+0x12b0>
 8013762:	9b05      	ldr	r3, [sp, #20]
 8013764:	4553      	cmp	r3, sl
 8013766:	f001 82bb 	beq.w	8014ce0 <MEMS_runMagCal.constprop.0+0x2478>
 801376a:	1aef      	subs	r7, r5, r3
 801376c:	fb97 f3f9 	sdiv	r3, r7, r9
 8013770:	fb09 7713 	mls	r7, r9, r3, r7
 8013774:	2f00      	cmp	r7, #0
 8013776:	bfb8      	it	lt
 8013778:	4457      	addlt	r7, sl
 801377a:	b23f      	sxth	r7, r7
 801377c:	f8dd e010 	ldr.w	lr, [sp, #16]
 8013780:	b27f      	sxtb	r7, r7
 8013782:	f1c7 0301 	rsb	r3, r7, #1
 8013786:	46f4      	mov	ip, lr
 8013788:	9302      	str	r3, [sp, #8]
 801378a:	463a      	mov	r2, r7
 801378c:	3701      	adds	r7, #1
 801378e:	fb92 f3f9 	sdiv	r3, r2, r9
 8013792:	fb09 2213 	mls	r2, r9, r3, r2
 8013796:	b255      	sxtb	r5, r2
 8013798:	fb97 f3f9 	sdiv	r3, r7, r9
 801379c:	fb09 7313 	mls	r3, r9, r3, r7
 80137a0:	2d00      	cmp	r5, #0
 80137a2:	b25b      	sxtb	r3, r3
 80137a4:	f103 0304 	add.w	r3, r3, #4
 80137a8:	bfbc      	itt	lt
 80137aa:	4452      	addlt	r2, sl
 80137ac:	b255      	sxtblt	r5, r2
 80137ae:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 80137b2:	3504      	adds	r5, #4
 80137b4:	f9b2 10a2 	ldrsh.w	r1, [r2, #162]	; 0xa2
 80137b8:	eb0b 02c5 	add.w	r2, fp, r5, lsl #3
 80137bc:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	; 0xa2
 80137c0:	1a8c      	subs	r4, r1, r2
 80137c2:	bf44      	itt	mi
 80137c4:	1a52      	submi	r2, r2, r1
 80137c6:	b214      	sxthmi	r4, r2
 80137c8:	eb0b 01c5 	add.w	r1, fp, r5, lsl #3
 80137cc:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
 80137d0:	f9b1 10a4 	ldrsh.w	r1, [r1, #164]	; 0xa4
 80137d4:	f9b2 20a4 	ldrsh.w	r2, [r2, #164]	; 0xa4
 80137d8:	bf58      	it	pl
 80137da:	b224      	sxthpl	r4, r4
 80137dc:	1a50      	subs	r0, r2, r1
 80137de:	bf48      	it	mi
 80137e0:	1a8a      	submi	r2, r1, r2
 80137e2:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 80137e6:	bf58      	it	pl
 80137e8:	b202      	sxthpl	r2, r0
 80137ea:	f9b1 00a6 	ldrsh.w	r0, [r1, #166]	; 0xa6
 80137ee:	eb0b 01c5 	add.w	r1, fp, r5, lsl #3
 80137f2:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80137f6:	f9b1 10a6 	ldrsh.w	r1, [r1, #166]	; 0xa6
 80137fa:	bf48      	it	mi
 80137fc:	b212      	sxthmi	r2, r2
 80137fe:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8013802:	1a46      	subs	r6, r0, r1
 8013804:	bf44      	itt	mi
 8013806:	1a09      	submi	r1, r1, r0
 8013808:	b208      	sxthmi	r0, r1
 801380a:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 801380e:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 8013812:	eba1 0103 	sub.w	r1, r1, r3
 8013816:	b209      	sxth	r1, r1
 8013818:	bf58      	it	pl
 801381a:	b230      	sxthpl	r0, r6
 801381c:	2900      	cmp	r1, #0
 801381e:	dd20      	ble.n	8013862 <MEMS_runMagCal.constprop.0+0xffa>
 8013820:	1913      	adds	r3, r2, r4
 8013822:	ee07 1a90 	vmov	s15, r1
 8013826:	4403      	add	r3, r0
 8013828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801382c:	fb02 f303 	mul.w	r3, r2, r3
 8013830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013834:	ee07 3a90 	vmov	s15, r3
 8013838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801383c:	f10e 0e01 	add.w	lr, lr, #1
 8013840:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8013844:	fa5f fe8e 	uxtb.w	lr, lr
 8013848:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801384c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013850:	ee17 3a90 	vmov	r3, s15
 8013854:	b21b      	sxth	r3, r3
 8013856:	2b96      	cmp	r3, #150	; 0x96
 8013858:	bfc4      	itt	gt
 801385a:	f10c 0c01 	addgt.w	ip, ip, #1
 801385e:	fa5f fc8c 	uxtbgt.w	ip, ip
 8013862:	9b02      	ldr	r3, [sp, #8]
 8013864:	9a05      	ldr	r2, [sp, #20]
 8013866:	443b      	add	r3, r7
 8013868:	b2db      	uxtb	r3, r3
 801386a:	429a      	cmp	r2, r3
 801386c:	d88d      	bhi.n	801378a <MEMS_runMagCal.constprop.0+0xf22>
 801386e:	fa0f fc8c 	sxth.w	ip, ip
 8013872:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8013876:	45f4      	cmp	ip, lr
 8013878:	f340 8166 	ble.w	8013b48 <MEMS_runMagCal.constprop.0+0x12e0>
 801387c:	9b08      	ldr	r3, [sp, #32]
 801387e:	b923      	cbnz	r3, 801388a <MEMS_runMagCal.constprop.0+0x1022>
 8013880:	9b01      	ldr	r3, [sp, #4]
 8013882:	3b02      	subs	r3, #2
 8013884:	2b01      	cmp	r3, #1
 8013886:	f240 842e 	bls.w	80140e6 <MEMS_runMagCal.constprop.0+0x187e>
 801388a:	2220      	movs	r2, #32
 801388c:	2100      	movs	r1, #0
 801388e:	a826      	add	r0, sp, #152	; 0x98
 8013890:	f007 f97b 	bl	801ab8a <memset>
 8013894:	2300      	movs	r3, #0
 8013896:	f89b 40a0 	ldrb.w	r4, [fp, #160]	; 0xa0
 801389a:	f89b 20a1 	ldrb.w	r2, [fp, #161]	; 0xa1
 801389e:	9314      	str	r3, [sp, #80]	; 0x50
 80138a0:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 80138a4:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	; 0xa2
 80138a8:	4294      	cmp	r4, r2
 80138aa:	f103 0301 	add.w	r3, r3, #1
 80138ae:	f000 82fb 	beq.w	8013ea8 <MEMS_runMagCal.constprop.0+0x1640>
 80138b2:	1b1b      	subs	r3, r3, r4
 80138b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80138b8:	fb02 3311 	mls	r3, r2, r1, r3
 80138bc:	2b00      	cmp	r3, #0
 80138be:	bfb8      	it	lt
 80138c0:	189b      	addlt	r3, r3, r2
 80138c2:	b21b      	sxth	r3, r3
 80138c4:	2c00      	cmp	r4, #0
 80138c6:	f000 82f6 	beq.w	8013eb6 <MEMS_runMagCal.constprop.0+0x164e>
 80138ca:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 8013c78 <MEMS_runMagCal.constprop.0+0x1410>
 80138ce:	461d      	mov	r5, r3
 80138d0:	eef0 9a46 	vmov.f32	s19, s12
 80138d4:	eeb0 aa46 	vmov.f32	s20, s12
 80138d8:	18e0      	adds	r0, r4, r3
 80138da:	fb95 f1f2 	sdiv	r1, r5, r2
 80138de:	fb02 5111 	mls	r1, r2, r1, r5
 80138e2:	b2c9      	uxtb	r1, r1
 80138e4:	3104      	adds	r1, #4
 80138e6:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 80138ea:	3501      	adds	r5, #1
 80138ec:	f9b1 60a2 	ldrsh.w	r6, [r1, #162]	; 0xa2
 80138f0:	ee07 6a90 	vmov	s15, r6
 80138f4:	f9b1 60a4 	ldrsh.w	r6, [r1, #164]	; 0xa4
 80138f8:	f9b1 10a6 	ldrsh.w	r1, [r1, #166]	; 0xa6
 80138fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013900:	ee07 6a10 	vmov	s14, r6
 8013904:	ee3a aa27 	vadd.f32	s20, s20, s15
 8013908:	ee07 1a90 	vmov	s15, r1
 801390c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013914:	4285      	cmp	r5, r0
 8013916:	ee79 9a87 	vadd.f32	s19, s19, s14
 801391a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801391e:	d1dc      	bne.n	80138da <MEMS_runMagCal.constprop.0+0x1072>
 8013920:	ee07 4a90 	vmov	s15, r4
 8013924:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 8013928:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801392c:	eec7 aa8b 	vdiv.f32	s21, s15, s22
 8013930:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8013c78 <MEMS_runMagCal.constprop.0+0x1410>
 8013934:	ed8d aa12 	vstr	s20, [sp, #72]	; 0x48
 8013938:	edcd 9a13 	vstr	s19, [sp, #76]	; 0x4c
 801393c:	ee2a aa8a 	vmul.f32	s20, s21, s20
 8013940:	ee6a 9aa9 	vmul.f32	s19, s21, s19
 8013944:	ee6a aa86 	vmul.f32	s21, s21, s12
 8013948:	eef0 4a47 	vmov.f32	s9, s14
 801394c:	eef0 6a47 	vmov.f32	s13, s14
 8013950:	eeb0 4a47 	vmov.f32	s8, s14
 8013954:	eef0 ba47 	vmov.f32	s23, s14
 8013958:	eef0 7a47 	vmov.f32	s15, s14
 801395c:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8013960:	fb93 f1f2 	sdiv	r1, r3, r2
 8013964:	fb02 3111 	mls	r1, r2, r1, r3
 8013968:	b2c9      	uxtb	r1, r1
 801396a:	3104      	adds	r1, #4
 801396c:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8013970:	3301      	adds	r3, #1
 8013972:	f9b1 50a2 	ldrsh.w	r5, [r1, #162]	; 0xa2
 8013976:	ee05 5a10 	vmov	s10, r5
 801397a:	f9b1 50a4 	ldrsh.w	r5, [r1, #164]	; 0xa4
 801397e:	f9b1 10a6 	ldrsh.w	r1, [r1, #166]	; 0xa6
 8013982:	ee05 5a90 	vmov	s11, r5
 8013986:	ee06 1a10 	vmov	s12, r1
 801398a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801398e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013992:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013996:	ee35 5a4a 	vsub.f32	s10, s10, s20
 801399a:	ee75 5ae9 	vsub.f32	s11, s11, s19
 801399e:	ee36 6a6a 	vsub.f32	s12, s12, s21
 80139a2:	4283      	cmp	r3, r0
 80139a4:	eee5 ba05 	vfma.f32	s23, s10, s10
 80139a8:	eea5 4a25 	vfma.f32	s8, s10, s11
 80139ac:	eee5 6a06 	vfma.f32	s13, s10, s12
 80139b0:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80139b4:	eee5 4a86 	vfma.f32	s9, s11, s12
 80139b8:	eea6 7a06 	vfma.f32	s14, s12, s12
 80139bc:	d1d0      	bne.n	8013960 <MEMS_runMagCal.constprop.0+0x10f8>
 80139be:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80139c2:	ed9f 6ab5 	vldr	s12, [pc, #724]	; 8013c98 <MEMS_runMagCal.constprop.0+0x1430>
 80139c6:	eee4 5a04 	vfma.f32	s11, s8, s8
 80139ca:	eee4 5aa4 	vfma.f32	s11, s9, s9
 80139ce:	eef4 5ac6 	vcmpe.f32	s11, s12
 80139d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d6:	d46f      	bmi.n	8013ab8 <MEMS_runMagCal.constprop.0+0x1250>
 80139d8:	ee7b caa7 	vadd.f32	s25, s23, s15
 80139dc:	ed9f daa5 	vldr	s26, [pc, #660]	; 8013c74 <MEMS_runMagCal.constprop.0+0x140c>
 80139e0:	ee7c ca87 	vadd.f32	s25, s25, s14
 80139e4:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 80139e8:	ee6c ca8d 	vmul.f32	s25, s25, s26
 80139ec:	ee77 7aec 	vsub.f32	s15, s15, s25
 80139f0:	ee7b baec 	vsub.f32	s23, s23, s25
 80139f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80139f8:	ee37 7a6c 	vsub.f32	s14, s14, s25
 80139fc:	eeab 6aab 	vfma.f32	s12, s23, s23
 8013a00:	eea5 6aa3 	vfma.f32	s12, s11, s7
 8013a04:	eddf 5a94 	vldr	s11, [pc, #592]	; 8013c58 <MEMS_runMagCal.constprop.0+0x13f0>
 8013a08:	eea7 6a07 	vfma.f32	s12, s14, s14
 8013a0c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8013a10:	eeb1 cac6 	vsqrt.f32	s24, s12
 8013a14:	eec7 5a0c 	vdiv.f32	s11, s14, s24
 8013a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013a1c:	ee87 6a0c 	vdiv.f32	s12, s14, s24
 8013a20:	ee8b 3a8c 	vdiv.f32	s6, s23, s24
 8013a24:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013a28:	ee27 5a86 	vmul.f32	s10, s15, s12
 8013a2c:	ee26 7a04 	vmul.f32	s14, s12, s8
 8013a30:	ee66 7ac5 	vnmul.f32	s15, s13, s10
 8013a34:	ee26 6a24 	vmul.f32	s12, s12, s9
 8013a38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013a3c:	ee66 4a46 	vnmul.f32	s9, s12, s12
 8013a40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013a44:	eee5 4a85 	vfma.f32	s9, s11, s10
 8013a48:	ee67 5a65 	vnmul.f32	s11, s14, s11
 8013a4c:	eee4 7a83 	vfma.f32	s15, s9, s6
 8013a50:	eee6 5a26 	vfma.f32	s11, s12, s13
 8013a54:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 8013a58:	eee5 7a87 	vfma.f32	s15, s11, s14
 8013a5c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a64:	f241 8138 	bls.w	8014cd8 <MEMS_runMagCal.constprop.0+0x2470>
 8013a68:	eef4 7ae3 	vcmpe.f32	s15, s7
 8013a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a70:	f281 812e 	bge.w	8014cd0 <MEMS_runMagCal.constprop.0+0x2468>
 8013a74:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8013a78:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013a7c:	f009 f9b6 	bl	801cdec <acosf>
 8013a80:	ee20 da0d 	vmul.f32	s26, s0, s26
 8013a84:	eeb0 0a4d 	vmov.f32	s0, s26
 8013a88:	f009 fa0a 	bl	801cea0 <cosf>
 8013a8c:	ee3c ca0c 	vadd.f32	s24, s24, s24
 8013a90:	eddf 7a72 	vldr	s15, [pc, #456]	; 8013c5c <MEMS_runMagCal.constprop.0+0x13f4>
 8013a94:	eef0 ba6c 	vmov.f32	s23, s25
 8013a98:	eee0 ba0c 	vfma.f32	s23, s0, s24
 8013a9c:	ee3d 0a27 	vadd.f32	s0, s26, s15
 8013aa0:	f009 f9fe 	bl	801cea0 <cosf>
 8013aa4:	eeb0 7a6c 	vmov.f32	s14, s25
 8013aa8:	eea0 7a0c 	vfma.f32	s14, s0, s24
 8013aac:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8013ab0:	ee7b 7a87 	vadd.f32	s15, s23, s14
 8013ab4:	eedc 7aa6 	vfnms.f32	s15, s25, s13
 8013ab8:	eeb0 5aeb 	vabs.f32	s10, s23
 8013abc:	eeb0 6ae7 	vabs.f32	s12, s15
 8013ac0:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8013ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac8:	bf8c      	ite	hi
 8013aca:	eef0 5a45 	vmovhi.f32	s11, s10
 8013ace:	eef0 5a46 	vmovls.f32	s11, s12
 8013ad2:	eef0 6ac7 	vabs.f32	s13, s14
 8013ad6:	eef4 5ae6 	vcmpe.f32	s11, s13
 8013ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ade:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8013ae2:	bf88      	it	hi
 8013ae4:	eef0 5a66 	vmovhi.f32	s11, s13
 8013ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aec:	bfb8      	it	lt
 8013aee:	eeb0 6a45 	vmovlt.f32	s12, s10
 8013af2:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013af6:	eeb3 5a09 	vmov.f32	s10, #57	; 0x41c80000  25.0
 8013afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013afe:	ee25 5a85 	vmul.f32	s10, s11, s10
 8013b02:	bfb8      	it	lt
 8013b04:	eef0 6a46 	vmovlt.f32	s13, s12
 8013b08:	eef4 6ac5 	vcmpe.f32	s13, s10
 8013b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b10:	f340 81eb 	ble.w	8013eea <MEMS_runMagCal.constprop.0+0x1682>
 8013b14:	f000 bf27 	b.w	8014966 <MEMS_runMagCal.constprop.0+0x20fe>
 8013b18:	eeb7 7a02 	vmov.f32	s14, #114	; 0x3f900000  1.125
 8013b1c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013b20:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b28:	dc0e      	bgt.n	8013b48 <MEMS_runMagCal.constprop.0+0x12e0>
 8013b2a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013b2e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b36:	dc07      	bgt.n	8013b48 <MEMS_runMagCal.constprop.0+0x12e0>
 8013b38:	ee25 7a87 	vmul.f32	s14, s11, s14
 8013b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b44:	f77f ae0d 	ble.w	8013762 <MEMS_runMagCal.constprop.0+0xefa>
 8013b48:	2300      	movs	r3, #0
 8013b4a:	f88b 3014 	strb.w	r3, [fp, #20]
 8013b4e:	f7ff bb73 	b.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 8013b52:	2300      	movs	r3, #0
 8013b54:	9308      	str	r3, [sp, #32]
 8013b56:	2301      	movs	r3, #1
 8013b58:	9304      	str	r3, [sp, #16]
 8013b5a:	f7ff bbd7 	b.w	801330c <MEMS_runMagCal.constprop.0+0xaa4>
 8013b5e:	2201      	movs	r2, #1
 8013b60:	fa02 f303 	lsl.w	r3, r2, r3
 8013b64:	e4e2      	b.n	801352c <MEMS_runMagCal.constprop.0+0xcc4>
 8013b66:	2201      	movs	r2, #1
 8013b68:	fa02 f303 	lsl.w	r3, r2, r3
 8013b6c:	f8db 20b4 	ldr.w	r2, [fp, #180]	; 0xb4
 8013b70:	4313      	orrs	r3, r2
 8013b72:	f8cb 30b4 	str.w	r3, [fp, #180]	; 0xb4
 8013b76:	f7ff badb 	b.w	8013130 <MEMS_runMagCal.constprop.0+0x8c8>
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8013b80:	f8db 20ac 	ldr.w	r2, [fp, #172]	; 0xac
 8013b84:	4313      	orrs	r3, r2
 8013b86:	f8cb 30ac 	str.w	r3, [fp, #172]	; 0xac
 8013b8a:	f7ff bac4 	b.w	8013116 <MEMS_runMagCal.constprop.0+0x8ae>
 8013b8e:	3301      	adds	r3, #1
 8013b90:	fb93 f2f0 	sdiv	r2, r3, r0
 8013b94:	fb00 3212 	mls	r2, r0, r2, r3
 8013b98:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b9a:	b212      	sxth	r2, r2
 8013b9c:	4684      	mov	ip, r0
 8013b9e:	f7ff bbd3 	b.w	8013348 <MEMS_runMagCal.constprop.0+0xae0>
 8013ba2:	ee07 3a90 	vmov	s15, r3
 8013ba6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013baa:	eddd 7a03 	vldr	s15, [sp, #12]
 8013bae:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8013c60 <MEMS_runMagCal.constprop.0+0x13f8>
 8013bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bb6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013bba:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013bbe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013bc2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bca:	f63f aade 	bhi.w	801318a <MEMS_runMagCal.constprop.0+0x922>
 8013bce:	9b08      	ldr	r3, [sp, #32]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	f43f ab31 	beq.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 8013bd6:	ed9d 7a06 	vldr	s14, [sp, #24]
 8013bda:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013bde:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013be6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bee:	bf4c      	ite	mi
 8013bf0:	2301      	movmi	r3, #1
 8013bf2:	2300      	movpl	r3, #0
 8013bf4:	9308      	str	r3, [sp, #32]
 8013bf6:	f7ff bacc 	b.w	8013192 <MEMS_runMagCal.constprop.0+0x92a>
 8013bfa:	eeb0 0a69 	vmov.f32	s0, s19
 8013bfe:	4648      	mov	r0, r9
 8013c00:	f7fe f996 	bl	8011f30 <MEMS_updateMagBufferIndex.constprop.0>
 8013c04:	f89b 60a0 	ldrb.w	r6, [fp, #160]	; 0xa0
 8013c08:	f7ff b964 	b.w	8012ed4 <MEMS_runMagCal.constprop.0+0x66c>
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	f88b 30a0 	strb.w	r3, [fp, #160]	; 0xa0
 8013c12:	eeb0 0a69 	vmov.f32	s0, s19
 8013c16:	23ff      	movs	r3, #255	; 0xff
 8013c18:	4648      	mov	r0, r9
 8013c1a:	f88b 30a2 	strb.w	r3, [fp, #162]	; 0xa2
 8013c1e:	f7fe f987 	bl	8011f30 <MEMS_updateMagBufferIndex.constprop.0>
 8013c22:	f7ff b96a 	b.w	8012efa <MEMS_runMagCal.constprop.0+0x692>
 8013c26:	3301      	adds	r3, #1
 8013c28:	fb93 f1f6 	sdiv	r1, r3, r6
 8013c2c:	fb06 3311 	mls	r3, r6, r1, r3
 8013c30:	b219      	sxth	r1, r3
 8013c32:	4630      	mov	r0, r6
 8013c34:	f7ff b924 	b.w	8012e80 <MEMS_runMagCal.constprop.0+0x618>
 8013c38:	eeb0 0a69 	vmov.f32	s0, s19
 8013c3c:	4648      	mov	r0, r9
 8013c3e:	f7fe f977 	bl	8011f30 <MEMS_updateMagBufferIndex.constprop.0>
 8013c42:	f7ff ba5b 	b.w	80130fc <MEMS_runMagCal.constprop.0+0x894>
 8013c46:	eddd 7a03 	vldr	s15, [sp, #12]
 8013c4a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013c60 <MEMS_runMagCal.constprop.0+0x13f8>
 8013c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c56:	e7be      	b.n	8013bd6 <MEMS_runMagCal.constprop.0+0x136e>
 8013c58:	3e2aaaab 	.word	0x3e2aaaab
 8013c5c:	40060a92 	.word	0x40060a92
 8013c60:	3a83126f 	.word	0x3a83126f
 8013c64:	3c23d70a 	.word	0x3c23d70a
 8013c68:	4b095440 	.word	0x4b095440
 8013c6c:	471c4000 	.word	0x471c4000
 8013c70:	481c4000 	.word	0x481c4000
 8013c74:	3eaaaaab 	.word	0x3eaaaaab
 8013c78:	00000000 	.word	0x00000000
 8013c7c:	7f800000 	.word	0x7f800000
 8013c80:	42960000 	.word	0x42960000
 8013c84:	430d0000 	.word	0x430d0000
 8013c88:	41966667 	.word	0x41966667
 8013c8c:	433c0000 	.word	0x433c0000
 8013c90:	3c2e4c41 	.word	0x3c2e4c41
 8013c94:	423c0000 	.word	0x423c0000
 8013c98:	358637bd 	.word	0x358637bd
 8013c9c:	3dcccccd 	.word	0x3dcccccd
 8013ca0:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 8013c78 <MEMS_runMagCal.constprop.0+0x1410>
 8013ca4:	1c73      	adds	r3, r6, #1
 8013ca6:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8013caa:	ae0d      	add	r6, sp, #52	; 0x34
 8013cac:	fb93 f2f7 	sdiv	r2, r3, r7
 8013cb0:	fa1f fe87 	uxth.w	lr, r7
 8013cb4:	fb07 3312 	mls	r3, r7, r2, r3
 8013cb8:	edc6 6a00 	vstr	s13, [r6]
 8013cbc:	2f00      	cmp	r7, #0
 8013cbe:	f000 80e2 	beq.w	8013e86 <MEMS_runMagCal.constprop.0+0x161e>
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013cc8:	1c58      	adds	r0, r3, #1
 8013cca:	eeb0 6a66 	vmov.f32	s12, s13
 8013cce:	fa10 fe8e 	uxtah	lr, r0, lr
 8013cd2:	f241 2c5c 	movw	ip, #4700	; 0x125c
 8013cd6:	e000      	b.n	8013cda <MEMS_runMagCal.constprop.0+0x1472>
 8013cd8:	3001      	adds	r0, #1
 8013cda:	fbb3 f2f7 	udiv	r2, r3, r7
 8013cde:	fb07 3312 	mls	r3, r7, r2, r3
 8013ce2:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8013ce6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013ce8:	4562      	cmp	r2, ip
 8013cea:	f5a2 5392 	sub.w	r3, r2, #4672	; 0x1240
 8013cee:	f1a3 031c 	sub.w	r3, r3, #28
 8013cf2:	bf98      	it	ls
 8013cf4:	ebac 0302 	subls.w	r3, ip, r2
 8013cf8:	ee07 2a90 	vmov	s15, r2
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	fb03 f303 	mul.w	r3, r3, r3
 8013d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013d06:	ee07 3a90 	vmov	s15, r3
 8013d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d0e:	4586      	cmp	lr, r0
 8013d10:	ee36 6a07 	vadd.f32	s12, s12, s14
 8013d14:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013d18:	4603      	mov	r3, r0
 8013d1a:	d1dd      	bne.n	8013cd8 <MEMS_runMagCal.constprop.0+0x1470>
 8013d1c:	ee07 5a90 	vmov	s15, r5
 8013d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d24:	ed5f 5a31 	vldr	s11, [pc, #-196]	; 8013c64 <MEMS_runMagCal.constprop.0+0x13fc>
 8013d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013d2c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8013d30:	eef1 7ac7 	vsqrt.f32	s15, s14
 8013d34:	ed1f 6a34 	vldr	s12, [pc, #-208]	; 8013c68 <MEMS_runMagCal.constprop.0+0x1400>
 8013d38:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8013d3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013d40:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d48:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
 8013d4c:	edc6 7a00 	vstr	s15, [r6]
 8013d50:	dd35      	ble.n	8013dbe <MEMS_runMagCal.constprop.0+0x1556>
 8013d52:	ed5f 7a39 	vldr	s15, [pc, #-228]	; 8013c70 <MEMS_runMagCal.constprop.0+0x1408>
 8013d56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013d5a:	2302      	movs	r3, #2
 8013d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d60:	f88b 306c 	strb.w	r3, [fp, #108]	; 0x6c
 8013d64:	f77f a85a 	ble.w	8012e1c <MEMS_runMagCal.constprop.0+0x5b4>
 8013d68:	2301      	movs	r3, #1
 8013d6a:	f88b 3015 	strb.w	r3, [fp, #21]
 8013d6e:	f7ff b855 	b.w	8012e1c <MEMS_runMagCal.constprop.0+0x5b4>
 8013d72:	9b01      	ldr	r3, [sp, #4]
 8013d74:	f8db 20a4 	ldr.w	r2, [fp, #164]	; 0xa4
 8013d78:	f8db 1020 	ldr.w	r1, [fp, #32]
 8013d7c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013d80:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 8013d84:	4413      	add	r3, r2
 8013d86:	4299      	cmp	r1, r3
 8013d88:	f4bf aede 	bcs.w	8013b48 <MEMS_runMagCal.constprop.0+0x12e0>
 8013d8c:	9906      	ldr	r1, [sp, #24]
 8013d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013d92:	fb03 f101 	mul.w	r1, r3, r1
 8013d96:	460b      	mov	r3, r1
 8013d98:	3364      	adds	r3, #100	; 0x64
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	bf38      	it	cc
 8013d9e:	4613      	movcc	r3, r2
 8013da0:	2200      	movs	r2, #0
 8013da2:	f8cb 3020 	str.w	r3, [fp, #32]
 8013da6:	f88b 2014 	strb.w	r2, [fp, #20]
 8013daa:	f7ff ba45 	b.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 8013dae:	fb95 f2f3 	sdiv	r2, r5, r3
 8013db2:	fb03 5212 	mls	r2, r3, r2, r5
 8013db6:	b212      	sxth	r2, r2
 8013db8:	4699      	mov	r9, r3
 8013dba:	f7ff bbfd 	b.w	80135b8 <MEMS_runMagCal.constprop.0+0xd50>
 8013dbe:	ed5f 7a55 	vldr	s15, [pc, #-340]	; 8013c6c <MEMS_runMagCal.constprop.0+0x1404>
 8013dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dca:	ed5f 7a57 	vldr	s15, [pc, #-348]	; 8013c70 <MEMS_runMagCal.constprop.0+0x1408>
 8013dce:	d449      	bmi.n	8013e64 <MEMS_runMagCal.constprop.0+0x15fc>
 8013dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dd8:	bfc4      	itt	gt
 8013dda:	2301      	movgt	r3, #1
 8013ddc:	f88b 3015 	strbgt.w	r3, [fp, #21]
 8013de0:	f7ff ba4e 	b.w	8013280 <MEMS_runMagCal.constprop.0+0xa18>
 8013de4:	ed9b 5a23 	vldr	s10, [fp, #140]	; 0x8c
 8013de8:	ed9b 7a1f 	vldr	s14, [fp, #124]	; 0x7c
 8013dec:	eddb 4a27 	vldr	s9, [fp, #156]	; 0x9c
 8013df0:	ee37 7a05 	vadd.f32	s14, s14, s10
 8013df4:	ed1f 5a61 	vldr	s10, [pc, #-388]	; 8013c74 <MEMS_runMagCal.constprop.0+0x140c>
 8013df8:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013dfc:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8013e00:	ee27 7a05 	vmul.f32	s14, s14, s10
 8013e04:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013e08:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8013e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e10:	bf88      	it	hi
 8013e12:	eeb0 7a64 	vmovhi.f32	s14, s9
 8013e16:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8013e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e1e:	bfb8      	it	lt
 8013e20:	eeb0 7a45 	vmovlt.f32	s14, s10
 8013e24:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013e28:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e30:	f73f ae8a 	bgt.w	8013b48 <MEMS_runMagCal.constprop.0+0x12e0>
 8013e34:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013e38:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e40:	f73f ae82 	bgt.w	8013b48 <MEMS_runMagCal.constprop.0+0x12e0>
 8013e44:	ee25 7a87 	vmul.f32	s14, s11, s14
 8013e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e50:	f73f ae7a 	bgt.w	8013b48 <MEMS_runMagCal.constprop.0+0x12e0>
 8013e54:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013e58:	e483      	b.n	8013762 <MEMS_runMagCal.constprop.0+0xefa>
 8013e5a:	4291      	cmp	r1, r2
 8013e5c:	460b      	mov	r3, r1
 8013e5e:	bfb8      	it	lt
 8013e60:	4613      	movlt	r3, r2
 8013e62:	e429      	b.n	80136b8 <MEMS_runMagCal.constprop.0+0xe50>
 8013e64:	2303      	movs	r3, #3
 8013e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e6e:	f88b 306c 	strb.w	r3, [fp, #108]	; 0x6c
 8013e72:	f04f 0300 	mov.w	r3, #0
 8013e76:	f88b 3015 	strb.w	r3, [fp, #21]
 8013e7a:	bfc4      	itt	gt
 8013e7c:	2301      	movgt	r3, #1
 8013e7e:	f88b 3015 	strbgt.w	r3, [fp, #21]
 8013e82:	f7ff ba00 	b.w	8013286 <MEMS_runMagCal.constprop.0+0xa1e>
 8013e86:	2303      	movs	r3, #3
 8013e88:	f88b e015 	strb.w	lr, [fp, #21]
 8013e8c:	f88b 306c 	strb.w	r3, [fp, #108]	; 0x6c
 8013e90:	f7ff b9f9 	b.w	8013286 <MEMS_runMagCal.constprop.0+0xa1e>
 8013e94:	f04f 0801 	mov.w	r8, #1
 8013e98:	e435      	b.n	8013706 <MEMS_runMagCal.constprop.0+0xe9e>
 8013e9a:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	f67e af80 	bls.w	8012da4 <MEMS_runMagCal.constprop.0+0x53c>
 8013ea4:	f7fe bf74 	b.w	8012d90 <MEMS_runMagCal.constprop.0+0x528>
 8013ea8:	fb93 f2f4 	sdiv	r2, r3, r4
 8013eac:	fb04 3312 	mls	r3, r4, r2, r3
 8013eb0:	b21b      	sxth	r3, r3
 8013eb2:	4622      	mov	r2, r4
 8013eb4:	e506      	b.n	80138c4 <MEMS_runMagCal.constprop.0+0x105c>
 8013eb6:	ed1f ba90 	vldr	s22, [pc, #-576]	; 8013c78 <MEMS_runMagCal.constprop.0+0x1410>
 8013eba:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 8013c7c <MEMS_runMagCal.constprop.0+0x1414>
 8013ebe:	ed9d aa12 	vldr	s20, [sp, #72]	; 0x48
 8013ec2:	eddd 9a13 	vldr	s19, [sp, #76]	; 0x4c
 8013ec6:	eddd aa14 	vldr	s21, [sp, #80]	; 0x50
 8013eca:	ee2a aa27 	vmul.f32	s20, s20, s15
 8013ece:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8013ed2:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8013ed6:	eef0 ba4b 	vmov.f32	s23, s22
 8013eda:	eeb0 7a4b 	vmov.f32	s14, s22
 8013ede:	eef0 6a4b 	vmov.f32	s13, s22
 8013ee2:	eef0 5a4b 	vmov.f32	s11, s22
 8013ee6:	eef0 7a4b 	vmov.f32	s15, s22
 8013eea:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8013eee:	ee65 5a86 	vmul.f32	s11, s11, s12
 8013ef2:	eef4 5ae6 	vcmpe.f32	s11, s13
 8013ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013efa:	d502      	bpl.n	8013f02 <MEMS_runMagCal.constprop.0+0x169a>
 8013efc:	2c22      	cmp	r4, #34	; 0x22
 8013efe:	f240 8532 	bls.w	8014966 <MEMS_runMagCal.constprop.0+0x20fe>
 8013f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f06:	ed1f 7aa2 	vldr	s14, [pc, #-648]	; 8013c80 <MEMS_runMagCal.constprop.0+0x1418>
 8013f0a:	ee77 baab 	vadd.f32	s23, s15, s23
 8013f0e:	eecb 6a8b 	vdiv.f32	s13, s23, s22
 8013f12:	eef1 7ae6 	vsqrt.f32	s15, s13
 8013f16:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8013f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f22:	f300 8520 	bgt.w	8014966 <MEMS_runMagCal.constprop.0+0x20fe>
 8013f26:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8013f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f32:	f100 8518 	bmi.w	8014966 <MEMS_runMagCal.constprop.0+0x20fe>
 8013f36:	ed1f 7aad 	vldr	s14, [pc, #-692]	; 8013c84 <MEMS_runMagCal.constprop.0+0x141c>
 8013f3a:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013f3e:	2300      	movs	r3, #0
 8013f40:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
 8013f44:	932d      	str	r3, [sp, #180]	; 0xb4
 8013f46:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8013f4a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f52:	d408      	bmi.n	8013f66 <MEMS_runMagCal.constprop.0+0x16fe>
 8013f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f58:	ee17 3a90 	vmov	r3, s15
 8013f5c:	b21b      	sxth	r3, r3
 8013f5e:	ee08 3a10 	vmov	s16, r3
 8013f62:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8013f66:	ed1f 7ab5 	vldr	s14, [pc, #-724]	; 8013c94 <MEMS_runMagCal.constprop.0+0x142c>
 8013f6a:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013f6e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f76:	dc08      	bgt.n	8013f8a <MEMS_runMagCal.constprop.0+0x1722>
 8013f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f7c:	ee17 3a90 	vmov	r3, s15
 8013f80:	b21b      	sxth	r3, r3
 8013f82:	ee08 3a10 	vmov	s16, r3
 8013f86:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8013f8a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8013f8e:	ed5f 7ac2 	vldr	s15, [pc, #-776]	; 8013c88 <MEMS_runMagCal.constprop.0+0x1420>
 8013f92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f9a:	f340 8663 	ble.w	8014c64 <MEMS_runMagCal.constprop.0+0x23fc>
 8013f9e:	ed5f 7ac5 	vldr	s15, [pc, #-788]	; 8013c8c <MEMS_runMagCal.constprop.0+0x1424>
 8013fa2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013faa:	f140 865b 	bpl.w	8014c64 <MEMS_runMagCal.constprop.0+0x23fc>
 8013fae:	ed1f 7ac8 	vldr	s14, [pc, #-800]	; 8013c90 <MEMS_runMagCal.constprop.0+0x1428>
 8013fb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013fb6:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013fba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013fc2:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 8013c94 <MEMS_runMagCal.constprop.0+0x142c>
 8013fc6:	9d04      	ldr	r5, [sp, #16]
 8013fc8:	ed1f 8acd 	vldr	s16, [pc, #-820]	; 8013c98 <MEMS_runMagCal.constprop.0+0x1430>
 8013fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013fd0:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8013fd4:	ee68 9aa9 	vmul.f32	s19, s17, s19
 8013fd8:	ee68 aaaa 	vmul.f32	s21, s17, s21
 8013fdc:	ed8d aa26 	vstr	s20, [sp, #152]	; 0x98
 8013fe0:	edcd 9a27 	vstr	s19, [sp, #156]	; 0x9c
 8013fe4:	edcd aa28 	vstr	s21, [sp, #160]	; 0xa0
 8013fe8:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 8013fec:	edcd 7a2c 	vstr	s15, [sp, #176]	; 0xb0
 8013ff0:	462c      	mov	r4, r5
 8013ff2:	2600      	movs	r6, #0
 8013ff4:	2240      	movs	r2, #64	; 0x40
 8013ff6:	4631      	mov	r1, r6
 8013ff8:	a82e      	add	r0, sp, #184	; 0xb8
 8013ffa:	e9cd 6619 	strd	r6, r6, [sp, #100]	; 0x64
 8013ffe:	e9cd 661b 	strd	r6, r6, [sp, #108]	; 0x6c
 8014002:	e9cd 6615 	strd	r6, r6, [sp, #84]	; 0x54
 8014006:	e9cd 6617 	strd	r6, r6, [sp, #92]	; 0x5c
 801400a:	f006 fdbe 	bl	801ab8a <memset>
 801400e:	4631      	mov	r1, r6
 8014010:	2240      	movs	r2, #64	; 0x40
 8014012:	a83e      	add	r0, sp, #248	; 0xf8
 8014014:	f006 fdb9 	bl	801ab8a <memset>
 8014018:	ed9d 5a29 	vldr	s10, [sp, #164]	; 0xa4
 801401c:	ed5f 7ae1 	vldr	s15, [pc, #-900]	; 8013c9c <MEMS_runMagCal.constprop.0+0x1434>
 8014020:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8014024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014028:	f100 824d 	bmi.w	80144c6 <MEMS_runMagCal.constprop.0+0x1c5e>
 801402c:	f89b 20a0 	ldrb.w	r2, [fp, #160]	; 0xa0
 8014030:	f89b 10a1 	ldrb.w	r1, [fp, #161]	; 0xa1
 8014034:	f99b 30a2 	ldrsb.w	r3, [fp, #162]	; 0xa2
 8014038:	428a      	cmp	r2, r1
 801403a:	f103 0301 	add.w	r3, r3, #1
 801403e:	f000 8122 	beq.w	8014286 <MEMS_runMagCal.constprop.0+0x1a1e>
 8014042:	1a9b      	subs	r3, r3, r2
 8014044:	fb93 f0f1 	sdiv	r0, r3, r1
 8014048:	fb01 3310 	mls	r3, r1, r0, r3
 801404c:	2b00      	cmp	r3, #0
 801404e:	bfb8      	it	lt
 8014050:	185b      	addlt	r3, r3, r1
 8014052:	b21b      	sxth	r3, r3
 8014054:	2a00      	cmp	r2, #0
 8014056:	f000 80fa 	beq.w	801424e <MEMS_runMagCal.constprop.0+0x19e6>
 801405a:	eddd 2a26 	vldr	s5, [sp, #152]	; 0x98
 801405e:	ed9d 3a27 	vldr	s6, [sp, #156]	; 0x9c
 8014062:	eddd 3a28 	vldr	s7, [sp, #160]	; 0xa0
 8014066:	ed9f 2a8b 	vldr	s4, [pc, #556]	; 8014294 <MEMS_runMagCal.constprop.0+0x1a2c>
 801406a:	441a      	add	r2, r3
 801406c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8014070:	fb93 f0f1 	sdiv	r0, r3, r1
 8014074:	fb01 3010 	mls	r0, r1, r0, r3
 8014078:	b2c0      	uxtb	r0, r0
 801407a:	3004      	adds	r0, #4
 801407c:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8014080:	f9b0 60a4 	ldrsh.w	r6, [r0, #164]	; 0xa4
 8014084:	ee07 6a90 	vmov	s15, r6
 8014088:	f9b0 60a2 	ldrsh.w	r6, [r0, #162]	; 0xa2
 801408c:	f9b0 00a6 	ldrsh.w	r0, [r0, #166]	; 0xa6
 8014090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014094:	ee06 6a10 	vmov	s12, r6
 8014098:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801409c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80140a0:	ee37 7ac3 	vsub.f32	s14, s15, s6
 80140a4:	ee26 6a28 	vmul.f32	s12, s12, s17
 80140a8:	ee06 0a90 	vmov	s13, r0
 80140ac:	ee76 5a62 	vsub.f32	s11, s12, s5
 80140b0:	ee27 7a07 	vmul.f32	s14, s14, s14
 80140b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80140b8:	eea5 7aa5 	vfma.f32	s14, s11, s11
 80140bc:	ee66 6aa8 	vmul.f32	s13, s13, s17
 80140c0:	ee73 7a67 	vsub.f32	s15, s6, s15
 80140c4:	ee73 9ae6 	vsub.f32	s19, s7, s13
 80140c8:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80140cc:	ee32 6ac6 	vsub.f32	s12, s5, s12
 80140d0:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80140d4:	eeb4 7ac2 	vcmpe.f32	s14, s4
 80140d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140dc:	d54d      	bpl.n	801417a <MEMS_runMagCal.constprop.0+0x1912>
 80140de:	3301      	adds	r3, #1
 80140e0:	4293      	cmp	r3, r2
 80140e2:	d1c5      	bne.n	8014070 <MEMS_runMagCal.constprop.0+0x1808>
 80140e4:	e0b3      	b.n	801424e <MEMS_runMagCal.constprop.0+0x19e6>
 80140e6:	ed9b 0a1c 	vldr	s0, [fp, #112]	; 0x70
 80140ea:	f009 f979 	bl	801d3e0 <roundf>
 80140ee:	eef0 7a40 	vmov.f32	s15, s0
 80140f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140f6:	ae10      	add	r6, sp, #64	; 0x40
 80140f8:	ee17 3a90 	vmov	r3, s15
 80140fc:	ed9b 0a1d 	vldr	s0, [fp, #116]	; 0x74
 8014100:	8033      	strh	r3, [r6, #0]
 8014102:	f009 f96d 	bl	801d3e0 <roundf>
 8014106:	eef0 7a40 	vmov.f32	s15, s0
 801410a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801410e:	ed9b 0a1e 	vldr	s0, [fp, #120]	; 0x78
 8014112:	ee17 3a90 	vmov	r3, s15
 8014116:	8073      	strh	r3, [r6, #2]
 8014118:	f009 f962 	bl	801d3e0 <roundf>
 801411c:	eef0 7a40 	vmov.f32	s15, s0
 8014120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014124:	495c      	ldr	r1, [pc, #368]	; (8014298 <MEMS_runMagCal.constprop.0+0x1a30>)
 8014126:	ee17 3a90 	vmov	r3, s15
 801412a:	eeb0 0a68 	vmov.f32	s0, s17
 801412e:	80b3      	strh	r3, [r6, #4]
 8014130:	aa0f      	add	r2, sp, #60	; 0x3c
 8014132:	ab0e      	add	r3, sp, #56	; 0x38
 8014134:	4630      	mov	r0, r6
 8014136:	f7fd fe07 	bl	8011d48 <getMagStats.constprop.0>
 801413a:	ed93 7a00 	vldr	s14, [r3]
 801413e:	eddf 7a57 	vldr	s15, [pc, #348]	; 801429c <MEMS_runMagCal.constprop.0+0x1a34>
 8014142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801414a:	d511      	bpl.n	8014170 <MEMS_runMagCal.constprop.0+0x1908>
 801414c:	b980      	cbnz	r0, 8014170 <MEMS_runMagCal.constprop.0+0x1908>
 801414e:	f89b 3054 	ldrb.w	r3, [fp, #84]	; 0x54
 8014152:	2b00      	cmp	r3, #0
 8014154:	f000 85cb 	beq.w	8014cee <MEMS_runMagCal.constprop.0+0x2486>
 8014158:	f89b 305d 	ldrb.w	r3, [fp, #93]	; 0x5d
 801415c:	ee07 3a90 	vmov	s15, r3
 8014160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014164:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801416c:	f300 85bf 	bgt.w	8014cee <MEMS_runMagCal.constprop.0+0x2486>
 8014170:	2300      	movs	r3, #0
 8014172:	6033      	str	r3, [r6, #0]
 8014174:	80b3      	strh	r3, [r6, #4]
 8014176:	f7ff bb88 	b.w	801388a <MEMS_runMagCal.constprop.0+0x1022>
 801417a:	eef1 5ac7 	vsqrt.f32	s11, s14
 801417e:	3301      	adds	r3, #1
 8014180:	429a      	cmp	r2, r3
 8014182:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8014186:	eddd 1a31 	vldr	s3, [sp, #196]	; 0xc4
 801418a:	eddd 4a2f 	vldr	s9, [sp, #188]	; 0xbc
 801418e:	ed9d 1a2e 	vldr	s2, [sp, #184]	; 0xb8
 8014192:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
 8014196:	eddd 0a1a 	vldr	s1, [sp, #104]	; 0x68
 801419a:	eec4 6a25 	vdiv.f32	s13, s8, s11
 801419e:	ee26 6a26 	vmul.f32	s12, s12, s13
 80141a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80141a6:	ee69 6aa6 	vmul.f32	s13, s19, s13
 80141aa:	ee71 1ac6 	vsub.f32	s3, s3, s12
 80141ae:	eea6 7a26 	vfma.f32	s14, s12, s13
 80141b2:	edcd 1a31 	vstr	s3, [sp, #196]	; 0xc4
 80141b6:	ed8d 7a30 	vstr	s14, [sp, #192]	; 0xc0
 80141ba:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80141be:	eddd 1a38 	vldr	s3, [sp, #224]	; 0xe0
 80141c2:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80141c6:	eee6 4a27 	vfma.f32	s9, s12, s15
 80141ca:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80141ce:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 80141d2:	edcd 4a2f 	vstr	s9, [sp, #188]	; 0xbc
 80141d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80141da:	eee6 1aa6 	vfma.f32	s3, s13, s13
 80141de:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 80141e2:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 80141e6:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80141ea:	edcd 1a38 	vstr	s3, [sp, #224]	; 0xe0
 80141ee:	eea6 1a06 	vfma.f32	s2, s12, s12
 80141f2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80141f6:	eddd 1a1c 	vldr	s3, [sp, #112]	; 0x70
 80141fa:	ed8d 7a39 	vstr	s14, [sp, #228]	; 0xe4
 80141fe:	ee35 7ac5 	vsub.f32	s14, s11, s10
 8014202:	eee7 4aa6 	vfma.f32	s9, s15, s13
 8014206:	ee71 1a87 	vadd.f32	s3, s3, s14
 801420a:	ed8d 1a2e 	vstr	s2, [sp, #184]	; 0xb8
 801420e:	ee35 7a65 	vsub.f32	s14, s10, s11
 8014212:	ed9d 1a1b 	vldr	s2, [sp, #108]	; 0x6c
 8014216:	edcd 4a34 	vstr	s9, [sp, #208]	; 0xd0
 801421a:	eea7 0a06 	vfma.f32	s0, s14, s12
 801421e:	eef0 5a60 	vmov.f32	s11, s1
 8014222:	eeb0 6a41 	vmov.f32	s12, s2
 8014226:	eee7 5a27 	vfma.f32	s11, s14, s15
 801422a:	eddd 4a3d 	vldr	s9, [sp, #244]	; 0xf4
 801422e:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
 8014232:	eea7 6a26 	vfma.f32	s12, s14, s13
 8014236:	ee74 7a84 	vadd.f32	s15, s9, s8
 801423a:	edcd 5a1a 	vstr	s11, [sp, #104]	; 0x68
 801423e:	ed8d 6a1b 	vstr	s12, [sp, #108]	; 0x6c
 8014242:	edcd 1a1c 	vstr	s3, [sp, #112]	; 0x70
 8014246:	edcd 7a3d 	vstr	s15, [sp, #244]	; 0xf4
 801424a:	f47f af11 	bne.w	8014070 <MEMS_runMagCal.constprop.0+0x1808>
 801424e:	2201      	movs	r2, #1
 8014250:	4629      	mov	r1, r5
 8014252:	4613      	mov	r3, r2
 8014254:	00af      	lsls	r7, r5, #2
 8014256:	18fe      	adds	r6, r7, r3
 8014258:	a82e      	add	r0, sp, #184	; 0xb8
 801425a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801425e:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 8014262:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014266:	3301      	adds	r3, #1
 8014268:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 801426c:	b2db      	uxtb	r3, r3
 801426e:	6836      	ldr	r6, [r6, #0]
 8014270:	6006      	str	r6, [r0, #0]
 8014272:	2b04      	cmp	r3, #4
 8014274:	d1ef      	bne.n	8014256 <MEMS_runMagCal.constprop.0+0x19ee>
 8014276:	1c53      	adds	r3, r2, #1
 8014278:	b2db      	uxtb	r3, r3
 801427a:	2b04      	cmp	r3, #4
 801427c:	d01c      	beq.n	80142b8 <MEMS_runMagCal.constprop.0+0x1a50>
 801427e:	4611      	mov	r1, r2
 8014280:	0097      	lsls	r7, r2, #2
 8014282:	461a      	mov	r2, r3
 8014284:	e7e7      	b.n	8014256 <MEMS_runMagCal.constprop.0+0x19ee>
 8014286:	fb93 f0f2 	sdiv	r0, r3, r2
 801428a:	fb02 3310 	mls	r3, r2, r0, r3
 801428e:	b21b      	sxth	r3, r3
 8014290:	e6e0      	b.n	8014054 <MEMS_runMagCal.constprop.0+0x17ec>
 8014292:	bf00      	nop
 8014294:	2b8cbccb 	.word	0x2b8cbccb
 8014298:	20000428 	.word	0x20000428
 801429c:	3ff4cccd 	.word	0x3ff4cccd
 80142a0:	3e99999a 	.word	0x3e99999a
 80142a4:	3f666666 	.word	0x3f666666
 80142a8:	00000000 	.word	0x00000000
 80142ac:	41f00001 	.word	0x41f00001
 80142b0:	400ccccd 	.word	0x400ccccd
 80142b4:	3dcccccd 	.word	0x3dcccccd
 80142b8:	2240      	movs	r2, #64	; 0x40
 80142ba:	2100      	movs	r1, #0
 80142bc:	a83e      	add	r0, sp, #248	; 0xf8
 80142be:	f006 fc64 	bl	801ab8a <memset>
 80142c2:	a82e      	add	r0, sp, #184	; 0xb8
 80142c4:	ab3e      	add	r3, sp, #248	; 0xf8
 80142c6:	4602      	mov	r2, r0
 80142c8:	2100      	movs	r1, #0
 80142ca:	b24e      	sxtb	r6, r1
 80142cc:	2900      	cmp	r1, #0
 80142ce:	f000 852e 	beq.w	8014d2e <MEMS_runMagCal.constprop.0+0x24c6>
 80142d2:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 80142d6:	eeb0 7ae7 	vabs.f32	s14, s15
 80142da:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80142de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e2:	f100 80f0 	bmi.w	80144c6 <MEMS_runMagCal.constprop.0+0x1c5e>
 80142e6:	ed90 7a00 	vldr	s14, [r0]
 80142ea:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80142ee:	2e01      	cmp	r6, #1
 80142f0:	ed83 6a00 	vstr	s12, [r3]
 80142f4:	eddd 7a42 	vldr	s15, [sp, #264]	; 0x108
 80142f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80142fc:	f000 8507 	beq.w	8014d0e <MEMS_runMagCal.constprop.0+0x24a6>
 8014300:	eddd 6a43 	vldr	s13, [sp, #268]	; 0x10c
 8014304:	eeb0 7ae6 	vabs.f32	s14, s13
 8014308:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801430c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014310:	f100 80d9 	bmi.w	80144c6 <MEMS_runMagCal.constprop.0+0x1c5e>
 8014314:	ed90 7a01 	vldr	s14, [r0, #4]
 8014318:	ee37 7a67 	vsub.f32	s14, s14, s15
 801431c:	2e02      	cmp	r6, #2
 801431e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014322:	edc3 7a01 	vstr	s15, [r3, #4]
 8014326:	ed9d 7a47 	vldr	s14, [sp, #284]	; 0x11c
 801432a:	eddd 6a46 	vldr	s13, [sp, #280]	; 0x118
 801432e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014332:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014336:	f000 8513 	beq.w	8014d60 <MEMS_runMagCal.constprop.0+0x24f8>
 801433a:	ed9d 5a48 	vldr	s10, [sp, #288]	; 0x120
 801433e:	eef0 6ac5 	vabs.f32	s13, s10
 8014342:	eef4 6ac8 	vcmpe.f32	s13, s16
 8014346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801434a:	f100 80bc 	bmi.w	80144c6 <MEMS_runMagCal.constprop.0+0x1c5e>
 801434e:	edd0 5a02 	vldr	s11, [r0, #8]
 8014352:	edd2 6a00 	vldr	s13, [r2]
 8014356:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801435a:	eec7 5a05 	vdiv.f32	s11, s14, s10
 801435e:	edc3 5a02 	vstr	s11, [r3, #8]
 8014362:	ed9d 7a4b 	vldr	s14, [sp, #300]	; 0x12c
 8014366:	ed9d 5a4a 	vldr	s10, [sp, #296]	; 0x128
 801436a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801436e:	ed9d 7a4c 	vldr	s14, [sp, #304]	; 0x130
 8014372:	eee5 7a06 	vfma.f32	s15, s10, s12
 8014376:	eee7 7a25 	vfma.f32	s15, s14, s11
 801437a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801437e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014382:	f340 80a0 	ble.w	80144c6 <MEMS_runMagCal.constprop.0+0x1c5e>
 8014386:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801438a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801438e:	ed83 7a03 	vstr	s14, [r3, #12]
 8014392:	3101      	adds	r1, #1
 8014394:	2904      	cmp	r1, #4
 8014396:	f100 0010 	add.w	r0, r0, #16
 801439a:	f103 0310 	add.w	r3, r3, #16
 801439e:	f102 0214 	add.w	r2, r2, #20
 80143a2:	d192      	bne.n	80142ca <MEMS_runMagCal.constprop.0+0x1a62>
 80143a4:	aa19      	add	r2, sp, #100	; 0x64
 80143a6:	a915      	add	r1, sp, #84	; 0x54
 80143a8:	a83e      	add	r0, sp, #248	; 0xf8
 80143aa:	f7fd fc4b 	bl	8011c44 <llEvaluate.constprop.0>
 80143ae:	ed5f 9a3f 	vldr	s19, [pc, #-252]	; 80142b4 <MEMS_runMagCal.constprop.0+0x1a4c>
 80143b2:	f10d 0a64 	add.w	sl, sp, #100	; 0x64
 80143b6:	f10d 0974 	add.w	r9, sp, #116	; 0x74
 80143ba:	2603      	movs	r6, #3
 80143bc:	2700      	movs	r7, #0
 80143be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80143c2:	e9cd 7719 	strd	r7, r7, [sp, #100]	; 0x64
 80143c6:	e9cd 771b 	strd	r7, r7, [sp, #108]	; 0x6c
 80143ca:	aa19      	add	r2, sp, #100	; 0x64
 80143cc:	ecaa 1a01 	vstmia	sl!, {s2}
 80143d0:	a91d      	add	r1, sp, #116	; 0x74
 80143d2:	a83e      	add	r0, sp, #248	; 0xf8
 80143d4:	f7fd fc36 	bl	8011c44 <llEvaluate.constprop.0>
 80143d8:	ecb9 7a01 	vldmia	r9!, {s14}
 80143dc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80143e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e4:	f340 848f 	ble.w	8014d06 <MEMS_runMagCal.constprop.0+0x249e>
 80143e8:	eef1 7ac7 	vsqrt.f32	s15, s14
 80143ec:	eef4 9ae7 	vcmpe.f32	s19, s15
 80143f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f4:	bfb8      	it	lt
 80143f6:	eef0 9a67 	vmovlt.f32	s19, s15
 80143fa:	3e01      	subs	r6, #1
 80143fc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8014400:	d1df      	bne.n	80143c2 <MEMS_runMagCal.constprop.0+0x1b5a>
 8014402:	ed9d 6a29 	vldr	s12, [sp, #164]	; 0xa4
 8014406:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 801440a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801440e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441a:	d501      	bpl.n	8014420 <MEMS_runMagCal.constprop.0+0x1bb8>
 801441c:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
 8014420:	ed9d 3a15 	vldr	s6, [sp, #84]	; 0x54
 8014424:	eddd 3a16 	vldr	s7, [sp, #88]	; 0x58
 8014428:	ed9d 4a17 	vldr	s8, [sp, #92]	; 0x5c
 801442c:	eddd 5a28 	vldr	s11, [sp, #160]	; 0xa0
 8014430:	eddd 4a26 	vldr	s9, [sp, #152]	; 0x98
 8014434:	ed9d 5a27 	vldr	s10, [sp, #156]	; 0x9c
 8014438:	eeb0 7ae3 	vabs.f32	s14, s7
 801443c:	eef0 7ac3 	vabs.f32	s15, s6
 8014440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014448:	bfb8      	it	lt
 801444a:	eef0 7a47 	vmovlt.f32	s15, s14
 801444e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014452:	ed1f 7a6b 	vldr	s14, [pc, #-428]	; 80142a8 <MEMS_runMagCal.constprop.0+0x1a40>
 8014456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801445a:	bfb8      	it	lt
 801445c:	eef0 7a47 	vmovlt.f32	s15, s14
 8014460:	eef0 6ac4 	vabs.f32	s13, s8
 8014464:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446c:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 8014470:	ee75 5a84 	vadd.f32	s11, s11, s8
 8014474:	ed1f 4a76 	vldr	s8, [pc, #-472]	; 80142a0 <MEMS_runMagCal.constprop.0+0x1a38>
 8014478:	edcd 5a28 	vstr	s11, [sp, #160]	; 0xa0
 801447c:	bfb8      	it	lt
 801447e:	eef0 6a67 	vmovlt.f32	s13, s15
 8014482:	ee74 4a83 	vadd.f32	s9, s9, s6
 8014486:	ee35 5a23 	vadd.f32	s10, s10, s7
 801448a:	ee37 6a06 	vadd.f32	s12, s14, s12
 801448e:	eef4 6ac4 	vcmpe.f32	s13, s8
 8014492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014496:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 801449a:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 801449e:	ed8d 6a29 	vstr	s12, [sp, #164]	; 0xa4
 80144a2:	eef0 7ac7 	vabs.f32	s15, s14
 80144a6:	d508      	bpl.n	80144ba <MEMS_runMagCal.constprop.0+0x1c52>
 80144a8:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 80142a4 <MEMS_runMagCal.constprop.0+0x1a3c>
 80144ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80144b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144b4:	d501      	bpl.n	80144ba <MEMS_runMagCal.constprop.0+0x1c52>
 80144b6:	2c01      	cmp	r4, #1
 80144b8:	d80b      	bhi.n	80144d2 <MEMS_runMagCal.constprop.0+0x1c6a>
 80144ba:	3401      	adds	r4, #1
 80144bc:	b2e4      	uxtb	r4, r4
 80144be:	2c05      	cmp	r4, #5
 80144c0:	f47f ad97 	bne.w	8013ff2 <MEMS_runMagCal.constprop.0+0x178a>
 80144c4:	e005      	b.n	80144d2 <MEMS_runMagCal.constprop.0+0x1c6a>
 80144c6:	ed5f 9a88 	vldr	s19, [pc, #-544]	; 80142a8 <MEMS_runMagCal.constprop.0+0x1a40>
 80144ca:	ed5f 6a88 	vldr	s13, [pc, #-544]	; 80142ac <MEMS_runMagCal.constprop.0+0x1a44>
 80144ce:	eef0 7a69 	vmov.f32	s15, s19
 80144d2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80144d6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80144da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144de:	dc10      	bgt.n	8014502 <MEMS_runMagCal.constprop.0+0x1c9a>
 80144e0:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 80142b0 <MEMS_runMagCal.constprop.0+0x1a48>
 80144e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80144e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ec:	dc09      	bgt.n	8014502 <MEMS_runMagCal.constprop.0+0x1c9a>
 80144ee:	ed9d 8a29 	vldr	s16, [sp, #164]	; 0xa4
 80144f2:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 80142b4 <MEMS_runMagCal.constprop.0+0x1a4c>
 80144f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80144fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144fe:	f200 83b5 	bhi.w	8014c6c <MEMS_runMagCal.constprop.0+0x2404>
 8014502:	4be8      	ldr	r3, [pc, #928]	; (80148a4 <MEMS_runMagCal.constprop.0+0x203c>)
 8014504:	eddf 9ae8 	vldr	s19, [pc, #928]	; 80148a8 <MEMS_runMagCal.constprop.0+0x2040>
 8014508:	931d      	str	r3, [sp, #116]	; 0x74
 801450a:	932c      	str	r3, [sp, #176]	; 0xb0
 801450c:	eddf 6ae7 	vldr	s13, [pc, #924]	; 80148ac <MEMS_runMagCal.constprop.0+0x2044>
 8014510:	ed9d 7a29 	vldr	s14, [sp, #164]	; 0xa4
 8014514:	ed9d 6a26 	vldr	s12, [sp, #152]	; 0x98
 8014518:	eddd 5a2c 	vldr	s11, [sp, #176]	; 0xb0
 801451c:	ed9d 5a1d 	vldr	s10, [sp, #116]	; 0x74
 8014520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014524:	2300      	movs	r3, #0
 8014526:	e9cd 333f 	strd	r3, r3, [sp, #252]	; 0xfc
 801452a:	e9cd 3343 	strd	r3, r3, [sp, #268]	; 0x10c
 801452e:	9341      	str	r3, [sp, #260]	; 0x104
 8014530:	9345      	str	r3, [sp, #276]	; 0x114
 8014532:	eddd 6a27 	vldr	s13, [sp, #156]	; 0x9c
 8014536:	ed9d 7a28 	vldr	s14, [sp, #160]	; 0xa0
 801453a:	edcd 7a3e 	vstr	s15, [sp, #248]	; 0xf8
 801453e:	ee26 6a09 	vmul.f32	s12, s12, s18
 8014542:	ee66 6a89 	vmul.f32	s13, s13, s18
 8014546:	ee27 7a09 	vmul.f32	s14, s14, s18
 801454a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014552:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 8014556:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 801455a:	ed8d 7a30 	vstr	s14, [sp, #192]	; 0xc0
 801455e:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 8014562:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8014566:	f100 837a 	bmi.w	8014c5e <MEMS_runMagCal.constprop.0+0x23f6>
 801456a:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014572:	f100 8374 	bmi.w	8014c5e <MEMS_runMagCal.constprop.0+0x23f6>
 8014576:	ee85 7a25 	vdiv.f32	s14, s10, s11
 801457a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801457e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8014582:	eddf 6acb 	vldr	s13, [pc, #812]	; 80148b0 <MEMS_runMagCal.constprop.0+0x2048>
 8014586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801458a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801458e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014596:	eeb0 7ac7 	vabs.f32	s14, s14
 801459a:	dd0c      	ble.n	80145b6 <MEMS_runMagCal.constprop.0+0x1d4e>
 801459c:	ed9f 6ac5 	vldr	s12, [pc, #788]	; 80148b4 <MEMS_runMagCal.constprop.0+0x204c>
 80145a0:	eddf 6ac5 	vldr	s13, [pc, #788]	; 80148b8 <MEMS_runMagCal.constprop.0+0x2050>
 80145a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80145a8:	eef0 7ae7 	vabs.f32	s15, s15
 80145ac:	eef4 7ae6 	vcmpe.f32	s15, s13
 80145b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b4:	d407      	bmi.n	80145c6 <MEMS_runMagCal.constprop.0+0x1d5e>
 80145b6:	eddf 7ac1 	vldr	s15, [pc, #772]	; 80148bc <MEMS_runMagCal.constprop.0+0x2054>
 80145ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80145be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145c2:	f280 81bb 	bge.w	801493c <MEMS_runMagCal.constprop.0+0x20d4>
 80145c6:	eddf 7abe 	vldr	s15, [pc, #760]	; 80148c0 <MEMS_runMagCal.constprop.0+0x2058>
 80145ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80145ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145d2:	f100 81b3 	bmi.w	801493c <MEMS_runMagCal.constprop.0+0x20d4>
 80145d6:	ae10      	add	r6, sp, #64	; 0x40
 80145d8:	af2e      	add	r7, sp, #184	; 0xb8
 80145da:	4635      	mov	r5, r6
 80145dc:	2403      	movs	r4, #3
 80145de:	ecb7 0a01 	vldmia	r7!, {s0}
 80145e2:	f008 fefd 	bl	801d3e0 <roundf>
 80145e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80145ea:	3c01      	subs	r4, #1
 80145ec:	ee10 3a10 	vmov	r3, s0
 80145f0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80145f4:	f825 3b02 	strh.w	r3, [r5], #2
 80145f8:	d1f1      	bne.n	80145de <MEMS_runMagCal.constprop.0+0x1d76>
 80145fa:	eddd 7a03 	vldr	s15, [sp, #12]
 80145fe:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014602:	eddf 7ab6 	vldr	s15, [pc, #728]	; 80148dc <MEMS_runMagCal.constprop.0+0x2074>
 8014606:	ee20 0a27 	vmul.f32	s0, s0, s15
 801460a:	f008 fee9 	bl	801d3e0 <roundf>
 801460e:	eef0 7a40 	vmov.f32	s15, s0
 8014612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014616:	ab0e      	add	r3, sp, #56	; 0x38
 8014618:	eeb0 0a68 	vmov.f32	s0, s17
 801461c:	aa0f      	add	r2, sp, #60	; 0x3c
 801461e:	a93e      	add	r1, sp, #248	; 0xf8
 8014620:	4630      	mov	r0, r6
 8014622:	edcb 7a06 	vstr	s15, [fp, #24]
 8014626:	f7fd fb8f 	bl	8011d48 <getMagStats.constprop.0>
 801462a:	f89b 30a0 	ldrb.w	r3, [fp, #160]	; 0xa0
 801462e:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80148c4 <MEMS_runMagCal.constprop.0+0x205c>
 8014632:	f89b 50a0 	ldrb.w	r5, [fp, #160]	; 0xa0
 8014636:	ee07 0a90 	vmov	s15, r0
 801463a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801463e:	005b      	lsls	r3, r3, #1
 8014640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014644:	ee07 3a90 	vmov	s15, r3
 8014648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801464c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014658:	dc0e      	bgt.n	8014678 <MEMS_runMagCal.constprop.0+0x1e10>
 801465a:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 801465e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014662:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801466a:	bfc3      	ittte	gt
 801466c:	f89b 4054 	ldrbgt.w	r4, [fp, #84]	; 0x54
 8014670:	fab4 f484 	clzgt	r4, r4
 8014674:	0964      	lsrgt	r4, r4, #5
 8014676:	2401      	movle	r4, #1
 8014678:	ee29 0a29 	vmul.f32	s0, s18, s19
 801467c:	f8db a018 	ldr.w	sl, [fp, #24]
 8014680:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 8014684:	f008 feac 	bl	801d3e0 <roundf>
 8014688:	ed9f 6a8f 	vldr	s12, [pc, #572]	; 80148c8 <MEMS_runMagCal.constprop.0+0x2060>
 801468c:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8014690:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 8014694:	ed9d 7a46 	vldr	s14, [sp, #280]	; 0x118
 8014698:	6830      	ldr	r0, [r6, #0]
 801469a:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 801469e:	f8cd 008a 	str.w	r0, [sp, #138]	; 0x8a
 80146a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80146a6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80146aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80146ae:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 80146b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80146b6:	ee16 3a10 	vmov	r3, s12
 80146ba:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
 80146be:	88b3      	ldrh	r3, [r6, #4]
 80146c0:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
 80146c4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80146c8:	ee17 3a90 	vmov	r3, s15
 80146cc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80146d0:	b29e      	uxth	r6, r3
 80146d2:	ee16 3a90 	vmov	r3, s13
 80146d6:	fa1f f983 	uxth.w	r9, r3
 80146da:	ee17 3a10 	vmov	r3, s14
 80146de:	f1b8 0f01 	cmp.w	r8, #1
 80146e2:	b29f      	uxth	r7, r3
 80146e4:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
 80146e8:	f8ad 9092 	strh.w	r9, [sp, #146]	; 0x92
 80146ec:	f8ad 7094 	strh.w	r7, [sp, #148]	; 0x94
 80146f0:	f000 82b3 	beq.w	8014c5a <MEMS_runMagCal.constprop.0+0x23f2>
 80146f4:	ee29 0a28 	vmul.f32	s0, s18, s17
 80146f8:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80146fc:	f008 fe70 	bl	801d3e0 <roundf>
 8014700:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014704:	edcd 7a01 	vstr	s15, [sp, #4]
 8014708:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801470c:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8014710:	2300      	movs	r3, #0
 8014712:	f88b 3014 	strb.w	r3, [fp, #20]
 8014716:	2c00      	cmp	r4, #0
 8014718:	f43e ad8e 	beq.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 801471c:	f89b 2054 	ldrb.w	r2, [fp, #84]	; 0x54
 8014720:	f88b 3015 	strb.w	r3, [fp, #21]
 8014724:	2a00      	cmp	r2, #0
 8014726:	f040 8131 	bne.w	801498c <MEMS_runMagCal.constprop.0+0x2124>
 801472a:	ed9b 0a01 	vldr	s0, [fp, #4]
 801472e:	ae0d      	add	r6, sp, #52	; 0x34
 8014730:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8014734:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8014738:	f8bd 2092 	ldrh.w	r2, [sp, #146]	; 0x92
 801473c:	4f63      	ldr	r7, [pc, #396]	; (80148cc <MEMS_runMagCal.constprop.0+0x2064>)
 801473e:	eddf 7a68 	vldr	s15, [pc, #416]	; 80148e0 <MEMS_runMagCal.constprop.0+0x2078>
 8014742:	f8cb a01c 	str.w	sl, [fp, #28]
 8014746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801474a:	fb00 f303 	mul.w	r3, r0, r3
 801474e:	ee06 3a10 	vmov	s12, r3
 8014752:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8014756:	ee03 3a90 	vmov	s7, r3
 801475a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801475e:	ee04 3a10 	vmov	s8, r3
 8014762:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
 8014766:	fb00 f101 	mul.w	r1, r0, r1
 801476a:	ee04 3a90 	vmov	s9, r3
 801476e:	fb00 f202 	mul.w	r2, r0, r2
 8014772:	23ff      	movs	r3, #255	; 0xff
 8014774:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8014778:	ee05 1a90 	vmov	s11, r1
 801477c:	ee05 2a10 	vmov	s10, r2
 8014780:	f88b 3026 	strb.w	r3, [fp, #38]	; 0x26
 8014784:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014788:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801478a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801478e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014792:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014796:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801479a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801479e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80147a2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80147a6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80147aa:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80147ae:	f04f 0e01 	mov.w	lr, #1
 80147b2:	f8dc 3000 	ldr.w	r3, [ip]
 80147b6:	603b      	str	r3, [r7, #0]
 80147b8:	edcb 5a1f 	vstr	s11, [fp, #124]	; 0x7c
 80147bc:	ed8b 5a23 	vstr	s10, [fp, #140]	; 0x8c
 80147c0:	ed8b 6a27 	vstr	s12, [fp, #156]	; 0x9c
 80147c4:	f88b e054 	strb.w	lr, [fp, #84]	; 0x54
 80147c8:	f88b e06d 	strb.w	lr, [fp, #109]	; 0x6d
 80147cc:	edcb 3a1c 	vstr	s7, [fp, #112]	; 0x70
 80147d0:	ed8b 4a1d 	vstr	s8, [fp, #116]	; 0x74
 80147d4:	edcb 4a1e 	vstr	s9, [fp, #120]	; 0x78
 80147d8:	2d00      	cmp	r5, #0
 80147da:	f000 8237 	beq.w	8014c4c <MEMS_runMagCal.constprop.0+0x23e4>
 80147de:	ed9f 3a3c 	vldr	s6, [pc, #240]	; 80148d0 <MEMS_runMagCal.constprop.0+0x2068>
 80147e2:	f89b 0025 	ldrb.w	r0, [fp, #37]	; 0x25
 80147e6:	f89b 70a1 	ldrb.w	r7, [fp, #161]	; 0xa1
 80147ea:	2100      	movs	r1, #0
 80147ec:	ee20 3a03 	vmul.f32	s6, s0, s6
 80147f0:	f04f 32ff 	mov.w	r2, #4294967295
 80147f4:	460b      	mov	r3, r1
 80147f6:	fb93 fcf7 	sdiv	ip, r3, r7
 80147fa:	fb07 331c 	mls	r3, r7, ip, r3
 80147fe:	b2db      	uxtb	r3, r3
 8014800:	3315      	adds	r3, #21
 8014802:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014806:	3201      	adds	r2, #1
 8014808:	fb92 fcf0 	sdiv	ip, r2, r0
 801480c:	fb00 221c 	mls	r2, r0, ip, r2
 8014810:	f9b3 c01c 	ldrsh.w	ip, [r3, #28]
 8014814:	ee07 ca90 	vmov	s15, ip
 8014818:	f9b3 c01a 	ldrsh.w	ip, [r3, #26]
 801481c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8014820:	ee06 ca90 	vmov	s13, ip
 8014824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014828:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801482c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8014830:	ee07 3a10 	vmov	s14, r3
 8014834:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014838:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801483c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014840:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014844:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014848:	ee37 7a64 	vsub.f32	s14, s14, s9
 801484c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014850:	3101      	adds	r1, #1
 8014852:	b252      	sxtb	r2, r2
 8014854:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014858:	b209      	sxth	r1, r1
 801485a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801485e:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
 8014862:	42a9      	cmp	r1, r5
 8014864:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8014868:	ee67 7a03 	vmul.f32	s15, s14, s6
 801486c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014870:	ee17 ca90 	vmov	ip, s15
 8014874:	f8a3 c028 	strh.w	ip, [r3, #40]	; 0x28
 8014878:	460b      	mov	r3, r1
 801487a:	dbbc      	blt.n	80147f6 <MEMS_runMagCal.constprop.0+0x1f8e>
 801487c:	f88b 2026 	strb.w	r2, [fp, #38]	; 0x26
 8014880:	42a8      	cmp	r0, r5
 8014882:	bf28      	it	cs
 8014884:	4628      	movcs	r0, r5
 8014886:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
 801488a:	aa0c      	add	r2, sp, #48	; 0x30
 801488c:	4911      	ldr	r1, [pc, #68]	; (80148d4 <MEMS_runMagCal.constprop.0+0x206c>)
 801488e:	f10d 008a 	add.w	r0, sp, #138	; 0x8a
 8014892:	4633      	mov	r3, r6
 8014894:	f7fd fa58 	bl	8011d48 <getMagStats.constprop.0>
 8014898:	eddf 6a04 	vldr	s13, [pc, #16]	; 80148ac <MEMS_runMagCal.constprop.0+0x2044>
 801489c:	edd2 7a00 	vldr	s15, [r2]
 80148a0:	e020      	b.n	80148e4 <MEMS_runMagCal.constprop.0+0x207c>
 80148a2:	bf00      	nop
 80148a4:	423c0000 	.word	0x423c0000
 80148a8:	41f00001 	.word	0x41f00001
 80148ac:	423c0000 	.word	0x423c0000
 80148b0:	3ee66666 	.word	0x3ee66666
 80148b4:	3f8ccccd 	.word	0x3f8ccccd
 80148b8:	3f266666 	.word	0x3f266666
 80148bc:	3eb33333 	.word	0x3eb33333
 80148c0:	3f19999a 	.word	0x3f19999a
 80148c4:	3c23d70a 	.word	0x3c23d70a
 80148c8:	447a0000 	.word	0x447a0000
 80148cc:	20000404 	.word	0x20000404
 80148d0:	42c80000 	.word	0x42c80000
 80148d4:	20000428 	.word	0x20000428
 80148d8:	433d0000 	.word	0x433d0000
 80148dc:	3a83126f 	.word	0x3a83126f
 80148e0:	358637bd 	.word	0x358637bd
 80148e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80148e8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80148ec:	eef0 7ae7 	vabs.f32	s15, s15
 80148f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148f8:	edd6 6a00 	vldr	s13, [r6]
 80148fc:	d505      	bpl.n	801490a <MEMS_runMagCal.constprop.0+0x20a2>
 80148fe:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014906:	f100 81a4 	bmi.w	8014c52 <MEMS_runMagCal.constprop.0+0x23ea>
 801490a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801490e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014916:	d505      	bpl.n	8014924 <MEMS_runMagCal.constprop.0+0x20bc>
 8014918:	eef4 6a47 	vcmp.f32	s13, s14
 801491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014920:	bf48      	it	mi
 8014922:	2402      	movmi	r4, #2
 8014924:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 8014928:	f88b 406c 	strb.w	r4, [fp, #108]	; 0x6c
 801492c:	2bc8      	cmp	r3, #200	; 0xc8
 801492e:	f67e ac83 	bls.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 8014932:	2302      	movs	r3, #2
 8014934:	f88b 306c 	strb.w	r3, [fp, #108]	; 0x6c
 8014938:	f7fe bc7e 	b.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 801493c:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80148d8 <MEMS_runMagCal.constprop.0+0x2070>
 8014940:	f89b 30a0 	ldrb.w	r3, [fp, #160]	; 0xa0
 8014944:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014948:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801494c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014950:	ee87 0a28 	vdiv.f32	s0, s14, s17
 8014954:	ee17 2a90 	vmov	r2, s15
 8014958:	b290      	uxth	r0, r2
 801495a:	b113      	cbz	r3, 8014962 <MEMS_runMagCal.constprop.0+0x20fa>
 801495c:	3b01      	subs	r3, #1
 801495e:	f88b 30a0 	strb.w	r3, [fp, #160]	; 0xa0
 8014962:	f7fd fae5 	bl	8011f30 <MEMS_updateMagBufferIndex.constprop.0>
 8014966:	eddd 7a03 	vldr	s15, [sp, #12]
 801496a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801496e:	ed5f 7a25 	vldr	s15, [pc, #-148]	; 80148dc <MEMS_runMagCal.constprop.0+0x2074>
 8014972:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014976:	f008 fd33 	bl	801d3e0 <roundf>
 801497a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801497e:	2300      	movs	r3, #0
 8014980:	f88b 3014 	strb.w	r3, [fp, #20]
 8014984:	ed8b 0a06 	vstr	s0, [fp, #24]
 8014988:	f7fe bc56 	b.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 801498c:	e9cd 333f 	strd	r3, r3, [sp, #252]	; 0xfc
 8014990:	e9cd 3343 	strd	r3, r3, [sp, #268]	; 0x10c
 8014994:	9341      	str	r3, [sp, #260]	; 0x104
 8014996:	9345      	str	r3, [sp, #276]	; 0x114
 8014998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801499c:	fb03 f206 	mul.w	r2, r3, r6
 80149a0:	ee07 2a90 	vmov	s15, r2
 80149a4:	fb03 f209 	mul.w	r2, r3, r9
 80149a8:	fb03 f307 	mul.w	r3, r3, r7
 80149ac:	ee06 2a90 	vmov	s13, r2
 80149b0:	ee07 3a10 	vmov	s14, r3
 80149b4:	ed1f 6a36 	vldr	s12, [pc, #-216]	; 80148e0 <MEMS_runMagCal.constprop.0+0x2078>
 80149b8:	49e4      	ldr	r1, [pc, #912]	; (8014d4c <MEMS_runMagCal.constprop.0+0x24e4>)
 80149ba:	ed9b 0a01 	vldr	s0, [fp, #4]
 80149be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80149c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80149ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80149ce:	ee66 6a86 	vmul.f32	s13, s13, s12
 80149d2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80149d6:	ab2e      	add	r3, sp, #184	; 0xb8
 80149d8:	aa0c      	add	r2, sp, #48	; 0x30
 80149da:	f1a1 001e 	sub.w	r0, r1, #30
 80149de:	ae0d      	add	r6, sp, #52	; 0x34
 80149e0:	edcd 7a3e 	vstr	s15, [sp, #248]	; 0xf8
 80149e4:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 80149e8:	ed8d 7a46 	vstr	s14, [sp, #280]	; 0x118
 80149ec:	f7fd f9ac 	bl	8011d48 <getMagStats.constprop.0>
 80149f0:	ed9b 0a01 	vldr	s0, [fp, #4]
 80149f4:	a93e      	add	r1, sp, #248	; 0xf8
 80149f6:	4633      	mov	r3, r6
 80149f8:	f10d 008a 	add.w	r0, sp, #138	; 0x8a
 80149fc:	f7fd f9a4 	bl	8011d48 <getMagStats.constprop.0>
 8014a00:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8014d50 <MEMS_runMagCal.constprop.0+0x24e8>
 8014a04:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8014a08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a0c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8014a10:	eef0 7ae7 	vabs.f32	s15, s15
 8014a14:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a1c:	ed96 7a00 	vldr	s14, [r6]
 8014a20:	d505      	bpl.n	8014a2e <MEMS_runMagCal.constprop.0+0x21c6>
 8014a22:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a2a:	f100 8114 	bmi.w	8014c56 <MEMS_runMagCal.constprop.0+0x23ee>
 8014a2e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8014a32:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a3a:	f140 8105 	bpl.w	8014c48 <MEMS_runMagCal.constprop.0+0x23e0>
 8014a3e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a46:	bfac      	ite	ge
 8014a48:	4623      	movge	r3, r4
 8014a4a:	2302      	movlt	r3, #2
 8014a4c:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 8014a50:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014a54:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a60:	f57e abea 	bpl.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 8014a64:	f89b 206c 	ldrb.w	r2, [fp, #108]	; 0x6c
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	f63e abe5 	bhi.w	8013238 <MEMS_runMagCal.constprop.0+0x9d0>
 8014a6e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a76:	eef4 5ae7 	vcmpe.f32	s11, s15
 8014a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a7e:	d413      	bmi.n	8014aa8 <MEMS_runMagCal.constprop.0+0x2240>
 8014a80:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014a84:	eef4 5ae7 	vcmpe.f32	s11, s15
 8014a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a8c:	d505      	bpl.n	8014a9a <MEMS_runMagCal.constprop.0+0x2232>
 8014a8e:	f89b 205c 	ldrb.w	r2, [fp, #92]	; 0x5c
 8014a92:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d306      	bcc.n	8014aa8 <MEMS_runMagCal.constprop.0+0x2240>
 8014a9a:	ed9b 0a01 	vldr	s0, [fp, #4]
 8014a9e:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 8014aa2:	f89b 50a0 	ldrb.w	r5, [fp, #160]	; 0xa0
 8014aa6:	e643      	b.n	8014730 <MEMS_runMagCal.constprop.0+0x1ec8>
 8014aa8:	f9bb 1060 	ldrsh.w	r1, [fp, #96]	; 0x60
 8014aac:	f9bd 708c 	ldrsh.w	r7, [sp, #140]	; 0x8c
 8014ab0:	f9bb 005e 	ldrsh.w	r0, [fp, #94]	; 0x5e
 8014ab4:	f9bd c08a 	ldrsh.w	ip, [sp, #138]	; 0x8a
 8014ab8:	f9bb 2062 	ldrsh.w	r2, [fp, #98]	; 0x62
 8014abc:	f9bd 508e 	ldrsh.w	r5, [sp, #142]	; 0x8e
 8014ac0:	ed9b 0a01 	vldr	s0, [fp, #4]
 8014ac4:	1bcb      	subs	r3, r1, r7
 8014ac6:	eba0 0e0c 	sub.w	lr, r0, ip
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	bfb8      	it	lt
 8014ace:	425b      	neglt	r3, r3
 8014ad0:	f1be 0f00 	cmp.w	lr, #0
 8014ad4:	bfb8      	it	lt
 8014ad6:	f1ce 0e00 	rsblt	lr, lr, #0
 8014ada:	4573      	cmp	r3, lr
 8014adc:	bfb8      	it	lt
 8014ade:	4673      	movlt	r3, lr
 8014ae0:	eba2 0e05 	sub.w	lr, r2, r5
 8014ae4:	f1be 0f00 	cmp.w	lr, #0
 8014ae8:	b21b      	sxth	r3, r3
 8014aea:	bfb8      	it	lt
 8014aec:	f1ce 0e00 	rsblt	lr, lr, #0
 8014af0:	4573      	cmp	r3, lr
 8014af2:	bfb8      	it	lt
 8014af4:	4673      	movlt	r3, lr
 8014af6:	b21b      	sxth	r3, r3
 8014af8:	ee07 3a90 	vmov	s15, r3
 8014afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b00:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8014b04:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014b08:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b10:	d5c5      	bpl.n	8014a9e <MEMS_runMagCal.constprop.0+0x2236>
 8014b12:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014b16:	ee07 0a90 	vmov	s15, r0
 8014b1a:	ee85 3a87 	vdiv.f32	s6, s11, s14
 8014b1e:	f8bb 3064 	ldrh.w	r3, [fp, #100]	; 0x64
 8014b22:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014b26:	ee07 1a90 	vmov	s15, r1
 8014b2a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8014b2e:	ee07 2a90 	vmov	s15, r2
 8014b32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014b36:	ee07 ca90 	vmov	s15, ip
 8014b3a:	eef8 3ae7 	vcvt.f32.s32	s7, s15
 8014b3e:	ee07 7a90 	vmov	s15, r7
 8014b42:	eef8 4ae7 	vcvt.f32.s32	s9, s15
 8014b46:	ee07 5a90 	vmov	s15, r5
 8014b4a:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8014b4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014b52:	ee77 5ac3 	vsub.f32	s11, s15, s6
 8014b56:	ee26 7a25 	vmul.f32	s14, s12, s11
 8014b5a:	ee66 7aa5 	vmul.f32	s15, s13, s11
 8014b5e:	eea3 7a24 	vfma.f32	s14, s6, s9
 8014b62:	ee06 3a10 	vmov	s12, r3
 8014b66:	f8bb 3066 	ldrh.w	r3, [fp, #102]	; 0x66
 8014b6a:	eee3 7a04 	vfma.f32	s15, s6, s8
 8014b6e:	ee25 5a25 	vmul.f32	s10, s10, s11
 8014b72:	ee06 3a90 	vmov	s13, r3
 8014b76:	f8bb 3068 	ldrh.w	r3, [fp, #104]	; 0x68
 8014b7a:	eea3 5a23 	vfma.f32	s10, s6, s7
 8014b7e:	eef0 3a47 	vmov.f32	s7, s14
 8014b82:	ee07 3a10 	vmov	s14, r3
 8014b86:	f89b 305c 	ldrb.w	r3, [fp, #92]	; 0x5c
 8014b8a:	eef0 4a67 	vmov.f32	s9, s15
 8014b8e:	ee07 3a90 	vmov	s15, r3
 8014b92:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014b96:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8014b9a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014b9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ba6:	ee26 6a25 	vmul.f32	s12, s12, s11
 8014baa:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014bae:	ee27 7a25 	vmul.f32	s14, s14, s11
 8014bb2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014bb6:	ee05 3a90 	vmov	s11, r3
 8014bba:	f8bd 3092 	ldrh.w	r3, [sp, #146]	; 0x92
 8014bbe:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014bc2:	eebd 5ac5 	vcvt.s32.f32	s10, s10
 8014bc6:	eea3 6a25 	vfma.f32	s12, s6, s11
 8014bca:	ee05 3a90 	vmov	s11, r3
 8014bce:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8014bd2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014bd6:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8014bda:	eee3 6a25 	vfma.f32	s13, s6, s11
 8014bde:	ee05 3a90 	vmov	s11, r3
 8014be2:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 8014be6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014bea:	eefd 3ae3 	vcvt.s32.f32	s7, s7
 8014bee:	eea3 7a25 	vfma.f32	s14, s6, s11
 8014bf2:	ee05 3a90 	vmov	s11, r3
 8014bf6:	ee15 3a10 	vmov	r3, s10
 8014bfa:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 8014bfe:	ee16 3a10 	vmov	r3, s12
 8014c02:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014c06:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8014c0a:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
 8014c0e:	ee13 3a90 	vmov	r3, s7
 8014c12:	eee3 7a25 	vfma.f32	s15, s6, s11
 8014c16:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
 8014c1a:	eefd 4ae4 	vcvt.s32.f32	s9, s9
 8014c1e:	ee16 3a90 	vmov	r3, s13
 8014c22:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8014c26:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
 8014c2a:	ee14 3a90 	vmov	r3, s9
 8014c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014c32:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
 8014c36:	ee17 3a10 	vmov	r3, s14
 8014c3a:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
 8014c3e:	ee17 3a90 	vmov	r3, s15
 8014c42:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8014c46:	e72a      	b.n	8014a9e <MEMS_runMagCal.constprop.0+0x2236>
 8014c48:	4623      	mov	r3, r4
 8014c4a:	e6ff      	b.n	8014a4c <MEMS_runMagCal.constprop.0+0x21e4>
 8014c4c:	f89b 0025 	ldrb.w	r0, [fp, #37]	; 0x25
 8014c50:	e616      	b.n	8014880 <MEMS_runMagCal.constprop.0+0x2018>
 8014c52:	2403      	movs	r4, #3
 8014c54:	e666      	b.n	8014924 <MEMS_runMagCal.constprop.0+0x20bc>
 8014c56:	2303      	movs	r3, #3
 8014c58:	e6f8      	b.n	8014a4c <MEMS_runMagCal.constprop.0+0x21e4>
 8014c5a:	23ff      	movs	r3, #255	; 0xff
 8014c5c:	e556      	b.n	801470c <MEMS_runMagCal.constprop.0+0x1ea4>
 8014c5e:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 8014d54 <MEMS_runMagCal.constprop.0+0x24ec>
 8014c62:	e48e      	b.n	8014582 <MEMS_runMagCal.constprop.0+0x1d1a>
 8014c64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014c68:	f7ff b9ab 	b.w	8013fc2 <MEMS_runMagCal.constprop.0+0x175a>
 8014c6c:	2224      	movs	r2, #36	; 0x24
 8014c6e:	2100      	movs	r1, #0
 8014c70:	a83e      	add	r0, sp, #248	; 0xf8
 8014c72:	f005 ff8a 	bl	801ab8a <memset>
 8014c76:	eddf 7a36 	vldr	s15, [pc, #216]	; 8014d50 <MEMS_runMagCal.constprop.0+0x24e8>
 8014c7a:	ee87 aa88 	vdiv.f32	s20, s15, s16
 8014c7e:	af26      	add	r7, sp, #152	; 0x98
 8014c80:	ae2e      	add	r6, sp, #184	; 0xb8
 8014c82:	ad3e      	add	r5, sp, #248	; 0xf8
 8014c84:	2400      	movs	r4, #0
 8014c86:	3401      	adds	r4, #1
 8014c88:	ecb7 0a01 	vldmia	r7!, {s0}
 8014c8c:	ee29 0a00 	vmul.f32	s0, s18, s0
 8014c90:	f008 fba6 	bl	801d3e0 <roundf>
 8014c94:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c98:	462b      	mov	r3, r5
 8014c9a:	ed83 aa00 	vstr	s20, [r3]
 8014c9e:	ee10 3a10 	vmov	r3, s0
 8014ca2:	2c03      	cmp	r4, #3
 8014ca4:	f826 3b02 	strh.w	r3, [r6], #2
 8014ca8:	f105 0510 	add.w	r5, r5, #16
 8014cac:	d1eb      	bne.n	8014c86 <MEMS_runMagCal.constprop.0+0x241e>
 8014cae:	eeb0 0a68 	vmov.f32	s0, s17
 8014cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8014cb4:	aa2c      	add	r2, sp, #176	; 0xb0
 8014cb6:	a93e      	add	r1, sp, #248	; 0xf8
 8014cb8:	a82e      	add	r0, sp, #184	; 0xb8
 8014cba:	f7fd f845 	bl	8011d48 <getMagStats.constprop.0>
 8014cbe:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 8014cc2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8014cc6:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8014cca:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 8014cce:	e41d      	b.n	801450c <MEMS_runMagCal.constprop.0+0x1ca4>
 8014cd0:	ed9f da20 	vldr	s26, [pc, #128]	; 8014d54 <MEMS_runMagCal.constprop.0+0x24ec>
 8014cd4:	f7fe bed6 	b.w	8013a84 <MEMS_runMagCal.constprop.0+0x121c>
 8014cd8:	ed9f da1f 	vldr	s26, [pc, #124]	; 8014d58 <MEMS_runMagCal.constprop.0+0x24f0>
 8014cdc:	f7fe bed2 	b.w	8013a84 <MEMS_runMagCal.constprop.0+0x121c>
 8014ce0:	fb95 f7f9 	sdiv	r7, r5, r9
 8014ce4:	fb09 5717 	mls	r7, r9, r7, r5
 8014ce8:	b23f      	sxth	r7, r7
 8014cea:	f7fe bd47 	b.w	801377c <MEMS_runMagCal.constprop.0+0xf14>
 8014cee:	eddd 7a03 	vldr	s15, [sp, #12]
 8014cf2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014cf6:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014d5c <MEMS_runMagCal.constprop.0+0x24f4>
 8014cfa:	2303      	movs	r3, #3
 8014cfc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d00:	f88b 306c 	strb.w	r3, [fp, #108]	; 0x6c
 8014d04:	e637      	b.n	8014976 <MEMS_runMagCal.constprop.0+0x210e>
 8014d06:	eef2 9a04 	vmov.f32	s19, #36	; 0x41200000  10.0
 8014d0a:	f7ff bb76 	b.w	80143fa <MEMS_runMagCal.constprop.0+0x1b92>
 8014d0e:	ed92 7a00 	vldr	s14, [r2]
 8014d12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d1a:	f77f abd4 	ble.w	80144c6 <MEMS_runMagCal.constprop.0+0x1c5e>
 8014d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014d22:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8014d26:	ed83 7a01 	vstr	s14, [r3, #4]
 8014d2a:	f7ff bb32 	b.w	8014392 <MEMS_runMagCal.constprop.0+0x1b2a>
 8014d2e:	edd2 7a00 	vldr	s15, [r2]
 8014d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d3a:	f77f abc4 	ble.w	80144c6 <MEMS_runMagCal.constprop.0+0x1c5e>
 8014d3e:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8014d42:	ed83 7a00 	vstr	s14, [r3]
 8014d46:	f7ff bb24 	b.w	8014392 <MEMS_runMagCal.constprop.0+0x1b2a>
 8014d4a:	bf00      	nop
 8014d4c:	20000428 	.word	0x20000428
 8014d50:	423c0000 	.word	0x423c0000
 8014d54:	00000000 	.word	0x00000000
 8014d58:	3f860a92 	.word	0x3f860a92
 8014d5c:	3a83126f 	.word	0x3a83126f
 8014d60:	edd2 7a00 	vldr	s15, [r2]
 8014d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d6c:	f77f abab 	ble.w	80144c6 <MEMS_runMagCal.constprop.0+0x1c5e>
 8014d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d74:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8014d78:	ed83 7a02 	vstr	s14, [r3, #8]
 8014d7c:	f7ff bb09 	b.w	8014392 <MEMS_runMagCal.constprop.0+0x1b2a>

08014d80 <iNemoEngine_API_Update>:
 8014d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d84:	ed2d 8b10 	vpush	{d8-d15}
 8014d88:	f2ad 5d94 	subw	sp, sp, #1428	; 0x594
 8014d8c:	eeb0 8a40 	vmov.f32	s16, s0
 8014d90:	9006      	str	r0, [sp, #24]
 8014d92:	9114      	str	r1, [sp, #80]	; 0x50
 8014d94:	4614      	mov	r4, r2
 8014d96:	9324      	str	r3, [sp, #144]	; 0x90
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	f000 8222 	beq.w	80151e2 <iNemoEngine_API_Update+0x462>
 8014d9e:	68e0      	ldr	r0, [r4, #12]
 8014da0:	6921      	ldr	r1, [r4, #16]
 8014da2:	6962      	ldr	r2, [r4, #20]
 8014da4:	9d06      	ldr	r5, [sp, #24]
 8014da6:	aba1      	add	r3, sp, #644	; 0x284
 8014da8:	c307      	stmia	r3!, {r0, r1, r2}
 8014daa:	6820      	ldr	r0, [r4, #0]
 8014dac:	6861      	ldr	r1, [r4, #4]
 8014dae:	68a2      	ldr	r2, [r4, #8]
 8014db0:	ab9e      	add	r3, sp, #632	; 0x278
 8014db2:	c307      	stmia	r3!, {r0, r1, r2}
 8014db4:	69a0      	ldr	r0, [r4, #24]
 8014db6:	69e1      	ldr	r1, [r4, #28]
 8014db8:	6a22      	ldr	r2, [r4, #32]
 8014dba:	f895 4978 	ldrb.w	r4, [r5, #2424]	; 0x978
 8014dbe:	aba4      	add	r3, sp, #656	; 0x290
 8014dc0:	c307      	stmia	r3!, {r0, r1, r2}
 8014dc2:	b12c      	cbz	r4, 8014dd0 <iNemoEngine_API_Update+0x50>
 8014dc4:	f8b5 2950 	ldrh.w	r2, [r5, #2384]	; 0x950
 8014dc8:	792b      	ldrb	r3, [r5, #4]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	f082 82a5 	bcs.w	801731a <iNemoEngine_API_Update+0x259a>
 8014dd0:	9c06      	ldr	r4, [sp, #24]
 8014dd2:	ae31      	add	r6, sp, #196	; 0xc4
 8014dd4:	f104 033a 	add.w	r3, r4, #58	; 0x3a
 8014dd8:	4619      	mov	r1, r3
 8014dda:	4630      	mov	r0, r6
 8014ddc:	aaa1      	add	r2, sp, #644	; 0x284
 8014dde:	9320      	str	r3, [sp, #128]	; 0x80
 8014de0:	ad37      	add	r5, sp, #220	; 0xdc
 8014de2:	f7fb fbb3 	bl	801054c <rotVect>
 8014de6:	aaa4      	add	r2, sp, #656	; 0x290
 8014de8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8014dec:	a834      	add	r0, sp, #208	; 0xd0
 8014dee:	f7fb fbad 	bl	801054c <rotVect>
 8014df2:	aa9e      	add	r2, sp, #632	; 0x278
 8014df4:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8014df8:	4628      	mov	r0, r5
 8014dfa:	f7fb fba7 	bl	801054c <rotVect>
 8014dfe:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8014e02:	b923      	cbnz	r3, 8014e0e <iNemoEngine_API_Update+0x8e>
 8014e04:	4b9d      	ldr	r3, [pc, #628]	; (801507c <iNemoEngine_API_Update+0x2fc>)
 8014e06:	606b      	str	r3, [r5, #4]
 8014e08:	60ab      	str	r3, [r5, #8]
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	602b      	str	r3, [r5, #0]
 8014e0e:	9b06      	ldr	r3, [sp, #24]
 8014e10:	f8d3 794c 	ldr.w	r7, [r3, #2380]	; 0x94c
 8014e14:	2f09      	cmp	r7, #9
 8014e16:	d851      	bhi.n	8014ebc <iNemoEngine_API_Update+0x13c>
 8014e18:	edd6 aa01 	vldr	s21, [r6, #4]
 8014e1c:	ed96 ba00 	vldr	s22, [r6]
 8014e20:	ed96 aa02 	vldr	s20, [r6, #8]
 8014e24:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 8014e28:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8014e2c:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8014e30:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8014e34:	ee17 0a90 	vmov	r0, s15
 8014e38:	f7eb fb86 	bl	8000548 <__aeabi_f2d>
 8014e3c:	ec41 0b10 	vmov	d0, r0, r1
 8014e40:	f007 ffa8 	bl	801cd94 <sqrt>
 8014e44:	ec51 0b10 	vmov	r0, r1, d0
 8014e48:	f7eb feae 	bl	8000ba8 <__aeabi_d2f>
 8014e4c:	ee07 0a90 	vmov	s15, r0
 8014e50:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 8014e54:	ed95 9a01 	vldr	s18, [r5, #4]
 8014e58:	edd5 9a00 	vldr	s19, [r5]
 8014e5c:	edd5 8a02 	vldr	s17, [r5, #8]
 8014e60:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014e64:	ee2b ba07 	vmul.f32	s22, s22, s14
 8014e68:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8014e6c:	ee6a aa87 	vmul.f32	s21, s21, s14
 8014e70:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8014e74:	ee2a aa07 	vmul.f32	s20, s20, s14
 8014e78:	ee17 0a90 	vmov	r0, s15
 8014e7c:	ed86 ba00 	vstr	s22, [r6]
 8014e80:	edc6 aa01 	vstr	s21, [r6, #4]
 8014e84:	ed86 aa02 	vstr	s20, [r6, #8]
 8014e88:	f7eb fb5e 	bl	8000548 <__aeabi_f2d>
 8014e8c:	ec41 0b10 	vmov	d0, r0, r1
 8014e90:	f007 ff80 	bl	801cd94 <sqrt>
 8014e94:	ec51 0b10 	vmov	r0, r1, d0
 8014e98:	f7eb fe86 	bl	8000ba8 <__aeabi_d2f>
 8014e9c:	ee07 0a90 	vmov	s15, r0
 8014ea0:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 8014ea4:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014ea8:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014eac:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014eb0:	edc5 9a00 	vstr	s19, [r5]
 8014eb4:	ed85 9a01 	vstr	s18, [r5, #4]
 8014eb8:	edc5 8a02 	vstr	s17, [r5, #8]
 8014ebc:	9906      	ldr	r1, [sp, #24]
 8014ebe:	790b      	ldrb	r3, [r1, #4]
 8014ec0:	f8b1 2950 	ldrh.w	r2, [r1, #2384]	; 0x950
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	f080 80f5 	bcs.w	80150b4 <iNemoEngine_API_Update+0x334>
 8014eca:	abf8      	add	r3, sp, #992	; 0x3e0
 8014ecc:	9319      	str	r3, [sp, #100]	; 0x64
 8014ece:	f501 6313 	add.w	r3, r1, #2352	; 0x930
 8014ed2:	931c      	str	r3, [sp, #112]	; 0x70
 8014ed4:	f601 1334 	addw	r3, r1, #2356	; 0x934
 8014ed8:	931d      	str	r3, [sp, #116]	; 0x74
 8014eda:	f601 1338 	addw	r3, r1, #2360	; 0x938
 8014ede:	931e      	str	r3, [sp, #120]	; 0x78
 8014ee0:	eddd 9af5 	vldr	s19, [sp, #980]	; 0x3d4
 8014ee4:	f601 133c 	addw	r3, r1, #2364	; 0x93c
 8014ee8:	accc      	add	r4, sp, #816	; 0x330
 8014eea:	931f      	str	r3, [sp, #124]	; 0x7c
 8014eec:	460d      	mov	r5, r1
 8014eee:	3701      	adds	r7, #1
 8014ef0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8014ef2:	9920      	ldr	r1, [sp, #128]	; 0x80
 8014ef4:	f8c5 794c 	str.w	r7, [r5, #2380]	; 0x94c
 8014ef8:	aaa1      	add	r2, sp, #644	; 0x284
 8014efa:	f7fb fb27 	bl	801054c <rotVect>
 8014efe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014f00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	60d3      	str	r3, [r2, #12]
 8014f06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	6113      	str	r3, [r2, #16]
 8014f0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	6153      	str	r3, [r2, #20]
 8014f12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	6193      	str	r3, [r2, #24]
 8014f18:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8014f1c:	9301      	str	r3, [sp, #4]
 8014f1e:	4601      	mov	r1, r0
 8014f20:	f102 0328 	add.w	r3, r2, #40	; 0x28
 8014f24:	4610      	mov	r0, r2
 8014f26:	4615      	mov	r5, r2
 8014f28:	300c      	adds	r0, #12
 8014f2a:	9300      	str	r3, [sp, #0]
 8014f2c:	f102 031c 	add.w	r3, r2, #28
 8014f30:	f7fd f8e0 	bl	80120f4 <output_update>
 8014f34:	ed95 8a00 	vldr	s16, [r5]
 8014f38:	ed95 aa01 	vldr	s20, [r5, #4]
 8014f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8014f40:	f007 fffa 	bl	801cf38 <sinf>
 8014f44:	eeb0 9a40 	vmov.f32	s18, s0
 8014f48:	eeb0 0a48 	vmov.f32	s0, s16
 8014f4c:	f007 ffa8 	bl	801cea0 <cosf>
 8014f50:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
 8014f54:	edd4 6a3d 	vldr	s13, [r4, #244]	; 0xf4
 8014f58:	ee60 8a00 	vmul.f32	s17, s0, s0
 8014f5c:	eeb0 7aca 	vabs.f32	s14, s20
 8014f60:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014f64:	eddf 7a46 	vldr	s15, [pc, #280]	; 8015080 <iNemoEngine_API_Update+0x300>
 8014f68:	ee29 9a09 	vmul.f32	s18, s18, s18
 8014f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f74:	eee9 8a26 	vfma.f32	s17, s18, s13
 8014f78:	d579      	bpl.n	801506e <iNemoEngine_API_Update+0x2ee>
 8014f7a:	eeb0 0a4a 	vmov.f32	s0, s20
 8014f7e:	f008 f821 	bl	801cfc4 <tanf>
 8014f82:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014f86:	eeb0 7a69 	vmov.f32	s14, s19
 8014f8a:	eea0 7a28 	vfma.f32	s14, s0, s17
 8014f8e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8014f90:	9b06      	ldr	r3, [sp, #24]
 8014f92:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8015084 <iNemoEngine_API_Update+0x304>
 8014f96:	4c3c      	ldr	r4, [pc, #240]	; (8015088 <iNemoEngine_API_Update+0x308>)
 8014f98:	eef1 7ac7 	vsqrt.f32	s15, s14
 8014f9c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80150a8 <iNemoEngine_API_Update+0x328>
 8014fa0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014fa4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fac:	bf88      	it	hi
 8014fae:	eef0 7a66 	vmovhi.f32	s15, s13
 8014fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fba:	bfb8      	it	lt
 8014fbc:	eef0 7a47 	vmovlt.f32	s15, s14
 8014fc0:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8014fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014fc8:	bbd3      	cbnz	r3, 8015040 <iNemoEngine_API_Update+0x2c0>
 8014fca:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8014fce:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 8014fd2:	edd5 0a08 	vldr	s1, [r5, #32]
 8014fd6:	ed95 0a07 	vldr	s0, [r5, #28]
 8014fda:	f7fb fb89 	bl	80106f0 <findDirection>
 8014fde:	ed95 7a03 	vldr	s14, [r5, #12]
 8014fe2:	edd5 6a04 	vldr	s13, [r5, #16]
 8014fe6:	edd5 8a05 	vldr	s17, [r5, #20]
 8014fea:	edd5 7a06 	vldr	s15, [r5, #24]
 8014fee:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
 8014ff2:	2805      	cmp	r0, #5
 8014ff4:	f204 822c 	bhi.w	8019450 <iNemoEngine_API_Update+0x46d0>
 8014ff8:	e8df f010 	tbh	[pc, r0, lsl #1]
 8014ffc:	11d0000a 	.word	0x11d0000a
 8015000:	11990006 	.word	0x11990006
 8015004:	000a0006 	.word	0x000a0006
 8015008:	eddf 7a20 	vldr	s15, [pc, #128]	; 801508c <iNemoEngine_API_Update+0x30c>
 801500c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8015010:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015090 <iNemoEngine_API_Update+0x310>
 8015014:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801501c:	bfa8      	it	ge
 801501e:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8015022:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801502a:	f100 80d5 	bmi.w	80151d8 <iNemoEngine_API_Update+0x458>
 801502e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015030:	ed83 8a0d 	vstr	s16, [r3, #52]	; 0x34
 8015034:	f20d 5d94 	addw	sp, sp, #1428	; 0x594
 8015038:	ecbd 8b10 	vpop	{d8-d15}
 801503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015040:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8015044:	edd5 8a05 	vldr	s17, [r5, #20]
 8015048:	f8d4 03c0 	ldr.w	r0, [r4, #960]	; 0x3c0
 801504c:	edd5 0a07 	vldr	s1, [r5, #28]
 8015050:	ed95 0a08 	vldr	s0, [r5, #32]
 8015054:	eeb1 1a41 	vneg.f32	s2, s2
 8015058:	f7fb fb4a 	bl	80106f0 <findDirection>
 801505c:	eef1 8a68 	vneg.f32	s17, s17
 8015060:	ed95 7a04 	vldr	s14, [r5, #16]
 8015064:	edd5 6a03 	vldr	s13, [r5, #12]
 8015068:	edd5 7a06 	vldr	s15, [r5, #24]
 801506c:	e7bf      	b.n	8014fee <iNemoEngine_API_Update+0x26e>
 801506e:	eddf 7a09 	vldr	s15, [pc, #36]	; 8015094 <iNemoEngine_API_Update+0x314>
 8015072:	eeb0 7a69 	vmov.f32	s14, s19
 8015076:	eea8 7aa7 	vfma.f32	s14, s17, s15
 801507a:	e788      	b.n	8014f8e <iNemoEngine_API_Update+0x20e>
 801507c:	3f333333 	.word	0x3f333333
 8015080:	3fbc430e 	.word	0x3fbc430e
 8015084:	40490fdb 	.word	0x40490fdb
 8015088:	200003ac 	.word	0x200003ac
 801508c:	43340000 	.word	0x43340000
 8015090:	43b40000 	.word	0x43b40000
 8015094:	42c6ab07 	.word	0x42c6ab07
 8015098:	3c03126f 	.word	0x3c03126f
 801509c:	3b656042 	.word	0x3b656042
 80150a0:	3e4ccccd 	.word	0x3e4ccccd
 80150a4:	3fb50481 	.word	0x3fb50481
 80150a8:	3c8efa35 	.word	0x3c8efa35
 80150ac:	3ed93dd9 	.word	0x3ed93dd9
 80150b0:	42c80000 	.word	0x42c80000
 80150b4:	ee07 3a90 	vmov	s15, r3
 80150b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80150bc:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8015098 <iNemoEngine_API_Update+0x318>
 80150c0:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 801509c <iNemoEngine_API_Update+0x31c>
 80150c4:	ed5f ba08 	vldr	s23, [pc, #-32]	; 80150a8 <iNemoEngine_API_Update+0x328>
 80150c8:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 80150a4 <iNemoEngine_API_Update+0x324>
 80150cc:	ed5f 4a0c 	vldr	s9, [pc, #-48]	; 80150a0 <iNemoEngine_API_Update+0x320>
 80150d0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80150d4:	4608      	mov	r0, r1
 80150d6:	eec7 5a27 	vdiv.f32	s11, s14, s15
 80150da:	f601 125c 	addw	r2, r1, #2396	; 0x95c
 80150de:	2300      	movs	r3, #0
 80150e0:	2100      	movs	r1, #0
 80150e2:	f50d 7cb2 	add.w	ip, sp, #356	; 0x164
 80150e6:	ac56      	add	r4, sp, #344	; 0x158
 80150e8:	edcd 7a07 	vstr	s15, [sp, #28]
 80150ec:	eef1 7ae5 	vsqrt.f32	s15, s11
 80150f0:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 80150ac <iNemoEngine_API_Update+0x32c>
 80150f4:	ee86 4aa7 	vdiv.f32	s8, s13, s15
 80150f8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80150fc:	ed92 7a00 	vldr	s14, [r2]
 8015100:	f8a0 1950 	strh.w	r1, [r0, #2384]	; 0x950
 8015104:	6013      	str	r3, [r2, #0]
 8015106:	f500 6216 	add.w	r2, r0, #2400	; 0x960
 801510a:	ee27 ea2b 	vmul.f32	s28, s14, s23
 801510e:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
 8015112:	ed92 7a00 	vldr	s14, [r2]
 8015116:	6013      	str	r3, [r2, #0]
 8015118:	f600 1264 	addw	r2, r0, #2404	; 0x964
 801511c:	ee67 ea2b 	vmul.f32	s29, s14, s23
 8015120:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
 8015124:	ed92 7a00 	vldr	s14, [r2]
 8015128:	6013      	str	r3, [r2, #0]
 801512a:	7947      	ldrb	r7, [r0, #5]
 801512c:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 8015130:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015134:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8015138:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801513c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015140:	9a06      	ldr	r2, [sp, #24]
 8015142:	f8d2 01c8 	ldr.w	r0, [r2, #456]	; 0x1c8
 8015146:	f8d2 11cc 	ldr.w	r1, [r2, #460]	; 0x1cc
 801514a:	f8d2 21d0 	ldr.w	r2, [r2, #464]	; 0x1d0
 801514e:	abd9      	add	r3, sp, #868	; 0x364
 8015150:	2f01      	cmp	r7, #1
 8015152:	c307      	stmia	r3!, {r0, r1, r2}
 8015154:	ee27 6a86 	vmul.f32	s12, s15, s12
 8015158:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801515c:	ee67 ba2b 	vmul.f32	s23, s14, s23
 8015160:	f002 844a 	beq.w	80179f8 <iNemoEngine_API_Update+0x2c78>
 8015164:	2f02      	cmp	r7, #2
 8015166:	f002 843c 	beq.w	80179e2 <iNemoEngine_API_Update+0x2c62>
 801516a:	2f00      	cmp	r7, #0
 801516c:	f002 814d 	beq.w	801740a <iNemoEngine_API_Update+0x268a>
 8015170:	9b06      	ldr	r3, [sp, #24]
 8015172:	ed5f 5a31 	vldr	s11, [pc, #-196]	; 80150b0 <iNemoEngine_API_Update+0x330>
 8015176:	ed93 ba05 	vldr	s22, [r3, #20]
 801517a:	491b      	ldr	r1, [pc, #108]	; (80151e8 <iNemoEngine_API_Update+0x468>)
 801517c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015180:	ee2b ba25 	vmul.f32	s22, s22, s11
 8015184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015188:	4618      	mov	r0, r3
 801518a:	8842      	ldrh	r2, [r0, #2]
 801518c:	1e53      	subs	r3, r2, #1
 801518e:	2b12      	cmp	r3, #18
 8015190:	d834      	bhi.n	80151fc <iNemoEngine_API_Update+0x47c>
 8015192:	3201      	adds	r2, #1
 8015194:	b213      	sxth	r3, r2
 8015196:	b292      	uxth	r2, r2
 8015198:	2a03      	cmp	r2, #3
 801519a:	8043      	strh	r3, [r0, #2]
 801519c:	f242 8401 	bls.w	80179a2 <iNemoEngine_API_Update+0x2c22>
 80151a0:	ee07 3a10 	vmov	s14, r3
 80151a4:	eddf 5a11 	vldr	s11, [pc, #68]	; 80151ec <iNemoEngine_API_Update+0x46c>
 80151a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80151ac:	4603      	mov	r3, r0
 80151ae:	ee27 7a25 	vmul.f32	s14, s14, s11
 80151b2:	ee84 4a07 	vdiv.f32	s8, s8, s14
 80151b6:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
 80151ba:	ed8d 4a22 	vstr	s8, [sp, #136]	; 0x88
 80151be:	ee66 5a87 	vmul.f32	s11, s13, s14
 80151c2:	ee66 6a05 	vmul.f32	s13, s12, s10
 80151c6:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80151f8 <iNemoEngine_API_Update+0x478>
 80151ca:	ee66 6a87 	vmul.f32	s13, s13, s14
 80151ce:	ee24 6a86 	vmul.f32	s12, s9, s12
 80151d2:	eeb0 7a65 	vmov.f32	s14, s11
 80151d6:	e02d      	b.n	8015234 <iNemoEngine_API_Update+0x4b4>
 80151d8:	eddf 7a05 	vldr	s15, [pc, #20]	; 80151f0 <iNemoEngine_API_Update+0x470>
 80151dc:	ee38 8a27 	vadd.f32	s16, s16, s15
 80151e0:	e725      	b.n	801502e <iNemoEngine_API_Update+0x2ae>
 80151e2:	ab46      	add	r3, sp, #280	; 0x118
 80151e4:	9324      	str	r3, [sp, #144]	; 0x90
 80151e6:	e5da      	b.n	8014d9e <iNemoEngine_API_Update+0x1e>
 80151e8:	3a83126f 	.word	0x3a83126f
 80151ec:	3d4ccccd 	.word	0x3d4ccccd
 80151f0:	43b40000 	.word	0x43b40000
 80151f4:	358637bd 	.word	0x358637bd
 80151f8:	3f333333 	.word	0x3f333333
 80151fc:	ed1f 5a03 	vldr	s10, [pc, #-12]	; 80151f4 <iNemoEngine_API_Update+0x474>
 8015200:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8015204:	edd0 5a0b 	vldr	s11, [r0, #44]	; 0x2c
 8015208:	ee37 7a05 	vadd.f32	s14, s14, s10
 801520c:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 8015210:	ee84 7a07 	vdiv.f32	s14, s8, s14
 8015214:	2300      	movs	r3, #0
 8015216:	8043      	strh	r3, [r0, #2]
 8015218:	ee66 5aa5 	vmul.f32	s11, s13, s11
 801521c:	ed8d 7a22 	vstr	s14, [sp, #136]	; 0x88
 8015220:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8015224:	ee26 7a87 	vmul.f32	s14, s13, s14
 8015228:	ee66 6a05 	vmul.f32	s13, s12, s10
 801522c:	ed1f 6a0e 	vldr	s12, [pc, #-56]	; 80151f8 <iNemoEngine_API_Update+0x478>
 8015230:	ee24 6a86 	vmul.f32	s12, s9, s12
 8015234:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 8015238:	ee25 5a24 	vmul.f32	s10, s10, s9
 801523c:	edcd 7a89 	vstr	s15, [sp, #548]	; 0x224
 8015240:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 8015244:	edcd 7a8b 	vstr	s15, [sp, #556]	; 0x22c
 8015248:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 801524c:	4bdd      	ldr	r3, [pc, #884]	; (80155c4 <iNemoEngine_API_Update+0x844>)
 801524e:	9162      	str	r1, [sp, #392]	; 0x188
 8015250:	a8f8      	add	r0, sp, #992	; 0x3e0
 8015252:	9163      	str	r1, [sp, #396]	; 0x18c
 8015254:	9164      	str	r1, [sp, #400]	; 0x190
 8015256:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 801525a:	2100      	movs	r1, #0
 801525c:	4605      	mov	r5, r0
 801525e:	9367      	str	r3, [sp, #412]	; 0x19c
 8015260:	9019      	str	r0, [sp, #100]	; 0x64
 8015262:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 8015266:	edcd 5a84 	vstr	s11, [sp, #528]	; 0x210
 801526a:	edcd 5a85 	vstr	s11, [sp, #532]	; 0x214
 801526e:	ed8d 7a86 	vstr	s14, [sp, #536]	; 0x218
 8015272:	ed8d 7a87 	vstr	s14, [sp, #540]	; 0x21c
 8015276:	ed8d 7a88 	vstr	s14, [sp, #544]	; 0x220
 801527a:	edcd 6a8c 	vstr	s13, [sp, #560]	; 0x230
 801527e:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 8015282:	ed8d 5a8e 	vstr	s10, [sp, #568]	; 0x238
 8015286:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
 801528a:	edcd 7a60 	vstr	s15, [sp, #384]	; 0x180
 801528e:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 8015292:	f005 fc7a 	bl	801ab8a <memset>
 8015296:	9b06      	ldr	r3, [sp, #24]
 8015298:	7b5a      	ldrb	r2, [r3, #13]
 801529a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801529e:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 80152a2:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
 80152a6:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
 80152aa:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
 80152ae:	f8c5 3178 	str.w	r3, [r5, #376]	; 0x178
 80152b2:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
 80152b6:	2a00      	cmp	r2, #0
 80152b8:	f001 8124 	beq.w	8016504 <iNemoEngine_API_Update+0x1784>
 80152bc:	ed94 8a01 	vldr	s16, [r4, #4]
 80152c0:	edd4 8a00 	vldr	s17, [r4]
 80152c4:	ed94 ca02 	vldr	s24, [r4, #8]
 80152c8:	ee28 9a08 	vmul.f32	s18, s16, s16
 80152cc:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80152d0:	eea8 9aa8 	vfma.f32	s18, s17, s17
 80152d4:	ee68 5a27 	vmul.f32	s11, s16, s15
 80152d8:	eeac 9a0c 	vfma.f32	s18, s24, s24
 80152dc:	ee6c 6a27 	vmul.f32	s13, s24, s15
 80152e0:	eef1 cac9 	vsqrt.f32	s25, s18
 80152e4:	ee3c 5a0c 	vadd.f32	s10, s24, s24
 80152e8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80152ec:	ee38 6aa8 	vadd.f32	s12, s17, s17
 80152f0:	ee38 7a08 	vadd.f32	s14, s16, s16
 80152f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80152f6:	ed94 aa04 	vldr	s20, [r4, #16]
 80152fa:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 80152fe:	eef1 7a4a 	vneg.f32	s15, s20
 8015302:	edd4 9a05 	vldr	s19, [r4, #20]
 8015306:	edd4 aa03 	vldr	s21, [r4, #12]
 801530a:	ed83 5a01 	vstr	s10, [r3, #4]
 801530e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015312:	edc3 5a02 	vstr	s11, [r3, #8]
 8015316:	edc3 7a05 	vstr	s15, [r3, #20]
 801531a:	eef1 7a69 	vneg.f32	s15, s19
 801531e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015322:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
 8015326:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 801532a:	eef1 7a6a 	vneg.f32	s15, s21
 801532e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015332:	ed83 6a0e 	vstr	s12, [r3, #56]	; 0x38
 8015336:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 801533a:	ee79 7aa9 	vadd.f32	s15, s19, s19
 801533e:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60
 8015342:	edc3 7a04 	vstr	s15, [r3, #16]
 8015346:	ee7a 7aaa 	vadd.f32	s15, s21, s21
 801534a:	2230      	movs	r2, #48	; 0x30
 801534c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8015350:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 8015354:	2100      	movs	r1, #0
 8015356:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
 801535a:	a88f      	add	r0, sp, #572	; 0x23c
 801535c:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8015360:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
 8015364:	933c      	str	r3, [sp, #240]	; 0xf0
 8015366:	f005 fc10 	bl	801ab8a <memset>
 801536a:	9a06      	ldr	r2, [sp, #24]
 801536c:	edd2 7a07 	vldr	s15, [r2, #28]
 8015370:	ed92 da06 	vldr	s26, [r2, #24]
 8015374:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
 8015378:	ee6b 7a27 	vmul.f32	s15, s22, s15
 801537c:	ee2b da0d 	vmul.f32	s26, s22, s26
 8015380:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 8015384:	edd2 7a08 	vldr	s15, [r2, #32]
 8015388:	ee6b 7a27 	vmul.f32	s15, s22, s15
 801538c:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
 8015390:	2b00      	cmp	r3, #0
 8015392:	f043 8025 	bne.w	80183e0 <iNemoEngine_API_Update+0x3660>
 8015396:	4613      	mov	r3, r2
 8015398:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 801539c:	9225      	str	r2, [sp, #148]	; 0x94
 801539e:	f603 1244 	addw	r2, r3, #2372	; 0x944
 80153a2:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80153a6:	9226      	str	r2, [sp, #152]	; 0x98
 80153a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80153aa:	9a06      	ldr	r2, [sp, #24]
 80153ac:	f892 3318 	ldrb.w	r3, [r2, #792]	; 0x318
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	f042 84db 	bne.w	8017d6c <iNemoEngine_API_Update+0x2fec>
 80153b6:	4613      	mov	r3, r2
 80153b8:	f502 6597 	add.w	r5, r2, #1208	; 0x4b8
 80153bc:	f202 47b4 	addw	r7, r2, #1204	; 0x4b4
 80153c0:	f502 66c5 	add.w	r6, r2, #1576	; 0x628
 80153c4:	f202 6824 	addw	r8, r2, #1572	; 0x624
 80153c8:	f203 7394 	addw	r3, r3, #1940	; 0x794
 80153cc:	f502 62f3 	add.w	r2, r2, #1944	; 0x798
 80153d0:	9215      	str	r2, [sp, #84]	; 0x54
 80153d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80153d4:	9b06      	ldr	r3, [sp, #24]
 80153d6:	f503 6213 	add.w	r2, r3, #2352	; 0x930
 80153da:	ed92 6a00 	vldr	s12, [r2]
 80153de:	921c      	str	r2, [sp, #112]	; 0x70
 80153e0:	f603 1134 	addw	r1, r3, #2356	; 0x934
 80153e4:	f603 1038 	addw	r0, r3, #2360	; 0x938
 80153e8:	f603 133c 	addw	r3, r3, #2364	; 0x93c
 80153ec:	edd3 7a00 	vldr	s15, [r3]
 80153f0:	edd1 6a00 	vldr	s13, [r1]
 80153f4:	ed90 7a00 	vldr	s14, [r0]
 80153f8:	931f      	str	r3, [sp, #124]	; 0x7c
 80153fa:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80153fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015402:	911d      	str	r1, [sp, #116]	; 0x74
 8015404:	901e      	str	r0, [sp, #120]	; 0x78
 8015406:	ed8d 6a4e 	vstr	s12, [sp, #312]	; 0x138
 801540a:	edcd 6a4f 	vstr	s13, [sp, #316]	; 0x13c
 801540e:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 8015412:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 8015416:	f04f 0300 	mov.w	r3, #0
 801541a:	d13a      	bne.n	8015492 <iNemoEngine_API_Update+0x712>
 801541c:	eef5 6a40 	vcmp.f32	s13, #0.0
 8015420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015424:	d135      	bne.n	8015492 <iNemoEngine_API_Update+0x712>
 8015426:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801542e:	d130      	bne.n	8015492 <iNemoEngine_API_Update+0x712>
 8015430:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015438:	d12b      	bne.n	8015492 <iNemoEngine_API_Update+0x712>
 801543a:	9a06      	ldr	r2, [sp, #24]
 801543c:	934e      	str	r3, [sp, #312]	; 0x138
 801543e:	934f      	str	r3, [sp, #316]	; 0x13c
 8015440:	9350      	str	r3, [sp, #320]	; 0x140
 8015442:	4b61      	ldr	r3, [pc, #388]	; (80155c8 <iNemoEngine_API_Update+0x848>)
 8015444:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 8015448:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801544c:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 8015450:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 8015454:	9351      	str	r3, [sp, #324]	; 0x144
 8015456:	2100      	movs	r1, #0
 8015458:	4613      	mov	r3, r2
 801545a:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 801545e:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 8015462:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8015466:	f005 fb90 	bl	801ab8a <memset>
 801546a:	9a06      	ldr	r2, [sp, #24]
 801546c:	4b57      	ldr	r3, [pc, #348]	; (80155cc <iNemoEngine_API_Update+0x84c>)
 801546e:	f8c2 31d4 	str.w	r3, [r2, #468]	; 0x1d4
 8015472:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 8015476:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
 801547a:	f8c2 324c 	str.w	r3, [r2, #588]	; 0x24c
 801547e:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 8015482:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 8015486:	f8c2 32c4 	str.w	r3, [r2, #708]	; 0x2c4
 801548a:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
 801548e:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
 8015492:	eddf 7a4f 	vldr	s15, [pc, #316]	; 80155d0 <iNemoEngine_API_Update+0x850>
 8015496:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801549a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801549e:	f100 87e0 	bmi.w	8016462 <iNemoEngine_API_Update+0x16e2>
 80154a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80154a6:	ee7c 6ac7 	vsub.f32	s13, s25, s14
 80154aa:	eec7 7a2c 	vdiv.f32	s15, s14, s25
 80154ae:	eeb0 7ae6 	vabs.f32	s14, s13
 80154b2:	eef0 6a47 	vmov.f32	s13, s14
 80154b6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80154ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80154be:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80154c2:	ed8d 7a21 	vstr	s14, [sp, #132]	; 0x84
 80154c6:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 80154ca:	edd4 6a00 	vldr	s13, [r4]
 80154ce:	ed94 6a01 	vldr	s12, [r4, #4]
 80154d2:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 80154d6:	eeaa 7aaa 	vfma.f32	s14, s21, s21
 80154da:	4628      	mov	r0, r5
 80154dc:	ee67 5aa6 	vmul.f32	s11, s15, s13
 80154e0:	eea9 7aa9 	vfma.f32	s14, s19, s19
 80154e4:	ee67 6a86 	vmul.f32	s13, s15, s12
 80154e8:	ed8d 6a2d 	vstr	s12, [sp, #180]	; 0xb4
 80154ec:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80155d0 <iNemoEngine_API_Update+0x850>
 80154f0:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 80154f4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80154f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154fc:	bf54      	ite	pl
 80154fe:	eeb1 9ac7 	vsqrtpl.f32	s18, s14
 8015502:	ed9f 9a34 	vldrmi	s18, [pc, #208]	; 80155d4 <iNemoEngine_API_Update+0x854>
 8015506:	ed94 5a02 	vldr	s10, [r4, #8]
 801550a:	edd7 3a00 	vldr	s7, [r7]
 801550e:	ed8d 5a2a 	vstr	s10, [sp, #168]	; 0xa8
 8015512:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8015516:	ee83 7a09 	vdiv.f32	s14, s6, s18
 801551a:	ee65 7a27 	vmul.f32	s15, s10, s15
 801551e:	ee2a 6a07 	vmul.f32	s12, s20, s14
 8015522:	eeb0 0a63 	vmov.f32	s0, s7
 8015526:	ee66 6a26 	vmul.f32	s13, s12, s13
 801552a:	ed8d 6a41 	vstr	s12, [sp, #260]	; 0x104
 801552e:	ee2a 6a87 	vmul.f32	s12, s21, s14
 8015532:	ee29 7a87 	vmul.f32	s14, s19, s14
 8015536:	eee6 6a25 	vfma.f32	s13, s12, s11
 801553a:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 801553e:	eee7 6a87 	vfma.f32	s13, s15, s14
 8015542:	ed8d 7a42 	vstr	s14, [sp, #264]	; 0x108
 8015546:	edcd 5a3d 	vstr	s11, [sp, #244]	; 0xf4
 801554a:	ed8d 6a40 	vstr	s12, [sp, #256]	; 0x100
 801554e:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 8015552:	f7fb fac1 	bl	8010ad8 <dataDerivative5>
 8015556:	edd8 fa00 	vldr	s31, [r8]
 801555a:	ed8d 0a18 	vstr	s0, [sp, #96]	; 0x60
 801555e:	4630      	mov	r0, r6
 8015560:	eeb0 0a6f 	vmov.f32	s0, s31
 8015564:	f7fb fab8 	bl	8010ad8 <dataDerivative5>
 8015568:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801556a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801556c:	ed93 fa00 	vldr	s30, [r3]
 8015570:	eeb0 ba40 	vmov.f32	s22, s0
 8015574:	eeb0 0a4f 	vmov.f32	s0, s30
 8015578:	f7fb faae 	bl	8010ad8 <dataDerivative5>
 801557c:	eec3 7a23 	vdiv.f32	s15, s6, s7
 8015580:	eef0 da40 	vmov.f32	s27, s0
 8015584:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015588:	ee27 8a88 	vmul.f32	s16, s15, s16
 801558c:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8015590:	eddf 7a11 	vldr	s15, [pc, #68]	; 80155d8 <iNemoEngine_API_Update+0x858>
 8015594:	eeb0 7ae8 	vabs.f32	s14, s17
 8015598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801559c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155a0:	d52c      	bpl.n	80155fc <iNemoEngine_API_Update+0x87c>
 80155a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80155a6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80155aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ae:	f281 8756 	bge.w	801745e <iNemoEngine_API_Update+0x26de>
 80155b2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80155b6:	eef4 8ac7 	vcmpe.f32	s17, s14
 80155ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155be:	f303 80bc 	bgt.w	801873a <iNemoEngine_API_Update+0x39ba>
 80155c2:	e00b      	b.n	80155dc <iNemoEngine_API_Update+0x85c>
 80155c4:	3a9d4952 	.word	0x3a9d4952
 80155c8:	bf666666 	.word	0xbf666666
 80155cc:	40a00000 	.word	0x40a00000
 80155d0:	3c23d70a 	.word	0x3c23d70a
 80155d4:	3dcccccd 	.word	0x3dcccccd
 80155d8:	4b000000 	.word	0x4b000000
 80155dc:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80155e0:	ee17 0a90 	vmov	r0, s15
 80155e4:	f7ea ffb0 	bl	8000548 <__aeabi_f2d>
 80155e8:	ec41 0b10 	vmov	d0, r0, r1
 80155ec:	f007 fdf8 	bl	801d1e0 <ceil>
 80155f0:	ec51 0b10 	vmov	r0, r1, d0
 80155f4:	f7eb fad8 	bl	8000ba8 <__aeabi_d2f>
 80155f8:	ee08 0a90 	vmov	s17, r0
 80155fc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 80155d8 <iNemoEngine_API_Update+0x858>
 8015600:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 8015604:	eeb0 7ac8 	vabs.f32	s14, s16
 8015608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801560c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015610:	d51f      	bpl.n	8015652 <iNemoEngine_API_Update+0x8d2>
 8015612:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015616:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801561e:	f281 870c 	bge.w	801743a <iNemoEngine_API_Update+0x26ba>
 8015622:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8015626:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801562a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801562e:	f303 8080 	bgt.w	8018732 <iNemoEngine_API_Update+0x39b2>
 8015632:	ee78 7a67 	vsub.f32	s15, s16, s15
 8015636:	ee17 0a90 	vmov	r0, s15
 801563a:	f7ea ff85 	bl	8000548 <__aeabi_f2d>
 801563e:	ec41 0b10 	vmov	d0, r0, r1
 8015642:	f007 fdcd 	bl	801d1e0 <ceil>
 8015646:	ec51 0b10 	vmov	r0, r1, d0
 801564a:	f7eb faad 	bl	8000ba8 <__aeabi_d2f>
 801564e:	ee08 0a10 	vmov	s16, r0
 8015652:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 80155d8 <iNemoEngine_API_Update+0x858>
 8015656:	ed8d 8a44 	vstr	s16, [sp, #272]	; 0x110
 801565a:	eeb0 7acc 	vabs.f32	s14, s24
 801565e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015666:	d51f      	bpl.n	80156a8 <iNemoEngine_API_Update+0x928>
 8015668:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801566c:	eeb4 cae7 	vcmpe.f32	s24, s15
 8015670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015674:	f281 86cf 	bge.w	8017416 <iNemoEngine_API_Update+0x2696>
 8015678:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801567c:	eeb4 cac7 	vcmpe.f32	s24, s14
 8015680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015684:	f303 8065 	bgt.w	8018752 <iNemoEngine_API_Update+0x39d2>
 8015688:	ee7c 7a67 	vsub.f32	s15, s24, s15
 801568c:	ee17 0a90 	vmov	r0, s15
 8015690:	f7ea ff5a 	bl	8000548 <__aeabi_f2d>
 8015694:	ec41 0b10 	vmov	d0, r0, r1
 8015698:	f007 fda2 	bl	801d1e0 <ceil>
 801569c:	ec51 0b10 	vmov	r0, r1, d0
 80156a0:	f7eb fa82 	bl	8000ba8 <__aeabi_d2f>
 80156a4:	ee0c 0a10 	vmov	s24, r0
 80156a8:	9b06      	ldr	r3, [sp, #24]
 80156aa:	ed8d ca45 	vstr	s24, [sp, #276]	; 0x114
 80156ae:	f893 04b1 	ldrb.w	r0, [r3, #1201]	; 0x4b1
 80156b2:	1e43      	subs	r3, r0, #1
 80156b4:	b25b      	sxtb	r3, r3
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	dd18      	ble.n	80156ec <iNemoEngine_API_Update+0x96c>
 80156ba:	9c06      	ldr	r4, [sp, #24]
 80156bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80156c0:	1e81      	subs	r1, r0, #2
 80156c2:	009b      	lsls	r3, r3, #2
 80156c4:	b2c9      	uxtb	r1, r1
 80156c6:	f504 6294 	add.w	r2, r4, #1184	; 0x4a0
 80156ca:	441a      	add	r2, r3
 80156cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80156d0:	f203 43ac 	addw	r3, r3, #1196	; 0x4ac
 80156d4:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 80156d8:	4423      	add	r3, r4
 80156da:	681a      	ldr	r2, [r3, #0]
 80156dc:	60da      	str	r2, [r3, #12]
 80156de:	685a      	ldr	r2, [r3, #4]
 80156e0:	611a      	str	r2, [r3, #16]
 80156e2:	689a      	ldr	r2, [r3, #8]
 80156e4:	615a      	str	r2, [r3, #20]
 80156e6:	3b0c      	subs	r3, #12
 80156e8:	428b      	cmp	r3, r1
 80156ea:	d1f6      	bne.n	80156da <iNemoEngine_API_Update+0x95a>
 80156ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80156f0:	edc5 8a00 	vstr	s17, [r5]
 80156f4:	eec7 8aaf 	vdiv.f32	s17, s15, s31
 80156f8:	9a06      	ldr	r2, [sp, #24]
 80156fa:	f202 43bc 	addw	r3, r2, #1212	; 0x4bc
 80156fe:	ed83 8a00 	vstr	s16, [r3]
 8015702:	f502 6398 	add.w	r3, r2, #1216	; 0x4c0
 8015706:	ed83 ca00 	vstr	s24, [r3]
 801570a:	f892 34b0 	ldrb.w	r3, [r2, #1200]	; 0x4b0
 801570e:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 80155d8 <iNemoEngine_API_Update+0x858>
 8015712:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 8015716:	3301      	adds	r3, #1
 8015718:	b2db      	uxtb	r3, r3
 801571a:	eeb0 7ac8 	vabs.f32	s14, s16
 801571e:	4298      	cmp	r0, r3
 8015720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015724:	bf28      	it	cs
 8015726:	4618      	movcs	r0, r3
 8015728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801572c:	ee2a ca28 	vmul.f32	s24, s20, s17
 8015730:	f882 04b0 	strb.w	r0, [r2, #1200]	; 0x4b0
 8015734:	ee69 8aa8 	vmul.f32	s17, s19, s17
 8015738:	d51f      	bpl.n	801577a <iNemoEngine_API_Update+0x9fa>
 801573a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801573e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015746:	f281 87cb 	bge.w	80176e0 <iNemoEngine_API_Update+0x2960>
 801574a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801574e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8015752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015756:	f303 8000 	bgt.w	801875a <iNemoEngine_API_Update+0x39da>
 801575a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801575e:	ee17 0a90 	vmov	r0, s15
 8015762:	f7ea fef1 	bl	8000548 <__aeabi_f2d>
 8015766:	ec41 0b10 	vmov	d0, r0, r1
 801576a:	f007 fd39 	bl	801d1e0 <ceil>
 801576e:	ec51 0b10 	vmov	r0, r1, d0
 8015772:	f7eb fa19 	bl	8000ba8 <__aeabi_d2f>
 8015776:	ee08 0a10 	vmov	s16, r0
 801577a:	ed5f 7a69 	vldr	s15, [pc, #-420]	; 80155d8 <iNemoEngine_API_Update+0x858>
 801577e:	ed8d 8a43 	vstr	s16, [sp, #268]	; 0x10c
 8015782:	eeb0 7acc 	vabs.f32	s14, s24
 8015786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801578a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801578e:	d51f      	bpl.n	80157d0 <iNemoEngine_API_Update+0xa50>
 8015790:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015794:	eeb4 cae7 	vcmpe.f32	s24, s15
 8015798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801579c:	f281 878e 	bge.w	80176bc <iNemoEngine_API_Update+0x293c>
 80157a0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80157a4:	eeb4 cac7 	vcmpe.f32	s24, s14
 80157a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ac:	f302 87cd 	bgt.w	801874a <iNemoEngine_API_Update+0x39ca>
 80157b0:	ee7c 7a67 	vsub.f32	s15, s24, s15
 80157b4:	ee17 0a90 	vmov	r0, s15
 80157b8:	f7ea fec6 	bl	8000548 <__aeabi_f2d>
 80157bc:	ec41 0b10 	vmov	d0, r0, r1
 80157c0:	f007 fd0e 	bl	801d1e0 <ceil>
 80157c4:	ec51 0b10 	vmov	r0, r1, d0
 80157c8:	f7eb f9ee 	bl	8000ba8 <__aeabi_d2f>
 80157cc:	ee0c 0a10 	vmov	s24, r0
 80157d0:	ed5f 7a7f 	vldr	s15, [pc, #-508]	; 80155d8 <iNemoEngine_API_Update+0x858>
 80157d4:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 80157d8:	eeb0 7ae8 	vabs.f32	s14, s17
 80157dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80157e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157e4:	d51f      	bpl.n	8015826 <iNemoEngine_API_Update+0xaa6>
 80157e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80157ea:	eef4 8ae7 	vcmpe.f32	s17, s15
 80157ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157f2:	f281 8751 	bge.w	8017698 <iNemoEngine_API_Update+0x2918>
 80157f6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80157fa:	eef4 8ac7 	vcmpe.f32	s17, s14
 80157fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015802:	f302 878e 	bgt.w	8018722 <iNemoEngine_API_Update+0x39a2>
 8015806:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801580a:	ee17 0a90 	vmov	r0, s15
 801580e:	f7ea fe9b 	bl	8000548 <__aeabi_f2d>
 8015812:	ec41 0b10 	vmov	d0, r0, r1
 8015816:	f007 fce3 	bl	801d1e0 <ceil>
 801581a:	ec51 0b10 	vmov	r0, r1, d0
 801581e:	f7eb f9c3 	bl	8000ba8 <__aeabi_d2f>
 8015822:	ee08 0a90 	vmov	s17, r0
 8015826:	9b06      	ldr	r3, [sp, #24]
 8015828:	edcd 8a45 	vstr	s17, [sp, #276]	; 0x114
 801582c:	f893 0621 	ldrb.w	r0, [r3, #1569]	; 0x621
 8015830:	1e43      	subs	r3, r0, #1
 8015832:	b25b      	sxtb	r3, r3
 8015834:	2b00      	cmp	r3, #0
 8015836:	dd18      	ble.n	801586a <iNemoEngine_API_Update+0xaea>
 8015838:	9c06      	ldr	r4, [sp, #24]
 801583a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801583e:	1e81      	subs	r1, r0, #2
 8015840:	009b      	lsls	r3, r3, #2
 8015842:	b2c9      	uxtb	r1, r1
 8015844:	f504 62c2 	add.w	r2, r4, #1552	; 0x610
 8015848:	441a      	add	r2, r3
 801584a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801584e:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8015852:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 8015856:	4423      	add	r3, r4
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	60da      	str	r2, [r3, #12]
 801585c:	685a      	ldr	r2, [r3, #4]
 801585e:	611a      	str	r2, [r3, #16]
 8015860:	689a      	ldr	r2, [r3, #8]
 8015862:	615a      	str	r2, [r3, #20]
 8015864:	3b0c      	subs	r3, #12
 8015866:	4299      	cmp	r1, r3
 8015868:	d1f6      	bne.n	8015858 <iNemoEngine_API_Update+0xad8>
 801586a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801586e:	ed86 8a00 	vstr	s16, [r6]
 8015872:	ee87 8a8f 	vdiv.f32	s16, s15, s30
 8015876:	9a06      	ldr	r2, [sp, #24]
 8015878:	f202 632c 	addw	r3, r2, #1580	; 0x62c
 801587c:	ed83 ca00 	vstr	s24, [r3]
 8015880:	f502 63c6 	add.w	r3, r2, #1584	; 0x630
 8015884:	edc3 8a00 	vstr	s17, [r3]
 8015888:	f892 3620 	ldrb.w	r3, [r2, #1568]	; 0x620
 801588c:	ed5f 7aae 	vldr	s15, [pc, #-696]	; 80155d8 <iNemoEngine_API_Update+0x858>
 8015890:	ee68 8a0e 	vmul.f32	s17, s16, s28
 8015894:	3301      	adds	r3, #1
 8015896:	b2db      	uxtb	r3, r3
 8015898:	eeb0 7ae8 	vabs.f32	s14, s17
 801589c:	4298      	cmp	r0, r3
 801589e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80158a2:	bf28      	it	cs
 80158a4:	4618      	movcs	r0, r3
 80158a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158aa:	ee28 ca2e 	vmul.f32	s24, s16, s29
 80158ae:	f882 0620 	strb.w	r0, [r2, #1568]	; 0x620
 80158b2:	ee28 8a2b 	vmul.f32	s16, s16, s23
 80158b6:	d51f      	bpl.n	80158f8 <iNemoEngine_API_Update+0xb78>
 80158b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80158bc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80158c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158c4:	f281 86d6 	bge.w	8017674 <iNemoEngine_API_Update+0x28f4>
 80158c8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80158cc:	eef4 8ac7 	vcmpe.f32	s17, s14
 80158d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158d4:	f302 8745 	bgt.w	8018762 <iNemoEngine_API_Update+0x39e2>
 80158d8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80158dc:	ee17 0a90 	vmov	r0, s15
 80158e0:	f7ea fe32 	bl	8000548 <__aeabi_f2d>
 80158e4:	ec41 0b10 	vmov	d0, r0, r1
 80158e8:	f007 fc7a 	bl	801d1e0 <ceil>
 80158ec:	ec51 0b10 	vmov	r0, r1, d0
 80158f0:	f7eb f95a 	bl	8000ba8 <__aeabi_d2f>
 80158f4:	ee08 0a90 	vmov	s17, r0
 80158f8:	ed5f 7ac9 	vldr	s15, [pc, #-804]	; 80155d8 <iNemoEngine_API_Update+0x858>
 80158fc:	edcd 8a43 	vstr	s17, [sp, #268]	; 0x10c
 8015900:	eeb0 7acc 	vabs.f32	s14, s24
 8015904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801590c:	d51f      	bpl.n	801594e <iNemoEngine_API_Update+0xbce>
 801590e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015912:	eeb4 cae7 	vcmpe.f32	s24, s15
 8015916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801591a:	f281 871d 	bge.w	8017758 <iNemoEngine_API_Update+0x29d8>
 801591e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8015922:	eeb4 cac7 	vcmpe.f32	s24, s14
 8015926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801592a:	f302 86fe 	bgt.w	801872a <iNemoEngine_API_Update+0x39aa>
 801592e:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8015932:	ee17 0a90 	vmov	r0, s15
 8015936:	f7ea fe07 	bl	8000548 <__aeabi_f2d>
 801593a:	ec41 0b10 	vmov	d0, r0, r1
 801593e:	f007 fc4f 	bl	801d1e0 <ceil>
 8015942:	ec51 0b10 	vmov	r0, r1, d0
 8015946:	f7eb f92f 	bl	8000ba8 <__aeabi_d2f>
 801594a:	ee0c 0a10 	vmov	s24, r0
 801594e:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 80155d8 <iNemoEngine_API_Update+0x858>
 8015952:	ed8d ca44 	vstr	s24, [sp, #272]	; 0x110
 8015956:	eeb0 7ac8 	vabs.f32	s14, s16
 801595a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801595e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015962:	d51f      	bpl.n	80159a4 <iNemoEngine_API_Update+0xc24>
 8015964:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015968:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015970:	f281 86c8 	bge.w	8017704 <iNemoEngine_API_Update+0x2984>
 8015974:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8015978:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801597c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015980:	f302 86df 	bgt.w	8018742 <iNemoEngine_API_Update+0x39c2>
 8015984:	ee78 7a67 	vsub.f32	s15, s16, s15
 8015988:	ee17 0a90 	vmov	r0, s15
 801598c:	f7ea fddc 	bl	8000548 <__aeabi_f2d>
 8015990:	ec41 0b10 	vmov	d0, r0, r1
 8015994:	f007 fc24 	bl	801d1e0 <ceil>
 8015998:	ec51 0b10 	vmov	r0, r1, d0
 801599c:	f7eb f904 	bl	8000ba8 <__aeabi_d2f>
 80159a0:	ee08 0a10 	vmov	s16, r0
 80159a4:	9b06      	ldr	r3, [sp, #24]
 80159a6:	ed8d 8a45 	vstr	s16, [sp, #276]	; 0x114
 80159aa:	f893 0791 	ldrb.w	r0, [r3, #1937]	; 0x791
 80159ae:	1e43      	subs	r3, r0, #1
 80159b0:	b25b      	sxtb	r3, r3
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	dd18      	ble.n	80159e8 <iNemoEngine_API_Update+0xc68>
 80159b6:	9c06      	ldr	r4, [sp, #24]
 80159b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80159bc:	1e81      	subs	r1, r0, #2
 80159be:	009b      	lsls	r3, r3, #2
 80159c0:	b2c9      	uxtb	r1, r1
 80159c2:	f504 62f0 	add.w	r2, r4, #1920	; 0x780
 80159c6:	441a      	add	r2, r3
 80159c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80159cc:	f203 738c 	addw	r3, r3, #1932	; 0x78c
 80159d0:	eba2 0181 	sub.w	r1, r2, r1, lsl #2
 80159d4:	4423      	add	r3, r4
 80159d6:	681a      	ldr	r2, [r3, #0]
 80159d8:	60da      	str	r2, [r3, #12]
 80159da:	685a      	ldr	r2, [r3, #4]
 80159dc:	611a      	str	r2, [r3, #16]
 80159de:	689a      	ldr	r2, [r3, #8]
 80159e0:	615a      	str	r2, [r3, #20]
 80159e2:	3b0c      	subs	r3, #12
 80159e4:	428b      	cmp	r3, r1
 80159e6:	d1f6      	bne.n	80159d6 <iNemoEngine_API_Update+0xc56>
 80159e8:	9c06      	ldr	r4, [sp, #24]
 80159ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159ec:	f204 729c 	addw	r2, r4, #1948	; 0x79c
 80159f0:	edc3 8a00 	vstr	s17, [r3]
 80159f4:	922e      	str	r2, [sp, #184]	; 0xb8
 80159f6:	ed82 ca00 	vstr	s24, [r2]
 80159fa:	f504 62f4 	add.w	r2, r4, #1952	; 0x7a0
 80159fe:	ed82 8a00 	vstr	s16, [r2]
 8015a02:	f894 3790 	ldrb.w	r3, [r4, #1936]	; 0x790
 8015a06:	922f      	str	r2, [sp, #188]	; 0xbc
 8015a08:	3301      	adds	r3, #1
 8015a0a:	b2db      	uxtb	r3, r3
 8015a0c:	4298      	cmp	r0, r3
 8015a0e:	bf28      	it	cs
 8015a10:	4618      	movcs	r0, r3
 8015a12:	f884 0790 	strb.w	r0, [r4, #1936]	; 0x790
 8015a16:	aa68      	add	r2, sp, #416	; 0x1a0
 8015a18:	a93d      	add	r1, sp, #244	; 0xf4
 8015a1a:	a840      	add	r0, sp, #256	; 0x100
 8015a1c:	f7fb f942 	bl	8010ca4 <getRotationMatrix>
 8015a20:	4623      	mov	r3, r4
 8015a22:	f504 7247 	add.w	r2, r4, #796	; 0x31c
 8015a26:	9229      	str	r2, [sp, #164]	; 0xa4
 8015a28:	4614      	mov	r4, r2
 8015a2a:	aeae      	add	r6, sp, #696	; 0x2b8
 8015a2c:	f503 774f 	add.w	r7, r3, #828	; 0x33c
 8015a30:	6820      	ldr	r0, [r4, #0]
 8015a32:	6861      	ldr	r1, [r4, #4]
 8015a34:	68a2      	ldr	r2, [r4, #8]
 8015a36:	68e3      	ldr	r3, [r4, #12]
 8015a38:	4635      	mov	r5, r6
 8015a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015a3c:	3410      	adds	r4, #16
 8015a3e:	42bc      	cmp	r4, r7
 8015a40:	462e      	mov	r6, r5
 8015a42:	d1f5      	bne.n	8015a30 <iNemoEngine_API_Update+0xcb0>
 8015a44:	6820      	ldr	r0, [r4, #0]
 8015a46:	6028      	str	r0, [r5, #0]
 8015a48:	9b06      	ldr	r3, [sp, #24]
 8015a4a:	edd3 7ac7 	vldr	s15, [r3, #796]	; 0x31c
 8015a4e:	ed93 7ac8 	vldr	s14, [r3, #800]	; 0x320
 8015a52:	eef0 7ae7 	vabs.f32	s15, s15
 8015a56:	eeb0 7ac7 	vabs.f32	s14, s14
 8015a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a62:	f140 8543 	bpl.w	80164ec <iNemoEngine_API_Update+0x176c>
 8015a66:	2604      	movs	r6, #4
 8015a68:	2400      	movs	r4, #0
 8015a6a:	eef0 7a47 	vmov.f32	s15, s14
 8015a6e:	f04f 0c07 	mov.w	ip, #7
 8015a72:	f04f 0e06 	mov.w	lr, #6
 8015a76:	2103      	movs	r1, #3
 8015a78:	4630      	mov	r0, r6
 8015a7a:	4623      	mov	r3, r4
 8015a7c:	2701      	movs	r7, #1
 8015a7e:	9a06      	ldr	r2, [sp, #24]
 8015a80:	ed92 7ac9 	vldr	s14, [r2, #804]	; 0x324
 8015a84:	eeb0 7ac7 	vabs.f32	s14, s14
 8015a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a90:	f340 8525 	ble.w	80164de <iNemoEngine_API_Update+0x175e>
 8015a94:	f04f 0c08 	mov.w	ip, #8
 8015a98:	2104      	movs	r1, #4
 8015a9a:	f04f 0906 	mov.w	r9, #6
 8015a9e:	f04f 0e07 	mov.w	lr, #7
 8015aa2:	f04f 0803 	mov.w	r8, #3
 8015aa6:	2605      	movs	r6, #5
 8015aa8:	4660      	mov	r0, ip
 8015aaa:	460c      	mov	r4, r1
 8015aac:	2200      	movs	r2, #0
 8015aae:	2301      	movs	r3, #1
 8015ab0:	2702      	movs	r7, #2
 8015ab2:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8015ab4:	442c      	add	r4, r5
 8015ab6:	4428      	add	r0, r5
 8015ab8:	ed90 7a00 	vldr	s14, [r0]
 8015abc:	edd4 6a00 	vldr	s13, [r4]
 8015ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015ac4:	a8ae      	add	r0, sp, #696	; 0x2b8
 8015ac6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8015aca:	acae      	add	r4, sp, #696	; 0x2b8
 8015acc:	adae      	add	r5, sp, #696	; 0x2b8
 8015ace:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8015ad2:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8015ad6:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 8015ada:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8015ade:	edc0 7a00 	vstr	s15, [r0]
 8015ae2:	edd5 7a00 	vldr	s15, [r5]
 8015ae6:	ed94 7a00 	vldr	s14, [r4]
 8015aea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015aee:	edc4 6a00 	vstr	s13, [r4]
 8015af2:	ed90 6a00 	vldr	s12, [r0]
 8015af6:	a8ae      	add	r0, sp, #696	; 0x2b8
 8015af8:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8015afc:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8015b00:	ed90 7a00 	vldr	s14, [r0]
 8015b04:	edd5 7a00 	vldr	s15, [r5]
 8015b08:	eee6 7a47 	vfms.f32	s15, s12, s14
 8015b0c:	00b4      	lsls	r4, r6, #2
 8015b0e:	9403      	str	r4, [sp, #12]
 8015b10:	ea4f 048c 	mov.w	r4, ip, lsl #2
 8015b14:	edc5 7a00 	vstr	s15, [r5]
 8015b18:	ed90 7a00 	vldr	s14, [r0]
 8015b1c:	a8ae      	add	r0, sp, #696	; 0x2b8
 8015b1e:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 8015b22:	edd0 7a00 	vldr	s15, [r0]
 8015b26:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8015b2a:	4626      	mov	r6, r4
 8015b2c:	acae      	add	r4, sp, #696	; 0x2b8
 8015b2e:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 8015b32:	edc0 7a00 	vstr	s15, [r0]
 8015b36:	a8ae      	add	r0, sp, #696	; 0x2b8
 8015b38:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8015b3c:	edd0 5a00 	vldr	s11, [r0]
 8015b40:	ed94 7a00 	vldr	s14, [r4]
 8015b44:	eea6 7a65 	vfms.f32	s14, s12, s11
 8015b48:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8015b4c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8015b50:	eef0 7ae7 	vabs.f32	s15, s15
 8015b54:	ed84 7a00 	vstr	s14, [r4]
 8015b58:	ed90 6a00 	vldr	s12, [r0]
 8015b5c:	a8ae      	add	r0, sp, #696	; 0x2b8
 8015b5e:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8015b62:	ed90 7a00 	vldr	s14, [r0]
 8015b66:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8015b6a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8015b6e:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8015b72:	ed80 7a00 	vstr	s14, [r0]
 8015b76:	ed95 7a00 	vldr	s14, [r5]
 8015b7a:	eeb0 7ac7 	vabs.f32	s14, s14
 8015b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b86:	ea4f 0581 	mov.w	r5, r1, lsl #2
 8015b8a:	dd0b      	ble.n	8015ba4 <iNemoEngine_API_Update+0xe24>
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	4645      	mov	r5, r8
 8015b90:	4613      	mov	r3, r2
 8015b92:	464c      	mov	r4, r9
 8015b94:	46d4      	mov	ip, sl
 8015b96:	4602      	mov	r2, r0
 8015b98:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8015b9c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 8015ba0:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8015ba4:	a9ae      	add	r1, sp, #696	; 0x2b8
 8015ba6:	eb01 0008 	add.w	r0, r1, r8
 8015baa:	440d      	add	r5, r1
 8015bac:	ed90 7a00 	vldr	s14, [r0]
 8015bb0:	edd5 7a00 	vldr	s15, [r5]
 8015bb4:	ee87 4a27 	vdiv.f32	s8, s14, s15
 8015bb8:	440c      	add	r4, r1
 8015bba:	eb01 0809 	add.w	r8, r1, r9
 8015bbe:	440e      	add	r6, r1
 8015bc0:	46b6      	mov	lr, r6
 8015bc2:	460e      	mov	r6, r1
 8015bc4:	9903      	ldr	r1, [sp, #12]
 8015bc6:	4431      	add	r1, r6
 8015bc8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8015bcc:	ed80 4a00 	vstr	s8, [r0]
 8015bd0:	ed94 7a00 	vldr	s14, [r4]
 8015bd4:	edd8 7a00 	vldr	s15, [r8]
 8015bd8:	eee4 7a47 	vfms.f32	s15, s8, s14
 8015bdc:	a8ae      	add	r0, sp, #696	; 0x2b8
 8015bde:	edc8 7a00 	vstr	s15, [r8]
 8015be2:	edd1 2a00 	vldr	s5, [r1]
 8015be6:	ed95 7a00 	vldr	s14, [r5]
 8015bea:	ed94 1a00 	vldr	s2, [r4]
 8015bee:	edde 1a00 	vldr	s3, [lr]
 8015bf2:	f50b 61b2 	add.w	r1, fp, #1424	; 0x590
 8015bf6:	4469      	add	r1, sp
 8015bf8:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8015bfc:	ee83 2a87 	vdiv.f32	s4, s7, s14
 8015c00:	ed91 7a00 	vldr	s14, [r1]
 8015c04:	a9ae      	add	r1, sp, #696	; 0x2b8
 8015c06:	448b      	add	fp, r1
 8015c08:	f50c 61b2 	add.w	r1, ip, #1424	; 0x590
 8015c0c:	eec3 0aa7 	vdiv.f32	s1, s7, s15
 8015c10:	4469      	add	r1, sp
 8015c12:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8015c16:	4484      	add	ip, r0
 8015c18:	4450      	add	r0, sl
 8015c1a:	edd1 6a00 	vldr	s13, [r1]
 8015c1e:	eddb 7a00 	vldr	s15, [fp]
 8015c22:	ed90 0a00 	vldr	s0, [r0]
 8015c26:	f50a 61b2 	add.w	r1, sl, #1424	; 0x590
 8015c2a:	4469      	add	r1, sp
 8015c2c:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8015c30:	ee83 3aa7 	vdiv.f32	s6, s7, s15
 8015c34:	edd1 4a00 	vldr	s9, [r1]
 8015c38:	eddc 7a00 	vldr	s15, [ip]
 8015c3c:	eee0 4a47 	vfms.f32	s9, s0, s14
 8015c40:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8015c44:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8015c48:	eee7 6ac7 	vfms.f32	s13, s15, s14
 8015c4c:	4601      	mov	r1, r0
 8015c4e:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 8015c52:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 8015c56:	eee4 4a66 	vfms.f32	s9, s8, s13
 8015c5a:	ed90 5a00 	vldr	s10, [r0]
 8015c5e:	ee60 4aa4 	vmul.f32	s9, s1, s9
 8015c62:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 8015c66:	eee1 6a64 	vfms.f32	s13, s2, s9
 8015c6a:	eea1 7ae4 	vfms.f32	s14, s3, s9
 8015c6e:	ee62 8a26 	vmul.f32	s17, s4, s13
 8015c72:	edd1 6a00 	vldr	s13, [r1]
 8015c76:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8015c7a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015c7e:	460b      	mov	r3, r1
 8015c80:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8015c84:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8015c88:	edd1 5a00 	vldr	s11, [r1]
 8015c8c:	ed93 8a00 	vldr	s16, [r3]
 8015c90:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8015c94:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 8015c98:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 8015c9c:	eee7 5ac5 	vfms.f32	s11, s15, s10
 8015ca0:	eea6 8ae7 	vfms.f32	s16, s13, s15
 8015ca4:	ed92 6a00 	vldr	s12, [r2]
 8015ca8:	edd3 7a00 	vldr	s15, [r3]
 8015cac:	eea0 6a45 	vfms.f32	s12, s0, s10
 8015cb0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8015cb4:	eea4 6a65 	vfms.f32	s12, s8, s11
 8015cb8:	eee4 7a48 	vfms.f32	s15, s8, s16
 8015cbc:	ee20 6a86 	vmul.f32	s12, s1, s12
 8015cc0:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8015cc4:	eee1 5a46 	vfms.f32	s11, s2, s12
 8015cc8:	eea7 8ac1 	vfms.f32	s16, s15, s2
 8015ccc:	eea1 5ac6 	vfms.f32	s10, s3, s12
 8015cd0:	eee7 6ae1 	vfms.f32	s13, s15, s3
 8015cd4:	ee62 5a25 	vmul.f32	s11, s4, s11
 8015cd8:	ee28 2a02 	vmul.f32	s4, s16, s4
 8015cdc:	eea2 7ae8 	vfms.f32	s14, s5, s17
 8015ce0:	eee2 6a62 	vfms.f32	s13, s4, s5
 8015ce4:	eea2 5ae5 	vfms.f32	s10, s5, s11
 8015ce8:	ee23 7a07 	vmul.f32	s14, s6, s14
 8015cec:	ee23 5a05 	vmul.f32	s10, s6, s10
 8015cf0:	ee26 3a83 	vmul.f32	s6, s13, s6
 8015cf4:	ee77 6aa5 	vadd.f32	s13, s15, s11
 8015cf8:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8015cfc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8015d00:	ee36 6a42 	vsub.f32	s12, s12, s4
 8015d04:	eef4 6ac4 	vcmpe.f32	s13, s8
 8015d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d0c:	bfc8      	it	gt
 8015d0e:	ee76 6aa3 	vaddgt.f32	s13, s13, s7
 8015d12:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8015d16:	bfcc      	ite	gt
 8015d18:	eeb1 4ae6 	vsqrtgt.f32	s8, s13
 8015d1c:	ed9f 4ad7 	vldrle	s8, [pc, #860]	; 801607c <iNemoEngine_API_Update+0x12fc>
 8015d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d24:	f100 8411 	bmi.w	801654a <iNemoEngine_API_Update+0x17ca>
 8015d28:	bfd8      	it	le
 8015d2a:	ee24 4a06 	vmulle.f32	s8, s8, s12
 8015d2e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015d32:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015d36:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8015d3a:	ee24 6a06 	vmul.f32	s12, s8, s12
 8015d3e:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8015d42:	eef4 6ac4 	vcmpe.f32	s13, s8
 8015d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d4a:	bf88      	it	hi
 8015d4c:	eeb7 4a00 	vmovhi.f32	s8, #112	; 0x3f800000  1.0
 8015d50:	ee33 3a64 	vsub.f32	s6, s6, s9
 8015d54:	bf88      	it	hi
 8015d56:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 8015d5a:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 8015d5e:	bf8c      	ite	hi
 8015d60:	eef1 6ac4 	vsqrthi.f32	s13, s8
 8015d64:	eddf 6ac5 	vldrls	s13, [pc, #788]	; 801607c <iNemoEngine_API_Update+0x12fc>
 8015d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d6c:	f100 83ea 	bmi.w	8016544 <iNemoEngine_API_Update+0x17c4>
 8015d70:	bfd8      	it	le
 8015d72:	ee66 6a83 	vmulle.f32	s13, s13, s6
 8015d76:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015d7a:	ee38 5ac5 	vsub.f32	s10, s17, s10
 8015d7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015d82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015d86:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015d8a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d96:	bf84      	itt	hi
 8015d98:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8015d9c:	ee37 7a87 	vaddhi.f32	s14, s15, s14
 8015da0:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8015da4:	bf8c      	ite	hi
 8015da6:	eef1 7ac7 	vsqrthi.f32	s15, s14
 8015daa:	eddf 7ab4 	vldrls	s15, [pc, #720]	; 801607c <iNemoEngine_API_Update+0x12fc>
 8015dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015db2:	f100 83ce 	bmi.w	8016552 <iNemoEngine_API_Update+0x17d2>
 8015db6:	bfd8      	it	le
 8015db8:	ee67 7a85 	vmulle.f32	s15, s15, s10
 8015dbc:	9b06      	ldr	r3, [sp, #24]
 8015dbe:	f893 2341 	ldrb.w	r2, [r3, #833]	; 0x341
 8015dc2:	1e53      	subs	r3, r2, #1
 8015dc4:	b25b      	sxtb	r3, r3
 8015dc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015dd0:	dd1d      	ble.n	8015e0e <iNemoEngine_API_Update+0x108e>
 8015dd2:	9806      	ldr	r0, [sp, #24]
 8015dd4:	3a02      	subs	r2, #2
 8015dd6:	b2d1      	uxtb	r1, r2
 8015dd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015ddc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8015de0:	f1a0 010c 	sub.w	r1, r0, #12
 8015de4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015de8:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8015dec:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015df0:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8015df4:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 8015df8:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8015dfc:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8015e00:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8015e04:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8015e08:	3b0c      	subs	r3, #12
 8015e0a:	428b      	cmp	r3, r1
 8015e0c:	d1f0      	bne.n	8015df0 <iNemoEngine_API_Update+0x1070>
 8015e0e:	ed9d 7a07 	vldr	s14, [sp, #28]
 8015e12:	9b06      	ldr	r3, [sp, #24]
 8015e14:	9310      	str	r3, [sp, #64]	; 0x40
 8015e16:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015e1a:	ee85 7a87 	vdiv.f32	s14, s11, s14
 8015e1e:	aa3d      	add	r2, sp, #244	; 0xf4
 8015e20:	922b      	str	r2, [sp, #172]	; 0xac
 8015e22:	9212      	str	r2, [sp, #72]	; 0x48
 8015e24:	f50d 7be2 	add.w	fp, sp, #452	; 0x1c4
 8015e28:	f50d 7af4 	add.w	sl, sp, #488	; 0x1e8
 8015e2c:	ee36 6a06 	vadd.f32	s12, s12, s12
 8015e30:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8015e34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015e38:	ee26 6a07 	vmul.f32	s12, s12, s14
 8015e3c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8015e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e44:	ed83 6ad2 	vstr	s12, [r3, #840]	; 0x348
 8015e48:	edc3 6ad3 	vstr	s13, [r3, #844]	; 0x34c
 8015e4c:	edc3 7ad4 	vstr	s15, [r3, #848]	; 0x350
 8015e50:	2300      	movs	r3, #0
 8015e52:	930e      	str	r3, [sp, #56]	; 0x38
 8015e54:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 8015e58:	f1c3 0301 	rsb	r3, r3, #1
 8015e5c:	9328      	str	r3, [sp, #160]	; 0xa0
 8015e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e62:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8015e64:	3301      	adds	r3, #1
 8015e66:	930e      	str	r3, [sp, #56]	; 0x38
 8015e68:	a9ae      	add	r1, sp, #696	; 0x2b8
 8015e6a:	f20d 13c3 	addw	r3, sp, #451	; 0x1c3
 8015e6e:	18e0      	adds	r0, r4, r3
 8015e70:	f803 0f01 	strb.w	r0, [r3, #1]!
 8015e74:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 8015e78:	f841 0b04 	str.w	r0, [r1], #4
 8015e7c:	f20d 10e1 	addw	r0, sp, #481	; 0x1e1
 8015e80:	4283      	cmp	r3, r0
 8015e82:	f102 020c 	add.w	r2, r2, #12
 8015e86:	d1f2      	bne.n	8015e6e <iNemoEngine_API_Update+0x10ee>
 8015e88:	ed9d 7aae 	vldr	s14, [sp, #696]	; 0x2b8
 8015e8c:	eddd 7aaf 	vldr	s15, [sp, #700]	; 0x2bc
 8015e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015e94:	ed9d 7ab0 	vldr	s14, [sp, #704]	; 0x2c0
 8015e98:	eddd 7ab1 	vldr	s15, [sp, #708]	; 0x2c4
 8015e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea0:	bf88      	it	hi
 8015ea2:	f44f 7381 	movhi.w	r3, #258	; 0x102
 8015ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015eaa:	ed9d 7ab2 	vldr	s14, [sp, #712]	; 0x2c8
 8015eae:	eddd 7ab3 	vldr	s15, [sp, #716]	; 0x2cc
 8015eb2:	bf88      	it	hi
 8015eb4:	f8ab 3000 	strhhi.w	r3, [fp]
 8015eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ebc:	bf88      	it	hi
 8015ebe:	f44f 7341 	movhi.w	r3, #772	; 0x304
 8015ec2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ec6:	ed9d 7ab4 	vldr	s14, [sp, #720]	; 0x2d0
 8015eca:	eddd 7ab5 	vldr	s15, [sp, #724]	; 0x2d4
 8015ece:	bf88      	it	hi
 8015ed0:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 8015ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed8:	bf88      	it	hi
 8015eda:	f240 5306 	movwhi	r3, #1286	; 0x506
 8015ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ee2:	ed9d 7ab6 	vldr	s14, [sp, #728]	; 0x2d8
 8015ee6:	eddd 7ab7 	vldr	s15, [sp, #732]	; 0x2dc
 8015eea:	bf88      	it	hi
 8015eec:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 8015ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef4:	bf88      	it	hi
 8015ef6:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 8015efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015efe:	ed9d 7ab8 	vldr	s14, [sp, #736]	; 0x2e0
 8015f02:	eddd 7ab9 	vldr	s15, [sp, #740]	; 0x2e4
 8015f06:	bf88      	it	hi
 8015f08:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 8015f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f10:	bf88      	it	hi
 8015f12:	f640 130a 	movwhi	r3, #2314	; 0x90a
 8015f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f1a:	ed9d 7aba 	vldr	s14, [sp, #744]	; 0x2e8
 8015f1e:	eddd 7abb 	vldr	s15, [sp, #748]	; 0x2ec
 8015f22:	bf88      	it	hi
 8015f24:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 8015f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f2c:	bf88      	it	hi
 8015f2e:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 8015f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f36:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 8015f3a:	eddd 7abd 	vldr	s15, [sp, #756]	; 0x2f4
 8015f3e:	bf88      	it	hi
 8015f40:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 8015f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f48:	bf88      	it	hi
 8015f4a:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8015f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f52:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 8015f56:	eddd 7abf 	vldr	s15, [sp, #764]	; 0x2fc
 8015f5a:	bf88      	it	hi
 8015f5c:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 8015f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f64:	bf88      	it	hi
 8015f66:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 8015f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f6e:	ed9d 7ac0 	vldr	s14, [sp, #768]	; 0x300
 8015f72:	eddd 7ac1 	vldr	s15, [sp, #772]	; 0x304
 8015f76:	bf88      	it	hi
 8015f78:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 8015f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f80:	bf88      	it	hi
 8015f82:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8015f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015f8a:	ed9d 7ac2 	vldr	s14, [sp, #776]	; 0x308
 8015f8e:	eddd 7ac3 	vldr	s15, [sp, #780]	; 0x30c
 8015f92:	bf88      	it	hi
 8015f94:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 8015f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f9c:	bf88      	it	hi
 8015f9e:	f241 3314 	movwhi	r3, #4884	; 0x1314
 8015fa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015fa6:	bf88      	it	hi
 8015fa8:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 8015fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fb0:	bf84      	itt	hi
 8015fb2:	f241 5316 	movwhi	r3, #5398	; 0x1516
 8015fb6:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 8015fba:	ed9d 7ac4 	vldr	s14, [sp, #784]	; 0x310
 8015fbe:	eddd 7ac5 	vldr	s15, [sp, #788]	; 0x314
 8015fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015fc6:	ed9d 7ac6 	vldr	s14, [sp, #792]	; 0x318
 8015fca:	eddd 7ac7 	vldr	s15, [sp, #796]	; 0x31c
 8015fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fd2:	bf88      	it	hi
 8015fd4:	f241 7318 	movwhi	r3, #5912	; 0x1718
 8015fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015fdc:	ed9d 7ac8 	vldr	s14, [sp, #800]	; 0x320
 8015fe0:	eddd 7ac9 	vldr	s15, [sp, #804]	; 0x324
 8015fe4:	bf88      	it	hi
 8015fe6:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 8015fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fee:	bf88      	it	hi
 8015ff0:	f641 131a 	movwhi	r3, #6426	; 0x191a
 8015ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ff8:	ed9d 7aca 	vldr	s14, [sp, #808]	; 0x328
 8015ffc:	eddd 7acb 	vldr	s15, [sp, #812]	; 0x32c
 8016000:	bf88      	it	hi
 8016002:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 8016006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801600a:	bf88      	it	hi
 801600c:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8016010:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016014:	bf88      	it	hi
 8016016:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 801601a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801601e:	bf84      	itt	hi
 8016020:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 8016024:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 8016028:	221e      	movs	r2, #30
 801602a:	2101      	movs	r1, #1
 801602c:	4650      	mov	r0, sl
 801602e:	f004 fdac 	bl	801ab8a <memset>
 8016032:	2304      	movs	r3, #4
 8016034:	930c      	str	r3, [sp, #48]	; 0x30
 8016036:	2302      	movs	r3, #2
 8016038:	9307      	str	r3, [sp, #28]
 801603a:	9a07      	ldr	r2, [sp, #28]
 801603c:	920a      	str	r2, [sp, #40]	; 0x28
 801603e:	4613      	mov	r3, r2
 8016040:	0052      	lsls	r2, r2, #1
 8016042:	9207      	str	r2, [sp, #28]
 8016044:	f103 0901 	add.w	r9, r3, #1
 8016048:	f04f 0801 	mov.w	r8, #1
 801604c:	9b07      	ldr	r3, [sp, #28]
 801604e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016052:	4443      	add	r3, r8
 8016054:	2b1f      	cmp	r3, #31
 8016056:	bfa8      	it	ge
 8016058:	231f      	movge	r3, #31
 801605a:	4642      	mov	r2, r8
 801605c:	1a9f      	subs	r7, r3, r2
 801605e:	2f00      	cmp	r7, #0
 8016060:	4698      	mov	r8, r3
 8016062:	f109 35ff 	add.w	r5, r9, #4294967295
 8016066:	dd54      	ble.n	8016112 <iNemoEngine_API_Update+0x1392>
 8016068:	f108 33ff 	add.w	r3, r8, #4294967295
 801606c:	9304      	str	r3, [sp, #16]
 801606e:	f1a8 0302 	sub.w	r3, r8, #2
 8016072:	4616      	mov	r6, r2
 8016074:	2400      	movs	r4, #0
 8016076:	9305      	str	r3, [sp, #20]
 8016078:	e00f      	b.n	801609a <iNemoEngine_API_Update+0x131a>
 801607a:	bf00      	nop
 801607c:	00000000 	.word	0x00000000
 8016080:	3f333333 	.word	0x3f333333
 8016084:	3f4ccccd 	.word	0x3f4ccccd
 8016088:	45f0      	cmp	r8, lr
 801608a:	f80a 2004 	strb.w	r2, [sl, r4]
 801608e:	f000 81f6 	beq.w	801647e <iNemoEngine_API_Update+0x16fe>
 8016092:	4665      	mov	r5, ip
 8016094:	3401      	adds	r4, #1
 8016096:	42a7      	cmp	r7, r4
 8016098:	dd34      	ble.n	8016104 <iNemoEngine_API_Update+0x1384>
 801609a:	1e71      	subs	r1, r6, #1
 801609c:	a8ae      	add	r0, sp, #696	; 0x2b8
 801609e:	f91b 3001 	ldrsb.w	r3, [fp, r1]
 80160a2:	f91b 2005 	ldrsb.w	r2, [fp, r5]
 80160a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80160aa:	ed10 7a01 	vldr	s14, [r0, #-4]
 80160ae:	a8ae      	add	r0, sp, #696	; 0x2b8
 80160b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80160b4:	ed50 7a01 	vldr	s15, [r0, #-4]
 80160b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80160bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c0:	f105 0e02 	add.w	lr, r5, #2
 80160c4:	f105 0c01 	add.w	ip, r5, #1
 80160c8:	d8de      	bhi.n	8016088 <iNemoEngine_API_Update+0x1308>
 80160ca:	3601      	adds	r6, #1
 80160cc:	454e      	cmp	r6, r9
 80160ce:	f80a 3004 	strb.w	r3, [sl, r4]
 80160d2:	d1df      	bne.n	8016094 <iNemoEngine_API_Update+0x1314>
 80160d4:	1c6b      	adds	r3, r5, #1
 80160d6:	9a04      	ldr	r2, [sp, #16]
 80160d8:	9308      	str	r3, [sp, #32]
 80160da:	1c60      	adds	r0, r4, #1
 80160dc:	4598      	cmp	r8, r3
 80160de:	eba2 0205 	sub.w	r2, r2, r5
 80160e2:	4450      	add	r0, sl
 80160e4:	ddd6      	ble.n	8016094 <iNemoEngine_API_Update+0x1314>
 80160e6:	eb0b 0105 	add.w	r1, fp, r5
 80160ea:	f004 fdd6 	bl	801ac9a <memcpy>
 80160ee:	9a04      	ldr	r2, [sp, #16]
 80160f0:	9b05      	ldr	r3, [sp, #20]
 80160f2:	4414      	add	r4, r2
 80160f4:	1b64      	subs	r4, r4, r5
 80160f6:	1b5a      	subs	r2, r3, r5
 80160f8:	3401      	adds	r4, #1
 80160fa:	9b08      	ldr	r3, [sp, #32]
 80160fc:	42a7      	cmp	r7, r4
 80160fe:	eb02 0503 	add.w	r5, r2, r3
 8016102:	dcca      	bgt.n	801609a <iNemoEngine_API_Update+0x131a>
 8016104:	9b03      	ldr	r3, [sp, #12]
 8016106:	1e58      	subs	r0, r3, #1
 8016108:	463a      	mov	r2, r7
 801610a:	4458      	add	r0, fp
 801610c:	4651      	mov	r1, sl
 801610e:	f004 fdc4 	bl	801ac9a <memcpy>
 8016112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016114:	eb08 0903 	add.w	r9, r8, r3
 8016118:	f1b9 0f1e 	cmp.w	r9, #30
 801611c:	dd96      	ble.n	801604c <iNemoEngine_API_Update+0x12cc>
 801611e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016120:	3b01      	subs	r3, #1
 8016122:	930c      	str	r3, [sp, #48]	; 0x30
 8016124:	d189      	bne.n	801603a <iNemoEngine_API_Update+0x12ba>
 8016126:	f99b 300e 	ldrsb.w	r3, [fp, #14]
 801612a:	aaae      	add	r2, sp, #696	; 0x2b8
 801612c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016130:	ed53 7a01 	vldr	s15, [r3, #-4]
 8016134:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 8016138:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801613c:	ed13 7a01 	vldr	s14, [r3, #-4]
 8016140:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016148:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801614c:	bf4c      	ite	mi
 801614e:	2201      	movmi	r2, #1
 8016150:	2200      	movpl	r2, #0
 8016152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016156:	bf4c      	ite	mi
 8016158:	2301      	movmi	r3, #1
 801615a:	2300      	movpl	r3, #0
 801615c:	429a      	cmp	r2, r3
 801615e:	f000 819d 	beq.w	801649c <iNemoEngine_API_Update+0x171c>
 8016162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016166:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801616a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801616e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016170:	ece3 7a01 	vstmia	r3!, {s15}
 8016174:	9312      	str	r3, [sp, #72]	; 0x48
 8016176:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016178:	3304      	adds	r3, #4
 801617a:	9310      	str	r3, [sp, #64]	; 0x40
 801617c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801617e:	2b03      	cmp	r3, #3
 8016180:	f47f ae6d 	bne.w	8015e5e <iNemoEngine_API_Update+0x10de>
 8016184:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8016188:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 801618c:	eddd 6a16 	vldr	s13, [sp, #88]	; 0x58
 8016190:	ed1f 1a45 	vldr	s2, [pc, #-276]	; 8016080 <iNemoEngine_API_Update+0x1300>
 8016194:	9a06      	ldr	r2, [sp, #24]
 8016196:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801619a:	ee2d 1a81 	vmul.f32	s2, s27, s2
 801619e:	eee7 7a07 	vfma.f32	s15, s14, s14
 80161a2:	f892 3900 	ldrb.w	r3, [r2, #2304]	; 0x900
 80161a6:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 80161aa:	eeb0 8a67 	vmov.f32	s16, s15
 80161ae:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 80161b2:	eea7 8aa7 	vfma.f32	s16, s15, s15
 80161b6:	f502 6810 	add.w	r8, r2, #2304	; 0x900
 80161ba:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80161be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80161c2:	eeb1 6ac8 	vsqrt.f32	s12, s16
 80161c6:	eec7 5a0d 	vdiv.f32	s11, s14, s26
 80161ca:	ee2b 7a27 	vmul.f32	s14, s22, s15
 80161ce:	ee6d 7aa7 	vmul.f32	s15, s27, s15
 80161d2:	eec7 6a26 	vdiv.f32	s13, s14, s13
 80161d6:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 80161da:	edcd 5a52 	vstr	s11, [sp, #328]	; 0x148
 80161de:	ee87 5a87 	vdiv.f32	s10, s15, s14
 80161e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80161e6:	eeb0 7a41 	vmov.f32	s14, s2
 80161ea:	eeab 7a27 	vfma.f32	s14, s22, s15
 80161ee:	ee26 6a27 	vmul.f32	s12, s12, s15
 80161f2:	ed5f 7a5c 	vldr	s15, [pc, #-368]	; 8016084 <iNemoEngine_API_Update+0x1304>
 80161f6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80161fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161fe:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 8016202:	ed8d 5a54 	vstr	s10, [sp, #336]	; 0x150
 8016206:	ed8d 6a55 	vstr	s12, [sp, #340]	; 0x154
 801620a:	2b00      	cmp	r3, #0
 801620c:	f040 8159 	bne.w	80164c2 <iNemoEngine_API_Update+0x1742>
 8016210:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8016214:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8016218:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 801621c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8016220:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8016224:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 8016228:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801622c:	f8c8 3020 	str.w	r3, [r8, #32]
 8016230:	edc8 7a07 	vstr	s15, [r8, #28]
 8016234:	f602 130c 	addw	r3, r2, #2316	; 0x90c
 8016238:	edd3 8a00 	vldr	s17, [r3]
 801623c:	edd2 2a02 	vldr	s5, [r2, #8]
 8016240:	f602 1324 	addw	r3, r2, #2340	; 0x924
 8016244:	edd3 7a00 	vldr	s15, [r3]
 8016248:	f602 1308 	addw	r3, r2, #2312	; 0x908
 801624c:	ed93 7a00 	vldr	s14, [r3]
 8016250:	f502 6312 	add.w	r3, r2, #2336	; 0x920
 8016254:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8016258:	edd3 7a00 	vldr	s15, [r3]
 801625c:	f502 6311 	add.w	r3, r2, #2320	; 0x910
 8016260:	eee7 8a27 	vfma.f32	s17, s14, s15
 8016264:	ed93 7a00 	vldr	s14, [r3]
 8016268:	f602 1328 	addw	r3, r2, #2344	; 0x928
 801626c:	edd3 7a00 	vldr	s15, [r3]
 8016270:	f602 1314 	addw	r3, r2, #2324	; 0x914
 8016274:	eee7 8a27 	vfma.f32	s17, s14, s15
 8016278:	ed93 7a00 	vldr	s14, [r3]
 801627c:	f602 132c 	addw	r3, r2, #2348	; 0x92c
 8016280:	edd3 7a00 	vldr	s15, [r3]
 8016284:	f602 1304 	addw	r3, r2, #2308	; 0x904
 8016288:	eee7 8a27 	vfma.f32	s17, s14, s15
 801628c:	ed93 7a00 	vldr	s14, [r3]
 8016290:	f602 131c 	addw	r3, r2, #2332	; 0x91c
 8016294:	edd3 7a00 	vldr	s15, [r3]
 8016298:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 801629c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162a0:	eee7 8a27 	vfma.f32	s17, s14, s15
 80162a4:	f340 8158 	ble.w	8016558 <iNemoEngine_API_Update+0x17d8>
 80162a8:	edd2 7a30 	vldr	s15, [r2, #192]	; 0xc0
 80162ac:	eef4 7ae8 	vcmpe.f32	s15, s17
 80162b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b4:	f101 8112 	bmi.w	80174dc <iNemoEngine_API_Update+0x275c>
 80162b8:	ed92 fa31 	vldr	s30, [r2, #196]	; 0xc4
 80162bc:	4613      	mov	r3, r2
 80162be:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 80162c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80162c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ca:	f142 8186 	bpl.w	80185da <iNemoEngine_API_Update+0x385a>
 80162ce:	edd3 4a62 	vldr	s9, [r3, #392]	; 0x188
 80162d2:	eef4 4ae8 	vcmpe.f32	s9, s17
 80162d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162da:	f342 821e 	ble.w	801871a <iNemoEngine_API_Update+0x399a>
 80162de:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 80162e2:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80162e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ea:	f302 8555 	bgt.w	8018d98 <iNemoEngine_API_Update+0x4018>
 80162ee:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 80162f2:	eef4 8ae7 	vcmpe.f32	s17, s15
 80162f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162fa:	f142 8565 	bpl.w	8018dc8 <iNemoEngine_API_Update+0x4048>
 80162fe:	edd3 3a4d 	vldr	s7, [r3, #308]	; 0x134
 8016302:	ed93 4a4f 	vldr	s8, [r3, #316]	; 0x13c
 8016306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801630a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801630e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8016312:	ee24 7a07 	vmul.f32	s14, s8, s14
 8016316:	ee87 ca27 	vdiv.f32	s24, s14, s15
 801631a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801631e:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8016322:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801632a:	f2c2 8566 	blt.w	8018dfa <iNemoEngine_API_Update+0x407a>
 801632e:	9b06      	ldr	r3, [sp, #24]
 8016330:	ed93 7a52 	vldr	s14, [r3, #328]	; 0x148
 8016334:	eef4 8ac7 	vcmpe.f32	s17, s14
 8016338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801633c:	f142 87a3 	bpl.w	8019286 <iNemoEngine_API_Update+0x4506>
 8016340:	edd3 3a51 	vldr	s7, [r3, #324]	; 0x144
 8016344:	ed93 4a53 	vldr	s8, [r3, #332]	; 0x14c
 8016348:	ee37 7a67 	vsub.f32	s14, s14, s15
 801634c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8016350:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016354:	ee64 7a27 	vmul.f32	s15, s8, s15
 8016358:	ee87 ca87 	vdiv.f32	s24, s15, s14
 801635c:	ee3c ca23 	vadd.f32	s24, s24, s7
 8016360:	9b06      	ldr	r3, [sp, #24]
 8016362:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 8016366:	eef4 8ae7 	vcmpe.f32	s17, s15
 801636a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801636e:	f2c2 8566 	blt.w	8018e3e <iNemoEngine_API_Update+0x40be>
 8016372:	9b06      	ldr	r3, [sp, #24]
 8016374:	ed93 7a56 	vldr	s14, [r3, #344]	; 0x158
 8016378:	eef4 8ac7 	vcmpe.f32	s17, s14
 801637c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016380:	f142 87dc 	bpl.w	801933c <iNemoEngine_API_Update+0x45bc>
 8016384:	edd3 3a55 	vldr	s7, [r3, #340]	; 0x154
 8016388:	ed93 4a57 	vldr	s8, [r3, #348]	; 0x15c
 801638c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016390:	ee34 4a63 	vsub.f32	s8, s8, s7
 8016394:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016398:	ee64 7a27 	vmul.f32	s15, s8, s15
 801639c:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80163a0:	ee3c ca23 	vadd.f32	s24, s24, s7
 80163a4:	9b06      	ldr	r3, [sp, #24]
 80163a6:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
 80163aa:	eef4 8ae7 	vcmpe.f32	s17, s15
 80163ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163b2:	f2c2 8566 	blt.w	8018e82 <iNemoEngine_API_Update+0x4102>
 80163b6:	9b06      	ldr	r3, [sp, #24]
 80163b8:	ed93 7a5a 	vldr	s14, [r3, #360]	; 0x168
 80163bc:	eef4 8ac7 	vcmpe.f32	s17, s14
 80163c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163c4:	f142 87c5 	bpl.w	8019352 <iNemoEngine_API_Update+0x45d2>
 80163c8:	edd3 3a59 	vldr	s7, [r3, #356]	; 0x164
 80163cc:	ed93 4a5b 	vldr	s8, [r3, #364]	; 0x16c
 80163d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80163d4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80163d8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80163dc:	ee64 7a27 	vmul.f32	s15, s8, s15
 80163e0:	ee87 ca87 	vdiv.f32	s24, s15, s14
 80163e4:	ee3c ca23 	vadd.f32	s24, s24, s7
 80163e8:	9b06      	ldr	r3, [sp, #24]
 80163ea:	edd3 7a5c 	vldr	s15, [r3, #368]	; 0x170
 80163ee:	eef4 8ae7 	vcmpe.f32	s17, s15
 80163f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163f6:	f2c2 8566 	blt.w	8018ec6 <iNemoEngine_API_Update+0x4146>
 80163fa:	9b06      	ldr	r3, [sp, #24]
 80163fc:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 8016400:	eef4 8ac7 	vcmpe.f32	s17, s14
 8016404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016408:	f142 8795 	bpl.w	8019336 <iNemoEngine_API_Update+0x45b6>
 801640c:	edd3 3a5d 	vldr	s7, [r3, #372]	; 0x174
 8016410:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 8016414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016418:	ee34 4a63 	vsub.f32	s8, s8, s7
 801641c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016420:	ee64 7a27 	vmul.f32	s15, s8, s15
 8016424:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8016428:	ee3c ca23 	vadd.f32	s24, s24, s7
 801642c:	9b06      	ldr	r3, [sp, #24]
 801642e:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 8016432:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801643a:	f2c0 8092 	blt.w	8016562 <iNemoEngine_API_Update+0x17e2>
 801643e:	9b06      	ldr	r3, [sp, #24]
 8016440:	ed93 4a61 	vldr	s8, [r3, #388]	; 0x184
 8016444:	ed93 7a63 	vldr	s14, [r3, #396]	; 0x18c
 8016448:	ee74 4ae7 	vsub.f32	s9, s9, s15
 801644c:	ee37 7a44 	vsub.f32	s14, s14, s8
 8016450:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8016454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016458:	ee87 caa4 	vdiv.f32	s24, s15, s9
 801645c:	ee3c ca04 	vadd.f32	s24, s24, s8
 8016460:	e07f      	b.n	8016562 <iNemoEngine_API_Update+0x17e2>
 8016462:	eddf 7ad2 	vldr	s15, [pc, #840]	; 80167ac <iNemoEngine_API_Update+0x1a2c>
 8016466:	eddf cad2 	vldr	s25, [pc, #840]	; 80167b0 <iNemoEngine_API_Update+0x1a30>
 801646a:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 801646e:	eddf 7ad1 	vldr	s15, [pc, #836]	; 80167b4 <iNemoEngine_API_Update+0x1a34>
 8016472:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 8016476:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801647a:	f7ff b824 	b.w	80154c6 <iNemoEngine_API_Update+0x746>
 801647e:	1c60      	adds	r0, r4, #1
 8016480:	454e      	cmp	r6, r9
 8016482:	4459      	add	r1, fp
 8016484:	4450      	add	r0, sl
 8016486:	4665      	mov	r5, ip
 8016488:	f6bf ae04 	bge.w	8016094 <iNemoEngine_API_Update+0x1314>
 801648c:	eba9 0206 	sub.w	r2, r9, r6
 8016490:	444c      	add	r4, r9
 8016492:	1ba4      	subs	r4, r4, r6
 8016494:	f004 fc01 	bl	801ac9a <memcpy>
 8016498:	464e      	mov	r6, r9
 801649a:	e5fb      	b.n	8016094 <iNemoEngine_API_Update+0x1314>
 801649c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80164a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164a4:	f43f ae5d 	beq.w	8016162 <iNemoEngine_API_Update+0x13e2>
 80164a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80164ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164b0:	f43f ae57 	beq.w	8016162 <iNemoEngine_API_Update+0x13e2>
 80164b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80164b8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80164bc:	eee7 7a26 	vfma.f32	s15, s14, s13
 80164c0:	e655      	b.n	801616e <iNemoEngine_API_Update+0x13ee>
 80164c2:	2300      	movs	r3, #0
 80164c4:	f882 3900 	strb.w	r3, [r2, #2304]	; 0x900
 80164c8:	edc8 7a07 	vstr	s15, [r8, #28]
 80164cc:	edc8 7a08 	vstr	s15, [r8, #32]
 80164d0:	edc8 7a09 	vstr	s15, [r8, #36]	; 0x24
 80164d4:	edc8 7a0a 	vstr	s15, [r8, #40]	; 0x28
 80164d8:	edc8 7a0b 	vstr	s15, [r8, #44]	; 0x2c
 80164dc:	e6aa      	b.n	8016234 <iNemoEngine_API_Update+0x14b4>
 80164de:	f04f 0908 	mov.w	r9, #8
 80164e2:	f04f 0805 	mov.w	r8, #5
 80164e6:	2202      	movs	r2, #2
 80164e8:	f7ff bae3 	b.w	8015ab2 <iNemoEngine_API_Update+0xd32>
 80164ec:	2104      	movs	r1, #4
 80164ee:	2000      	movs	r0, #0
 80164f0:	f04f 0c06 	mov.w	ip, #6
 80164f4:	f04f 0e07 	mov.w	lr, #7
 80164f8:	2603      	movs	r6, #3
 80164fa:	460c      	mov	r4, r1
 80164fc:	2301      	movs	r3, #1
 80164fe:	4607      	mov	r7, r0
 8016500:	f7ff babd 	b.w	8015a7e <iNemoEngine_API_Update+0xcfe>
 8016504:	ed9f 5aac 	vldr	s10, [pc, #688]	; 80167b8 <iNemoEngine_API_Update+0x1a38>
 8016508:	ed9f 8aac 	vldr	s16, [pc, #688]	; 80167bc <iNemoEngine_API_Update+0x1a3c>
 801650c:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80167ec <iNemoEngine_API_Update+0x1a6c>
 8016510:	eddf 6aab 	vldr	s13, [pc, #684]	; 80167c0 <iNemoEngine_API_Update+0x1a40>
 8016514:	ed84 5a00 	vstr	s10, [r4]
 8016518:	eef0 7a45 	vmov.f32	s15, s10
 801651c:	eeb0 6a45 	vmov.f32	s12, s10
 8016520:	eddf caa8 	vldr	s25, [pc, #672]	; 80167c4 <iNemoEngine_API_Update+0x1a44>
 8016524:	ed9f 9aa8 	vldr	s18, [pc, #672]	; 80167c8 <iNemoEngine_API_Update+0x1a48>
 8016528:	ed84 8a01 	vstr	s16, [r4, #4]
 801652c:	eef0 5a66 	vmov.f32	s11, s13
 8016530:	ed84 8a02 	vstr	s16, [r4, #8]
 8016534:	eeb0 5a47 	vmov.f32	s10, s14
 8016538:	eef0 8a67 	vmov.f32	s17, s15
 801653c:	eeb0 ca48 	vmov.f32	s24, s16
 8016540:	f7fe bed8 	b.w	80152f4 <iNemoEngine_API_Update+0x574>
 8016544:	eef1 6a66 	vneg.f32	s13, s13
 8016548:	e415      	b.n	8015d76 <iNemoEngine_API_Update+0xff6>
 801654a:	eeb1 4a44 	vneg.f32	s8, s8
 801654e:	f7ff bbee 	b.w	8015d2e <iNemoEngine_API_Update+0xfae>
 8016552:	eef1 7a67 	vneg.f32	s15, s15
 8016556:	e431      	b.n	8015dbc <iNemoEngine_API_Update+0x103c>
 8016558:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801655c:	eeb0 fa4c 	vmov.f32	s30, s24
 8016560:	4613      	mov	r3, r2
 8016562:	edd3 fa74 	vldr	s31, [r3, #464]	; 0x1d0
 8016566:	ed93 7a72 	vldr	s14, [r3, #456]	; 0x1c8
 801656a:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 801656e:	eddf 4a90 	vldr	s9, [pc, #576]	; 80167b0 <iNemoEngine_API_Update+0x1a30>
 8016572:	ee7c faef 	vsub.f32	s31, s25, s31
 8016576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801657a:	eef0 faef 	vabs.f32	s31, s31
 801657e:	eef0 7ae7 	vabs.f32	s15, s15
 8016582:	ee77 7aaf 	vadd.f32	s15, s15, s31
 8016586:	eef4 7ae4 	vcmpe.f32	s15, s9
 801658a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801658e:	dd0a      	ble.n	80165a6 <iNemoEngine_API_Update+0x1826>
 8016590:	ed9f 4a8e 	vldr	s8, [pc, #568]	; 80167cc <iNemoEngine_API_Update+0x1a4c>
 8016594:	eef4 7ac4 	vcmpe.f32	s15, s8
 8016598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801659c:	f340 8790 	ble.w	80174c0 <iNemoEngine_API_Update+0x2740>
 80165a0:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 80165a4:	e001      	b.n	80165aa <iNemoEngine_API_Update+0x182a>
 80165a6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80165aa:	eddd 7a21 	vldr	s15, [sp, #132]	; 0x84
 80165ae:	781c      	ldrb	r4, [r3, #0]
 80165b0:	eef4 4ae7 	vcmpe.f32	s9, s15
 80165b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165b8:	bfa8      	it	ge
 80165ba:	eef0 7a64 	vmovge.f32	s15, s9
 80165be:	edcd 7a04 	vstr	s15, [sp, #16]
 80165c2:	b1cc      	cbz	r4, 80165f8 <iNemoEngine_API_Update+0x1878>
 80165c4:	785c      	ldrb	r4, [r3, #1]
 80165c6:	2c00      	cmp	r4, #0
 80165c8:	f040 8774 	bne.w	80174b4 <iNemoEngine_API_Update+0x2734>
 80165cc:	ee75 7aa6 	vadd.f32	s15, s11, s13
 80165d0:	edd3 6a05 	vldr	s13, [r3, #20]
 80165d4:	ee75 7a27 	vadd.f32	s15, s10, s15
 80165d8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80165dc:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 80165e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80165e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80165e8:	ee66 6a86 	vmul.f32	s13, s13, s12
 80165ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80165f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165f4:	f102 848b 	bmi.w	8018f0e <iNemoEngine_API_Update+0x418e>
 80165f8:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80165fc:	461a      	mov	r2, r3
 80165fe:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 8016602:	ed9d 6a50 	vldr	s12, [sp, #320]	; 0x140
 8016606:	edcd 6a98 	vstr	s13, [sp, #608]	; 0x260
 801660a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801660e:	eef0 6a65 	vmov.f32	s13, s11
 8016612:	eee7 6a47 	vfms.f32	s13, s14, s14
 8016616:	2300      	movs	r3, #0
 8016618:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
 801661c:	ed9d 5a4e 	vldr	s10, [sp, #312]	; 0x138
 8016620:	eddd 4a4f 	vldr	s9, [sp, #316]	; 0x13c
 8016624:	eddd 0a51 	vldr	s1, [sp, #324]	; 0x144
 8016628:	ed8d 7a45 	vstr	s14, [sp, #276]	; 0x114
 801662c:	ee26 4a06 	vmul.f32	s8, s12, s12
 8016630:	ee25 2a05 	vmul.f32	s4, s10, s10
 8016634:	ee34 4a04 	vadd.f32	s8, s8, s8
 8016638:	eeb1 3ae6 	vsqrt.f32	s6, s13
 801663c:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 8016640:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
 8016644:	9343      	str	r3, [sp, #268]	; 0x10c
 8016646:	ee64 3a86 	vmul.f32	s7, s9, s12
 801664a:	ee25 0a24 	vmul.f32	s0, s10, s9
 801664e:	ee64 1aa4 	vmul.f32	s3, s9, s9
 8016652:	ee64 6aa0 	vmul.f32	s13, s9, s1
 8016656:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 801665a:	eea2 4a24 	vfma.f32	s8, s4, s9
 801665e:	ee73 3aa3 	vadd.f32	s7, s7, s7
 8016662:	ee35 1ac4 	vsub.f32	s2, s11, s8
 8016666:	ee25 4a06 	vmul.f32	s8, s10, s12
 801666a:	ee26 6a20 	vmul.f32	s12, s12, s1
 801666e:	ee71 1aa1 	vadd.f32	s3, s3, s3
 8016672:	ee30 6a06 	vadd.f32	s12, s0, s12
 8016676:	ee25 5a20 	vmul.f32	s10, s10, s1
 801667a:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801667e:	eee2 1a24 	vfma.f32	s3, s4, s9
 8016682:	ee36 2a06 	vadd.f32	s4, s12, s12
 8016686:	eeb0 6a63 	vmov.f32	s12, s7
 801668a:	eea5 6a24 	vfma.f32	s12, s10, s9
 801668e:	eee5 3a64 	vfms.f32	s7, s10, s9
 8016692:	eeb0 5a66 	vmov.f32	s10, s13
 8016696:	ee7a 6aa6 	vadd.f32	s13, s21, s13
 801669a:	ee94 5a24 	vfnms.f32	s10, s8, s9
 801669e:	eee4 6a64 	vfms.f32	s13, s8, s9
 80166a2:	ee25 5a07 	vmul.f32	s10, s10, s14
 80166a6:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 80166aa:	edcd 6a92 	vstr	s13, [sp, #584]	; 0x248
 80166ae:	ee75 6ae1 	vsub.f32	s13, s11, s3
 80166b2:	ee79 5ae5 	vsub.f32	s11, s19, s11
 80166b6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80166ba:	ee75 1aa1 	vadd.f32	s3, s11, s3
 80166be:	eee3 6a23 	vfma.f32	s13, s6, s7
 80166c2:	ee26 7a07 	vmul.f32	s14, s12, s14
 80166c6:	eddd 5a2a 	vldr	s11, [sp, #168]	; 0xa8
 80166ca:	eddd 4a2c 	vldr	s9, [sp, #176]	; 0xb0
 80166ce:	ed8d 9a99 	vstr	s18, [sp, #612]	; 0x264
 80166d2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80166d6:	eea3 7a01 	vfma.f32	s14, s6, s2
 80166da:	edcd 6a91 	vstr	s13, [sp, #580]	; 0x244
 80166de:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 80166e2:	edcd ca9a 	vstr	s25, [sp, #616]	; 0x268
 80166e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80166ea:	eea3 5a02 	vfma.f32	s10, s6, s4
 80166ee:	ed8d 7a90 	vstr	s14, [sp, #576]	; 0x240
 80166f2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8016800 <iNemoEngine_API_Update+0x1a80>
 80166f6:	ed8d 3a44 	vstr	s6, [sp, #272]	; 0x110
 80166fa:	ee3a 6a46 	vsub.f32	s12, s20, s12
 80166fe:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8016702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801670a:	ed8d 5a8f 	vstr	s10, [sp, #572]	; 0x23c
 801670e:	edcd 1a3f 	vstr	s3, [sp, #252]	; 0xfc
 8016712:	edcd 1a94 	vstr	s3, [sp, #592]	; 0x250
 8016716:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 801671a:	ed8d 6a93 	vstr	s12, [sp, #588]	; 0x24c
 801671e:	d541      	bpl.n	80167a4 <iNemoEngine_API_Update+0x1a24>
 8016720:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80167d0 <iNemoEngine_API_Update+0x1a50>
 8016724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801672c:	dd3a      	ble.n	80167a4 <iNemoEngine_API_Update+0x1a24>
 801672e:	ee79 7a67 	vsub.f32	s15, s18, s15
 8016732:	eef0 7ae7 	vabs.f32	s15, s15
 8016736:	ee77 7a8b 	vadd.f32	s15, s15, s22
 801673a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801673e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016742:	dd5f      	ble.n	8016804 <iNemoEngine_API_Update+0x1a84>
 8016744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016748:	eef4 7ac7 	vcmpe.f32	s15, s14
 801674c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016750:	f140 86a4 	bpl.w	801749c <iNemoEngine_API_Update+0x271c>
 8016754:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80167d4 <iNemoEngine_API_Update+0x1a54>
 8016758:	eef4 7ac7 	vcmpe.f32	s15, s14
 801675c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016760:	f141 8185 	bpl.w	8017a6e <iNemoEngine_API_Update+0x2cee>
 8016764:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80167e4 <iNemoEngine_API_Update+0x1a64>
 8016768:	eef4 7ac7 	vcmpe.f32	s15, s14
 801676c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016770:	f2c1 8185 	blt.w	8017a7e <iNemoEngine_API_Update+0x2cfe>
 8016774:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80167d8 <iNemoEngine_API_Update+0x1a58>
 8016778:	eef4 7ac7 	vcmpe.f32	s15, s14
 801677c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016780:	f141 824e 	bpl.w	8017c20 <iNemoEngine_API_Update+0x2ea0>
 8016784:	eddf 6a17 	vldr	s13, [pc, #92]	; 80167e4 <iNemoEngine_API_Update+0x1a64>
 8016788:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80167dc <iNemoEngine_API_Update+0x1a5c>
 801678c:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80167e0 <iNemoEngine_API_Update+0x1a60>
 8016790:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8016794:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801679c:	eea6 7a86 	vfma.f32	s14, s13, s12
 80167a0:	f001 b977 	b.w	8017a92 <iNemoEngine_API_Update+0x2d12>
 80167a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80167a8:	e7c1      	b.n	801672e <iNemoEngine_API_Update+0x19ae>
 80167aa:	bf00      	nop
 80167ac:	3ecccccc 	.word	0x3ecccccc
 80167b0:	3dcccccd 	.word	0x3dcccccd
 80167b4:	3f666666 	.word	0x3f666666
 80167b8:	00000000 	.word	0x00000000
 80167bc:	3f333333 	.word	0x3f333333
 80167c0:	bfb33333 	.word	0xbfb33333
 80167c4:	3f7d6d54 	.word	0x3f7d6d54
 80167c8:	3f7ae147 	.word	0x3f7ae147
 80167cc:	3fb77778 	.word	0x3fb77778
 80167d0:	3f4ccccd 	.word	0x3f4ccccd
 80167d4:	3ba3d70a 	.word	0x3ba3d70a
 80167d8:	3c75c28f 	.word	0x3c75c28f
 80167dc:	3f19999a 	.word	0x3f19999a
 80167e0:	43480000 	.word	0x43480000
 80167e4:	3c23d70a 	.word	0x3c23d70a
 80167e8:	3b449ba6 	.word	0x3b449ba6
 80167ec:	3fb33333 	.word	0x3fb33333
 80167f0:	3ecccccd 	.word	0x3ecccccd
 80167f4:	3f8f5c29 	.word	0x3f8f5c29
 80167f8:	3f59999a 	.word	0x3f59999a
 80167fc:	3e4ccccd 	.word	0x3e4ccccd
 8016800:	3f99999a 	.word	0x3f99999a
 8016804:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016808:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 80167e4 <iNemoEngine_API_Update+0x1a64>
 801680c:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 80167e8 <iNemoEngine_API_Update+0x1a68>
 8016810:	eeb0 7a65 	vmov.f32	s14, s11
 8016814:	eef0 6a65 	vmov.f32	s13, s11
 8016818:	ed8d 6a65 	vstr	s12, [sp, #404]	; 0x194
 801681c:	ed9d 6a04 	vldr	s12, [sp, #16]
 8016820:	ed9d 3a84 	vldr	s6, [sp, #528]	; 0x210
 8016824:	ed9d 5a83 	vldr	s10, [sp, #524]	; 0x20c
 8016828:	ed9d 2a88 	vldr	s4, [sp, #544]	; 0x220
 801682c:	eddd 4a8c 	vldr	s9, [sp, #560]	; 0x230
 8016830:	9a06      	ldr	r2, [sp, #24]
 8016832:	ed8d 4a66 	vstr	s8, [sp, #408]	; 0x198
 8016836:	ee66 3a0f 	vmul.f32	s7, s12, s30
 801683a:	ed9d 6a8d 	vldr	s12, [sp, #564]	; 0x234
 801683e:	7b13      	ldrb	r3, [r2, #12]
 8016840:	ee23 3a23 	vmul.f32	s6, s6, s7
 8016844:	ee23 5a85 	vmul.f32	s10, s7, s10
 8016848:	ed8d 3a84 	vstr	s6, [sp, #528]	; 0x210
 801684c:	ed9d 3a85 	vldr	s6, [sp, #532]	; 0x214
 8016850:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 8016854:	ee63 3a23 	vmul.f32	s7, s6, s7
 8016858:	ed9d 3a86 	vldr	s6, [sp, #536]	; 0x218
 801685c:	edcd 3a85 	vstr	s7, [sp, #532]	; 0x214
 8016860:	eddd 3a87 	vldr	s7, [sp, #540]	; 0x21c
 8016864:	ee2c 3a03 	vmul.f32	s6, s24, s6
 8016868:	ee6c 3a23 	vmul.f32	s7, s24, s7
 801686c:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8016870:	ee2c ca02 	vmul.f32	s24, s24, s4
 8016874:	ee36 6a06 	vadd.f32	s12, s12, s12
 8016878:	ed9d 2a8e 	vldr	s4, [sp, #568]	; 0x238
 801687c:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 8016880:	ee64 4a87 	vmul.f32	s9, s9, s14
 8016884:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016888:	ee2f fa02 	vmul.f32	s30, s30, s4
 801688c:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 8016890:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 8016894:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 8016898:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 801689c:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	f000 8525 	beq.w	80172f0 <iNemoEngine_API_Update+0x2570>
 80168a6:	ee27 3a03 	vmul.f32	s6, s14, s6
 80168aa:	ee67 3a23 	vmul.f32	s7, s14, s7
 80168ae:	ee27 ca0c 	vmul.f32	s24, s14, s24
 80168b2:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 80168b6:	ed8d 3a86 	vstr	s6, [sp, #536]	; 0x218
 80168ba:	ee37 7a07 	vadd.f32	s14, s14, s14
 80168be:	4613      	mov	r3, r2
 80168c0:	ee25 2a82 	vmul.f32	s4, s11, s4
 80168c4:	7b92      	ldrb	r2, [r2, #14]
 80168c6:	7b5b      	ldrb	r3, [r3, #13]
 80168c8:	edcd 3a87 	vstr	s7, [sp, #540]	; 0x21c
 80168cc:	ee64 5a25 	vmul.f32	s11, s8, s11
 80168d0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80168d4:	edcd 5a66 	vstr	s11, [sp, #408]	; 0x198
 80168d8:	ed8d ca88 	vstr	s24, [sp, #544]	; 0x220
 80168dc:	ed8d 2a5f 	vstr	s4, [sp, #380]	; 0x17c
 80168e0:	ed8d 2a60 	vstr	s4, [sp, #384]	; 0x180
 80168e4:	ed8d 2a61 	vstr	s4, [sp, #388]	; 0x184
 80168e8:	ed8d 6a8d 	vstr	s12, [sp, #564]	; 0x234
 80168ec:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 80168f0:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 80168f4:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 80168f8:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 80168fc:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 8016900:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8016904:	b15a      	cbz	r2, 801691e <iNemoEngine_API_Update+0x1b9e>
 8016906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801690a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801690e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016912:	dd04      	ble.n	801691e <iNemoEngine_API_Update+0x1b9e>
 8016914:	2100      	movs	r1, #0
 8016916:	f8ad 10eb 	strh.w	r1, [sp, #235]	; 0xeb
 801691a:	f88d 10ed 	strb.w	r1, [sp, #237]	; 0xed
 801691e:	eef5 2ac0 	vcmpe.f32	s5, #0.0
 8016922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016926:	dd08      	ble.n	801693a <iNemoEngine_API_Update+0x1bba>
 8016928:	9906      	ldr	r1, [sp, #24]
 801692a:	edd1 7a64 	vldr	s15, [r1, #400]	; 0x190
 801692e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8016932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016936:	f280 85a4 	bge.w	8017482 <iNemoEngine_API_Update+0x2702>
 801693a:	b133      	cbz	r3, 801694a <iNemoEngine_API_Update+0x1bca>
 801693c:	f240 1101 	movw	r1, #257	; 0x101
 8016940:	f8ad 10e8 	strh.w	r1, [sp, #232]	; 0xe8
 8016944:	2101      	movs	r1, #1
 8016946:	f88d 10ea 	strb.w	r1, [sp, #234]	; 0xea
 801694a:	2401      	movs	r4, #1
 801694c:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 8016950:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 8016954:	ed5f 7a5b 	vldr	s15, [pc, #-364]	; 80167ec <iNemoEngine_API_Update+0x1a6c>
 8016958:	eef4 cae7 	vcmpe.f32	s25, s15
 801695c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016960:	dc07      	bgt.n	8016972 <iNemoEngine_API_Update+0x1bf2>
 8016962:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 80167f0 <iNemoEngine_API_Update+0x1a70>
 8016966:	eef4 cae7 	vcmpe.f32	s25, s15
 801696a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801696e:	f141 801d 	bpl.w	80179ac <iNemoEngine_API_Update+0x2c2c>
 8016972:	2300      	movs	r3, #0
 8016974:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 8016978:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 801697c:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8016980:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 8016984:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 80167f4 <iNemoEngine_API_Update+0x1a74>
 8016988:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801698c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016990:	dc07      	bgt.n	80169a2 <iNemoEngine_API_Update+0x1c22>
 8016992:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 80167f8 <iNemoEngine_API_Update+0x1a78>
 8016996:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801699a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801699e:	f140 86ed 	bpl.w	801777c <iNemoEngine_API_Update+0x29fc>
 80169a2:	2300      	movs	r3, #0
 80169a4:	f8ad 30eb 	strh.w	r3, [sp, #235]	; 0xeb
 80169a8:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
 80169ac:	f8ad 30f1 	strh.w	r3, [sp, #241]	; 0xf1
 80169b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80169b4:	eef4 fae7 	vcmpe.f32	s31, s15
 80169b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169bc:	f340 8486 	ble.w	80172cc <iNemoEngine_API_Update+0x254c>
 80169c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80169c4:	ee7f 7aa7 	vadd.f32	s15, s31, s15
 80169c8:	9a06      	ldr	r2, [sp, #24]
 80169ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80169ce:	2300      	movs	r3, #0
 80169d0:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80169d4:	ee27 fa8f 	vmul.f32	s30, s15, s30
 80169d8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80169dc:	eef4 fae7 	vcmpe.f32	s31, s15
 80169e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169e4:	bfc4      	itt	gt
 80169e6:	f88d 30f1 	strbgt.w	r3, [sp, #241]	; 0xf1
 80169ea:	f88d 30f3 	strbgt.w	r3, [sp, #243]	; 0xf3
 80169ee:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 80169f2:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 80169f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80169f8:	edcd 4a8c 	vstr	s9, [sp, #560]	; 0x230
 80169fc:	2b0e      	cmp	r3, #14
 80169fe:	ed8d fa8e 	vstr	s30, [sp, #568]	; 0x238
 8016a02:	f340 8567 	ble.w	80174d4 <iNemoEngine_API_Update+0x2754>
 8016a06:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8016a0a:	eeb4 dae7 	vcmpe.f32	s26, s15
 8016a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a12:	f340 82ed 	ble.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016a16:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8016a1a:	eef4 7acb 	vcmpe.f32	s15, s22
 8016a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a22:	f340 82e5 	ble.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016a26:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8016a2a:	eef4 7aed 	vcmpe.f32	s15, s27
 8016a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a32:	f340 82dd 	ble.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016a36:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80167fc <iNemoEngine_API_Update+0x1a7c>
 8016a3a:	eeb0 7ace 	vabs.f32	s14, s28
 8016a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a46:	f140 82d3 	bpl.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016a4a:	eeb0 7aee 	vabs.f32	s14, s29
 8016a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a56:	f140 82cb 	bpl.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016a5a:	eeb0 7aeb 	vabs.f32	s14, s23
 8016a5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a66:	f140 82c3 	bpl.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016a6a:	ed5f 7a9b 	vldr	s15, [pc, #-620]	; 8016800 <iNemoEngine_API_Update+0x1a80>
 8016a6e:	eef0 aaea 	vabs.f32	s21, s21
 8016a72:	eef4 aae7 	vcmpe.f32	s21, s15
 8016a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a7a:	f140 82b9 	bpl.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016a7e:	eeb0 aaca 	vabs.f32	s20, s20
 8016a82:	eeb4 aae7 	vcmpe.f32	s20, s15
 8016a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a8a:	f140 82b1 	bpl.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016a8e:	eef0 9ae9 	vabs.f32	s19, s19
 8016a92:	eef4 9ae7 	vcmpe.f32	s19, s15
 8016a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a9a:	f140 82a9 	bpl.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016a9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016aa0:	9806      	ldr	r0, [sp, #24]
 8016aa2:	ed93 6a00 	vldr	s12, [r3]
 8016aa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016aa8:	f890 11a0 	ldrb.w	r1, [r0, #416]	; 0x1a0
 8016aac:	ed93 7a00 	vldr	s14, [r3]
 8016ab0:	f200 73a4 	addw	r3, r0, #1956	; 0x7a4
 8016ab4:	edd3 4a00 	vldr	s9, [r3]
 8016ab8:	2909      	cmp	r1, #9
 8016aba:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8016abe:	f500 63f6 	add.w	r3, r0, #1968	; 0x7b0
 8016ac2:	ed93 5a00 	vldr	s10, [r3]
 8016ac6:	bf8c      	ite	hi
 8016ac8:	220a      	movhi	r2, #10
 8016aca:	2205      	movls	r2, #5
 8016acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ad0:	bfb4      	ite	lt
 8016ad2:	eef0 7a64 	vmovlt.f32	s15, s9
 8016ad6:	eef0 7a46 	vmovge.f32	s15, s12
 8016ada:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016ade:	bf8c      	ite	hi
 8016ae0:	eef0 5a64 	vmovhi.f32	s11, s9
 8016ae4:	eef0 5a46 	vmovls.f32	s11, s12
 8016ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aec:	ee36 6a24 	vadd.f32	s12, s12, s9
 8016af0:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016af4:	bfb8      	it	lt
 8016af6:	eef0 7a45 	vmovlt.f32	s15, s10
 8016afa:	f200 73bc 	addw	r3, r0, #1980	; 0x7bc
 8016afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b02:	bf88      	it	hi
 8016b04:	eef0 5a45 	vmovhi.f32	s11, s10
 8016b08:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016b0c:	ed93 5a00 	vldr	s10, [r3]
 8016b10:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b18:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016b1c:	bfb8      	it	lt
 8016b1e:	eef0 7a45 	vmovlt.f32	s15, s10
 8016b22:	f500 63f9 	add.w	r3, r0, #1992	; 0x7c8
 8016b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b2a:	bf88      	it	hi
 8016b2c:	eef0 5a45 	vmovhi.f32	s11, s10
 8016b30:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016b34:	ed93 5a00 	vldr	s10, [r3]
 8016b38:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b40:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016b44:	bfb8      	it	lt
 8016b46:	eef0 7a45 	vmovlt.f32	s15, s10
 8016b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b4e:	bf88      	it	hi
 8016b50:	eef0 5a45 	vmovhi.f32	s11, s10
 8016b54:	2a05      	cmp	r2, #5
 8016b56:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016b5a:	d065      	beq.n	8016c28 <iNemoEngine_API_Update+0x1ea8>
 8016b5c:	f200 73d4 	addw	r3, r0, #2004	; 0x7d4
 8016b60:	ed93 5a00 	vldr	s10, [r3]
 8016b64:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b6c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016b70:	bfb8      	it	lt
 8016b72:	eef0 7a45 	vmovlt.f32	s15, s10
 8016b76:	f500 63fc 	add.w	r3, r0, #2016	; 0x7e0
 8016b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b7e:	bf88      	it	hi
 8016b80:	eef0 5a45 	vmovhi.f32	s11, s10
 8016b84:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016b88:	ed93 5a00 	vldr	s10, [r3]
 8016b8c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b94:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016b98:	bfb8      	it	lt
 8016b9a:	eef0 7a45 	vmovlt.f32	s15, s10
 8016b9e:	f200 73ec 	addw	r3, r0, #2028	; 0x7ec
 8016ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ba6:	bf88      	it	hi
 8016ba8:	eef0 5a45 	vmovhi.f32	s11, s10
 8016bac:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016bb0:	ed93 5a00 	vldr	s10, [r3]
 8016bb4:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bbc:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016bc0:	bfb8      	it	lt
 8016bc2:	eef0 7a45 	vmovlt.f32	s15, s10
 8016bc6:	f500 63ff 	add.w	r3, r0, #2040	; 0x7f8
 8016bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bce:	bf88      	it	hi
 8016bd0:	eef0 5a45 	vmovhi.f32	s11, s10
 8016bd4:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016bd8:	ed93 5a00 	vldr	s10, [r3]
 8016bdc:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be4:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016be8:	bfb8      	it	lt
 8016bea:	eef0 7a45 	vmovlt.f32	s15, s10
 8016bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf2:	bf88      	it	hi
 8016bf4:	eef0 5a45 	vmovhi.f32	s11, s10
 8016bf8:	2a0a      	cmp	r2, #10
 8016bfa:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016bfe:	d113      	bne.n	8016c28 <iNemoEngine_API_Update+0x1ea8>
 8016c00:	f600 0304 	addw	r3, r0, #2052	; 0x804
 8016c04:	ed93 5a00 	vldr	s10, [r3]
 8016c08:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c10:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016c14:	bfb8      	it	lt
 8016c16:	eef0 7a45 	vmovlt.f32	s15, s10
 8016c1a:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c22:	bf88      	it	hi
 8016c24:	eef0 5a45 	vmovhi.f32	s11, s10
 8016c28:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8016c2c:	eddf 5aeb 	vldr	s11, [pc, #940]	; 8016fdc <iNemoEngine_API_Update+0x225c>
 8016c30:	ed9f 5aeb 	vldr	s10, [pc, #940]	; 8016fe0 <iNemoEngine_API_Update+0x2260>
 8016c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016c38:	ee26 6a05 	vmul.f32	s12, s12, s10
 8016c3c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c44:	f300 81d4 	bgt.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016c48:	eef0 7ac6 	vabs.f32	s15, s12
 8016c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016c50:	ed9f 6ae4 	vldr	s12, [pc, #912]	; 8016fe4 <iNemoEngine_API_Update+0x2264>
 8016c54:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c5c:	f300 81c8 	bgt.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016c60:	9806      	ldr	r0, [sp, #24]
 8016c62:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016c64:	ed93 6a00 	vldr	s12, [r3]
 8016c68:	f500 63f5 	add.w	r3, r0, #1960	; 0x7a8
 8016c6c:	edd3 4a00 	vldr	s9, [r3]
 8016c70:	f200 73b4 	addw	r3, r0, #1972	; 0x7b4
 8016c74:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8016c78:	ed93 5a00 	vldr	s10, [r3]
 8016c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c80:	bfb4      	ite	lt
 8016c82:	eef0 7a64 	vmovlt.f32	s15, s9
 8016c86:	eef0 7a46 	vmovge.f32	s15, s12
 8016c8a:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016c8e:	bf8c      	ite	hi
 8016c90:	eef0 5a64 	vmovhi.f32	s11, s9
 8016c94:	eef0 5a46 	vmovls.f32	s11, s12
 8016c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c9c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8016ca0:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016ca4:	bfb8      	it	lt
 8016ca6:	eef0 7a45 	vmovlt.f32	s15, s10
 8016caa:	f500 63f8 	add.w	r3, r0, #1984	; 0x7c0
 8016cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb2:	bf88      	it	hi
 8016cb4:	eef0 5a45 	vmovhi.f32	s11, s10
 8016cb8:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016cbc:	ed93 5a00 	vldr	s10, [r3]
 8016cc0:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cc8:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016ccc:	bfb8      	it	lt
 8016cce:	eef0 7a45 	vmovlt.f32	s15, s10
 8016cd2:	f200 73cc 	addw	r3, r0, #1996	; 0x7cc
 8016cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cda:	bf88      	it	hi
 8016cdc:	eef0 5a45 	vmovhi.f32	s11, s10
 8016ce0:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016ce4:	ed93 5a00 	vldr	s10, [r3]
 8016ce8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf0:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016cf4:	bfb8      	it	lt
 8016cf6:	eef0 7a45 	vmovlt.f32	s15, s10
 8016cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cfe:	bf88      	it	hi
 8016d00:	eef0 5a45 	vmovhi.f32	s11, s10
 8016d04:	2a05      	cmp	r2, #5
 8016d06:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016d0a:	d065      	beq.n	8016dd8 <iNemoEngine_API_Update+0x2058>
 8016d0c:	f500 63fb 	add.w	r3, r0, #2008	; 0x7d8
 8016d10:	ed93 5a00 	vldr	s10, [r3]
 8016d14:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d1c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016d20:	bfb8      	it	lt
 8016d22:	eef0 7a45 	vmovlt.f32	s15, s10
 8016d26:	f200 73e4 	addw	r3, r0, #2020	; 0x7e4
 8016d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d2e:	bf88      	it	hi
 8016d30:	eef0 5a45 	vmovhi.f32	s11, s10
 8016d34:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016d38:	ed93 5a00 	vldr	s10, [r3]
 8016d3c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d44:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016d48:	bfb8      	it	lt
 8016d4a:	eef0 7a45 	vmovlt.f32	s15, s10
 8016d4e:	f500 63fe 	add.w	r3, r0, #2032	; 0x7f0
 8016d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d56:	bf88      	it	hi
 8016d58:	eef0 5a45 	vmovhi.f32	s11, s10
 8016d5c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016d60:	ed93 5a00 	vldr	s10, [r3]
 8016d64:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d6c:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016d70:	bfb8      	it	lt
 8016d72:	eef0 7a45 	vmovlt.f32	s15, s10
 8016d76:	f200 73fc 	addw	r3, r0, #2044	; 0x7fc
 8016d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d7e:	bf88      	it	hi
 8016d80:	eef0 5a45 	vmovhi.f32	s11, s10
 8016d84:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016d88:	ed93 5a00 	vldr	s10, [r3]
 8016d8c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d94:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016d98:	bfb8      	it	lt
 8016d9a:	eef0 7a45 	vmovlt.f32	s15, s10
 8016d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016da2:	bf88      	it	hi
 8016da4:	eef0 5a45 	vmovhi.f32	s11, s10
 8016da8:	2a0a      	cmp	r2, #10
 8016daa:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016dae:	d113      	bne.n	8016dd8 <iNemoEngine_API_Update+0x2058>
 8016db0:	f600 0308 	addw	r3, r0, #2056	; 0x808
 8016db4:	ed93 5a00 	vldr	s10, [r3]
 8016db8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dc0:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016dc4:	bfb8      	it	lt
 8016dc6:	eef0 7a45 	vmovlt.f32	s15, s10
 8016dca:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dd2:	bf88      	it	hi
 8016dd4:	eef0 5a45 	vmovhi.f32	s11, s10
 8016dd8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8016ddc:	eddf 5a7f 	vldr	s11, [pc, #508]	; 8016fdc <iNemoEngine_API_Update+0x225c>
 8016de0:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 8016fe0 <iNemoEngine_API_Update+0x2260>
 8016de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016de8:	ee26 6a05 	vmul.f32	s12, s12, s10
 8016dec:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df4:	f300 80fc 	bgt.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016df8:	eef0 7ac6 	vabs.f32	s15, s12
 8016dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016e00:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8016fe4 <iNemoEngine_API_Update+0x2264>
 8016e04:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e0c:	f300 80f0 	bgt.w	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016e10:	9806      	ldr	r0, [sp, #24]
 8016e12:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016e14:	ed93 5a00 	vldr	s10, [r3]
 8016e18:	f200 73ac 	addw	r3, r0, #1964	; 0x7ac
 8016e1c:	edd3 4a00 	vldr	s9, [r3]
 8016e20:	f500 63f7 	add.w	r3, r0, #1976	; 0x7b8
 8016e24:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8016e28:	ed93 6a00 	vldr	s12, [r3]
 8016e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e30:	bfb4      	ite	lt
 8016e32:	eef0 7a64 	vmovlt.f32	s15, s9
 8016e36:	eef0 7a45 	vmovge.f32	s15, s10
 8016e3a:	bf8c      	ite	hi
 8016e3c:	eef0 5a64 	vmovhi.f32	s11, s9
 8016e40:	eef0 5a45 	vmovls.f32	s11, s10
 8016e44:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e4c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8016e50:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8016e54:	bfa8      	it	ge
 8016e56:	eef0 7a46 	vmovge.f32	s15, s12
 8016e5a:	f200 73c4 	addw	r3, r0, #1988	; 0x7c4
 8016e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e62:	bf98      	it	ls
 8016e64:	eef0 5a46 	vmovls.f32	s11, s12
 8016e68:	ee76 4a05 	vadd.f32	s9, s12, s10
 8016e6c:	ed93 6a00 	vldr	s12, [r3]
 8016e70:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e78:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8016e7c:	bfa8      	it	ge
 8016e7e:	eef0 7a46 	vmovge.f32	s15, s12
 8016e82:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
 8016e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e8a:	bf8c      	ite	hi
 8016e8c:	eeb0 5a65 	vmovhi.f32	s10, s11
 8016e90:	eeb0 5a46 	vmovls.f32	s10, s12
 8016e94:	edd3 5a00 	vldr	s11, [r3]
 8016e98:	eef4 5ae7 	vcmpe.f32	s11, s15
 8016e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ea0:	ee36 6a24 	vadd.f32	s12, s12, s9
 8016ea4:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016ea8:	bfa8      	it	ge
 8016eaa:	eef0 7a65 	vmovge.f32	s15, s11
 8016eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eb2:	ee35 6a86 	vadd.f32	s12, s11, s12
 8016eb6:	bf88      	it	hi
 8016eb8:	eef0 5a45 	vmovhi.f32	s11, s10
 8016ebc:	2a05      	cmp	r2, #5
 8016ebe:	d065      	beq.n	8016f8c <iNemoEngine_API_Update+0x220c>
 8016ec0:	f200 73dc 	addw	r3, r0, #2012	; 0x7dc
 8016ec4:	ed93 5a00 	vldr	s10, [r3]
 8016ec8:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8016ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ed0:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8016ed4:	bfa8      	it	ge
 8016ed6:	eef0 7a45 	vmovge.f32	s15, s10
 8016eda:	f500 63fd 	add.w	r3, r0, #2024	; 0x7e8
 8016ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ee2:	bf98      	it	ls
 8016ee4:	eef0 5a45 	vmovls.f32	s11, s10
 8016ee8:	ee35 5a06 	vadd.f32	s10, s10, s12
 8016eec:	ed93 6a00 	vldr	s12, [r3]
 8016ef0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef8:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8016efc:	bfa8      	it	ge
 8016efe:	eef0 7a46 	vmovge.f32	s15, s12
 8016f02:	f200 73f4 	addw	r3, r0, #2036	; 0x7f4
 8016f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f0a:	bf98      	it	ls
 8016f0c:	eef0 5a46 	vmovls.f32	s11, s12
 8016f10:	ee36 5a05 	vadd.f32	s10, s12, s10
 8016f14:	ed93 6a00 	vldr	s12, [r3]
 8016f18:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8016f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f20:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8016f24:	bfa8      	it	ge
 8016f26:	eef0 7a46 	vmovge.f32	s15, s12
 8016f2a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8016f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f32:	bf98      	it	ls
 8016f34:	eef0 5a46 	vmovls.f32	s11, s12
 8016f38:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016f3c:	ed93 5a00 	vldr	s10, [r3]
 8016f40:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8016f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f48:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8016f4c:	bfa8      	it	ge
 8016f4e:	eef0 7a45 	vmovge.f32	s15, s10
 8016f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f56:	bf98      	it	ls
 8016f58:	eef0 5a45 	vmovls.f32	s11, s10
 8016f5c:	2a0a      	cmp	r2, #10
 8016f5e:	ee35 6a06 	vadd.f32	s12, s10, s12
 8016f62:	d113      	bne.n	8016f8c <iNemoEngine_API_Update+0x220c>
 8016f64:	f600 030c 	addw	r3, r0, #2060	; 0x80c
 8016f68:	ed93 5a00 	vldr	s10, [r3]
 8016f6c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f74:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016f78:	bfb8      	it	lt
 8016f7a:	eef0 7a45 	vmovlt.f32	s15, s10
 8016f7e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8016f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f86:	bf88      	it	hi
 8016f88:	eef0 5a45 	vmovhi.f32	s11, s10
 8016f8c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8016f90:	eddf 5a12 	vldr	s11, [pc, #72]	; 8016fdc <iNemoEngine_API_Update+0x225c>
 8016f94:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8016fe0 <iNemoEngine_API_Update+0x2260>
 8016f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f9c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8016fa0:	eef4 7ae5 	vcmpe.f32	s15, s11
 8016fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa8:	dc22      	bgt.n	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016faa:	eef0 7ac6 	vabs.f32	s15, s12
 8016fae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8016fb2:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8016fe4 <iNemoEngine_API_Update+0x2264>
 8016fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fbe:	dc17      	bgt.n	8016ff0 <iNemoEngine_API_Update+0x2270>
 8016fc0:	9b06      	ldr	r3, [sp, #24]
 8016fc2:	795b      	ldrb	r3, [r3, #5]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	f002 8117 	beq.w	80191f8 <iNemoEngine_API_Update+0x4478>
 8016fca:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8016fce:	2a01      	cmp	r2, #1
 8016fd0:	f001 87d1 	beq.w	8018f76 <iNemoEngine_API_Update+0x41f6>
 8016fd4:	f04f 0901 	mov.w	r9, #1
 8016fd8:	f000 bc0b 	b.w	80177f2 <iNemoEngine_API_Update+0x2a72>
 8016fdc:	3be56041 	.word	0x3be56041
 8016fe0:	3dcccccd 	.word	0x3dcccccd
 8016fe4:	3e333333 	.word	0x3e333333
 8016fe8:	42480000 	.word	0x42480000
 8016fec:	00000000 	.word	0x00000000
 8016ff0:	9b06      	ldr	r3, [sp, #24]
 8016ff2:	795b      	ldrb	r3, [r3, #5]
 8016ff4:	f04f 0900 	mov.w	r9, #0
 8016ff8:	f8ad 90ee 	strh.w	r9, [sp, #238]	; 0xee
 8016ffc:	f88d 90f0 	strb.w	r9, [sp, #240]	; 0xf0
 8017000:	2b00      	cmp	r3, #0
 8017002:	f040 83f1 	bne.w	80177e8 <iNemoEngine_API_Update+0x2a68>
 8017006:	9906      	ldr	r1, [sp, #24]
 8017008:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 801700c:	9295      	str	r2, [sp, #596]	; 0x254
 801700e:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 8017012:	9296      	str	r2, [sp, #600]	; 0x258
 8017014:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 8017018:	9297      	str	r2, [sp, #604]	; 0x25c
 801701a:	2200      	movs	r2, #0
 801701c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017020:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8017024:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8017028:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 801702c:	704a      	strb	r2, [r1, #1]
 801702e:	ed5f 7a12 	vldr	s15, [pc, #-72]	; 8016fe8 <iNemoEngine_API_Update+0x2268>
 8017032:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801703a:	f2c0 8138 	blt.w	80172ae <iNemoEngine_API_Update+0x252e>
 801703e:	9906      	ldr	r1, [sp, #24]
 8017040:	2200      	movs	r2, #0
 8017042:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8017046:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 801704a:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 801704e:	2b01      	cmp	r3, #1
 8017050:	d125      	bne.n	801709e <iNemoEngine_API_Update+0x231e>
 8017052:	eddd 4a86 	vldr	s9, [sp, #536]	; 0x218
 8017056:	ed9d 6a5f 	vldr	s12, [sp, #380]	; 0x17c
 801705a:	ed9d 5a87 	vldr	s10, [sp, #540]	; 0x21c
 801705e:	ed9d 7a60 	vldr	s14, [sp, #384]	; 0x180
 8017062:	eddd 5a88 	vldr	s11, [sp, #544]	; 0x220
 8017066:	eddd 7a61 	vldr	s15, [sp, #388]	; 0x184
 801706a:	eeb6 4a08 	vmov.f32	s8, #104	; 0x3f400000  0.750
 801706e:	ee64 4a84 	vmul.f32	s9, s9, s8
 8017072:	ee36 6a06 	vadd.f32	s12, s12, s12
 8017076:	ee25 5a04 	vmul.f32	s10, s10, s8
 801707a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801707e:	ee65 5a84 	vmul.f32	s11, s11, s8
 8017082:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017086:	edcd 4a86 	vstr	s9, [sp, #536]	; 0x218
 801708a:	ed8d 6a5f 	vstr	s12, [sp, #380]	; 0x17c
 801708e:	ed8d 5a87 	vstr	s10, [sp, #540]	; 0x21c
 8017092:	ed8d 7a60 	vstr	s14, [sp, #384]	; 0x180
 8017096:	edcd 5a88 	vstr	s11, [sp, #544]	; 0x220
 801709a:	edcd 7a61 	vstr	s15, [sp, #388]	; 0x184
 801709e:	9c06      	ldr	r4, [sp, #24]
 80170a0:	ed9d 6a60 	vldr	s12, [sp, #384]	; 0x180
 80170a4:	ed94 2a7f 	vldr	s4, [r4, #508]	; 0x1fc
 80170a8:	edd4 1a75 	vldr	s3, [r4, #468]	; 0x1d4
 80170ac:	edd4 2a89 	vldr	s5, [r4, #548]	; 0x224
 80170b0:	edd4 3a93 	vldr	s7, [r4, #588]	; 0x24c
 80170b4:	eddd 0a5f 	vldr	s1, [sp, #380]	; 0x17c
 80170b8:	ed9d 1a61 	vldr	s2, [sp, #388]	; 0x184
 80170bc:	ed94 4a9d 	vldr	s8, [r4, #628]	; 0x274
 80170c0:	edd4 4aa7 	vldr	s9, [r4, #668]	; 0x29c
 80170c4:	ed94 5ab1 	vldr	s10, [r4, #708]	; 0x2c4
 80170c8:	ed9d 3a8b 	vldr	s6, [sp, #556]	; 0x22c
 80170cc:	ed9d 7a89 	vldr	s14, [sp, #548]	; 0x224
 80170d0:	eddd 7a8a 	vldr	s15, [sp, #552]	; 0x228
 80170d4:	edd4 5abb 	vldr	s11, [r4, #748]	; 0x2ec
 80170d8:	eea6 2a06 	vfma.f32	s4, s12, s12
 80170dc:	ab83      	add	r3, sp, #524	; 0x20c
 80170de:	aa8f      	add	r2, sp, #572	; 0x23c
 80170e0:	ed9d 6a62 	vldr	s12, [sp, #392]	; 0x188
 80170e4:	ed84 2a7f 	vstr	s4, [r4, #508]	; 0x1fc
 80170e8:	eee0 1aa0 	vfma.f32	s3, s1, s1
 80170ec:	a93a      	add	r1, sp, #232	; 0xe8
 80170ee:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
 80170f2:	eee1 2a01 	vfma.f32	s5, s2, s2
 80170f6:	eee6 3a06 	vfma.f32	s7, s12, s12
 80170fa:	eddd 0a63 	vldr	s1, [sp, #396]	; 0x18c
 80170fe:	ed9d 1a64 	vldr	s2, [sp, #400]	; 0x190
 8017102:	ed9d 6a65 	vldr	s12, [sp, #404]	; 0x194
 8017106:	edc4 1a75 	vstr	s3, [r4, #468]	; 0x1d4
 801710a:	eea0 4aa0 	vfma.f32	s8, s1, s1
 801710e:	eee1 4a01 	vfma.f32	s9, s2, s2
 8017112:	eea6 5a06 	vfma.f32	s10, s12, s12
 8017116:	eddd 0a66 	vldr	s1, [sp, #408]	; 0x198
 801711a:	ed9d 1a67 	vldr	s2, [sp, #412]	; 0x19c
 801711e:	ed94 6ac5 	vldr	s12, [r4, #788]	; 0x314
 8017122:	edc4 2a89 	vstr	s5, [r4, #548]	; 0x224
 8017126:	eee0 5aa0 	vfma.f32	s11, s1, s1
 801712a:	eea1 6a01 	vfma.f32	s12, s2, s2
 801712e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8017132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017136:	ee66 6a83 	vmul.f32	s13, s13, s6
 801713a:	ee27 7a28 	vmul.f32	s14, s14, s17
 801713e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8017142:	ee66 8aa8 	vmul.f32	s17, s13, s17
 8017146:	ed8d 7a89 	vstr	s14, [sp, #548]	; 0x224
 801714a:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 801714e:	edc4 3a93 	vstr	s7, [r4, #588]	; 0x24c
 8017152:	ed84 4a9d 	vstr	s8, [r4, #628]	; 0x274
 8017156:	edc4 4aa7 	vstr	s9, [r4, #668]	; 0x29c
 801715a:	ed84 5ab1 	vstr	s10, [r4, #708]	; 0x2c4
 801715e:	edcd 8a8b 	vstr	s17, [sp, #556]	; 0x22c
 8017162:	edc4 5abb 	vstr	s11, [r4, #748]	; 0x2ec
 8017166:	ed84 6ac5 	vstr	s12, [r4, #788]	; 0x314
 801716a:	9300      	str	r3, [sp, #0]
 801716c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801716e:	f7f9 fe39 	bl	8010de4 <kf_update>
 8017172:	edd4 6a6d 	vldr	s13, [r4, #436]	; 0x1b4
 8017176:	ed94 6a6c 	vldr	s12, [r4, #432]	; 0x1b0
 801717a:	ed94 7a6e 	vldr	s14, [r4, #440]	; 0x1b8
 801717e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8017182:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8017186:	eee6 7a06 	vfma.f32	s15, s12, s12
 801718a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801718e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017196:	f100 80bb 	bmi.w	8017310 <iNemoEngine_API_Update+0x2590>
 801719a:	ed5f 5a6c 	vldr	s11, [pc, #-432]	; 8016fec <iNemoEngine_API_Update+0x226c>
 801719e:	ed8d 6a52 	vstr	s12, [sp, #328]	; 0x148
 80171a2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80171a6:	aa4e      	add	r2, sp, #312	; 0x138
 80171a8:	a8ae      	add	r0, sp, #696	; 0x2b8
 80171aa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80171ae:	eeb1 5ae7 	vsqrt.f32	s10, s15
 80171b2:	4611      	mov	r1, r2
 80171b4:	ae68      	add	r6, sp, #416	; 0x1a0
 80171b6:	af70      	add	r7, sp, #448	; 0x1c0
 80171b8:	edcd 6a53 	vstr	s13, [sp, #332]	; 0x14c
 80171bc:	eec4 7a85 	vdiv.f32	s15, s9, s10
 80171c0:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 80171c4:	ee27 6a86 	vmul.f32	s12, s15, s12
 80171c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80171cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80171d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80171d4:	edcd 5a55 	vstr	s11, [sp, #340]	; 0x154
 80171d8:	ed8d 6aae 	vstr	s12, [sp, #696]	; 0x2b8
 80171dc:	edcd 6aaf 	vstr	s13, [sp, #700]	; 0x2bc
 80171e0:	ed8d 7ab0 	vstr	s14, [sp, #704]	; 0x2c0
 80171e4:	edcd 7ab1 	vstr	s15, [sp, #708]	; 0x2c4
 80171e8:	f7f9 fc3c 	bl	8010a64 <qmult>
 80171ec:	ed92 6a01 	vldr	s12, [r2, #4]
 80171f0:	edd2 5a00 	vldr	s11, [r2]
 80171f4:	edd2 6a02 	vldr	s13, [r2, #8]
 80171f8:	ed92 7a03 	vldr	s14, [r2, #12]
 80171fc:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80171fe:	ee66 7a06 	vmul.f32	s15, s12, s12
 8017202:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8017206:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801720a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801720e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8017212:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8017216:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801721a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801721e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017222:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017226:	ee27 7a27 	vmul.f32	s14, s14, s15
 801722a:	edcd 5a4a 	vstr	s11, [sp, #296]	; 0x128
 801722e:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 8017232:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 8017236:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
 801723a:	4634      	mov	r4, r6
 801723c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801723e:	42bc      	cmp	r4, r7
 8017240:	f105 0510 	add.w	r5, r5, #16
 8017244:	f106 0610 	add.w	r6, r6, #16
 8017248:	f845 0c10 	str.w	r0, [r5, #-16]
 801724c:	f845 1c0c 	str.w	r1, [r5, #-12]
 8017250:	f845 2c08 	str.w	r2, [r5, #-8]
 8017254:	f845 3c04 	str.w	r3, [r5, #-4]
 8017258:	d1ef      	bne.n	801723a <iNemoEngine_API_Update+0x24ba>
 801725a:	6830      	ldr	r0, [r6, #0]
 801725c:	6028      	str	r0, [r5, #0]
 801725e:	9e06      	ldr	r6, [sp, #24]
 8017260:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017262:	f8d6 31bc 	ldr.w	r3, [r6, #444]	; 0x1bc
 8017266:	6013      	str	r3, [r2, #0]
 8017268:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801726a:	f8d6 31c0 	ldr.w	r3, [r6, #448]	; 0x1c0
 801726e:	6013      	str	r3, [r2, #0]
 8017270:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017272:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8017276:	6013      	str	r3, [r2, #0]
 8017278:	ad4a      	add	r5, sp, #296	; 0x128
 801727a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801727c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 801727e:	60eb      	str	r3, [r5, #12]
 8017280:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017282:	6028      	str	r0, [r5, #0]
 8017284:	6069      	str	r1, [r5, #4]
 8017286:	60aa      	str	r2, [r5, #8]
 8017288:	edd6 9a75 	vldr	s19, [r6, #468]	; 0x1d4
 801728c:	edc3 5a00 	vstr	s11, [r3]
 8017290:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017292:	f8d6 794c 	ldr.w	r7, [r6, #2380]	; 0x94c
 8017296:	ed83 6a00 	vstr	s12, [r3]
 801729a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801729c:	edc3 6a00 	vstr	s13, [r3]
 80172a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80172a2:	accc      	add	r4, sp, #816	; 0x330
 80172a4:	ed83 7a00 	vstr	s14, [r3]
 80172a8:	4635      	mov	r5, r6
 80172aa:	f7fd be20 	b.w	8014eee <iNemoEngine_API_Update+0x16e>
 80172ae:	9906      	ldr	r1, [sp, #24]
 80172b0:	f891 21a2 	ldrb.w	r2, [r1, #418]	; 0x1a2
 80172b4:	2a31      	cmp	r2, #49	; 0x31
 80172b6:	f63f aeca 	bhi.w	801704e <iNemoEngine_API_Update+0x22ce>
 80172ba:	3201      	adds	r2, #1
 80172bc:	f881 21a2 	strb.w	r2, [r1, #418]	; 0x1a2
 80172c0:	2200      	movs	r2, #0
 80172c2:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 80172c6:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 80172ca:	e6c0      	b.n	801704e <iNemoEngine_API_Update+0x22ce>
 80172cc:	9a06      	ldr	r2, [sp, #24]
 80172ce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	f340 8398 	ble.w	8017a06 <iNemoEngine_API_Update+0x2c86>
 80172d6:	3b01      	subs	r3, #1
 80172d8:	6593      	str	r3, [r2, #88]	; 0x58
 80172da:	2300      	movs	r3, #0
 80172dc:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 80172e0:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 80172e4:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 80172e8:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
 80172ec:	f7ff bb8b 	b.w	8016a06 <iNemoEngine_API_Update+0x1c86>
 80172f0:	7b53      	ldrb	r3, [r2, #13]
 80172f2:	7b92      	ldrb	r2, [r2, #14]
 80172f4:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 80172f8:	f88d 30e9 	strb.w	r3, [sp, #233]	; 0xe9
 80172fc:	f88d 30ea 	strb.w	r3, [sp, #234]	; 0xea
 8017300:	f88d 20eb 	strb.w	r2, [sp, #235]	; 0xeb
 8017304:	f88d 20ec 	strb.w	r2, [sp, #236]	; 0xec
 8017308:	f88d 20ed 	strb.w	r2, [sp, #237]	; 0xed
 801730c:	f7ff bb07 	b.w	801691e <iNemoEngine_API_Update+0x1b9e>
 8017310:	ee35 5ae7 	vsub.f32	s10, s11, s15
 8017314:	eef1 5ac5 	vsqrt.f32	s11, s10
 8017318:	e741      	b.n	801719e <iNemoEngine_API_Update+0x241e>
 801731a:	f9b5 3974 	ldrsh.w	r3, [r5, #2420]	; 0x974
 801731e:	2b00      	cmp	r3, #0
 8017320:	f341 8173 	ble.w	801860a <iNemoEngine_API_Update+0x388a>
 8017324:	3b01      	subs	r3, #1
 8017326:	f8a5 3974 	strh.w	r3, [r5, #2420]	; 0x974
 801732a:	f7fd bd51 	b.w	8014dd0 <iNemoEngine_API_Update+0x50>
 801732e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017332:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8017336:	eea7 6a07 	vfma.f32	s12, s14, s14
 801733a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801733e:	eeb0 8a67 	vmov.f32	s16, s15
 8017342:	eef0 7a46 	vmov.f32	s15, s12
 8017346:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801734a:	eee8 7ae8 	vfms.f32	s15, s17, s17
 801734e:	ee17 0a90 	vmov	r0, s15
 8017352:	f7e9 f8f9 	bl	8000548 <__aeabi_f2d>
 8017356:	ee78 7a08 	vadd.f32	s15, s16, s16
 801735a:	4602      	mov	r2, r0
 801735c:	460b      	mov	r3, r1
 801735e:	ee17 0a90 	vmov	r0, s15
 8017362:	ec43 2b18 	vmov	d8, r2, r3
 8017366:	f7e9 f8ef 	bl	8000548 <__aeabi_f2d>
 801736a:	eeb0 1a48 	vmov.f32	s2, s16
 801736e:	eef0 1a68 	vmov.f32	s3, s17
 8017372:	ec41 0b10 	vmov	d0, r0, r1
 8017376:	f005 fd0b 	bl	801cd90 <atan2>
 801737a:	a3eb      	add	r3, pc, #940	; (adr r3, 8017728 <iNemoEngine_API_Update+0x29a8>)
 801737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017380:	ec51 0b10 	vmov	r0, r1, d0
 8017384:	f7e9 f938 	bl	80005f8 <__aeabi_dmul>
 8017388:	4be9      	ldr	r3, [pc, #932]	; (8017730 <iNemoEngine_API_Update+0x29b0>)
 801738a:	2200      	movs	r2, #0
 801738c:	f7e8 ff7e 	bl	800028c <__adddf3>
 8017390:	f7e9 fc0a 	bl	8000ba8 <__aeabi_d2f>
 8017394:	ee08 0a10 	vmov	s16, r0
 8017398:	f7fd be3a 	b.w	8015010 <iNemoEngine_API_Update+0x290>
 801739c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80173a0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80173a4:	eea7 6a07 	vfma.f32	s12, s14, s14
 80173a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80173ac:	eeb0 8a67 	vmov.f32	s16, s15
 80173b0:	eef0 7a46 	vmov.f32	s15, s12
 80173b4:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80173b8:	eee8 7ae8 	vfms.f32	s15, s17, s17
 80173bc:	ee17 0a90 	vmov	r0, s15
 80173c0:	f7e9 f8c2 	bl	8000548 <__aeabi_f2d>
 80173c4:	ee78 7a08 	vadd.f32	s15, s16, s16
 80173c8:	4602      	mov	r2, r0
 80173ca:	460b      	mov	r3, r1
 80173cc:	ee17 0a90 	vmov	r0, s15
 80173d0:	ec43 2b18 	vmov	d8, r2, r3
 80173d4:	f7e9 f8b8 	bl	8000548 <__aeabi_f2d>
 80173d8:	eeb0 1a48 	vmov.f32	s2, s16
 80173dc:	eef0 1a68 	vmov.f32	s3, s17
 80173e0:	ec41 0b10 	vmov	d0, r0, r1
 80173e4:	f005 fcd4 	bl	801cd90 <atan2>
 80173e8:	a3cf      	add	r3, pc, #828	; (adr r3, 8017728 <iNemoEngine_API_Update+0x29a8>)
 80173ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ee:	ec51 0b10 	vmov	r0, r1, d0
 80173f2:	f7e9 f901 	bl	80005f8 <__aeabi_dmul>
 80173f6:	4bce      	ldr	r3, [pc, #824]	; (8017730 <iNemoEngine_API_Update+0x29b0>)
 80173f8:	2200      	movs	r2, #0
 80173fa:	f7e8 ff45 	bl	8000288 <__aeabi_dsub>
 80173fe:	f7e9 fbd3 	bl	8000ba8 <__aeabi_d2f>
 8017402:	ee08 0a10 	vmov	s16, r0
 8017406:	f7fd be03 	b.w	8015010 <iNemoEngine_API_Update+0x290>
 801740a:	ed9f baca 	vldr	s22, [pc, #808]	; 8017734 <iNemoEngine_API_Update+0x29b4>
 801740e:	49ca      	ldr	r1, [pc, #808]	; (8017738 <iNemoEngine_API_Update+0x29b8>)
 8017410:	9806      	ldr	r0, [sp, #24]
 8017412:	f7fd beba 	b.w	801518a <iNemoEngine_API_Update+0x40a>
 8017416:	ee7c 7a27 	vadd.f32	s15, s24, s15
 801741a:	ee17 0a90 	vmov	r0, s15
 801741e:	f7e9 f893 	bl	8000548 <__aeabi_f2d>
 8017422:	ec41 0b10 	vmov	d0, r0, r1
 8017426:	f005 ff5b 	bl	801d2e0 <floor>
 801742a:	ec51 0b10 	vmov	r0, r1, d0
 801742e:	f7e9 fbbb 	bl	8000ba8 <__aeabi_d2f>
 8017432:	ee0c 0a10 	vmov	s24, r0
 8017436:	f7fe b937 	b.w	80156a8 <iNemoEngine_API_Update+0x928>
 801743a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801743e:	ee17 0a90 	vmov	r0, s15
 8017442:	f7e9 f881 	bl	8000548 <__aeabi_f2d>
 8017446:	ec41 0b10 	vmov	d0, r0, r1
 801744a:	f005 ff49 	bl	801d2e0 <floor>
 801744e:	ec51 0b10 	vmov	r0, r1, d0
 8017452:	f7e9 fba9 	bl	8000ba8 <__aeabi_d2f>
 8017456:	ee08 0a10 	vmov	s16, r0
 801745a:	f7fe b8fa 	b.w	8015652 <iNemoEngine_API_Update+0x8d2>
 801745e:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8017462:	ee17 0a90 	vmov	r0, s15
 8017466:	f7e9 f86f 	bl	8000548 <__aeabi_f2d>
 801746a:	ec41 0b10 	vmov	d0, r0, r1
 801746e:	f005 ff37 	bl	801d2e0 <floor>
 8017472:	ec51 0b10 	vmov	r0, r1, d0
 8017476:	f7e9 fb97 	bl	8000ba8 <__aeabi_d2f>
 801747a:	ee08 0a90 	vmov	s17, r0
 801747e:	f7fe b8bd 	b.w	80155fc <iNemoEngine_API_Update+0x87c>
 8017482:	2c00      	cmp	r4, #0
 8017484:	f47f aa59 	bne.w	801693a <iNemoEngine_API_Update+0x1bba>
 8017488:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
 801748c:	f88d 40ea 	strb.w	r4, [sp, #234]	; 0xea
 8017490:	f88d 40f1 	strb.w	r4, [sp, #241]	; 0xf1
 8017494:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
 8017498:	f7ff ba5c 	b.w	8016954 <iNemoEngine_API_Update+0x1bd4>
 801749c:	eddf 5aa7 	vldr	s11, [pc, #668]	; 801773c <iNemoEngine_API_Update+0x29bc>
 80174a0:	ed9f 4aa7 	vldr	s8, [pc, #668]	; 8017740 <iNemoEngine_API_Update+0x29c0>
 80174a4:	ed9f 6aa7 	vldr	s12, [pc, #668]	; 8017744 <iNemoEngine_API_Update+0x29c4>
 80174a8:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8017748 <iNemoEngine_API_Update+0x29c8>
 80174ac:	eddf 6aa7 	vldr	s13, [pc, #668]	; 801774c <iNemoEngine_API_Update+0x29cc>
 80174b0:	f7ff b9b2 	b.w	8016818 <iNemoEngine_API_Update+0x1a98>
 80174b4:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 80174b8:	2400      	movs	r4, #0
 80174ba:	461a      	mov	r2, r3
 80174bc:	f7ff b89f 	b.w	80165fe <iNemoEngine_API_Update+0x187e>
 80174c0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80174c4:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 80174c8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80174cc:	eee7 4a84 	vfma.f32	s9, s15, s8
 80174d0:	f7ff b86b 	b.w	80165aa <iNemoEngine_API_Update+0x182a>
 80174d4:	3305      	adds	r3, #5
 80174d6:	6593      	str	r3, [r2, #88]	; 0x58
 80174d8:	f7ff ba95 	b.w	8016a06 <iNemoEngine_API_Update+0x1c86>
 80174dc:	edd2 4a48 	vldr	s9, [r2, #288]	; 0x120
 80174e0:	eef4 4ae8 	vcmpe.f32	s9, s17
 80174e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174e8:	f341 8112 	ble.w	8018710 <iNemoEngine_API_Update+0x3990>
 80174ec:	ed92 7a32 	vldr	s14, [r2, #200]	; 0xc8
 80174f0:	eef4 8ac7 	vcmpe.f32	s17, s14
 80174f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174f8:	4613      	mov	r3, r2
 80174fa:	f101 8392 	bmi.w	8018c22 <iNemoEngine_API_Update+0x3ea2>
 80174fe:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 8017502:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801750a:	f141 83a2 	bpl.w	8018c52 <iNemoEngine_API_Update+0x3ed2>
 801750e:	edd3 3a33 	vldr	s7, [r3, #204]	; 0xcc
 8017512:	ed93 4a35 	vldr	s8, [r3, #212]	; 0xd4
 8017516:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801751a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801751e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8017522:	ee24 7a07 	vmul.f32	s14, s8, s14
 8017526:	ee87 fa27 	vdiv.f32	s30, s14, s15
 801752a:	ee3f fa23 	vadd.f32	s30, s30, s7
 801752e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8017532:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801753a:	f2c1 83a3 	blt.w	8018c84 <iNemoEngine_API_Update+0x3f04>
 801753e:	9b06      	ldr	r3, [sp, #24]
 8017540:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8017544:	eef4 8ac7 	vcmpe.f32	s17, s14
 8017548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754c:	f141 86ad 	bpl.w	80192aa <iNemoEngine_API_Update+0x452a>
 8017550:	edd3 3a37 	vldr	s7, [r3, #220]	; 0xdc
 8017554:	ed93 4a39 	vldr	s8, [r3, #228]	; 0xe4
 8017558:	ee37 7a67 	vsub.f32	s14, s14, s15
 801755c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8017560:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017564:	ee64 7a27 	vmul.f32	s15, s8, s15
 8017568:	ee87 fa87 	vdiv.f32	s30, s15, s14
 801756c:	ee3f fa23 	vadd.f32	s30, s30, s7
 8017570:	9b06      	ldr	r3, [sp, #24]
 8017572:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8017576:	eef4 8ae7 	vcmpe.f32	s17, s15
 801757a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801757e:	f2c1 83a3 	blt.w	8018cc8 <iNemoEngine_API_Update+0x3f48>
 8017582:	9b06      	ldr	r3, [sp, #24]
 8017584:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8017588:	eef4 8ac7 	vcmpe.f32	s17, s14
 801758c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017590:	f141 86ca 	bpl.w	8019328 <iNemoEngine_API_Update+0x45a8>
 8017594:	edd3 3a3b 	vldr	s7, [r3, #236]	; 0xec
 8017598:	ed93 4a3d 	vldr	s8, [r3, #244]	; 0xf4
 801759c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80175a0:	ee34 4a63 	vsub.f32	s8, s8, s7
 80175a4:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80175a8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80175ac:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80175b0:	ee3f fa23 	vadd.f32	s30, s30, s7
 80175b4:	9b06      	ldr	r3, [sp, #24]
 80175b6:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 80175ba:	eef4 8ae7 	vcmpe.f32	s17, s15
 80175be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175c2:	f2c1 83a3 	blt.w	8018d0c <iNemoEngine_API_Update+0x3f8c>
 80175c6:	9b06      	ldr	r3, [sp, #24]
 80175c8:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 80175cc:	eef4 8ac7 	vcmpe.f32	s17, s14
 80175d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d4:	f141 866c 	bpl.w	80192b0 <iNemoEngine_API_Update+0x4530>
 80175d8:	edd3 3a3f 	vldr	s7, [r3, #252]	; 0xfc
 80175dc:	ed93 4a41 	vldr	s8, [r3, #260]	; 0x104
 80175e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80175e4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80175e8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80175ec:	ee64 7a27 	vmul.f32	s15, s8, s15
 80175f0:	ee87 fa87 	vdiv.f32	s30, s15, s14
 80175f4:	ee3f fa23 	vadd.f32	s30, s30, s7
 80175f8:	9b06      	ldr	r3, [sp, #24]
 80175fa:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80175fe:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017606:	f2c1 83a3 	blt.w	8018d50 <iNemoEngine_API_Update+0x3fd0>
 801760a:	9b06      	ldr	r3, [sp, #24]
 801760c:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8017610:	eef4 8ac7 	vcmpe.f32	s17, s14
 8017614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017618:	f141 863c 	bpl.w	8019294 <iNemoEngine_API_Update+0x4514>
 801761c:	edd3 3a43 	vldr	s7, [r3, #268]	; 0x10c
 8017620:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 8017624:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017628:	ee34 4a63 	vsub.f32	s8, s8, s7
 801762c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017630:	ee64 7a27 	vmul.f32	s15, s8, s15
 8017634:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8017638:	ee3f fa23 	vadd.f32	s30, s30, s7
 801763c:	9b06      	ldr	r3, [sp, #24]
 801763e:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 8017642:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801764a:	f6fe ae38 	blt.w	80162be <iNemoEngine_API_Update+0x153e>
 801764e:	9b06      	ldr	r3, [sp, #24]
 8017650:	ed93 4a47 	vldr	s8, [r3, #284]	; 0x11c
 8017654:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8017658:	ee74 4ae7 	vsub.f32	s9, s9, s15
 801765c:	ee37 7a44 	vsub.f32	s14, s14, s8
 8017660:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8017664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017668:	ee87 faa4 	vdiv.f32	s30, s15, s9
 801766c:	ee3f fa04 	vadd.f32	s30, s30, s8
 8017670:	f7fe be25 	b.w	80162be <iNemoEngine_API_Update+0x153e>
 8017674:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8017678:	ee17 0a90 	vmov	r0, s15
 801767c:	f7e8 ff64 	bl	8000548 <__aeabi_f2d>
 8017680:	ec41 0b10 	vmov	d0, r0, r1
 8017684:	f005 fe2c 	bl	801d2e0 <floor>
 8017688:	ec51 0b10 	vmov	r0, r1, d0
 801768c:	f7e9 fa8c 	bl	8000ba8 <__aeabi_d2f>
 8017690:	ee08 0a90 	vmov	s17, r0
 8017694:	f7fe b930 	b.w	80158f8 <iNemoEngine_API_Update+0xb78>
 8017698:	ee78 7aa7 	vadd.f32	s15, s17, s15
 801769c:	ee17 0a90 	vmov	r0, s15
 80176a0:	f7e8 ff52 	bl	8000548 <__aeabi_f2d>
 80176a4:	ec41 0b10 	vmov	d0, r0, r1
 80176a8:	f005 fe1a 	bl	801d2e0 <floor>
 80176ac:	ec51 0b10 	vmov	r0, r1, d0
 80176b0:	f7e9 fa7a 	bl	8000ba8 <__aeabi_d2f>
 80176b4:	ee08 0a90 	vmov	s17, r0
 80176b8:	f7fe b8b5 	b.w	8015826 <iNemoEngine_API_Update+0xaa6>
 80176bc:	ee7c 7a27 	vadd.f32	s15, s24, s15
 80176c0:	ee17 0a90 	vmov	r0, s15
 80176c4:	f7e8 ff40 	bl	8000548 <__aeabi_f2d>
 80176c8:	ec41 0b10 	vmov	d0, r0, r1
 80176cc:	f005 fe08 	bl	801d2e0 <floor>
 80176d0:	ec51 0b10 	vmov	r0, r1, d0
 80176d4:	f7e9 fa68 	bl	8000ba8 <__aeabi_d2f>
 80176d8:	ee0c 0a10 	vmov	s24, r0
 80176dc:	f7fe b878 	b.w	80157d0 <iNemoEngine_API_Update+0xa50>
 80176e0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80176e4:	ee17 0a90 	vmov	r0, s15
 80176e8:	f7e8 ff2e 	bl	8000548 <__aeabi_f2d>
 80176ec:	ec41 0b10 	vmov	d0, r0, r1
 80176f0:	f005 fdf6 	bl	801d2e0 <floor>
 80176f4:	ec51 0b10 	vmov	r0, r1, d0
 80176f8:	f7e9 fa56 	bl	8000ba8 <__aeabi_d2f>
 80176fc:	ee08 0a10 	vmov	s16, r0
 8017700:	f7fe b83b 	b.w	801577a <iNemoEngine_API_Update+0x9fa>
 8017704:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017708:	ee17 0a90 	vmov	r0, s15
 801770c:	f7e8 ff1c 	bl	8000548 <__aeabi_f2d>
 8017710:	ec41 0b10 	vmov	d0, r0, r1
 8017714:	f005 fde4 	bl	801d2e0 <floor>
 8017718:	ec51 0b10 	vmov	r0, r1, d0
 801771c:	f7e9 fa44 	bl	8000ba8 <__aeabi_d2f>
 8017720:	ee08 0a10 	vmov	s16, r0
 8017724:	f7fe b93e 	b.w	80159a4 <iNemoEngine_API_Update+0xc24>
 8017728:	20000000 	.word	0x20000000
 801772c:	404ca5dc 	.word	0x404ca5dc
 8017730:	40568000 	.word	0x40568000
 8017734:	3dcccccd 	.word	0x3dcccccd
 8017738:	3a83126f 	.word	0x3a83126f
 801773c:	3c75c28f 	.word	0x3c75c28f
 8017740:	391d4951 	.word	0x391d4951
 8017744:	383cbe62 	.word	0x383cbe62
 8017748:	469c3e00 	.word	0x469c3e00
 801774c:	43168000 	.word	0x43168000
 8017750:	3d088889 	.word	0x3d088889
 8017754:	3e4ccccd 	.word	0x3e4ccccd
 8017758:	ee7c 7a27 	vadd.f32	s15, s24, s15
 801775c:	ee17 0a90 	vmov	r0, s15
 8017760:	f7e8 fef2 	bl	8000548 <__aeabi_f2d>
 8017764:	ec41 0b10 	vmov	d0, r0, r1
 8017768:	f005 fdba 	bl	801d2e0 <floor>
 801776c:	ec51 0b10 	vmov	r0, r1, d0
 8017770:	f7e9 fa1a 	bl	8000ba8 <__aeabi_d2f>
 8017774:	ee0c 0a10 	vmov	s24, r0
 8017778:	f7fe b8e9 	b.w	801594e <iNemoEngine_API_Update+0xbce>
 801777c:	2a00      	cmp	r2, #0
 801777e:	f43f a910 	beq.w	80169a2 <iNemoEngine_API_Update+0x1c22>
 8017782:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017786:	ee39 9a47 	vsub.f32	s18, s18, s14
 801778a:	eef0 7ac9 	vabs.f32	s15, s18
 801778e:	ee29 9a09 	vmul.f32	s18, s18, s18
 8017792:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801779a:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801779e:	bfb8      	it	lt
 80177a0:	eef0 7a46 	vmovlt.f32	s15, s12
 80177a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177a8:	edcd 7a8d 	vstr	s15, [sp, #564]	; 0x234
 80177ac:	f77f a900 	ble.w	80169b0 <iNemoEngine_API_Update+0x1c30>
 80177b0:	eddd 7a86 	vldr	s15, [sp, #536]	; 0x218
 80177b4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80177b8:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80177bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c0:	f77f a8f6 	ble.w	80169b0 <iNemoEngine_API_Update+0x1c30>
 80177c4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80177c8:	edcd 7a86 	vstr	s15, [sp, #536]	; 0x218
 80177cc:	eddd 7a87 	vldr	s15, [sp, #540]	; 0x21c
 80177d0:	ee67 7a89 	vmul.f32	s15, s15, s18
 80177d4:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 80177d8:	eddd 7a88 	vldr	s15, [sp, #544]	; 0x220
 80177dc:	ee27 9a89 	vmul.f32	s18, s15, s18
 80177e0:	ed8d 9a88 	vstr	s18, [sp, #544]	; 0x220
 80177e4:	f7ff b8e4 	b.w	80169b0 <iNemoEngine_API_Update+0x1c30>
 80177e8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80177ec:	2a01      	cmp	r2, #1
 80177ee:	f000 877b 	beq.w	80186e8 <iNemoEngine_API_Update+0x3968>
 80177f2:	2b02      	cmp	r3, #2
 80177f4:	f040 8778 	bne.w	80186e8 <iNemoEngine_API_Update+0x3968>
 80177f8:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80177fc:	9a06      	ldr	r2, [sp, #24]
 80177fe:	ee87 7a8d 	vdiv.f32	s14, s15, s26
 8017802:	f240 1301 	movw	r3, #257	; 0x101
 8017806:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee
 801780a:	2301      	movs	r3, #1
 801780c:	f88d 30f0 	strb.w	r3, [sp, #240]	; 0xf0
 8017810:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8017814:	ed92 6a64 	vldr	s12, [r2, #400]	; 0x190
 8017818:	ed8d 7a3d 	vstr	s14, [sp, #244]	; 0xf4
 801781c:	eecb 5a27 	vdiv.f32	s11, s22, s15
 8017820:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 8017824:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 8017828:	eecd 7aa7 	vdiv.f32	s15, s27, s15
 801782c:	eeb4 5a00 	vmov.f32	s10, #64	; 0x3e000000  0.125
 8017830:	ee26 6a05 	vmul.f32	s12, s12, s10
 8017834:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8017838:	eeb4 6ae8 	vcmpe.f32	s12, s17
 801783c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017840:	f280 87d8 	bge.w	80187f4 <iNemoEngine_API_Update+0x3a74>
 8017844:	ed9d 6a18 	vldr	s12, [sp, #96]	; 0x60
 8017848:	eeb4 dac6 	vcmpe.f32	s26, s12
 801784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017850:	f341 83a4 	ble.w	8018f9c <iNemoEngine_API_Update+0x421c>
 8017854:	ed9d 6a16 	vldr	s12, [sp, #88]	; 0x58
 8017858:	eeb4 6acb 	vcmpe.f32	s12, s22
 801785c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017860:	f341 839c 	ble.w	8018f9c <iNemoEngine_API_Update+0x421c>
 8017864:	ed9d 6a17 	vldr	s12, [sp, #92]	; 0x5c
 8017868:	eeb4 6aed 	vcmpe.f32	s12, s27
 801786c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017870:	f341 8394 	ble.w	8018f9c <iNemoEngine_API_Update+0x421c>
 8017874:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 8017878:	eeb4 8ac6 	vcmpe.f32	s16, s12
 801787c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017880:	f141 838c 	bpl.w	8018f9c <iNemoEngine_API_Update+0x421c>
 8017884:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017888:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 801788c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017890:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017898:	f141 8380 	bpl.w	8018f9c <iNemoEngine_API_Update+0x421c>
 801789c:	2300      	movs	r3, #0
 801789e:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 80178a2:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 80178a6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80178aa:	2a00      	cmp	r2, #0
 80178ac:	f040 87c7 	bne.w	801883e <iNemoEngine_API_Update+0x3abe>
 80178b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80178b2:	a840      	add	r0, sp, #256	; 0x100
 80178b4:	f04f 31ff 	mov.w	r1, #4294967295
 80178b8:	4613      	mov	r3, r2
 80178ba:	edd2 7a00 	vldr	s15, [r2]
 80178be:	3101      	adds	r1, #1
 80178c0:	330c      	adds	r3, #12
 80178c2:	3204      	adds	r2, #4
 80178c4:	461c      	mov	r4, r3
 80178c6:	ed94 7a00 	vldr	s14, [r4]
 80178ca:	330c      	adds	r3, #12
 80178cc:	4598      	cmp	r8, r3
 80178ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80178d2:	d1f7      	bne.n	80178c4 <iNemoEngine_API_Update+0x2b44>
 80178d4:	2902      	cmp	r1, #2
 80178d6:	ece0 7a01 	vstmia	r0!, {s15}
 80178da:	f108 0804 	add.w	r8, r8, #4
 80178de:	d1eb      	bne.n	80178b8 <iNemoEngine_API_Update+0x2b38>
 80178e0:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 8017750 <iNemoEngine_API_Update+0x29d0>
 80178e4:	9b06      	ldr	r3, [sp, #24]
 80178e6:	eddd 4a40 	vldr	s9, [sp, #256]	; 0x100
 80178ea:	ed9d 5a41 	vldr	s10, [sp, #260]	; 0x104
 80178ee:	eddd 5a42 	vldr	s11, [sp, #264]	; 0x108
 80178f2:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80178f4:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 80178f8:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80178fc:	ee25 5a27 	vmul.f32	s10, s10, s15
 8017900:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8017904:	f503 71b2 	add.w	r1, r3, #356	; 0x164
 8017908:	4602      	mov	r2, r0
 801790a:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 801790e:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 8017912:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 8017916:	eef4 7ac7 	vcmpe.f32	s15, s14
 801791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801791e:	f103 030c 	add.w	r3, r3, #12
 8017922:	bf88      	it	hi
 8017924:	eef0 7a47 	vmovhi.f32	s15, s14
 8017928:	4293      	cmp	r3, r2
 801792a:	d1f2      	bne.n	8017912 <iNemoEngine_API_Update+0x2b92>
 801792c:	1d1a      	adds	r2, r3, #4
 801792e:	4291      	cmp	r1, r2
 8017930:	ece4 7a01 	vstmia	r4!, {s15}
 8017934:	d1e9      	bne.n	801790a <iNemoEngine_API_Update+0x2b8a>
 8017936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017938:	ed9d 4a3d 	vldr	s8, [sp, #244]	; 0xf4
 801793c:	edd3 7a00 	vldr	s15, [r3]
 8017940:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 8017944:	ed9d 6a3f 	vldr	s12, [sp, #252]	; 0xfc
 8017948:	9b06      	ldr	r3, [sp, #24]
 801794a:	ee97 4aa4 	vfnms.f32	s8, s15, s9
 801794e:	785b      	ldrb	r3, [r3, #1]
 8017950:	ee97 7a85 	vfnms.f32	s14, s15, s10
 8017954:	ee97 6aa5 	vfnms.f32	s12, s15, s11
 8017958:	eef0 4a47 	vmov.f32	s9, s14
 801795c:	ed8d 4a40 	vstr	s8, [sp, #256]	; 0x100
 8017960:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 8017964:	ed8d 6a42 	vstr	s12, [sp, #264]	; 0x108
 8017968:	b13b      	cbz	r3, 801797a <iNemoEngine_API_Update+0x2bfa>
 801796a:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801796e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017976:	f101 83e1 	bmi.w	801913c <iNemoEngine_API_Update+0x43bc>
 801797a:	9b06      	ldr	r3, [sp, #24]
 801797c:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
 8017980:	2a1e      	cmp	r2, #30
 8017982:	f001 843c 	beq.w	80191fe <iNemoEngine_API_Update+0x447e>
 8017986:	1c53      	adds	r3, r2, #1
 8017988:	2aff      	cmp	r2, #255	; 0xff
 801798a:	9906      	ldr	r1, [sp, #24]
 801798c:	bf14      	ite	ne
 801798e:	b2db      	uxtbne	r3, r3
 8017990:	23ff      	moveq	r3, #255	; 0xff
 8017992:	2200      	movs	r2, #0
 8017994:	f881 31a1 	strb.w	r3, [r1, #417]	; 0x1a1
 8017998:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 801799c:	464b      	mov	r3, r9
 801799e:	f7ff bb46 	b.w	801702e <iNemoEngine_API_Update+0x22ae>
 80179a2:	ed1f 7a94 	vldr	s14, [pc, #-592]	; 8017754 <iNemoEngine_API_Update+0x29d4>
 80179a6:	4603      	mov	r3, r0
 80179a8:	f7fd bc03 	b.w	80151b2 <iNemoEngine_API_Update+0x432>
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	f43e afe0 	beq.w	8016972 <iNemoEngine_API_Update+0x1bf2>
 80179b2:	f89d 30e8 	ldrb.w	r3, [sp, #232]	; 0xe8
 80179b6:	2b01      	cmp	r3, #1
 80179b8:	d002      	beq.n	80179c0 <iNemoEngine_API_Update+0x2c40>
 80179ba:	2c01      	cmp	r4, #1
 80179bc:	f47e afe2 	bne.w	8016984 <iNemoEngine_API_Update+0x1c04>
 80179c0:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
 80179c4:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80179c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179cc:	bfb8      	it	lt
 80179ce:	eeb0 5a67 	vmovlt.f32	s10, s15
 80179d2:	ed8d 5a83 	vstr	s10, [sp, #524]	; 0x20c
 80179d6:	ed8d 5a84 	vstr	s10, [sp, #528]	; 0x210
 80179da:	ed8d 5a85 	vstr	s10, [sp, #532]	; 0x214
 80179de:	f7fe bfd1 	b.w	8016984 <iNemoEngine_API_Update+0x1c04>
 80179e2:	9b06      	ldr	r3, [sp, #24]
 80179e4:	49c6      	ldr	r1, [pc, #792]	; (8017d00 <iNemoEngine_API_Update+0x2f80>)
 80179e6:	ed93 ba05 	vldr	s22, [r3, #20]
 80179ea:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80179ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80179f2:	4618      	mov	r0, r3
 80179f4:	f7fd bbc9 	b.w	801518a <iNemoEngine_API_Update+0x40a>
 80179f8:	9b06      	ldr	r3, [sp, #24]
 80179fa:	49c2      	ldr	r1, [pc, #776]	; (8017d04 <iNemoEngine_API_Update+0x2f84>)
 80179fc:	ed93 ba05 	vldr	s22, [r3, #20]
 8017a00:	4618      	mov	r0, r3
 8017a02:	f7fd bbc2 	b.w	801518a <iNemoEngine_API_Update+0x40a>
 8017a06:	4611      	mov	r1, r2
 8017a08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8017a0a:	2a00      	cmp	r2, #0
 8017a0c:	dd0c      	ble.n	8017a28 <iNemoEngine_API_Update+0x2ca8>
 8017a0e:	ed9d 7a03 	vldr	s14, [sp, #12]
 8017a12:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8017a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a1e:	dd03      	ble.n	8017a28 <iNemoEngine_API_Update+0x2ca8>
 8017a20:	3a01      	subs	r2, #1
 8017a22:	65ca      	str	r2, [r1, #92]	; 0x5c
 8017a24:	f7fe bfef 	b.w	8016a06 <iNemoEngine_API_Update+0x1c86>
 8017a28:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8017a2c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017a34:	eeb4 bac7 	vcmpe.f32	s22, s14
 8017a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a3c:	f57e afe3 	bpl.w	8016a06 <iNemoEngine_API_Update+0x1c86>
 8017a40:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 8017a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017a48:	eef4 dae7 	vcmpe.f32	s27, s15
 8017a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a50:	f57e afd9 	bpl.w	8016a06 <iNemoEngine_API_Update+0x1c86>
 8017a54:	ee7d 7a0d 	vadd.f32	s15, s26, s26
 8017a58:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 8017a5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a64:	f341 8492 	ble.w	801938c <iNemoEngine_API_Update+0x460c>
 8017a68:	9a06      	ldr	r2, [sp, #24]
 8017a6a:	3303      	adds	r3, #3
 8017a6c:	e434      	b.n	80172d8 <iNemoEngine_API_Update+0x2558>
 8017a6e:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8017d08 <iNemoEngine_API_Update+0x2f88>
 8017a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a7a:	f57e ae7b 	bpl.w	8016774 <iNemoEngine_API_Update+0x19f4>
 8017a7e:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8017d0c <iNemoEngine_API_Update+0x2f8c>
 8017a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a8a:	f280 80c9 	bge.w	8017c20 <iNemoEngine_API_Update+0x2ea0>
 8017a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017a92:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8017d10 <iNemoEngine_API_Update+0x2f90>
 8017a96:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a9e:	f280 80d5 	bge.w	8017c4c <iNemoEngine_API_Update+0x2ecc>
 8017aa2:	eddf 6a9c 	vldr	s13, [pc, #624]	; 8017d14 <iNemoEngine_API_Update+0x2f94>
 8017aa6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aae:	f280 80e3 	bge.w	8017c78 <iNemoEngine_API_Update+0x2ef8>
 8017ab2:	eddf 6a99 	vldr	s13, [pc, #612]	; 8017d18 <iNemoEngine_API_Update+0x2f98>
 8017ab6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017abe:	f280 80f1 	bge.w	8017ca4 <iNemoEngine_API_Update+0x2f24>
 8017ac2:	eddf 6a96 	vldr	s13, [pc, #600]	; 8017d1c <iNemoEngine_API_Update+0x2f9c>
 8017ac6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ace:	f280 80ff 	bge.w	8017cd0 <iNemoEngine_API_Update+0x2f50>
 8017ad2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017ad6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ade:	db0d      	blt.n	8017afc <iNemoEngine_API_Update+0x2d7c>
 8017ae0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017ae4:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8017d20 <iNemoEngine_API_Update+0x2fa0>
 8017ae8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8017aec:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8017af0:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017af4:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8017d24 <iNemoEngine_API_Update+0x2fa4>
 8017af8:	eea6 7a86 	vfma.f32	s14, s13, s12
 8017afc:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8017d28 <iNemoEngine_API_Update+0x2fa8>
 8017b00:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b08:	f141 82fa 	bpl.w	8019100 <iNemoEngine_API_Update+0x4380>
 8017b0c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8017d08 <iNemoEngine_API_Update+0x2f88>
 8017b10:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b18:	f2c1 82fa 	blt.w	8019110 <iNemoEngine_API_Update+0x4390>
 8017b1c:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8017d0c <iNemoEngine_API_Update+0x2f8c>
 8017b20:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b28:	f141 8296 	bpl.w	8019058 <iNemoEngine_API_Update+0x42d8>
 8017b2c:	ed9f 6a76 	vldr	s12, [pc, #472]	; 8017d08 <iNemoEngine_API_Update+0x2f88>
 8017b30:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8017d2c <iNemoEngine_API_Update+0x2fac>
 8017b34:	eddf 5a7e 	vldr	s11, [pc, #504]	; 8017d30 <iNemoEngine_API_Update+0x2fb0>
 8017b38:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017b3c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8017b40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017b44:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017b48:	ed9f 6a71 	vldr	s12, [pc, #452]	; 8017d10 <iNemoEngine_API_Update+0x2f90>
 8017b4c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b54:	f2c1 8296 	blt.w	8019084 <iNemoEngine_API_Update+0x4304>
 8017b58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8017d14 <iNemoEngine_API_Update+0x2f94>
 8017b5c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b64:	f141 8296 	bpl.w	8019094 <iNemoEngine_API_Update+0x4314>
 8017b68:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8017d10 <iNemoEngine_API_Update+0x2f90>
 8017b6c:	eddf 6a71 	vldr	s13, [pc, #452]	; 8017d34 <iNemoEngine_API_Update+0x2fb4>
 8017b70:	eddf 5a71 	vldr	s11, [pc, #452]	; 8017d38 <iNemoEngine_API_Update+0x2fb8>
 8017b74:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017b78:	ee26 6a26 	vmul.f32	s12, s12, s13
 8017b7c:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8017d3c <iNemoEngine_API_Update+0x2fbc>
 8017b80:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017b84:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8017d18 <iNemoEngine_API_Update+0x2f98>
 8017b88:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b90:	f2c1 8296 	blt.w	80190c0 <iNemoEngine_API_Update+0x4340>
 8017b94:	eddf 6a61 	vldr	s13, [pc, #388]	; 8017d1c <iNemoEngine_API_Update+0x2f9c>
 8017b98:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ba0:	f141 8296 	bpl.w	80190d0 <iNemoEngine_API_Update+0x4350>
 8017ba4:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8017d18 <iNemoEngine_API_Update+0x2f98>
 8017ba8:	eddf 6a65 	vldr	s13, [pc, #404]	; 8017d40 <iNemoEngine_API_Update+0x2fc0>
 8017bac:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017bb0:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 8017bb4:	ee26 6a26 	vmul.f32	s12, s12, s13
 8017bb8:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 8017bbc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017bc0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8017bc4:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bcc:	db0d      	blt.n	8017bea <iNemoEngine_API_Update+0x2e6a>
 8017bce:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8017bd2:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8017d44 <iNemoEngine_API_Update+0x2fc4>
 8017bd6:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8017bda:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8017bde:	ee26 6a26 	vmul.f32	s12, s12, s13
 8017be2:	eddf 6a59 	vldr	s13, [pc, #356]	; 8017d48 <iNemoEngine_API_Update+0x2fc8>
 8017be6:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017bea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017bee:	ee37 6a06 	vadd.f32	s12, s14, s12
 8017bf2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8017bf6:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8017bfa:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8017d0c <iNemoEngine_API_Update+0x2f8c>
 8017bfe:	ed9f 4a42 	vldr	s8, [pc, #264]	; 8017d08 <iNemoEngine_API_Update+0x2f88>
 8017c02:	eef4 5ac6 	vcmpe.f32	s11, s12
 8017c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c0a:	bfb8      	it	lt
 8017c0c:	eef0 5a46 	vmovlt.f32	s11, s12
 8017c10:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8017d4c <iNemoEngine_API_Update+0x2fcc>
 8017c14:	ee25 4a84 	vmul.f32	s8, s11, s8
 8017c18:	ee25 6a86 	vmul.f32	s12, s11, s12
 8017c1c:	f7fe bdfc 	b.w	8016818 <iNemoEngine_API_Update+0x1a98>
 8017c20:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8017d10 <iNemoEngine_API_Update+0x2f90>
 8017c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c2c:	d50e      	bpl.n	8017c4c <iNemoEngine_API_Update+0x2ecc>
 8017c2e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8017d0c <iNemoEngine_API_Update+0x2f8c>
 8017c32:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8017d50 <iNemoEngine_API_Update+0x2fd0>
 8017c36:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8017d54 <iNemoEngine_API_Update+0x2fd4>
 8017c3a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8017c3e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017c42:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8017d58 <iNemoEngine_API_Update+0x2fd8>
 8017c46:	eea6 7a86 	vfma.f32	s14, s13, s12
 8017c4a:	e72a      	b.n	8017aa2 <iNemoEngine_API_Update+0x2d22>
 8017c4c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8017d14 <iNemoEngine_API_Update+0x2f94>
 8017c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c58:	d50e      	bpl.n	8017c78 <iNemoEngine_API_Update+0x2ef8>
 8017c5a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8017d10 <iNemoEngine_API_Update+0x2f90>
 8017c5e:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8017d38 <iNemoEngine_API_Update+0x2fb8>
 8017c62:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8017c66:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8017c6a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017c6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8017c72:	eea6 7a86 	vfma.f32	s14, s13, s12
 8017c76:	e71c      	b.n	8017ab2 <iNemoEngine_API_Update+0x2d32>
 8017c78:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8017d18 <iNemoEngine_API_Update+0x2f98>
 8017c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c84:	d50e      	bpl.n	8017ca4 <iNemoEngine_API_Update+0x2f24>
 8017c86:	eddf 6a23 	vldr	s13, [pc, #140]	; 8017d14 <iNemoEngine_API_Update+0x2f94>
 8017c8a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8017c8e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017c92:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017c96:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8017c9a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8017c9e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8017ca2:	e70e      	b.n	8017ac2 <iNemoEngine_API_Update+0x2d42>
 8017ca4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8017d1c <iNemoEngine_API_Update+0x2f9c>
 8017ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cb0:	d50e      	bpl.n	8017cd0 <iNemoEngine_API_Update+0x2f50>
 8017cb2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8017d18 <iNemoEngine_API_Update+0x2f98>
 8017cb6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8017d5c <iNemoEngine_API_Update+0x2fdc>
 8017cba:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8017cbe:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8017cc2:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017cc6:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8017cca:	eea6 7a86 	vfma.f32	s14, s13, s12
 8017cce:	e700      	b.n	8017ad2 <iNemoEngine_API_Update+0x2d52>
 8017cd0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cdc:	f57f af00 	bpl.w	8017ae0 <iNemoEngine_API_Update+0x2d60>
 8017ce0:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8017d1c <iNemoEngine_API_Update+0x2f9c>
 8017ce4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8017d60 <iNemoEngine_API_Update+0x2fe0>
 8017ce8:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8017d64 <iNemoEngine_API_Update+0x2fe4>
 8017cec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8017cf0:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017cf4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8017d68 <iNemoEngine_API_Update+0x2fe8>
 8017cf8:	eea6 7a86 	vfma.f32	s14, s13, s12
 8017cfc:	e6fe      	b.n	8017afc <iNemoEngine_API_Update+0x2d7c>
 8017cfe:	bf00      	nop
 8017d00:	3727c5ac 	.word	0x3727c5ac
 8017d04:	3ac49ba6 	.word	0x3ac49ba6
 8017d08:	3c23d70a 	.word	0x3c23d70a
 8017d0c:	3c75c28f 	.word	0x3c75c28f
 8017d10:	3cf5c28f 	.word	0x3cf5c28f
 8017d14:	3d4ccccd 	.word	0x3d4ccccd
 8017d18:	3dcccccd 	.word	0x3dcccccd
 8017d1c:	3e4ccccd 	.word	0x3e4ccccd
 8017d20:	46979000 	.word	0x46979000
 8017d24:	4415c000 	.word	0x4415c000
 8017d28:	3ba3d70a 	.word	0x3ba3d70a
 8017d2c:	3d4cccc0 	.word	0x3d4cccc0
 8017d30:	43480000 	.word	0x43480000
 8017d34:	3eb33334 	.word	0x3eb33334
 8017d38:	4247ffff 	.word	0x4247ffff
 8017d3c:	3f933333 	.word	0x3f933333
 8017d40:	410c0000 	.word	0x410c0000
 8017d44:	42c80000 	.word	0x42c80000
 8017d48:	424a0000 	.word	0x424a0000
 8017d4c:	3b449ba6 	.word	0x3b449ba6
 8017d50:	3ecccccc 	.word	0x3ecccccc
 8017d54:	42855556 	.word	0x42855556
 8017d58:	3fcccccd 	.word	0x3fcccccd
 8017d5c:	42d40000 	.word	0x42d40000
 8017d60:	43f00000 	.word	0x43f00000
 8017d64:	40555555 	.word	0x40555555
 8017d68:	42ee0000 	.word	0x42ee0000
 8017d6c:	4615      	mov	r5, r2
 8017d6e:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 8017d72:	49d7      	ldr	r1, [pc, #860]	; (80180d0 <iNemoEngine_API_Update+0x3350>)
 8017d74:	4ad7      	ldr	r2, [pc, #860]	; (80180d4 <iNemoEngine_API_Update+0x3354>)
 8017d76:	4bd8      	ldr	r3, [pc, #864]	; (80180d8 <iNemoEngine_API_Update+0x3358>)
 8017d78:	2000      	movs	r0, #0
 8017d7a:	f885 0318 	strb.w	r0, [r5, #792]	; 0x318
 8017d7e:	f205 6824 	addw	r8, r5, #1572	; 0x624
 8017d82:	6039      	str	r1, [r7, #0]
 8017d84:	f205 7194 	addw	r1, r5, #1940	; 0x794
 8017d88:	f8c8 2000 	str.w	r2, [r8]
 8017d8c:	600b      	str	r3, [r1, #0]
 8017d8e:	f895 64b1 	ldrb.w	r6, [r5, #1201]	; 0x4b1
 8017d92:	911b      	str	r1, [sp, #108]	; 0x6c
 8017d94:	2e00      	cmp	r6, #0
 8017d96:	f001 8297 	beq.w	80192c8 <iNemoEngine_API_Update+0x4548>
 8017d9a:	eddf 7ad0 	vldr	s15, [pc, #832]	; 80180dc <iNemoEngine_API_Update+0x335c>
 8017d9e:	ee68 faa7 	vmul.f32	s31, s17, s15
 8017da2:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 8017da6:	ee28 fa27 	vmul.f32	s30, s16, s15
 8017daa:	ee6c da27 	vmul.f32	s27, s24, s15
 8017dae:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8017db2:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8017db6:	ee17 0a90 	vmov	r0, s15
 8017dba:	f7e8 fbc5 	bl	8000548 <__aeabi_f2d>
 8017dbe:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8017dc2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017dc6:	ee17 0a90 	vmov	r0, s15
 8017dca:	f7e8 fbbd 	bl	8000548 <__aeabi_f2d>
 8017dce:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8017dd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017dd6:	ee17 0a90 	vmov	r0, s15
 8017dda:	f7e8 fbb5 	bl	8000548 <__aeabi_f2d>
 8017dde:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8017de2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017de6:	ee17 0a90 	vmov	r0, s15
 8017dea:	f7e8 fbad 	bl	8000548 <__aeabi_f2d>
 8017dee:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8017df2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8017df6:	ee17 0a90 	vmov	r0, s15
 8017dfa:	f7e8 fba5 	bl	8000548 <__aeabi_f2d>
 8017dfe:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8017e02:	4602      	mov	r2, r0
 8017e04:	460b      	mov	r3, r1
 8017e06:	ee17 0a90 	vmov	r0, s15
 8017e0a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8017e0e:	f7e8 fb9b 	bl	8000548 <__aeabi_f2d>
 8017e12:	9b06      	ldr	r3, [sp, #24]
 8017e14:	ed9f bab8 	vldr	s22, [pc, #736]	; 80180f8 <iNemoEngine_API_Update+0x3378>
 8017e18:	eef0 7aef 	vabs.f32	s15, s31
 8017e1c:	edcd 7a03 	vstr	s15, [sp, #12]
 8017e20:	eef0 7acf 	vabs.f32	s15, s30
 8017e24:	f503 6597 	add.w	r5, r3, #1208	; 0x4b8
 8017e28:	edcd 7a04 	vstr	s15, [sp, #16]
 8017e2c:	230c      	movs	r3, #12
 8017e2e:	eef0 7aed 	vabs.f32	s15, s27
 8017e32:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8017e36:	fb13 5606 	smlabb	r6, r3, r6, r5
 8017e3a:	edcd 7a05 	vstr	s15, [sp, #20]
 8017e3e:	46aa      	mov	sl, r5
 8017e40:	e060      	b.n	8017f04 <iNemoEngine_API_Update+0x3184>
 8017e42:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80180e0 <iNemoEngine_API_Update+0x3360>
 8017e46:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e4e:	f280 8162 	bge.w	8018116 <iNemoEngine_API_Update+0x3396>
 8017e52:	eddf 7aa4 	vldr	s15, [pc, #656]	; 80180e4 <iNemoEngine_API_Update+0x3364>
 8017e56:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e5e:	f300 816c 	bgt.w	801813a <iNemoEngine_API_Update+0x33ba>
 8017e62:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017e66:	f005 f9bb 	bl	801d1e0 <ceil>
 8017e6a:	ec51 0b10 	vmov	r0, r1, d0
 8017e6e:	f7e8 fe9b 	bl	8000ba8 <__aeabi_d2f>
 8017e72:	eddd 7a04 	vldr	s15, [sp, #16]
 8017e76:	f8ca 0000 	str.w	r0, [sl]
 8017e7a:	eef4 7acb 	vcmpe.f32	s15, s22
 8017e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e82:	f140 8121 	bpl.w	80180c8 <iNemoEngine_API_Update+0x3348>
 8017e86:	eddf 7a96 	vldr	s15, [pc, #600]	; 80180e0 <iNemoEngine_API_Update+0x3360>
 8017e8a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e92:	f280 8137 	bge.w	8018104 <iNemoEngine_API_Update+0x3384>
 8017e96:	eddf 7a93 	vldr	s15, [pc, #588]	; 80180e4 <iNemoEngine_API_Update+0x3364>
 8017e9a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ea2:	f300 8257 	bgt.w	8018354 <iNemoEngine_API_Update+0x35d4>
 8017ea6:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 8017eaa:	f005 f999 	bl	801d1e0 <ceil>
 8017eae:	ec51 0b10 	vmov	r0, r1, d0
 8017eb2:	f7e8 fe79 	bl	8000ba8 <__aeabi_d2f>
 8017eb6:	eddd 7a05 	vldr	s15, [sp, #20]
 8017eba:	f8ca 0004 	str.w	r0, [sl, #4]
 8017ebe:	eef4 7acb 	vcmpe.f32	s15, s22
 8017ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ec6:	d527      	bpl.n	8017f18 <iNemoEngine_API_Update+0x3198>
 8017ec8:	eddf 7a85 	vldr	s15, [pc, #532]	; 80180e0 <iNemoEngine_API_Update+0x3360>
 8017ecc:	eeb4 cae7 	vcmpe.f32	s24, s15
 8017ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ed4:	f280 8128 	bge.w	8018128 <iNemoEngine_API_Update+0x33a8>
 8017ed8:	eddf 7a82 	vldr	s15, [pc, #520]	; 80180e4 <iNemoEngine_API_Update+0x3364>
 8017edc:	eeb4 cae7 	vcmpe.f32	s24, s15
 8017ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ee4:	f300 812b 	bgt.w	801813e <iNemoEngine_API_Update+0x33be>
 8017ee8:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 8017eec:	f005 f978 	bl	801d1e0 <ceil>
 8017ef0:	ec51 0b10 	vmov	r0, r1, d0
 8017ef4:	f7e8 fe58 	bl	8000ba8 <__aeabi_d2f>
 8017ef8:	f8ca 0008 	str.w	r0, [sl, #8]
 8017efc:	f10a 0a0c 	add.w	sl, sl, #12
 8017f00:	45b2      	cmp	sl, r6
 8017f02:	d011      	beq.n	8017f28 <iNemoEngine_API_Update+0x31a8>
 8017f04:	eddd 7a03 	vldr	s15, [sp, #12]
 8017f08:	eef4 7acb 	vcmpe.f32	s15, s22
 8017f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f10:	d497      	bmi.n	8017e42 <iNemoEngine_API_Update+0x30c2>
 8017f12:	ee1f 0a90 	vmov	r0, s31
 8017f16:	e7ac      	b.n	8017e72 <iNemoEngine_API_Update+0x30f2>
 8017f18:	ee1d 0a90 	vmov	r0, s27
 8017f1c:	f10a 0a0c 	add.w	sl, sl, #12
 8017f20:	f84a 0c04 	str.w	r0, [sl, #-4]
 8017f24:	45b2      	cmp	sl, r6
 8017f26:	d1ed      	bne.n	8017f04 <iNemoEngine_API_Update+0x3184>
 8017f28:	9b06      	ldr	r3, [sp, #24]
 8017f2a:	f893 9621 	ldrb.w	r9, [r3, #1569]	; 0x621
 8017f2e:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 8017f32:	f1b9 0f00 	cmp.w	r9, #0
 8017f36:	f000 8114 	beq.w	8018162 <iNemoEngine_API_Update+0x33e2>
 8017f3a:	eddf 7a6b 	vldr	s15, [pc, #428]	; 80180e8 <iNemoEngine_API_Update+0x3368>
 8017f3e:	ee6a faa7 	vmul.f32	s31, s21, s15
 8017f42:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 8017f46:	ee2a fa27 	vmul.f32	s30, s20, s15
 8017f4a:	ee69 daa7 	vmul.f32	s27, s19, s15
 8017f4e:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8017f52:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8017f56:	ee17 0a90 	vmov	r0, s15
 8017f5a:	f7e8 faf5 	bl	8000548 <__aeabi_f2d>
 8017f5e:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8017f62:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017f66:	ee17 0a90 	vmov	r0, s15
 8017f6a:	f7e8 faed 	bl	8000548 <__aeabi_f2d>
 8017f6e:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 8017f72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017f76:	ee17 0a90 	vmov	r0, s15
 8017f7a:	f7e8 fae5 	bl	8000548 <__aeabi_f2d>
 8017f7e:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 8017f82:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017f86:	ee17 0a90 	vmov	r0, s15
 8017f8a:	f7e8 fadd 	bl	8000548 <__aeabi_f2d>
 8017f8e:	ee7d 7acb 	vsub.f32	s15, s27, s22
 8017f92:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8017f96:	ee17 0a90 	vmov	r0, s15
 8017f9a:	f7e8 fad5 	bl	8000548 <__aeabi_f2d>
 8017f9e:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 8017fa2:	4602      	mov	r2, r0
 8017fa4:	460b      	mov	r3, r1
 8017fa6:	ee17 0a90 	vmov	r0, s15
 8017faa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8017fae:	f7e8 facb 	bl	8000548 <__aeabi_f2d>
 8017fb2:	eef0 7aef 	vabs.f32	s15, s31
 8017fb6:	9b06      	ldr	r3, [sp, #24]
 8017fb8:	edcd 7a03 	vstr	s15, [sp, #12]
 8017fbc:	eef0 7acf 	vabs.f32	s15, s30
 8017fc0:	edcd 7a04 	vstr	s15, [sp, #16]
 8017fc4:	eef0 7aed 	vabs.f32	s15, s27
 8017fc8:	f503 66c5 	add.w	r6, r3, #1576	; 0x628
 8017fcc:	edcd 7a05 	vstr	s15, [sp, #20]
 8017fd0:	230c      	movs	r3, #12
 8017fd2:	eef0 7a6c 	vmov.f32	s15, s25
 8017fd6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8017fda:	eef0 ca48 	vmov.f32	s25, s16
 8017fde:	ed9f ba46 	vldr	s22, [pc, #280]	; 80180f8 <iNemoEngine_API_Update+0x3378>
 8017fe2:	eeb0 8a4d 	vmov.f32	s16, s26
 8017fe6:	fb13 6909 	smlabb	r9, r3, r9, r6
 8017fea:	46b3      	mov	fp, r6
 8017fec:	eeb0 da67 	vmov.f32	s26, s15
 8017ff0:	e060      	b.n	80180b4 <iNemoEngine_API_Update+0x3334>
 8017ff2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80180ec <iNemoEngine_API_Update+0x336c>
 8017ff6:	eef4 aae7 	vcmpe.f32	s21, s15
 8017ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ffe:	f280 8197 	bge.w	8018330 <iNemoEngine_API_Update+0x35b0>
 8018002:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80180f0 <iNemoEngine_API_Update+0x3370>
 8018006:	eef4 aae7 	vcmpe.f32	s21, s15
 801800a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801800e:	f300 81a3 	bgt.w	8018358 <iNemoEngine_API_Update+0x35d8>
 8018012:	ed9d 0b08 	vldr	d0, [sp, #32]
 8018016:	f005 f8e3 	bl	801d1e0 <ceil>
 801801a:	ec51 0b10 	vmov	r0, r1, d0
 801801e:	f7e8 fdc3 	bl	8000ba8 <__aeabi_d2f>
 8018022:	eddd 7a04 	vldr	s15, [sp, #16]
 8018026:	f8cb 0000 	str.w	r0, [fp]
 801802a:	eef4 7acb 	vcmpe.f32	s15, s22
 801802e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018032:	f140 8171 	bpl.w	8018318 <iNemoEngine_API_Update+0x3598>
 8018036:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80180ec <iNemoEngine_API_Update+0x336c>
 801803a:	eeb4 aae7 	vcmpe.f32	s20, s15
 801803e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018042:	f280 816c 	bge.w	801831e <iNemoEngine_API_Update+0x359e>
 8018046:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80180f0 <iNemoEngine_API_Update+0x3370>
 801804a:	eeb4 aae7 	vcmpe.f32	s20, s15
 801804e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018052:	f300 81bd 	bgt.w	80183d0 <iNemoEngine_API_Update+0x3650>
 8018056:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 801805a:	f005 f8c1 	bl	801d1e0 <ceil>
 801805e:	ec51 0b10 	vmov	r0, r1, d0
 8018062:	f7e8 fda1 	bl	8000ba8 <__aeabi_d2f>
 8018066:	eddd 7a05 	vldr	s15, [sp, #20]
 801806a:	f8cb 0004 	str.w	r0, [fp, #4]
 801806e:	eef4 7acb 	vcmpe.f32	s15, s22
 8018072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018076:	d564      	bpl.n	8018142 <iNemoEngine_API_Update+0x33c2>
 8018078:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80180ec <iNemoEngine_API_Update+0x336c>
 801807c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8018080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018084:	f280 815d 	bge.w	8018342 <iNemoEngine_API_Update+0x35c2>
 8018088:	eddf 7a19 	vldr	s15, [pc, #100]	; 80180f0 <iNemoEngine_API_Update+0x3370>
 801808c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8018090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018094:	f300 8162 	bgt.w	801835c <iNemoEngine_API_Update+0x35dc>
 8018098:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 801809c:	f005 f8a0 	bl	801d1e0 <ceil>
 80180a0:	ec51 0b10 	vmov	r0, r1, d0
 80180a4:	f7e8 fd80 	bl	8000ba8 <__aeabi_d2f>
 80180a8:	f8cb 0008 	str.w	r0, [fp, #8]
 80180ac:	f10b 0b0c 	add.w	fp, fp, #12
 80180b0:	45cb      	cmp	fp, r9
 80180b2:	d04e      	beq.n	8018152 <iNemoEngine_API_Update+0x33d2>
 80180b4:	eddd 7a03 	vldr	s15, [sp, #12]
 80180b8:	eef4 7acb 	vcmpe.f32	s15, s22
 80180bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180c0:	d497      	bmi.n	8017ff2 <iNemoEngine_API_Update+0x3272>
 80180c2:	ee1f 0a90 	vmov	r0, s31
 80180c6:	e7ac      	b.n	8018022 <iNemoEngine_API_Update+0x32a2>
 80180c8:	ee1f 0a10 	vmov	r0, s30
 80180cc:	e6f3      	b.n	8017eb6 <iNemoEngine_API_Update+0x3136>
 80180ce:	bf00      	nop
 80180d0:	3a7001e0 	.word	0x3a7001e0
 80180d4:	3a000100 	.word	0x3a000100
 80180d8:	3a8c0118 	.word	0x3a8c0118
 80180dc:	44888777 	.word	0x44888777
 80180e0:	39f001e1 	.word	0x39f001e1
 80180e4:	b9f001e1 	.word	0xb9f001e1
 80180e8:	44fffe00 	.word	0x44fffe00
 80180ec:	39800100 	.word	0x39800100
 80180f0:	b9800100 	.word	0xb9800100
 80180f4:	446a0ccd 	.word	0x446a0ccd
 80180f8:	4b000000 	.word	0x4b000000
 80180fc:	3cfaad3b 	.word	0x3cfaad3b
 8018100:	bcfaad3b 	.word	0xbcfaad3b
 8018104:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8018108:	f005 f8ea 	bl	801d2e0 <floor>
 801810c:	ec51 0b10 	vmov	r0, r1, d0
 8018110:	f7e8 fd4a 	bl	8000ba8 <__aeabi_d2f>
 8018114:	e6cf      	b.n	8017eb6 <iNemoEngine_API_Update+0x3136>
 8018116:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801811a:	f005 f8e1 	bl	801d2e0 <floor>
 801811e:	ec51 0b10 	vmov	r0, r1, d0
 8018122:	f7e8 fd41 	bl	8000ba8 <__aeabi_d2f>
 8018126:	e6a4      	b.n	8017e72 <iNemoEngine_API_Update+0x30f2>
 8018128:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 801812c:	f005 f8d8 	bl	801d2e0 <floor>
 8018130:	ec51 0b10 	vmov	r0, r1, d0
 8018134:	f7e8 fd38 	bl	8000ba8 <__aeabi_d2f>
 8018138:	e6de      	b.n	8017ef8 <iNemoEngine_API_Update+0x3178>
 801813a:	4648      	mov	r0, r9
 801813c:	e699      	b.n	8017e72 <iNemoEngine_API_Update+0x30f2>
 801813e:	4648      	mov	r0, r9
 8018140:	e6da      	b.n	8017ef8 <iNemoEngine_API_Update+0x3178>
 8018142:	ee1d 0a90 	vmov	r0, s27
 8018146:	f10b 0b0c 	add.w	fp, fp, #12
 801814a:	f84b 0c04 	str.w	r0, [fp, #-4]
 801814e:	45cb      	cmp	fp, r9
 8018150:	d1b0      	bne.n	80180b4 <iNemoEngine_API_Update+0x3334>
 8018152:	eef0 7a4d 	vmov.f32	s15, s26
 8018156:	eeb0 da48 	vmov.f32	s26, s16
 801815a:	eeb0 8a6c 	vmov.f32	s16, s25
 801815e:	eef0 ca67 	vmov.f32	s25, s15
 8018162:	9b06      	ldr	r3, [sp, #24]
 8018164:	f893 9791 	ldrb.w	r9, [r3, #1937]	; 0x791
 8018168:	f1b9 0f00 	cmp.w	r9, #0
 801816c:	f001 80a7 	beq.w	80192be <iNemoEngine_API_Update+0x453e>
 8018170:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 80180f4 <iNemoEngine_API_Update+0x3374>
 8018174:	ee6e fa27 	vmul.f32	s31, s28, s15
 8018178:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 801817c:	ee2e faa7 	vmul.f32	s30, s29, s15
 8018180:	ee6b daa7 	vmul.f32	s27, s23, s15
 8018184:	ee7f 7acb 	vsub.f32	s15, s31, s22
 8018188:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 801818c:	ee17 0a90 	vmov	r0, s15
 8018190:	f7e8 f9da 	bl	8000548 <__aeabi_f2d>
 8018194:	ee7f 7a8b 	vadd.f32	s15, s31, s22
 8018198:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801819c:	ee17 0a90 	vmov	r0, s15
 80181a0:	f7e8 f9d2 	bl	8000548 <__aeabi_f2d>
 80181a4:	ee7f 7a4b 	vsub.f32	s15, s30, s22
 80181a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80181ac:	ee17 0a90 	vmov	r0, s15
 80181b0:	f7e8 f9ca 	bl	8000548 <__aeabi_f2d>
 80181b4:	ee7f 7a0b 	vadd.f32	s15, s30, s22
 80181b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80181bc:	ee17 0a90 	vmov	r0, s15
 80181c0:	f7e8 f9c2 	bl	8000548 <__aeabi_f2d>
 80181c4:	ee7d 7acb 	vsub.f32	s15, s27, s22
 80181c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80181cc:	ee17 0a90 	vmov	r0, s15
 80181d0:	f7e8 f9ba 	bl	8000548 <__aeabi_f2d>
 80181d4:	ee7d 7a8b 	vadd.f32	s15, s27, s22
 80181d8:	4602      	mov	r2, r0
 80181da:	460b      	mov	r3, r1
 80181dc:	ee17 0a90 	vmov	r0, s15
 80181e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80181e4:	f7e8 f9b0 	bl	8000548 <__aeabi_f2d>
 80181e8:	eef0 7aef 	vabs.f32	s15, s31
 80181ec:	9b06      	ldr	r3, [sp, #24]
 80181ee:	edcd 7a03 	vstr	s15, [sp, #12]
 80181f2:	eef0 7acf 	vabs.f32	s15, s30
 80181f6:	edcd 7a04 	vstr	s15, [sp, #16]
 80181fa:	eef0 7aed 	vabs.f32	s15, s27
 80181fe:	f503 62f3 	add.w	r2, r3, #1944	; 0x798
 8018202:	eeb0 7a48 	vmov.f32	s14, s16
 8018206:	230c      	movs	r3, #12
 8018208:	edcd 7a05 	vstr	s15, [sp, #20]
 801820c:	eef0 7a6c 	vmov.f32	s15, s25
 8018210:	eeb0 8a4d 	vmov.f32	s16, s26
 8018214:	eef0 ca4a 	vmov.f32	s25, s20
 8018218:	eeb0 da6a 	vmov.f32	s26, s21
 801821c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8018220:	eef0 aa69 	vmov.f32	s21, s19
 8018224:	ed1f ba4c 	vldr	s22, [pc, #-304]	; 80180f8 <iNemoEngine_API_Update+0x3378>
 8018228:	9215      	str	r2, [sp, #84]	; 0x54
 801822a:	fb13 2909 	smlabb	r9, r3, r9, r2
 801822e:	4693      	mov	fp, r2
 8018230:	eeb0 aa67 	vmov.f32	s20, s15
 8018234:	eef0 9a47 	vmov.f32	s19, s14
 8018238:	e064      	b.n	8018304 <iNemoEngine_API_Update+0x3584>
 801823a:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 801823e:	ed1f 7a51 	vldr	s14, [pc, #-324]	; 80180fc <iNemoEngine_API_Update+0x337c>
 8018242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801824a:	f280 80af 	bge.w	80183ac <iNemoEngine_API_Update+0x362c>
 801824e:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8018100 <iNemoEngine_API_Update+0x3380>
 8018252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801825a:	f300 80bb 	bgt.w	80183d4 <iNemoEngine_API_Update+0x3654>
 801825e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8018262:	f004 ffbd 	bl	801d1e0 <ceil>
 8018266:	ec51 0b10 	vmov	r0, r1, d0
 801826a:	f7e8 fc9d 	bl	8000ba8 <__aeabi_d2f>
 801826e:	eddd 7a04 	vldr	s15, [sp, #16]
 8018272:	f8cb 0000 	str.w	r0, [fp]
 8018276:	eef4 7acb 	vcmpe.f32	s15, s22
 801827a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801827e:	f140 8089 	bpl.w	8018394 <iNemoEngine_API_Update+0x3614>
 8018282:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8018286:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 80180fc <iNemoEngine_API_Update+0x337c>
 801828a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801828e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018292:	f280 8082 	bge.w	801839a <iNemoEngine_API_Update+0x361a>
 8018296:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8018100 <iNemoEngine_API_Update+0x3380>
 801829a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801829e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182a2:	f300 809b 	bgt.w	80183dc <iNemoEngine_API_Update+0x365c>
 80182a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
 80182aa:	f004 ff99 	bl	801d1e0 <ceil>
 80182ae:	ec51 0b10 	vmov	r0, r1, d0
 80182b2:	f7e8 fc79 	bl	8000ba8 <__aeabi_d2f>
 80182b6:	eddd 7a05 	vldr	s15, [sp, #20]
 80182ba:	f8cb 0004 	str.w	r0, [fp, #4]
 80182be:	eef4 7acb 	vcmpe.f32	s15, s22
 80182c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182c6:	d54b      	bpl.n	8018360 <iNemoEngine_API_Update+0x35e0>
 80182c8:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80182cc:	ed1f 7a75 	vldr	s14, [pc, #-468]	; 80180fc <iNemoEngine_API_Update+0x337c>
 80182d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80182d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182d8:	da71      	bge.n	80183be <iNemoEngine_API_Update+0x363e>
 80182da:	ed1f 7a77 	vldr	s14, [pc, #-476]	; 8018100 <iNemoEngine_API_Update+0x3380>
 80182de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80182e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182e6:	dc77      	bgt.n	80183d8 <iNemoEngine_API_Update+0x3658>
 80182e8:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 80182ec:	f004 ff78 	bl	801d1e0 <ceil>
 80182f0:	ec51 0b10 	vmov	r0, r1, d0
 80182f4:	f7e8 fc58 	bl	8000ba8 <__aeabi_d2f>
 80182f8:	f8cb 0008 	str.w	r0, [fp, #8]
 80182fc:	f10b 0b0c 	add.w	fp, fp, #12
 8018300:	45cb      	cmp	fp, r9
 8018302:	d035      	beq.n	8018370 <iNemoEngine_API_Update+0x35f0>
 8018304:	eddd 7a03 	vldr	s15, [sp, #12]
 8018308:	eef4 7acb 	vcmpe.f32	s15, s22
 801830c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018310:	d493      	bmi.n	801823a <iNemoEngine_API_Update+0x34ba>
 8018312:	ee1f 0a90 	vmov	r0, s31
 8018316:	e7aa      	b.n	801826e <iNemoEngine_API_Update+0x34ee>
 8018318:	ee1f 0a10 	vmov	r0, s30
 801831c:	e6a3      	b.n	8018066 <iNemoEngine_API_Update+0x32e6>
 801831e:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8018322:	f004 ffdd 	bl	801d2e0 <floor>
 8018326:	ec51 0b10 	vmov	r0, r1, d0
 801832a:	f7e8 fc3d 	bl	8000ba8 <__aeabi_d2f>
 801832e:	e69a      	b.n	8018066 <iNemoEngine_API_Update+0x32e6>
 8018330:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018334:	f004 ffd4 	bl	801d2e0 <floor>
 8018338:	ec51 0b10 	vmov	r0, r1, d0
 801833c:	f7e8 fc34 	bl	8000ba8 <__aeabi_d2f>
 8018340:	e66f      	b.n	8018022 <iNemoEngine_API_Update+0x32a2>
 8018342:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 8018346:	f004 ffcb 	bl	801d2e0 <floor>
 801834a:	ec51 0b10 	vmov	r0, r1, d0
 801834e:	f7e8 fc2b 	bl	8000ba8 <__aeabi_d2f>
 8018352:	e6a9      	b.n	80180a8 <iNemoEngine_API_Update+0x3328>
 8018354:	4648      	mov	r0, r9
 8018356:	e5ae      	b.n	8017eb6 <iNemoEngine_API_Update+0x3136>
 8018358:	4650      	mov	r0, sl
 801835a:	e662      	b.n	8018022 <iNemoEngine_API_Update+0x32a2>
 801835c:	4650      	mov	r0, sl
 801835e:	e6a3      	b.n	80180a8 <iNemoEngine_API_Update+0x3328>
 8018360:	ee1d 0a90 	vmov	r0, s27
 8018364:	f10b 0b0c 	add.w	fp, fp, #12
 8018368:	f84b 0c04 	str.w	r0, [fp, #-4]
 801836c:	45cb      	cmp	fp, r9
 801836e:	d1c9      	bne.n	8018304 <iNemoEngine_API_Update+0x3584>
 8018370:	eeb0 7a69 	vmov.f32	s14, s19
 8018374:	eef0 7a4a 	vmov.f32	s15, s20
 8018378:	eef0 9a6a 	vmov.f32	s19, s21
 801837c:	eeb0 aa6c 	vmov.f32	s20, s25
 8018380:	eef0 aa4d 	vmov.f32	s21, s26
 8018384:	eef0 ca67 	vmov.f32	s25, s15
 8018388:	eeb0 da48 	vmov.f32	s26, s16
 801838c:	eeb0 8a47 	vmov.f32	s16, s14
 8018390:	f7fd b820 	b.w	80153d4 <iNemoEngine_API_Update+0x654>
 8018394:	ee1f 0a10 	vmov	r0, s30
 8018398:	e78d      	b.n	80182b6 <iNemoEngine_API_Update+0x3536>
 801839a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 801839e:	f004 ff9f 	bl	801d2e0 <floor>
 80183a2:	ec51 0b10 	vmov	r0, r1, d0
 80183a6:	f7e8 fbff 	bl	8000ba8 <__aeabi_d2f>
 80183aa:	e784      	b.n	80182b6 <iNemoEngine_API_Update+0x3536>
 80183ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80183b0:	f004 ff96 	bl	801d2e0 <floor>
 80183b4:	ec51 0b10 	vmov	r0, r1, d0
 80183b8:	f7e8 fbf6 	bl	8000ba8 <__aeabi_d2f>
 80183bc:	e757      	b.n	801826e <iNemoEngine_API_Update+0x34ee>
 80183be:	ed9d 0b12 	vldr	d0, [sp, #72]	; 0x48
 80183c2:	f004 ff8d 	bl	801d2e0 <floor>
 80183c6:	ec51 0b10 	vmov	r0, r1, d0
 80183ca:	f7e8 fbed 	bl	8000ba8 <__aeabi_d2f>
 80183ce:	e793      	b.n	80182f8 <iNemoEngine_API_Update+0x3578>
 80183d0:	4650      	mov	r0, sl
 80183d2:	e648      	b.n	8018066 <iNemoEngine_API_Update+0x32e6>
 80183d4:	4650      	mov	r0, sl
 80183d6:	e74a      	b.n	801826e <iNemoEngine_API_Update+0x34ee>
 80183d8:	4650      	mov	r0, sl
 80183da:	e78d      	b.n	80182f8 <iNemoEngine_API_Update+0x3578>
 80183dc:	4650      	mov	r0, sl
 80183de:	e76a      	b.n	80182b6 <iNemoEngine_API_Update+0x3536>
 80183e0:	4616      	mov	r6, r2
 80183e2:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 80183e6:	4be1      	ldr	r3, [pc, #900]	; (801876c <iNemoEngine_API_Update+0x39ec>)
 80183e8:	f8c2 31c8 	str.w	r3, [r2, #456]	; 0x1c8
 80183ec:	2100      	movs	r1, #0
 80183ee:	f8c2 51cc 	str.w	r5, [r2, #460]	; 0x1cc
 80183f2:	f8c2 51d0 	str.w	r5, [r2, #464]	; 0x1d0
 80183f6:	f882 11ac 	strb.w	r1, [r2, #428]	; 0x1ac
 80183fa:	f506 70ea 	add.w	r0, r6, #468	; 0x1d4
 80183fe:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8018402:	f002 fbc2 	bl	801ab8a <memset>
 8018406:	ed96 6a02 	vldr	s12, [r6, #8]
 801840a:	eddf 7ad9 	vldr	s15, [pc, #868]	; 8018770 <iNemoEngine_API_Update+0x39f0>
 801840e:	eddf 5ad9 	vldr	s11, [pc, #868]	; 8018774 <iNemoEngine_API_Update+0x39f4>
 8018412:	ed9f 5ad9 	vldr	s10, [pc, #868]	; 8018778 <iNemoEngine_API_Update+0x39f8>
 8018416:	f8c6 50c4 	str.w	r5, [r6, #196]	; 0xc4
 801841a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801841e:	2300      	movs	r3, #0
 8018420:	edc6 7a34 	vstr	s15, [r6, #208]	; 0xd0
 8018424:	eddf 7ad5 	vldr	s15, [pc, #852]	; 801877c <iNemoEngine_API_Update+0x39fc>
 8018428:	f8c6 30c0 	str.w	r3, [r6, #192]	; 0xc0
 801842c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018430:	f8c6 3128 	str.w	r3, [r6, #296]	; 0x128
 8018434:	edc6 7a4e 	vstr	s15, [r6, #312]	; 0x138
 8018438:	eddf 7ad1 	vldr	s15, [pc, #836]	; 8018780 <iNemoEngine_API_Update+0x3a00>
 801843c:	4bd1      	ldr	r3, [pc, #836]	; (8018784 <iNemoEngine_API_Update+0x3a04>)
 801843e:	f8c6 30dc 	str.w	r3, [r6, #220]	; 0xdc
 8018442:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018446:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
 801844a:	edc6 7a50 	vstr	s15, [r6, #320]	; 0x140
 801844e:	eddf 7ace 	vldr	s15, [pc, #824]	; 8018788 <iNemoEngine_API_Update+0x3a08>
 8018452:	4bce      	ldr	r3, [pc, #824]	; (801878c <iNemoEngine_API_Update+0x3a0c>)
 8018454:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8018458:	ee66 7a27 	vmul.f32	s15, s12, s15
 801845c:	4bcc      	ldr	r3, [pc, #816]	; (8018790 <iNemoEngine_API_Update+0x3a10>)
 801845e:	edc6 7a38 	vstr	s15, [r6, #224]	; 0xe0
 8018462:	eddf 7acc 	vldr	s15, [pc, #816]	; 8018794 <iNemoEngine_API_Update+0x3a14>
 8018466:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
 801846a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801846e:	4bca      	ldr	r3, [pc, #808]	; (8018798 <iNemoEngine_API_Update+0x3a18>)
 8018470:	edc6 7a52 	vstr	s15, [r6, #328]	; 0x148
 8018474:	eddf 7ac9 	vldr	s15, [pc, #804]	; 801879c <iNemoEngine_API_Update+0x3a1c>
 8018478:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
 801847c:	4bc8      	ldr	r3, [pc, #800]	; (80187a0 <iNemoEngine_API_Update+0x3a20>)
 801847e:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
 8018482:	4631      	mov	r1, r6
 8018484:	ee66 5a25 	vmul.f32	s11, s12, s11
 8018488:	ee26 5a05 	vmul.f32	s10, s12, s10
 801848c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018490:	4bc4      	ldr	r3, [pc, #784]	; (80187a4 <iNemoEngine_API_Update+0x3a24>)
 8018492:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
 8018496:	4bc4      	ldr	r3, [pc, #784]	; (80187a8 <iNemoEngine_API_Update+0x3a28>)
 8018498:	f8c6 512c 	str.w	r5, [r6, #300]	; 0x12c
 801849c:	f8c6 50cc 	str.w	r5, [r6, #204]	; 0xcc
 80184a0:	f8c6 5134 	str.w	r5, [r6, #308]	; 0x134
 80184a4:	edc6 7a3a 	vstr	s15, [r6, #232]	; 0xe8
 80184a8:	edc6 5a32 	vstr	s11, [r6, #200]	; 0xc8
 80184ac:	edc6 5a4c 	vstr	s11, [r6, #304]	; 0x130
 80184b0:	ed86 5a36 	vstr	s10, [r6, #216]	; 0xd8
 80184b4:	f8c1 31d4 	str.w	r3, [r1, #468]	; 0x1d4
 80184b8:	f8c1 31fc 	str.w	r3, [r1, #508]	; 0x1fc
 80184bc:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
 80184c0:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 80184c4:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 80184c8:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 80184cc:	f8c1 32c4 	str.w	r3, [r1, #708]	; 0x2c4
 80184d0:	f8c1 32ec 	str.w	r3, [r1, #748]	; 0x2ec
 80184d4:	f8c1 3314 	str.w	r3, [r1, #788]	; 0x314
 80184d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80184dc:	ed81 5a54 	vstr	s10, [r1, #336]	; 0x150
 80184e0:	eddf 3ab2 	vldr	s7, [pc, #712]	; 80187ac <iNemoEngine_API_Update+0x3a2c>
 80184e4:	ed9f 4ab2 	vldr	s8, [pc, #712]	; 80187b0 <iNemoEngine_API_Update+0x3a30>
 80184e8:	f8c1 317c 	str.w	r3, [r1, #380]	; 0x17c
 80184ec:	f8c1 311c 	str.w	r3, [r1, #284]	; 0x11c
 80184f0:	f8c1 3124 	str.w	r3, [r1, #292]	; 0x124
 80184f4:	eddf 6aaf 	vldr	s13, [pc, #700]	; 80187b4 <iNemoEngine_API_Update+0x3a34>
 80184f8:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 80187b8 <iNemoEngine_API_Update+0x3a38>
 80184fc:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80187bc <iNemoEngine_API_Update+0x3a3c>
 8018500:	eddf 4aaf 	vldr	s9, [pc, #700]	; 80187c0 <iNemoEngine_API_Update+0x3a40>
 8018504:	4aaf      	ldr	r2, [pc, #700]	; (80187c4 <iNemoEngine_API_Update+0x3a44>)
 8018506:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 80187e4 <iNemoEngine_API_Update+0x3a64>
 801850a:	4faf      	ldr	r7, [pc, #700]	; (80187c8 <iNemoEngine_API_Update+0x3a48>)
 801850c:	4eaf      	ldr	r6, [pc, #700]	; (80187cc <iNemoEngine_API_Update+0x3a4c>)
 801850e:	4db0      	ldr	r5, [pc, #704]	; (80187d0 <iNemoEngine_API_Update+0x3a50>)
 8018510:	48b0      	ldr	r0, [pc, #704]	; (80187d4 <iNemoEngine_API_Update+0x3a54>)
 8018512:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 80187e8 <iNemoEngine_API_Update+0x3a68>
 8018516:	edc1 3a3d 	vstr	s7, [r1, #244]	; 0xf4
 801851a:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 801851e:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 8018522:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
 8018526:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801852a:	ee66 6a26 	vmul.f32	s13, s12, s13
 801852e:	ee26 7a07 	vmul.f32	s14, s12, s14
 8018532:	ee66 7a27 	vmul.f32	s15, s12, s15
 8018536:	ee66 2a23 	vmul.f32	s5, s12, s7
 801853a:	ee26 3a02 	vmul.f32	s6, s12, s4
 801853e:	f8c1 3114 	str.w	r3, [r1, #276]	; 0x114
 8018542:	ee66 4a24 	vmul.f32	s9, s12, s9
 8018546:	4ba4      	ldr	r3, [pc, #656]	; (80187d8 <iNemoEngine_API_Update+0x3a58>)
 8018548:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184
 801854c:	ee66 1a04 	vmul.f32	s3, s12, s8
 8018550:	4ba2      	ldr	r3, [pc, #648]	; (80187dc <iNemoEngine_API_Update+0x3a5c>)
 8018552:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
 8018556:	f8c1 c15c 	str.w	ip, [r1, #348]	; 0x15c
 801855a:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
 801855e:	f8c1 6164 	str.w	r6, [r1, #356]	; 0x164
 8018562:	f8c1 516c 	str.w	r5, [r1, #364]	; 0x16c
 8018566:	f8c1 0174 	str.w	r0, [r1, #372]	; 0x174
 801856a:	edc1 1a46 	vstr	s3, [r1, #280]	; 0x118
 801856e:	edc1 4a60 	vstr	s9, [r1, #384]	; 0x180
 8018572:	f8c1 e19c 	str.w	lr, [r1, #412]	; 0x19c
 8018576:	ed81 2a66 	vstr	s4, [r1, #408]	; 0x198
 801857a:	ed81 4a65 	vstr	s8, [r1, #404]	; 0x194
 801857e:	f8c1 2154 	str.w	r2, [r1, #340]	; 0x154
 8018582:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
 8018586:	edc1 6a3c 	vstr	s13, [r1, #240]	; 0xf0
 801858a:	edc1 6a56 	vstr	s13, [r1, #344]	; 0x158
 801858e:	ed81 7a3e 	vstr	s14, [r1, #248]	; 0xf8
 8018592:	ed81 7a58 	vstr	s14, [r1, #352]	; 0x160
 8018596:	edc1 7a40 	vstr	s15, [r1, #256]	; 0x100
 801859a:	edc1 7a5a 	vstr	s15, [r1, #360]	; 0x168
 801859e:	edc1 2a42 	vstr	s5, [r1, #264]	; 0x108
 80185a2:	edc1 2a5c 	vstr	s5, [r1, #368]	; 0x170
 80185a6:	ed81 3a44 	vstr	s6, [r1, #272]	; 0x110
 80185aa:	ed81 3a5e 	vstr	s6, [r1, #376]	; 0x178
 80185ae:	ed81 6a48 	vstr	s12, [r1, #288]	; 0x120
 80185b2:	ed81 6a62 	vstr	s12, [r1, #392]	; 0x188
 80185b6:	edc1 5a64 	vstr	s11, [r1, #400]	; 0x190
 80185ba:	784b      	ldrb	r3, [r1, #1]
 80185bc:	b18b      	cbz	r3, 80185e2 <iNemoEngine_API_Update+0x3862>
 80185be:	f501 6214 	add.w	r2, r1, #2368	; 0x940
 80185c2:	9225      	str	r2, [sp, #148]	; 0x94
 80185c4:	f601 1348 	addw	r3, r1, #2376	; 0x948
 80185c8:	f601 1244 	addw	r2, r1, #2372	; 0x944
 80185cc:	9226      	str	r2, [sp, #152]	; 0x98
 80185ce:	9327      	str	r3, [sp, #156]	; 0x9c
 80185d0:	9a06      	ldr	r2, [sp, #24]
 80185d2:	2300      	movs	r3, #0
 80185d4:	7053      	strb	r3, [r2, #1]
 80185d6:	f7fc bee8 	b.w	80153aa <iNemoEngine_API_Update+0x62a>
 80185da:	ed93 ca4b 	vldr	s24, [r3, #300]	; 0x12c
 80185de:	f7fd bfc0 	b.w	8016562 <iNemoEngine_API_Update+0x17e2>
 80185e2:	9a06      	ldr	r2, [sp, #24]
 80185e4:	f502 6314 	add.w	r3, r2, #2368	; 0x940
 80185e8:	f602 1144 	addw	r1, r2, #2372	; 0x944
 80185ec:	f602 1048 	addw	r0, r2, #2376	; 0x948
 80185f0:	9325      	str	r3, [sp, #148]	; 0x94
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
 80185f8:	680b      	ldr	r3, [r1, #0]
 80185fa:	f8c2 31c0 	str.w	r3, [r2, #448]	; 0x1c0
 80185fe:	6803      	ldr	r3, [r0, #0]
 8018600:	9126      	str	r1, [sp, #152]	; 0x98
 8018602:	9027      	str	r0, [sp, #156]	; 0x9c
 8018604:	f8c2 31c4 	str.w	r3, [r2, #452]	; 0x1c4
 8018608:	e7e2      	b.n	80185d0 <iNemoEngine_API_Update+0x3850>
 801860a:	f205 47b4 	addw	r7, r5, #1204	; 0x4b4
 801860e:	ed97 0a00 	vldr	s0, [r7]
 8018612:	f505 6097 	add.w	r0, r5, #1208	; 0x4b8
 8018616:	f7f8 fa5f 	bl	8010ad8 <dataDerivative5>
 801861a:	f205 6824 	addw	r8, r5, #1572	; 0x624
 801861e:	eef0 3a40 	vmov.f32	s7, s0
 8018622:	f505 60c5 	add.w	r0, r5, #1576	; 0x628
 8018626:	ed98 0a00 	vldr	s0, [r8]
 801862a:	f7f8 fa55 	bl	8010ad8 <dataDerivative5>
 801862e:	f205 7394 	addw	r3, r5, #1940	; 0x794
 8018632:	eeb0 3a40 	vmov.f32	s6, s0
 8018636:	f505 60f3 	add.w	r0, r5, #1944	; 0x798
 801863a:	ed93 0a00 	vldr	s0, [r3]
 801863e:	f7f8 fa4b 	bl	8010ad8 <dataDerivative5>
 8018642:	f9b5 3976 	ldrsh.w	r3, [r5, #2422]	; 0x976
 8018646:	ee07 3a90 	vmov	s15, r3
 801864a:	3301      	adds	r3, #1
 801864c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8018650:	ee07 3a90 	vmov	s15, r3
 8018654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801865c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8018660:	f605 106c 	addw	r0, r5, #2412	; 0x96c
 8018664:	f605 1168 	addw	r1, r5, #2408	; 0x968
 8018668:	f505 6217 	add.w	r2, r5, #2416	; 0x970
 801866c:	b21b      	sxth	r3, r3
 801866e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8018672:	ed90 7a00 	vldr	s14, [r0]
 8018676:	ed91 5a00 	vldr	s10, [r1]
 801867a:	eef0 7a63 	vmov.f32	s15, s7
 801867e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018682:	eeb0 7a43 	vmov.f32	s14, s6
 8018686:	eea5 7a85 	vfma.f32	s14, s11, s10
 801868a:	ed92 5a00 	vldr	s10, [r2]
 801868e:	eef0 6a40 	vmov.f32	s13, s0
 8018692:	eee5 6a85 	vfma.f32	s13, s11, s10
 8018696:	ee67 7a86 	vmul.f32	s15, s15, s12
 801869a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801869e:	ee66 6a86 	vmul.f32	s13, s13, s12
 80186a2:	edc0 7a00 	vstr	s15, [r0]
 80186a6:	ed81 7a00 	vstr	s14, [r1]
 80186aa:	edc2 6a00 	vstr	s13, [r2]
 80186ae:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 80186b2:	f47c ab8d 	bne.w	8014dd0 <iNemoEngine_API_Update+0x50>
 80186b6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80186ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80186be:	ee66 6a86 	vmul.f32	s13, s13, s12
 80186c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80186c6:	2300      	movs	r3, #0
 80186c8:	ed85 7a07 	vstr	s14, [r5, #28]
 80186cc:	edc5 6a08 	vstr	s13, [r5, #32]
 80186d0:	edc5 7a06 	vstr	s15, [r5, #24]
 80186d4:	6003      	str	r3, [r0, #0]
 80186d6:	600b      	str	r3, [r1, #0]
 80186d8:	6013      	str	r3, [r2, #0]
 80186da:	2300      	movs	r3, #0
 80186dc:	f8a5 3976 	strh.w	r3, [r5, #2422]	; 0x976
 80186e0:	f885 3978 	strb.w	r3, [r5, #2424]	; 0x978
 80186e4:	f7fc bb74 	b.w	8014dd0 <iNemoEngine_API_Update+0x50>
 80186e8:	9906      	ldr	r1, [sp, #24]
 80186ea:	f8d1 21bc 	ldr.w	r2, [r1, #444]	; 0x1bc
 80186ee:	9295      	str	r2, [sp, #596]	; 0x254
 80186f0:	f8d1 21c0 	ldr.w	r2, [r1, #448]	; 0x1c0
 80186f4:	9296      	str	r2, [sp, #600]	; 0x258
 80186f6:	f8d1 21c4 	ldr.w	r2, [r1, #452]	; 0x1c4
 80186fa:	9297      	str	r2, [sp, #604]	; 0x25c
 80186fc:	2200      	movs	r2, #0
 80186fe:	464b      	mov	r3, r9
 8018700:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018704:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 8018708:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 801870c:	f7fe bc8f 	b.w	801702e <iNemoEngine_API_Update+0x22ae>
 8018710:	ed92 fa49 	vldr	s30, [r2, #292]	; 0x124
 8018714:	4613      	mov	r3, r2
 8018716:	f7fd bdd2 	b.w	80162be <iNemoEngine_API_Update+0x153e>
 801871a:	ed93 ca63 	vldr	s24, [r3, #396]	; 0x18c
 801871e:	f7fd bf20 	b.w	8016562 <iNemoEngine_API_Update+0x17e2>
 8018722:	eddf 8a2f 	vldr	s17, [pc, #188]	; 80187e0 <iNemoEngine_API_Update+0x3a60>
 8018726:	f7fd b87e 	b.w	8015826 <iNemoEngine_API_Update+0xaa6>
 801872a:	ed9f ca2d 	vldr	s24, [pc, #180]	; 80187e0 <iNemoEngine_API_Update+0x3a60>
 801872e:	f7fd b90e 	b.w	801594e <iNemoEngine_API_Update+0xbce>
 8018732:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 80187e0 <iNemoEngine_API_Update+0x3a60>
 8018736:	f7fc bf8c 	b.w	8015652 <iNemoEngine_API_Update+0x8d2>
 801873a:	eddf 8a29 	vldr	s17, [pc, #164]	; 80187e0 <iNemoEngine_API_Update+0x3a60>
 801873e:	f7fc bf5d 	b.w	80155fc <iNemoEngine_API_Update+0x87c>
 8018742:	ed9f 8a27 	vldr	s16, [pc, #156]	; 80187e0 <iNemoEngine_API_Update+0x3a60>
 8018746:	f7fd b92d 	b.w	80159a4 <iNemoEngine_API_Update+0xc24>
 801874a:	ed9f ca25 	vldr	s24, [pc, #148]	; 80187e0 <iNemoEngine_API_Update+0x3a60>
 801874e:	f7fd b83f 	b.w	80157d0 <iNemoEngine_API_Update+0xa50>
 8018752:	ed9f ca23 	vldr	s24, [pc, #140]	; 80187e0 <iNemoEngine_API_Update+0x3a60>
 8018756:	f7fc bfa7 	b.w	80156a8 <iNemoEngine_API_Update+0x928>
 801875a:	ed9f 8a21 	vldr	s16, [pc, #132]	; 80187e0 <iNemoEngine_API_Update+0x3a60>
 801875e:	f7fd b80c 	b.w	801577a <iNemoEngine_API_Update+0x9fa>
 8018762:	eddf 8a1f 	vldr	s17, [pc, #124]	; 80187e0 <iNemoEngine_API_Update+0x3a60>
 8018766:	f7fd b8c7 	b.w	80158f8 <iNemoEngine_API_Update+0xb78>
 801876a:	bf00      	nop
 801876c:	bf666666 	.word	0xbf666666
 8018770:	3d072b02 	.word	0x3d072b02
 8018774:	3ca3d70a 	.word	0x3ca3d70a
 8018778:	3d4ccccd 	.word	0x3d4ccccd
 801877c:	3cb43958 	.word	0x3cb43958
 8018780:	3cf5c28f 	.word	0x3cf5c28f
 8018784:	3eb33333 	.word	0x3eb33333
 8018788:	3d75c28f 	.word	0x3d75c28f
 801878c:	3ee66666 	.word	0x3ee66666
 8018790:	3f866666 	.word	0x3f866666
 8018794:	3d23d70a 	.word	0x3d23d70a
 8018798:	3f8ccccd 	.word	0x3f8ccccd
 801879c:	3d8f5c29 	.word	0x3d8f5c29
 80187a0:	3f933333 	.word	0x3f933333
 80187a4:	3ebd70a4 	.word	0x3ebd70a4
 80187a8:	40a00000 	.word	0x40a00000
 80187ac:	3ecccccd 	.word	0x3ecccccd
 80187b0:	3f4ccccd 	.word	0x3f4ccccd
 80187b4:	3dcccccd 	.word	0x3dcccccd
 80187b8:	3e4ccccd 	.word	0x3e4ccccd
 80187bc:	3e99999a 	.word	0x3e99999a
 80187c0:	3f666666 	.word	0x3f666666
 80187c4:	3f99999a 	.word	0x3f99999a
 80187c8:	3f19999a 	.word	0x3f19999a
 80187cc:	3fb9999a 	.word	0x3fb9999a
 80187d0:	3fcccccd 	.word	0x3fcccccd
 80187d4:	3fe66666 	.word	0x3fe66666
 80187d8:	40200000 	.word	0x40200000
 80187dc:	40400000 	.word	0x40400000
 80187e0:	80000000 	.word	0x80000000
 80187e4:	3fa66666 	.word	0x3fa66666
 80187e8:	3f333333 	.word	0x3f333333
 80187ec:	3e4cccce 	.word	0x3e4cccce
 80187f0:	3eaaaaab 	.word	0x3eaaaaab
 80187f4:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 80187f8:	2a00      	cmp	r2, #0
 80187fa:	f040 85bc 	bne.w	8019376 <iNemoEngine_API_Update+0x45f6>
 80187fe:	9906      	ldr	r1, [sp, #24]
 8018800:	ed5f 8a06 	vldr	s17, [pc, #-24]	; 80187ec <iNemoEngine_API_Update+0x3a6c>
 8018804:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 8018808:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 80187f0 <iNemoEngine_API_Update+0x3a70>
 801880c:	3301      	adds	r3, #1
 801880e:	b29b      	uxth	r3, r3
 8018810:	2b31      	cmp	r3, #49	; 0x31
 8018812:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 8018816:	bf98      	it	ls
 8018818:	eef0 8a67 	vmovls.f32	s17, s15
 801881c:	460b      	mov	r3, r1
 801881e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8018822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8018826:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 801882a:	f000 8599 	beq.w	8019360 <iNemoEngine_API_Update+0x45e0>
 801882e:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8018832:	f47f a83a 	bne.w	80178aa <iNemoEngine_API_Update+0x2b2a>
 8018836:	9a06      	ldr	r2, [sp, #24]
 8018838:	2301      	movs	r3, #1
 801883a:	f882 31a4 	strb.w	r3, [r2, #420]	; 0x1a4
 801883e:	9a06      	ldr	r2, [sp, #24]
 8018840:	edcd 6a03 	vstr	s13, [sp, #12]
 8018844:	f502 63c3 	add.w	r3, r2, #1560	; 0x618
 8018848:	ed93 5a00 	vldr	s10, [r3]
 801884c:	f502 63f1 	add.w	r3, r2, #1928	; 0x788
 8018850:	ed93 7a00 	vldr	s14, [r3]
 8018854:	f202 6314 	addw	r3, r2, #1556	; 0x614
 8018858:	edd3 4a00 	vldr	s9, [r3]
 801885c:	ee25 4a05 	vmul.f32	s8, s10, s10
 8018860:	f202 7384 	addw	r3, r2, #1924	; 0x784
 8018864:	eea4 4aa4 	vfma.f32	s8, s9, s9
 8018868:	a93d      	add	r1, sp, #244	; 0xf4
 801886a:	a843      	add	r0, sp, #268	; 0x10c
 801886c:	ed93 6a00 	vldr	s12, [r3]
 8018870:	f202 631c 	addw	r3, r2, #1564	; 0x61c
 8018874:	edd3 7a00 	vldr	s15, [r3]
 8018878:	eea7 4aa7 	vfma.f32	s8, s15, s15
 801887c:	f202 738c 	addw	r3, r2, #1932	; 0x78c
 8018880:	465e      	mov	r6, fp
 8018882:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8018886:	eeb1 3ac4 	vsqrt.f32	s6, s8
 801888a:	465a      	mov	r2, fp
 801888c:	4655      	mov	r5, sl
 801888e:	4657      	mov	r7, sl
 8018890:	acae      	add	r4, sp, #696	; 0x2b8
 8018892:	ee67 5a07 	vmul.f32	s11, s14, s14
 8018896:	ee83 4a83 	vdiv.f32	s8, s7, s6
 801889a:	eee6 5a06 	vfma.f32	s11, s12, s12
 801889e:	ee67 7a84 	vmul.f32	s15, s15, s8
 80188a2:	ee25 5a04 	vmul.f32	s10, s10, s8
 80188a6:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 80188aa:	edd3 7a00 	vldr	s15, [r3]
 80188ae:	ed8d 5a3e 	vstr	s10, [sp, #248]	; 0xf8
 80188b2:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80188b6:	ee64 4a84 	vmul.f32	s9, s9, s8
 80188ba:	eeb1 5ae5 	vsqrt.f32	s10, s11
 80188be:	edcd 4a3d 	vstr	s9, [sp, #244]	; 0xf4
 80188c2:	eec3 5a85 	vdiv.f32	s11, s7, s10
 80188c6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80188ca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80188ce:	ee26 6a25 	vmul.f32	s12, s12, s11
 80188d2:	ed8d 7a44 	vstr	s14, [sp, #272]	; 0x110
 80188d6:	edcd 7a45 	vstr	s15, [sp, #276]	; 0x114
 80188da:	ed8d 6a43 	vstr	s12, [sp, #268]	; 0x10c
 80188de:	f7f8 f9e1 	bl	8010ca4 <getRotationMatrix>
 80188e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80188e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80188e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80188e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80188ea:	6836      	ldr	r6, [r6, #0]
 80188ec:	602e      	str	r6, [r5, #0]
 80188ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80188f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80188f2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80188f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80188f6:	edda 7a00 	vldr	s15, [sl]
 80188fa:	ed9a 7a01 	vldr	s14, [sl, #4]
 80188fe:	eddd 6a03 	vldr	s13, [sp, #12]
 8018902:	6026      	str	r6, [r4, #0]
 8018904:	eef0 7ae7 	vabs.f32	s15, s15
 8018908:	eeb0 7ac7 	vabs.f32	s14, s14
 801890c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018914:	f140 8407 	bpl.w	8019126 <iNemoEngine_API_Update+0x43a6>
 8018918:	2304      	movs	r3, #4
 801891a:	2000      	movs	r0, #0
 801891c:	930c      	str	r3, [sp, #48]	; 0x30
 801891e:	469e      	mov	lr, r3
 8018920:	eef0 7a47 	vmov.f32	s15, s14
 8018924:	2103      	movs	r1, #3
 8018926:	2707      	movs	r7, #7
 8018928:	f04f 0c06 	mov.w	ip, #6
 801892c:	4603      	mov	r3, r0
 801892e:	2601      	movs	r6, #1
 8018930:	ed9a 7a02 	vldr	s14, [sl, #8]
 8018934:	eeb0 7ac7 	vabs.f32	s14, s14
 8018938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801893c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018940:	f340 8453 	ble.w	80191ea <iNemoEngine_API_Update+0x446a>
 8018944:	2306      	movs	r3, #6
 8018946:	2708      	movs	r7, #8
 8018948:	2104      	movs	r1, #4
 801894a:	9303      	str	r3, [sp, #12]
 801894c:	f04f 0c07 	mov.w	ip, #7
 8018950:	f04f 0e05 	mov.w	lr, #5
 8018954:	970c      	str	r7, [sp, #48]	; 0x30
 8018956:	4608      	mov	r0, r1
 8018958:	2200      	movs	r2, #0
 801895a:	2301      	movs	r3, #1
 801895c:	2602      	movs	r6, #2
 801895e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018960:	4450      	add	r0, sl
 8018962:	4454      	add	r4, sl
 8018964:	ed90 6a00 	vldr	s12, [r0]
 8018968:	ed94 7a00 	vldr	s14, [r4]
 801896c:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8018970:	a8ae      	add	r0, sp, #696	; 0x2b8
 8018972:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8018976:	acae      	add	r4, sp, #696	; 0x2b8
 8018978:	adae      	add	r5, sp, #696	; 0x2b8
 801897a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801897e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8018982:	edc0 7a00 	vstr	s15, [r0]
 8018986:	ed94 7a00 	vldr	s14, [r4]
 801898a:	edd5 7a00 	vldr	s15, [r5]
 801898e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8018992:	ed84 6a00 	vstr	s12, [r4]
 8018996:	edd0 5a00 	vldr	s11, [r0]
 801899a:	a8ae      	add	r0, sp, #696	; 0x2b8
 801899c:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80189a0:	eb00 008e 	add.w	r0, r0, lr, lsl #2
 80189a4:	ed90 7a00 	vldr	s14, [r0]
 80189a8:	edd5 7a00 	vldr	s15, [r5]
 80189ac:	eee5 7ac7 	vfms.f32	s15, s11, s14
 80189b0:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80189b4:	9404      	str	r4, [sp, #16]
 80189b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80189b8:	edc5 7a00 	vstr	s15, [r5]
 80189bc:	ed90 7a00 	vldr	s14, [r0]
 80189c0:	a8ae      	add	r0, sp, #696	; 0x2b8
 80189c2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80189c6:	edd0 7a00 	vldr	s15, [r0]
 80189ca:	eee6 7a47 	vfms.f32	s15, s12, s14
 80189ce:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80189d2:	00bc      	lsls	r4, r7, #2
 80189d4:	9405      	str	r4, [sp, #20]
 80189d6:	edc0 7a00 	vstr	s15, [r0]
 80189da:	acae      	add	r4, sp, #696	; 0x2b8
 80189dc:	a8ae      	add	r0, sp, #696	; 0x2b8
 80189de:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 80189e2:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80189e6:	ed90 5a00 	vldr	s10, [r0]
 80189ea:	ed94 7a00 	vldr	s14, [r4]
 80189ee:	eea5 7ac5 	vfms.f32	s14, s11, s10
 80189f2:	0097      	lsls	r7, r2, #2
 80189f4:	eef0 7ae7 	vabs.f32	s15, s15
 80189f8:	ed84 7a00 	vstr	s14, [r4]
 80189fc:	9c03      	ldr	r4, [sp, #12]
 80189fe:	edd0 5a00 	vldr	s11, [r0]
 8018a02:	a8ae      	add	r0, sp, #696	; 0x2b8
 8018a04:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8018a08:	ed90 7a00 	vldr	s14, [r0]
 8018a0c:	eea6 7a65 	vfms.f32	s14, s12, s11
 8018a10:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8018a14:	008c      	lsls	r4, r1, #2
 8018a16:	ed80 7a00 	vstr	s14, [r0]
 8018a1a:	ed95 7a00 	vldr	s14, [r5]
 8018a1e:	eeb0 7ac7 	vabs.f32	s14, s14
 8018a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018a26:	00b0      	lsls	r0, r6, #2
 8018a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a2c:	9003      	str	r0, [sp, #12]
 8018a2e:	ea4f 0583 	mov.w	r5, r3, lsl #2
 8018a32:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8018a36:	dd0a      	ble.n	8018a4e <iNemoEngine_API_Update+0x3cce>
 8018a38:	4618      	mov	r0, r3
 8018a3a:	4613      	mov	r3, r2
 8018a3c:	4602      	mov	r2, r0
 8018a3e:	4674      	mov	r4, lr
 8018a40:	4650      	mov	r0, sl
 8018a42:	463d      	mov	r5, r7
 8018a44:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8018a48:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8018a4c:	0097      	lsls	r7, r2, #2
 8018a4e:	a9ae      	add	r1, sp, #696	; 0x2b8
 8018a50:	448e      	add	lr, r1
 8018a52:	440c      	add	r4, r1
 8018a54:	ed9e 7a00 	vldr	s14, [lr]
 8018a58:	edd4 7a00 	vldr	s15, [r4]
 8018a5c:	edcd 6a03 	vstr	s13, [sp, #12]
 8018a60:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8018a64:	4408      	add	r0, r1
 8018a66:	4451      	add	r1, sl
 8018a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018a6c:	ed8e 2a00 	vstr	s4, [lr]
 8018a70:	ed90 6a00 	vldr	s12, [r0]
 8018a74:	edd1 7a00 	vldr	s15, [r1]
 8018a78:	eee2 7a46 	vfms.f32	s15, s4, s12
 8018a7c:	edc1 7a00 	vstr	s15, [r1]
 8018a80:	9905      	ldr	r1, [sp, #20]
 8018a82:	ed90 3a00 	vldr	s6, [r0]
 8018a86:	ed94 6a00 	vldr	s12, [r4]
 8018a8a:	a8ae      	add	r0, sp, #696	; 0x2b8
 8018a8c:	4401      	add	r1, r0
 8018a8e:	edd1 3a00 	vldr	s7, [r1]
 8018a92:	9904      	ldr	r1, [sp, #16]
 8018a94:	4401      	add	r1, r0
 8018a96:	00b0      	lsls	r0, r6, #2
 8018a98:	edd1 4a00 	vldr	s9, [r1]
 8018a9c:	f500 61b2 	add.w	r1, r0, #1424	; 0x590
 8018aa0:	4469      	add	r1, sp
 8018aa2:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8018aa6:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8018aaa:	edd1 7a00 	vldr	s15, [r1]
 8018aae:	a9ae      	add	r1, sp, #696	; 0x2b8
 8018ab0:	4401      	add	r1, r0
 8018ab2:	ee87 4a06 	vdiv.f32	s8, s14, s12
 8018ab6:	a8ae      	add	r0, sp, #696	; 0x2b8
 8018ab8:	ed91 6a00 	vldr	s12, [r1]
 8018abc:	f505 61b2 	add.w	r1, r5, #1424	; 0x590
 8018ac0:	4469      	add	r1, sp
 8018ac2:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8018ac6:	ee87 5a06 	vdiv.f32	s10, s14, s12
 8018aca:	4405      	add	r5, r0
 8018acc:	ed91 7a00 	vldr	s14, [r1]
 8018ad0:	edd5 5a00 	vldr	s11, [r5]
 8018ad4:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8018ad8:	4469      	add	r1, sp
 8018ada:	4407      	add	r7, r0
 8018adc:	f5a1 717c 	sub.w	r1, r1, #1008	; 0x3f0
 8018ae0:	edd7 1a00 	vldr	s3, [r7]
 8018ae4:	ed91 6a00 	vldr	s12, [r1]
 8018ae8:	eea5 7ae7 	vfms.f32	s14, s11, s15
 8018aec:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8018af0:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8018af4:	eea1 6ae7 	vfms.f32	s12, s3, s15
 8018af8:	4601      	mov	r1, r0
 8018afa:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 8018afe:	ed91 1a00 	vldr	s2, [r1]
 8018b02:	eea2 6a47 	vfms.f32	s12, s4, s14
 8018b06:	f50d 61b2 	add.w	r1, sp, #1424	; 0x590
 8018b0a:	f5a0 7079 	sub.w	r0, r0, #996	; 0x3e4
 8018b0e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8018b12:	ee22 6a86 	vmul.f32	s12, s5, s12
 8018b16:	460b      	mov	r3, r1
 8018b18:	eea3 7a46 	vfms.f32	s14, s6, s12
 8018b1c:	f5a1 7179 	sub.w	r1, r1, #996	; 0x3e4
 8018b20:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8018b24:	eee3 7ac6 	vfms.f32	s15, s7, s12
 8018b28:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018b2c:	ed8b 6a02 	vstr	s12, [fp, #8]
 8018b30:	eee4 7ac7 	vfms.f32	s15, s9, s14
 8018b34:	ed8b 7a01 	vstr	s14, [fp, #4]
 8018b38:	ee65 7a27 	vmul.f32	s15, s10, s15
 8018b3c:	ed90 7a00 	vldr	s14, [r0]
 8018b40:	ed91 6a00 	vldr	s12, [r1]
 8018b44:	edcb 7a00 	vstr	s15, [fp]
 8018b48:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
 8018b4c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8018b50:	edd3 7a00 	vldr	s15, [r3]
 8018b54:	f5a1 7376 	sub.w	r3, r1, #984	; 0x3d8
 8018b58:	edd3 0a00 	vldr	s1, [r3]
 8018b5c:	f5a1 7279 	sub.w	r2, r1, #996	; 0x3e4
 8018b60:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8018b64:	4658      	mov	r0, fp
 8018b66:	a952      	add	r1, sp, #328	; 0x148
 8018b68:	eee1 7a65 	vfms.f32	s15, s2, s11
 8018b6c:	edd2 5a00 	vldr	s11, [r2]
 8018b70:	eee1 0a61 	vfms.f32	s1, s2, s3
 8018b74:	eee1 5ac7 	vfms.f32	s11, s3, s14
 8018b78:	eef0 1a60 	vmov.f32	s3, s1
 8018b7c:	eee2 5a46 	vfms.f32	s11, s4, s12
 8018b80:	eee2 1a67 	vfms.f32	s3, s4, s15
 8018b84:	ee62 5aa5 	vmul.f32	s11, s5, s11
 8018b88:	ee62 2aa1 	vmul.f32	s5, s5, s3
 8018b8c:	eea3 6a65 	vfms.f32	s12, s6, s11
 8018b90:	eee2 7ac3 	vfms.f32	s15, s5, s6
 8018b94:	eea2 1ae3 	vfms.f32	s2, s5, s7
 8018b98:	eea3 7ae5 	vfms.f32	s14, s7, s11
 8018b9c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8018ba0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018ba4:	edcb 5a05 	vstr	s11, [fp, #20]
 8018ba8:	eef0 5a41 	vmov.f32	s11, s2
 8018bac:	eea4 7ac6 	vfms.f32	s14, s9, s12
 8018bb0:	eee7 5ae4 	vfms.f32	s11, s15, s9
 8018bb4:	ee25 7a07 	vmul.f32	s14, s10, s14
 8018bb8:	ee65 5a25 	vmul.f32	s11, s10, s11
 8018bbc:	ed8b 6a04 	vstr	s12, [fp, #16]
 8018bc0:	ed8b 7a03 	vstr	s14, [fp, #12]
 8018bc4:	edcb 2a08 	vstr	s5, [fp, #32]
 8018bc8:	edcb 7a07 	vstr	s15, [fp, #28]
 8018bcc:	edcb 5a06 	vstr	s11, [fp, #24]
 8018bd0:	f7f7 ffc8 	bl	8010b64 <b_dcm2q>
 8018bd4:	ed9d 7a53 	vldr	s14, [sp, #332]	; 0x14c
 8018bd8:	eddd 7a54 	vldr	s15, [sp, #336]	; 0x150
 8018bdc:	ed9d 6a52 	vldr	s12, [sp, #328]	; 0x148
 8018be0:	9b06      	ldr	r3, [sp, #24]
 8018be2:	eddd 6a03 	vldr	s13, [sp, #12]
 8018be6:	f893 31a4 	ldrb.w	r3, [r3, #420]	; 0x1a4
 8018bea:	ee37 7a07 	vadd.f32	s14, s14, s14
 8018bee:	ee36 6a06 	vadd.f32	s12, s12, s12
 8018bf2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8018bf6:	ed8d 6a3d 	vstr	s12, [sp, #244]	; 0xf4
 8018bfa:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8018bfe:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	f43e ae54 	beq.w	80178b0 <iNemoEngine_API_Update+0x2b30>
 8018c08:	9906      	ldr	r1, [sp, #24]
 8018c0a:	2200      	movs	r2, #0
 8018c0c:	464b      	mov	r3, r9
 8018c0e:	f881 21a0 	strb.w	r2, [r1, #416]	; 0x1a0
 8018c12:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8018c16:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8018c1a:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8018c1e:	f7fe ba06 	b.w	801702e <iNemoEngine_API_Update+0x22ae>
 8018c22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018c26:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8018c2a:	edd2 3a31 	vldr	s7, [r2, #196]	; 0xc4
 8018c2e:	edd2 7a33 	vldr	s15, [r2, #204]	; 0xcc
 8018c32:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8018c36:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018c3a:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8018c3e:	edd2 7a34 	vldr	s15, [r2, #208]	; 0xd0
 8018c42:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c4a:	ee3f fa23 	vadd.f32	s30, s30, s7
 8018c4e:	f6fe ac6e 	blt.w	801752e <iNemoEngine_API_Update+0x27ae>
 8018c52:	9b06      	ldr	r3, [sp, #24]
 8018c54:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8018c58:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c60:	f140 837a 	bpl.w	8019358 <iNemoEngine_API_Update+0x45d8>
 8018c64:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
 8018c68:	ed93 4a37 	vldr	s8, [r3, #220]	; 0xdc
 8018c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018c70:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018c74:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018c78:	ee64 7a27 	vmul.f32	s15, s8, s15
 8018c7c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8018c80:	ee3f fa23 	vadd.f32	s30, s30, s7
 8018c84:	9b06      	ldr	r3, [sp, #24]
 8018c86:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8018c8a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c92:	f6fe ac6d 	blt.w	8017570 <iNemoEngine_API_Update+0x27f0>
 8018c96:	9b06      	ldr	r3, [sp, #24]
 8018c98:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 8018c9c:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ca4:	f140 82fd 	bpl.w	80192a2 <iNemoEngine_API_Update+0x4522>
 8018ca8:	edd3 3a39 	vldr	s7, [r3, #228]	; 0xe4
 8018cac:	ed93 4a3b 	vldr	s8, [r3, #236]	; 0xec
 8018cb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018cb4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018cb8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018cbc:	ee64 7a27 	vmul.f32	s15, s8, s15
 8018cc0:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8018cc4:	ee3f fa23 	vadd.f32	s30, s30, s7
 8018cc8:	9b06      	ldr	r3, [sp, #24]
 8018cca:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 8018cce:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cd6:	f6fe ac6d 	blt.w	80175b4 <iNemoEngine_API_Update+0x2834>
 8018cda:	9b06      	ldr	r3, [sp, #24]
 8018cdc:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8018ce0:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce8:	f140 831a 	bpl.w	8019320 <iNemoEngine_API_Update+0x45a0>
 8018cec:	edd3 3a3d 	vldr	s7, [r3, #244]	; 0xf4
 8018cf0:	ed93 4a3f 	vldr	s8, [r3, #252]	; 0xfc
 8018cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018cf8:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018cfc:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018d00:	ee64 7a27 	vmul.f32	s15, s8, s15
 8018d04:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8018d08:	ee3f fa23 	vadd.f32	s30, s30, s7
 8018d0c:	9b06      	ldr	r3, [sp, #24]
 8018d0e:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8018d12:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d1a:	f6fe ac6d 	blt.w	80175f8 <iNemoEngine_API_Update+0x2878>
 8018d1e:	9b06      	ldr	r3, [sp, #24]
 8018d20:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 8018d24:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d2c:	f140 82c3 	bpl.w	80192b6 <iNemoEngine_API_Update+0x4536>
 8018d30:	edd3 3a41 	vldr	s7, [r3, #260]	; 0x104
 8018d34:	ed93 4a43 	vldr	s8, [r3, #268]	; 0x10c
 8018d38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018d3c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018d40:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018d44:	ee64 7a27 	vmul.f32	s15, s8, s15
 8018d48:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8018d4c:	ee3f fa23 	vadd.f32	s30, s30, s7
 8018d50:	9b06      	ldr	r3, [sp, #24]
 8018d52:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 8018d56:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d5e:	f6fe ac6d 	blt.w	801763c <iNemoEngine_API_Update+0x28bc>
 8018d62:	9b06      	ldr	r3, [sp, #24]
 8018d64:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
 8018d68:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d70:	f140 82d2 	bpl.w	8019318 <iNemoEngine_API_Update+0x4598>
 8018d74:	ed93 4a45 	vldr	s8, [r3, #276]	; 0x114
 8018d78:	edd3 4a47 	vldr	s9, [r3, #284]	; 0x11c
 8018d7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018d80:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8018d84:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018d88:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8018d8c:	ee87 fa87 	vdiv.f32	s30, s15, s14
 8018d90:	ee3f fa04 	vadd.f32	s30, s30, s8
 8018d94:	f7fd ba93 	b.w	80162be <iNemoEngine_API_Update+0x153e>
 8018d98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018d9c:	ee38 4ae7 	vsub.f32	s8, s17, s15
 8018da0:	edd3 3a4b 	vldr	s7, [r3, #300]	; 0x12c
 8018da4:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8018da8:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8018dac:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018db0:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8018db4:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8018db8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dc0:	ee3c ca23 	vadd.f32	s24, s24, s7
 8018dc4:	f6fd aaab 	blt.w	801631e <iNemoEngine_API_Update+0x159e>
 8018dc8:	9b06      	ldr	r3, [sp, #24]
 8018dca:	ed93 7a50 	vldr	s14, [r3, #320]	; 0x140
 8018dce:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dd6:	f140 8260 	bpl.w	801929a <iNemoEngine_API_Update+0x451a>
 8018dda:	edd3 3a4f 	vldr	s7, [r3, #316]	; 0x13c
 8018dde:	ed93 4a51 	vldr	s8, [r3, #324]	; 0x144
 8018de2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018de6:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018dea:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018dee:	ee64 7a27 	vmul.f32	s15, s8, s15
 8018df2:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8018df6:	ee3c ca23 	vadd.f32	s24, s24, s7
 8018dfa:	9b06      	ldr	r3, [sp, #24]
 8018dfc:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8018e00:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e08:	f6fd aaaa 	blt.w	8016360 <iNemoEngine_API_Update+0x15e0>
 8018e0c:	9b06      	ldr	r3, [sp, #24]
 8018e0e:	ed93 7a54 	vldr	s14, [r3, #336]	; 0x150
 8018e12:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e1a:	f140 8237 	bpl.w	801928c <iNemoEngine_API_Update+0x450c>
 8018e1e:	edd3 3a53 	vldr	s7, [r3, #332]	; 0x14c
 8018e22:	ed93 4a55 	vldr	s8, [r3, #340]	; 0x154
 8018e26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018e2a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018e2e:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018e32:	ee64 7a27 	vmul.f32	s15, s8, s15
 8018e36:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8018e3a:	ee3c ca23 	vadd.f32	s24, s24, s7
 8018e3e:	9b06      	ldr	r3, [sp, #24]
 8018e40:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
 8018e44:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e4c:	f6fd aaaa 	blt.w	80163a4 <iNemoEngine_API_Update+0x1624>
 8018e50:	9b06      	ldr	r3, [sp, #24]
 8018e52:	ed93 7a58 	vldr	s14, [r3, #352]	; 0x160
 8018e56:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e5e:	f140 8270 	bpl.w	8019342 <iNemoEngine_API_Update+0x45c2>
 8018e62:	edd3 3a57 	vldr	s7, [r3, #348]	; 0x15c
 8018e66:	ed93 4a59 	vldr	s8, [r3, #356]	; 0x164
 8018e6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018e6e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018e72:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018e76:	ee64 7a27 	vmul.f32	s15, s8, s15
 8018e7a:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8018e7e:	ee3c ca23 	vadd.f32	s24, s24, s7
 8018e82:	9b06      	ldr	r3, [sp, #24]
 8018e84:	edd3 7a5a 	vldr	s15, [r3, #360]	; 0x168
 8018e88:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e90:	f6fd aaaa 	blt.w	80163e8 <iNemoEngine_API_Update+0x1668>
 8018e94:	9b06      	ldr	r3, [sp, #24]
 8018e96:	ed93 7a5c 	vldr	s14, [r3, #368]	; 0x170
 8018e9a:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ea2:	f140 8252 	bpl.w	801934a <iNemoEngine_API_Update+0x45ca>
 8018ea6:	edd3 3a5b 	vldr	s7, [r3, #364]	; 0x16c
 8018eaa:	ed93 4a5d 	vldr	s8, [r3, #372]	; 0x174
 8018eae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018eb2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8018eb6:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018eba:	ee64 7a27 	vmul.f32	s15, s8, s15
 8018ebe:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8018ec2:	ee3c ca23 	vadd.f32	s24, s24, s7
 8018ec6:	9b06      	ldr	r3, [sp, #24]
 8018ec8:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8018ecc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ed4:	f6fd aaaa 	blt.w	801642c <iNemoEngine_API_Update+0x16ac>
 8018ed8:	9b06      	ldr	r3, [sp, #24]
 8018eda:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 8018ede:	eef4 8ac7 	vcmpe.f32	s17, s14
 8018ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ee6:	f140 8222 	bpl.w	801932e <iNemoEngine_API_Update+0x45ae>
 8018eea:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
 8018eee:	edd3 4a61 	vldr	s9, [r3, #388]	; 0x184
 8018ef2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018ef6:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8018efa:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8018efe:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8018f02:	ee87 ca87 	vdiv.f32	s24, s15, s14
 8018f06:	ee3c ca04 	vadd.f32	s24, s24, s8
 8018f0a:	f7fd bb2a 	b.w	8016562 <iNemoEngine_API_Update+0x17e2>
 8018f0e:	a94e      	add	r1, sp, #312	; 0x138
 8018f10:	a868      	add	r0, sp, #416	; 0x1a0
 8018f12:	f7f7 fe27 	bl	8010b64 <b_dcm2q>
 8018f16:	9d06      	ldr	r5, [sp, #24]
 8018f18:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 8018f1c:	edc5 7a72 	vstr	s15, [r5, #456]	; 0x1c8
 8018f20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018f24:	edc5 7a73 	vstr	s15, [r5, #460]	; 0x1cc
 8018f28:	4621      	mov	r1, r4
 8018f2a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8018f2e:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
 8018f32:	edcd 7a05 	vstr	s15, [sp, #20]
 8018f36:	f001 fe28 	bl	801ab8a <memset>
 8018f3a:	4be5      	ldr	r3, [pc, #916]	; (80192d0 <iNemoEngine_API_Update+0x4550>)
 8018f3c:	702c      	strb	r4, [r5, #0]
 8018f3e:	eddd 7a05 	vldr	s15, [sp, #20]
 8018f42:	edd5 2a02 	vldr	s5, [r5, #8]
 8018f46:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 8018f4a:	9a06      	ldr	r2, [sp, #24]
 8018f4c:	f8c5 31d4 	str.w	r3, [r5, #468]	; 0x1d4
 8018f50:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
 8018f54:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
 8018f58:	f8c5 324c 	str.w	r3, [r5, #588]	; 0x24c
 8018f5c:	f8c5 3274 	str.w	r3, [r5, #628]	; 0x274
 8018f60:	f8c5 329c 	str.w	r3, [r5, #668]	; 0x29c
 8018f64:	f8c5 32c4 	str.w	r3, [r5, #708]	; 0x2c4
 8018f68:	f8c5 32ec 	str.w	r3, [r5, #748]	; 0x2ec
 8018f6c:	f8c5 3314 	str.w	r3, [r5, #788]	; 0x314
 8018f70:	2401      	movs	r4, #1
 8018f72:	f7fd bb44 	b.w	80165fe <iNemoEngine_API_Update+0x187e>
 8018f76:	290a      	cmp	r1, #10
 8018f78:	f000 815d 	beq.w	8019236 <iNemoEngine_API_Update+0x44b6>
 8018f7c:	1c4b      	adds	r3, r1, #1
 8018f7e:	9906      	ldr	r1, [sp, #24]
 8018f80:	f881 31a0 	strb.w	r3, [r1, #416]	; 0x1a0
 8018f84:	4613      	mov	r3, r2
 8018f86:	2200      	movs	r2, #0
 8018f88:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018f8c:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 8018f90:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 8018f94:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8018f98:	f7fe b849 	b.w	801702e <iNemoEngine_API_Update+0x22ae>
 8018f9c:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 8018fa0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fa8:	f340 824f 	ble.w	801944a <iNemoEngine_API_Update+0x46ca>
 8018fac:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8018fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fb8:	f140 8244 	bpl.w	8019444 <iNemoEngine_API_Update+0x46c4>
 8018fbc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fc8:	f140 81f9 	bpl.w	80193be <iNemoEngine_API_Update+0x463e>
 8018fcc:	eddf 7ace 	vldr	s15, [pc, #824]	; 8019308 <iNemoEngine_API_Update+0x4588>
 8018fd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8018fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018fd8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8018fdc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8018fe0:	eef0 8a46 	vmov.f32	s17, s12
 8018fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fe8:	eee7 8aa5 	vfma.f32	s17, s15, s11
 8018fec:	f2c0 81fb 	blt.w	80193e6 <iNemoEngine_API_Update+0x4666>
 8018ff0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8018ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ffc:	f140 81fb 	bpl.w	80193f6 <iNemoEngine_API_Update+0x4676>
 8019000:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019008:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 80192d4 <iNemoEngine_API_Update+0x4554>
 801900c:	eddf 8ab2 	vldr	s17, [pc, #712]	; 80192d8 <iNemoEngine_API_Update+0x4558>
 8019010:	eee7 8a86 	vfma.f32	s17, s15, s12
 8019014:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8019018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801901c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019020:	f2c0 81fb 	blt.w	801941a <iNemoEngine_API_Update+0x469a>
 8019024:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8019028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801902c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019030:	f140 81fb 	bpl.w	801942a <iNemoEngine_API_Update+0x46aa>
 8019034:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8019038:	ee77 7a67 	vsub.f32	s15, s14, s15
 801903c:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8019040:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8019044:	eee7 8a87 	vfma.f32	s17, s15, s14
 8019048:	9a06      	ldr	r2, [sp, #24]
 801904a:	2300      	movs	r3, #0
 801904c:	f8a2 31a6 	strh.w	r3, [r2, #422]	; 0x1a6
 8019050:	f892 21a4 	ldrb.w	r2, [r2, #420]	; 0x1a4
 8019054:	f7fe bc29 	b.w	80178aa <iNemoEngine_API_Update+0x2b2a>
 8019058:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80192dc <iNemoEngine_API_Update+0x455c>
 801905c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019064:	f57e ad78 	bpl.w	8017b58 <iNemoEngine_API_Update+0x2dd8>
 8019068:	ed9f 6a9d 	vldr	s12, [pc, #628]	; 80192e0 <iNemoEngine_API_Update+0x4560>
 801906c:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8019308 <iNemoEngine_API_Update+0x4588>
 8019070:	eddf 5a9c 	vldr	s11, [pc, #624]	; 80192e4 <iNemoEngine_API_Update+0x4564>
 8019074:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8019078:	ee26 6a26 	vmul.f32	s12, s12, s13
 801907c:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80192e8 <iNemoEngine_API_Update+0x4568>
 8019080:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019084:	ed9f 6a99 	vldr	s12, [pc, #612]	; 80192ec <iNemoEngine_API_Update+0x456c>
 8019088:	eef4 7ac6 	vcmpe.f32	s15, s12
 801908c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019090:	f6fe ad78 	blt.w	8017b84 <iNemoEngine_API_Update+0x2e04>
 8019094:	eddf 6a96 	vldr	s13, [pc, #600]	; 80192f0 <iNemoEngine_API_Update+0x4570>
 8019098:	eef4 7ae6 	vcmpe.f32	s15, s13
 801909c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190a0:	f57e ad78 	bpl.w	8017b94 <iNemoEngine_API_Update+0x2e14>
 80190a4:	ed9f 6a91 	vldr	s12, [pc, #580]	; 80192ec <iNemoEngine_API_Update+0x456c>
 80190a8:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80190ac:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80190b0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80190b4:	eef3 5a04 	vmov.f32	s11, #52	; 0x41a00000  20.0
 80190b8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80190bc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80190c0:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8019310 <iNemoEngine_API_Update+0x4590>
 80190c4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80190c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190cc:	f6fe ad78 	blt.w	8017bc0 <iNemoEngine_API_Update+0x2e40>
 80190d0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80190d4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80190d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190dc:	f57e ad77 	bpl.w	8017bce <iNemoEngine_API_Update+0x2e4e>
 80190e0:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 8019310 <iNemoEngine_API_Update+0x4590>
 80190e4:	eddf 6a83 	vldr	s13, [pc, #524]	; 80192f4 <iNemoEngine_API_Update+0x4574>
 80190e8:	eddf 5a83 	vldr	s11, [pc, #524]	; 80192f8 <iNemoEngine_API_Update+0x4578>
 80190ec:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80190f0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80190f4:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 80190f8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80190fc:	f7fe bd75 	b.w	8017bea <iNemoEngine_API_Update+0x2e6a>
 8019100:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80192fc <iNemoEngine_API_Update+0x457c>
 8019104:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801910c:	f57e ad06 	bpl.w	8017b1c <iNemoEngine_API_Update+0x2d9c>
 8019110:	eddf 6a73 	vldr	s13, [pc, #460]	; 80192e0 <iNemoEngine_API_Update+0x4560>
 8019114:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801911c:	da9c      	bge.n	8019058 <iNemoEngine_API_Update+0x42d8>
 801911e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019122:	f7fe bd11 	b.w	8017b48 <iNemoEngine_API_Update+0x2dc8>
 8019126:	2104      	movs	r1, #4
 8019128:	f04f 0e03 	mov.w	lr, #3
 801912c:	2706      	movs	r7, #6
 801912e:	f04f 0c07 	mov.w	ip, #7
 8019132:	4608      	mov	r0, r1
 8019134:	2301      	movs	r3, #1
 8019136:	2600      	movs	r6, #0
 8019138:	f7ff bbfa 	b.w	8018930 <iNemoEngine_API_Update+0x3bb0>
 801913c:	eddf 3a70 	vldr	s7, [pc, #448]	; 8019300 <iNemoEngine_API_Update+0x4580>
 8019140:	ed9f 5a70 	vldr	s10, [pc, #448]	; 8019304 <iNemoEngine_API_Update+0x4584>
 8019144:	ac43      	add	r4, sp, #268	; 0x10c
 8019146:	f04f 31ff 	mov.w	r1, #4294967295
 801914a:	edd0 7a7c 	vldr	s15, [r0, #496]	; 0x1f0
 801914e:	f5a0 73ae 	sub.w	r3, r0, #348	; 0x15c
 8019152:	3101      	adds	r1, #1
 8019154:	eeb0 7a67 	vmov.f32	s14, s15
 8019158:	461a      	mov	r2, r3
 801915a:	edd2 5ad6 	vldr	s11, [r2, #856]	; 0x358
 801915e:	320c      	adds	r2, #12
 8019160:	4290      	cmp	r0, r2
 8019162:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019166:	d1f8      	bne.n	801915a <iNemoEngine_API_Update+0x43da>
 8019168:	ee27 7a23 	vmul.f32	s14, s14, s7
 801916c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019170:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8019174:	edd3 5ad6 	vldr	s11, [r3, #856]	; 0x358
 8019178:	330c      	adds	r3, #12
 801917a:	ee75 5ac7 	vsub.f32	s11, s11, s14
 801917e:	4298      	cmp	r0, r3
 8019180:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8019184:	d1f6      	bne.n	8019174 <iNemoEngine_API_Update+0x43f4>
 8019186:	ee67 7a85 	vmul.f32	s15, s15, s10
 801918a:	2902      	cmp	r1, #2
 801918c:	f100 0004 	add.w	r0, r0, #4
 8019190:	ece4 7a01 	vstmia	r4!, {s15}
 8019194:	d1d9      	bne.n	801914a <iNemoEngine_API_Update+0x43ca>
 8019196:	eddd 5a43 	vldr	s11, [sp, #268]	; 0x10c
 801919a:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 801919e:	ed9d 7a45 	vldr	s14, [sp, #276]	; 0x114
 80191a2:	eeb1 3ae5 	vsqrt.f32	s6, s11
 80191a6:	eef1 3ae7 	vsqrt.f32	s7, s15
 80191aa:	eeb1 5ac7 	vsqrt.f32	s10, s14
 80191ae:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80191b2:	eef3 5a00 	vmov.f32	s11, #48	; 0x41800000  16.0
 80191b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80191ba:	ed8d 3a43 	vstr	s6, [sp, #268]	; 0x10c
 80191be:	eef4 7ae5 	vcmpe.f32	s15, s11
 80191c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191c6:	edcd 3a44 	vstr	s7, [sp, #272]	; 0x110
 80191ca:	ed8d 5a45 	vstr	s10, [sp, #276]	; 0x114
 80191ce:	f57e abd4 	bpl.w	801797a <iNemoEngine_API_Update+0x2bfa>
 80191d2:	9906      	ldr	r1, [sp, #24]
 80191d4:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 80191d8:	2200      	movs	r2, #0
 80191da:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 80191de:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 80191e2:	464b      	mov	r3, r9
 80191e4:	704a      	strb	r2, [r1, #1]
 80191e6:	f7fd bf22 	b.w	801702e <iNemoEngine_API_Update+0x22ae>
 80191ea:	2208      	movs	r2, #8
 80191ec:	9203      	str	r2, [sp, #12]
 80191ee:	2205      	movs	r2, #5
 80191f0:	920e      	str	r2, [sp, #56]	; 0x38
 80191f2:	2202      	movs	r2, #2
 80191f4:	f7ff bbb3 	b.w	801895e <iNemoEngine_API_Update+0x3bde>
 80191f8:	2301      	movs	r3, #1
 80191fa:	f7fd bf04 	b.w	8017006 <iNemoEngine_API_Update+0x2286>
 80191fe:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8019202:	2b27      	cmp	r3, #39	; 0x27
 8019204:	d838      	bhi.n	8019278 <iNemoEngine_API_Update+0x44f8>
 8019206:	ed8d 4a95 	vstr	s8, [sp, #596]	; 0x254
 801920a:	edcd 4a96 	vstr	s9, [sp, #600]	; 0x258
 801920e:	ed8d 6a97 	vstr	s12, [sp, #604]	; 0x25c
 8019212:	9906      	ldr	r1, [sp, #24]
 8019214:	f8b1 31a8 	ldrh.w	r3, [r1, #424]	; 0x1a8
 8019218:	3301      	adds	r3, #1
 801921a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801921e:	bf14      	ite	ne
 8019220:	b29b      	uxthne	r3, r3
 8019222:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8019226:	2201      	movs	r2, #1
 8019228:	f8a1 31a8 	strh.w	r3, [r1, #424]	; 0x1a8
 801922c:	f881 21a3 	strb.w	r2, [r1, #419]	; 0x1a3
 8019230:	464b      	mov	r3, r9
 8019232:	f7fd befc 	b.w	801702e <iNemoEngine_API_Update+0x22ae>
 8019236:	9906      	ldr	r1, [sp, #24]
 8019238:	f88d 20f0 	strb.w	r2, [sp, #240]	; 0xf0
 801923c:	f891 31a3 	ldrb.w	r3, [r1, #419]	; 0x1a3
 8019240:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 8019244:	3301      	adds	r3, #1
 8019246:	f881 31a3 	strb.w	r3, [r1, #419]	; 0x1a3
 801924a:	784b      	ldrb	r3, [r1, #1]
 801924c:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8019250:	f240 1201 	movw	r2, #257	; 0x101
 8019254:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8019258:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
 801925c:	b13b      	cbz	r3, 801926e <iNemoEngine_API_Update+0x44ee>
 801925e:	2300      	movs	r3, #0
 8019260:	ed81 ea6f 	vstr	s28, [r1, #444]	; 0x1bc
 8019264:	edc1 ea70 	vstr	s29, [r1, #448]	; 0x1c0
 8019268:	edc1 ba71 	vstr	s23, [r1, #452]	; 0x1c4
 801926c:	704b      	strb	r3, [r1, #1]
 801926e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8019272:	2301      	movs	r3, #1
 8019274:	f7fd bedb 	b.w	801702e <iNemoEngine_API_Update+0x22ae>
 8019278:	ed8d ea95 	vstr	s28, [sp, #596]	; 0x254
 801927c:	edcd ea96 	vstr	s29, [sp, #600]	; 0x258
 8019280:	edcd ba97 	vstr	s23, [sp, #604]	; 0x25c
 8019284:	e7c5      	b.n	8019212 <iNemoEngine_API_Update+0x4492>
 8019286:	eef0 7a47 	vmov.f32	s15, s14
 801928a:	e5bf      	b.n	8018e0c <iNemoEngine_API_Update+0x408c>
 801928c:	eef0 7a47 	vmov.f32	s15, s14
 8019290:	f7fd b86f 	b.w	8016372 <iNemoEngine_API_Update+0x15f2>
 8019294:	eef0 7a47 	vmov.f32	s15, s14
 8019298:	e563      	b.n	8018d62 <iNemoEngine_API_Update+0x3fe2>
 801929a:	eef0 7a47 	vmov.f32	s15, s14
 801929e:	f7fd b846 	b.w	801632e <iNemoEngine_API_Update+0x15ae>
 80192a2:	eef0 7a47 	vmov.f32	s15, s14
 80192a6:	f7fe b96c 	b.w	8017582 <iNemoEngine_API_Update+0x2802>
 80192aa:	eef0 7a47 	vmov.f32	s15, s14
 80192ae:	e4f2      	b.n	8018c96 <iNemoEngine_API_Update+0x3f16>
 80192b0:	eef0 7a47 	vmov.f32	s15, s14
 80192b4:	e533      	b.n	8018d1e <iNemoEngine_API_Update+0x3f9e>
 80192b6:	eef0 7a47 	vmov.f32	s15, s14
 80192ba:	f7fe b9a6 	b.w	801760a <iNemoEngine_API_Update+0x288a>
 80192be:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 80192c2:	9315      	str	r3, [sp, #84]	; 0x54
 80192c4:	f7fc b886 	b.w	80153d4 <iNemoEngine_API_Update+0x654>
 80192c8:	f505 6597 	add.w	r5, r5, #1208	; 0x4b8
 80192cc:	f7fe be2c 	b.w	8017f28 <iNemoEngine_API_Update+0x31a8>
 80192d0:	40a00000 	.word	0x40a00000
 80192d4:	3e999998 	.word	0x3e999998
 80192d8:	3f99999a 	.word	0x3f99999a
 80192dc:	3cf5c28f 	.word	0x3cf5c28f
 80192e0:	3c75c28f 	.word	0x3c75c28f
 80192e4:	42855556 	.word	0x42855556
 80192e8:	3f866666 	.word	0x3f866666
 80192ec:	3d4ccccd 	.word	0x3d4ccccd
 80192f0:	3dcccccd 	.word	0x3dcccccd
 80192f4:	42200000 	.word	0x42200000
 80192f8:	40555555 	.word	0x40555555
 80192fc:	3c23d70a 	.word	0x3c23d70a
 8019300:	3d088889 	.word	0x3d088889
 8019304:	3d0d3dcb 	.word	0x3d0d3dcb
 8019308:	3dccccd0 	.word	0x3dccccd0
 801930c:	3f8ccccd 	.word	0x3f8ccccd
 8019310:	3e4ccccd 	.word	0x3e4ccccd
 8019314:	00000000 	.word	0x00000000
 8019318:	eef0 7a47 	vmov.f32	s15, s14
 801931c:	f7fe b997 	b.w	801764e <iNemoEngine_API_Update+0x28ce>
 8019320:	eef0 7a47 	vmov.f32	s15, s14
 8019324:	f7fe b94f 	b.w	80175c6 <iNemoEngine_API_Update+0x2846>
 8019328:	eef0 7a47 	vmov.f32	s15, s14
 801932c:	e4d5      	b.n	8018cda <iNemoEngine_API_Update+0x3f5a>
 801932e:	eef0 7a47 	vmov.f32	s15, s14
 8019332:	f7fd b884 	b.w	801643e <iNemoEngine_API_Update+0x16be>
 8019336:	eef0 7a47 	vmov.f32	s15, s14
 801933a:	e5cd      	b.n	8018ed8 <iNemoEngine_API_Update+0x4158>
 801933c:	eef0 7a47 	vmov.f32	s15, s14
 8019340:	e586      	b.n	8018e50 <iNemoEngine_API_Update+0x40d0>
 8019342:	eef0 7a47 	vmov.f32	s15, s14
 8019346:	f7fd b836 	b.w	80163b6 <iNemoEngine_API_Update+0x1636>
 801934a:	eef0 7a47 	vmov.f32	s15, s14
 801934e:	f7fd b854 	b.w	80163fa <iNemoEngine_API_Update+0x167a>
 8019352:	eef0 7a47 	vmov.f32	s15, s14
 8019356:	e59d      	b.n	8018e94 <iNemoEngine_API_Update+0x4114>
 8019358:	eef0 7a47 	vmov.f32	s15, s14
 801935c:	f7fe b8ef 	b.w	801753e <iNemoEngine_API_Update+0x27be>
 8019360:	9906      	ldr	r1, [sp, #24]
 8019362:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8019366:	f8c1 324c 	str.w	r3, [r1, #588]	; 0x24c
 801936a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
 801936e:	f8c1 329c 	str.w	r3, [r1, #668]	; 0x29c
 8019372:	f7fe ba9a 	b.w	80178aa <iNemoEngine_API_Update+0x2b2a>
 8019376:	9906      	ldr	r1, [sp, #24]
 8019378:	f8b1 31a6 	ldrh.w	r3, [r1, #422]	; 0x1a6
 801937c:	3301      	adds	r3, #1
 801937e:	f8a1 31a6 	strh.w	r3, [r1, #422]	; 0x1a6
 8019382:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8019386:	460b      	mov	r3, r1
 8019388:	f7ff ba49 	b.w	801881e <iNemoEngine_API_Update+0x3a9e>
 801938c:	2a00      	cmp	r2, #0
 801938e:	f73d afa4 	bgt.w	80172da <iNemoEngine_API_Update+0x255a>
 8019392:	eddd 5a83 	vldr	s11, [sp, #524]	; 0x20c
 8019396:	ed9d 7a84 	vldr	s14, [sp, #528]	; 0x210
 801939a:	eddd 7a85 	vldr	s15, [sp, #532]	; 0x214
 801939e:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80193a2:	ee65 5a86 	vmul.f32	s11, s11, s12
 80193a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80193aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80193ae:	edcd 5a83 	vstr	s11, [sp, #524]	; 0x20c
 80193b2:	ed8d 7a84 	vstr	s14, [sp, #528]	; 0x210
 80193b6:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 80193ba:	f7fd bb24 	b.w	8016a06 <iNemoEngine_API_Update+0x1c86>
 80193be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80193c2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80193c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193ca:	f57f ae11 	bpl.w	8018ff0 <iNemoEngine_API_Update+0x4270>
 80193ce:	ed1f 6a32 	vldr	s12, [pc, #-200]	; 8019308 <iNemoEngine_API_Update+0x4588>
 80193d2:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 801930c <iNemoEngine_API_Update+0x458c>
 80193d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80193da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80193de:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80193e2:	eee7 8a86 	vfma.f32	s17, s15, s12
 80193e6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80193ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80193ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193f2:	f6ff ae0f 	blt.w	8019014 <iNemoEngine_API_Update+0x4294>
 80193f6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80193fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80193fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019402:	f57f ae0f 	bpl.w	8019024 <iNemoEngine_API_Update+0x42a4>
 8019406:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801940a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801940e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8019412:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
 8019416:	eee7 8a86 	vfma.f32	s17, s15, s12
 801941a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801941e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019426:	f6ff ae0f 	blt.w	8019048 <iNemoEngine_API_Update+0x42c8>
 801942a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801942e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019432:	ed1f 7a49 	vldr	s14, [pc, #-292]	; 8019310 <iNemoEngine_API_Update+0x4590>
 8019436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801943a:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
 801943e:	eee7 8a87 	vfma.f32	s17, s15, s14
 8019442:	e601      	b.n	8019048 <iNemoEngine_API_Update+0x42c8>
 8019444:	eef1 8a04 	vmov.f32	s17, #20	; 0x40a00000  5.0
 8019448:	e5fe      	b.n	8019048 <iNemoEngine_API_Update+0x42c8>
 801944a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801944e:	e5fb      	b.n	8019048 <iNemoEngine_API_Update+0x42c8>
 8019450:	ed1f 8a50 	vldr	s16, [pc, #-320]	; 8019314 <iNemoEngine_API_Update+0x4594>
 8019454:	f7fb bdeb 	b.w	801502e <iNemoEngine_API_Update+0x2ae>

08019458 <MotionFX_GetStateSize>:
 8019458:	f44f 6018 	mov.w	r0, #2432	; 0x980
 801945c:	4770      	bx	lr
 801945e:	bf00      	nop

08019460 <MotionFX_initialize>:
 8019460:	4a4c      	ldr	r2, [pc, #304]	; (8019594 <MotionFX_initialize+0x134>)
 8019462:	6813      	ldr	r3, [r2, #0]
 8019464:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
 8019468:	f023 0301 	bic.w	r3, r3, #1
 801946c:	b530      	push	{r4, r5, lr}
 801946e:	6013      	str	r3, [r2, #0]
 8019470:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 8019474:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8019478:	400b      	ands	r3, r1
 801947a:	f24c 2240 	movw	r2, #49728	; 0xc240
 801947e:	4293      	cmp	r3, r2
 8019480:	b085      	sub	sp, #20
 8019482:	4604      	mov	r4, r0
 8019484:	d013      	beq.n	80194ae <MotionFX_initialize+0x4e>
 8019486:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	; 0xd00
 801948a:	f24c 2270 	movw	r2, #49776	; 0xc270
 801948e:	4019      	ands	r1, r3
 8019490:	4291      	cmp	r1, r2
 8019492:	d00c      	beq.n	80194ae <MotionFX_initialize+0x4e>
 8019494:	4a40      	ldr	r2, [pc, #256]	; (8019598 <MotionFX_initialize+0x138>)
 8019496:	2301      	movs	r3, #1
 8019498:	6093      	str	r3, [r2, #8]
 801949a:	6893      	ldr	r3, [r2, #8]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d1fc      	bne.n	801949a <MotionFX_initialize+0x3a>
 80194a0:	4b3e      	ldr	r3, [pc, #248]	; (801959c <MotionFX_initialize+0x13c>)
 80194a2:	6013      	str	r3, [r2, #0]
 80194a4:	6812      	ldr	r2, [r2, #0]
 80194a6:	4b3e      	ldr	r3, [pc, #248]	; (80195a0 <MotionFX_initialize+0x140>)
 80194a8:	429a      	cmp	r2, r3
 80194aa:	d02c      	beq.n	8019506 <MotionFX_initialize+0xa6>
 80194ac:	e7fe      	b.n	80194ac <MotionFX_initialize+0x4c>
 80194ae:	4b3d      	ldr	r3, [pc, #244]	; (80195a4 <MotionFX_initialize+0x144>)
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d1ee      	bne.n	8019494 <MotionFX_initialize+0x34>
 80194b6:	4a3c      	ldr	r2, [pc, #240]	; (80195a8 <MotionFX_initialize+0x148>)
 80194b8:	6813      	ldr	r3, [r2, #0]
 80194ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80194be:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80194c2:	d056      	beq.n	8019572 <MotionFX_initialize+0x112>
 80194c4:	6813      	ldr	r3, [r2, #0]
 80194c6:	f240 4183 	movw	r1, #1155	; 0x483
 80194ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80194ce:	428b      	cmp	r3, r1
 80194d0:	d04f      	beq.n	8019572 <MotionFX_initialize+0x112>
 80194d2:	6813      	ldr	r3, [r2, #0]
 80194d4:	f240 4285 	movw	r2, #1157	; 0x485
 80194d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80194dc:	4293      	cmp	r3, r2
 80194de:	d048      	beq.n	8019572 <MotionFX_initialize+0x112>
 80194e0:	4b32      	ldr	r3, [pc, #200]	; (80195ac <MotionFX_initialize+0x14c>)
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80194e8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80194ec:	d1d2      	bne.n	8019494 <MotionFX_initialize+0x34>
 80194ee:	4a30      	ldr	r2, [pc, #192]	; (80195b0 <MotionFX_initialize+0x150>)
 80194f0:	2301      	movs	r3, #1
 80194f2:	6093      	str	r3, [r2, #8]
 80194f4:	6893      	ldr	r3, [r2, #8]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d1fc      	bne.n	80194f4 <MotionFX_initialize+0x94>
 80194fa:	4b28      	ldr	r3, [pc, #160]	; (801959c <MotionFX_initialize+0x13c>)
 80194fc:	6013      	str	r3, [r2, #0]
 80194fe:	6812      	ldr	r2, [r2, #0]
 8019500:	4b27      	ldr	r3, [pc, #156]	; (80195a0 <MotionFX_initialize+0x140>)
 8019502:	429a      	cmp	r2, r3
 8019504:	d1d2      	bne.n	80194ac <MotionFX_initialize+0x4c>
 8019506:	4b2b      	ldr	r3, [pc, #172]	; (80195b4 <MotionFX_initialize+0x154>)
 8019508:	4a2b      	ldr	r2, [pc, #172]	; (80195b8 <MotionFX_initialize+0x158>)
 801950a:	9303      	str	r3, [sp, #12]
 801950c:	2501      	movs	r5, #1
 801950e:	4620      	mov	r0, r4
 8019510:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019514:	f882 53c4 	strb.w	r5, [r2, #964]	; 0x3c4
 8019518:	f7f8 feb6 	bl	8012288 <MFX_emptyAttitude>
 801951c:	a901      	add	r1, sp, #4
 801951e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8019522:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8019526:	f7f7 fa1b 	bl	8010960 <updateOrientation>
 801952a:	a903      	add	r1, sp, #12
 801952c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8019530:	f7f7 fa16 	bl	8010960 <updateOrientation>
 8019534:	a902      	add	r1, sp, #8
 8019536:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801953a:	f7f7 fa11 	bl	8010960 <updateOrientation>
 801953e:	4b1f      	ldr	r3, [pc, #124]	; (80195bc <MotionFX_initialize+0x15c>)
 8019540:	491f      	ldr	r1, [pc, #124]	; (80195c0 <MotionFX_initialize+0x160>)
 8019542:	6363      	str	r3, [r4, #52]	; 0x34
 8019544:	4b1f      	ldr	r3, [pc, #124]	; (80195c4 <MotionFX_initialize+0x164>)
 8019546:	4a20      	ldr	r2, [pc, #128]	; (80195c8 <MotionFX_initialize+0x168>)
 8019548:	62a1      	str	r1, [r4, #40]	; 0x28
 801954a:	61e3      	str	r3, [r4, #28]
 801954c:	491f      	ldr	r1, [pc, #124]	; (80195cc <MotionFX_initialize+0x16c>)
 801954e:	61a2      	str	r2, [r4, #24]
 8019550:	2300      	movs	r3, #0
 8019552:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8019556:	f44f 7281 	mov.w	r2, #258	; 0x102
 801955a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801955e:	f240 1301 	movw	r3, #257	; 0x101
 8019562:	62e0      	str	r0, [r4, #44]	; 0x2c
 8019564:	6221      	str	r1, [r4, #32]
 8019566:	80a2      	strh	r2, [r4, #4]
 8019568:	f8a4 300d 	strh.w	r3, [r4, #13]
 801956c:	73e5      	strb	r5, [r4, #15]
 801956e:	b005      	add	sp, #20
 8019570:	bd30      	pop	{r4, r5, pc}
 8019572:	4a17      	ldr	r2, [pc, #92]	; (80195d0 <MotionFX_initialize+0x170>)
 8019574:	2301      	movs	r3, #1
 8019576:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 801957a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 801957e:	2b00      	cmp	r3, #0
 8019580:	d1fb      	bne.n	801957a <MotionFX_initialize+0x11a>
 8019582:	4b06      	ldr	r3, [pc, #24]	; (801959c <MotionFX_initialize+0x13c>)
 8019584:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8019588:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 801958c:	4b04      	ldr	r3, [pc, #16]	; (80195a0 <MotionFX_initialize+0x140>)
 801958e:	429a      	cmp	r2, r3
 8019590:	d0b9      	beq.n	8019506 <MotionFX_initialize+0xa6>
 8019592:	e78b      	b.n	80194ac <MotionFX_initialize+0x4c>
 8019594:	e0002000 	.word	0xe0002000
 8019598:	40023000 	.word	0x40023000
 801959c:	f407a5c2 	.word	0xf407a5c2
 80195a0:	b5e8b5cd 	.word	0xb5e8b5cd
 80195a4:	e0042000 	.word	0xe0042000
 80195a8:	5c001000 	.word	0x5c001000
 80195ac:	50081000 	.word	0x50081000
 80195b0:	4c004000 	.word	0x4c004000
 80195b4:	00756e65 	.word	0x00756e65
 80195b8:	200003ac 	.word	0x200003ac
 80195bc:	3f2ac083 	.word	0x3f2ac083
 80195c0:	3f666666 	.word	0x3f666666
 80195c4:	3a378034 	.word	0x3a378034
 80195c8:	3a51b717 	.word	0x3a51b717
 80195cc:	3b378034 	.word	0x3b378034
 80195d0:	58024000 	.word	0x58024000

080195d4 <MotionFX_setKnobs>:
 80195d4:	4b24      	ldr	r3, [pc, #144]	; (8019668 <MotionFX_setKnobs+0x94>)
 80195d6:	f893 23c4 	ldrb.w	r2, [r3, #964]	; 0x3c4
 80195da:	b902      	cbnz	r2, 80195de <MotionFX_setKnobs+0xa>
 80195dc:	4770      	bx	lr
 80195de:	460b      	mov	r3, r1
 80195e0:	2900      	cmp	r1, #0
 80195e2:	d0fb      	beq.n	80195dc <MotionFX_setKnobs+0x8>
 80195e4:	b510      	push	{r4, lr}
 80195e6:	4604      	mov	r4, r0
 80195e8:	689a      	ldr	r2, [r3, #8]
 80195ea:	6808      	ldr	r0, [r1, #0]
 80195ec:	6849      	ldr	r1, [r1, #4]
 80195ee:	62e1      	str	r1, [r4, #44]	; 0x2c
 80195f0:	62a0      	str	r0, [r4, #40]	; 0x28
 80195f2:	6362      	str	r2, [r4, #52]	; 0x34
 80195f4:	7b1a      	ldrb	r2, [r3, #12]
 80195f6:	7162      	strb	r2, [r4, #5]
 80195f8:	6918      	ldr	r0, [r3, #16]
 80195fa:	6959      	ldr	r1, [r3, #20]
 80195fc:	699a      	ldr	r2, [r3, #24]
 80195fe:	6222      	str	r2, [r4, #32]
 8019600:	61a0      	str	r0, [r4, #24]
 8019602:	61e1      	str	r1, [r4, #28]
 8019604:	7f1a      	ldrb	r2, [r3, #28]
 8019606:	7122      	strb	r2, [r4, #4]
 8019608:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801960c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8019610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019612:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8019616:	b084      	sub	sp, #16
 8019618:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 801961c:	7fda      	ldrb	r2, [r3, #31]
 801961e:	f88d 2006 	strb.w	r2, [sp, #6]
 8019622:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019626:	f8b3 2021 	ldrh.w	r2, [r3, #33]	; 0x21
 801962a:	f8ad 2008 	strh.w	r2, [sp, #8]
 801962e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8019632:	f88d 200a 	strb.w	r2, [sp, #10]
 8019636:	f8b3 2025 	ldrh.w	r2, [r3, #37]	; 0x25
 801963a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801963e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8019642:	f88d 300e 	strb.w	r3, [sp, #14]
 8019646:	a901      	add	r1, sp, #4
 8019648:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 801964c:	f7f7 f988 	bl	8010960 <updateOrientation>
 8019650:	a903      	add	r1, sp, #12
 8019652:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8019656:	f7f7 f983 	bl	8010960 <updateOrientation>
 801965a:	a902      	add	r1, sp, #8
 801965c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8019660:	f7f7 f97e 	bl	8010960 <updateOrientation>
 8019664:	b004      	add	sp, #16
 8019666:	bd10      	pop	{r4, pc}
 8019668:	200003ac 	.word	0x200003ac

0801966c <MotionFX_getKnobs>:
 801966c:	4b1d      	ldr	r3, [pc, #116]	; (80196e4 <MotionFX_getKnobs+0x78>)
 801966e:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 8019672:	b903      	cbnz	r3, 8019676 <MotionFX_getKnobs+0xa>
 8019674:	4770      	bx	lr
 8019676:	460a      	mov	r2, r1
 8019678:	2900      	cmp	r1, #0
 801967a:	d0fb      	beq.n	8019674 <MotionFX_getKnobs+0x8>
 801967c:	b510      	push	{r4, lr}
 801967e:	4604      	mov	r4, r0
 8019680:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019682:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8019684:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019686:	6093      	str	r3, [r2, #8]
 8019688:	6010      	str	r0, [r2, #0]
 801968a:	6051      	str	r1, [r2, #4]
 801968c:	7963      	ldrb	r3, [r4, #5]
 801968e:	7313      	strb	r3, [r2, #12]
 8019690:	69a0      	ldr	r0, [r4, #24]
 8019692:	69e1      	ldr	r1, [r4, #28]
 8019694:	6a23      	ldr	r3, [r4, #32]
 8019696:	6193      	str	r3, [r2, #24]
 8019698:	6110      	str	r0, [r2, #16]
 801969a:	6151      	str	r1, [r2, #20]
 801969c:	7923      	ldrb	r3, [r4, #4]
 801969e:	7713      	strb	r3, [r2, #28]
 80196a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80196a4:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 80196a8:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 80196ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80196ae:	f102 011d 	add.w	r1, r2, #29
 80196b2:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80196b6:	f7f6 ffab 	bl	8010610 <findAxis>
 80196ba:	f102 0121 	add.w	r1, r2, #33	; 0x21
 80196be:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80196c2:	f7f6 ffa5 	bl	8010610 <findAxis>
 80196c6:	f102 0125 	add.w	r1, r2, #37	; 0x25
 80196ca:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80196ce:	f7f6 ff9f 	bl	8010610 <findAxis>
 80196d2:	2300      	movs	r3, #0
 80196d4:	f882 3020 	strb.w	r3, [r2, #32]
 80196d8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80196dc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80196e0:	bd10      	pop	{r4, pc}
 80196e2:	bf00      	nop
 80196e4:	200003ac 	.word	0x200003ac

080196e8 <MotionFX_enable_6X>:
 80196e8:	4b0e      	ldr	r3, [pc, #56]	; (8019724 <MotionFX_enable_6X+0x3c>)
 80196ea:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 80196ee:	b903      	cbnz	r3, 80196f2 <MotionFX_enable_6X+0xa>
 80196f0:	4770      	bx	lr
 80196f2:	2900      	cmp	r1, #0
 80196f4:	d0fc      	beq.n	80196f0 <MotionFX_enable_6X+0x8>
 80196f6:	b530      	push	{r4, r5, lr}
 80196f8:	1d05      	adds	r5, r0, #4
 80196fa:	b099      	sub	sp, #100	; 0x64
 80196fc:	4604      	mov	r4, r0
 80196fe:	4629      	mov	r1, r5
 8019700:	225c      	movs	r2, #92	; 0x5c
 8019702:	a801      	add	r0, sp, #4
 8019704:	f001 fac9 	bl	801ac9a <memcpy>
 8019708:	4620      	mov	r0, r4
 801970a:	f7f8 fdbd 	bl	8012288 <MFX_emptyAttitude>
 801970e:	225c      	movs	r2, #92	; 0x5c
 8019710:	a901      	add	r1, sp, #4
 8019712:	4628      	mov	r0, r5
 8019714:	f001 fac1 	bl	801ac9a <memcpy>
 8019718:	2300      	movs	r3, #0
 801971a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801971e:	7363      	strb	r3, [r4, #13]
 8019720:	b019      	add	sp, #100	; 0x64
 8019722:	bd30      	pop	{r4, r5, pc}
 8019724:	200003ac 	.word	0x200003ac

08019728 <MotionFX_enable_9X>:
 8019728:	4b0e      	ldr	r3, [pc, #56]	; (8019764 <MotionFX_enable_9X+0x3c>)
 801972a:	f893 33c4 	ldrb.w	r3, [r3, #964]	; 0x3c4
 801972e:	b903      	cbnz	r3, 8019732 <MotionFX_enable_9X+0xa>
 8019730:	4770      	bx	lr
 8019732:	2900      	cmp	r1, #0
 8019734:	d0fc      	beq.n	8019730 <MotionFX_enable_9X+0x8>
 8019736:	b530      	push	{r4, r5, lr}
 8019738:	1d05      	adds	r5, r0, #4
 801973a:	b099      	sub	sp, #100	; 0x64
 801973c:	4604      	mov	r4, r0
 801973e:	4629      	mov	r1, r5
 8019740:	225c      	movs	r2, #92	; 0x5c
 8019742:	a801      	add	r0, sp, #4
 8019744:	f001 faa9 	bl	801ac9a <memcpy>
 8019748:	4620      	mov	r0, r4
 801974a:	f7f8 fd9d 	bl	8012288 <MFX_emptyAttitude>
 801974e:	225c      	movs	r2, #92	; 0x5c
 8019750:	a901      	add	r1, sp, #4
 8019752:	4628      	mov	r0, r5
 8019754:	f001 faa1 	bl	801ac9a <memcpy>
 8019758:	2301      	movs	r3, #1
 801975a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801975e:	7363      	strb	r3, [r4, #13]
 8019760:	b019      	add	sp, #100	; 0x64
 8019762:	bd30      	pop	{r4, r5, pc}
 8019764:	200003ac 	.word	0x200003ac

08019768 <MotionFX_update>:
 8019768:	b430      	push	{r4, r5}
 801976a:	4c06      	ldr	r4, [pc, #24]	; (8019784 <MotionFX_update+0x1c>)
 801976c:	9d02      	ldr	r5, [sp, #8]
 801976e:	f894 43c4 	ldrb.w	r4, [r4, #964]	; 0x3c4
 8019772:	b90c      	cbnz	r4, 8019778 <MotionFX_update+0x10>
 8019774:	bc30      	pop	{r4, r5}
 8019776:	4770      	bx	lr
 8019778:	ed93 0a00 	vldr	s0, [r3]
 801977c:	462b      	mov	r3, r5
 801977e:	bc30      	pop	{r4, r5}
 8019780:	f7fb bafe 	b.w	8014d80 <iNemoEngine_API_Update>
 8019784:	200003ac 	.word	0x200003ac

08019788 <MotionFX_propagate>:
 8019788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801978c:	ed2d 8b06 	vpush	{d8-d10}
 8019790:	4ca2      	ldr	r4, [pc, #648]	; (8019a1c <MotionFX_propagate+0x294>)
 8019792:	f894 63c4 	ldrb.w	r6, [r4, #964]	; 0x3c4
 8019796:	b0a1      	sub	sp, #132	; 0x84
 8019798:	b926      	cbnz	r6, 80197a4 <MotionFX_propagate+0x1c>
 801979a:	b021      	add	sp, #132	; 0x84
 801979c:	ecbd 8b06 	vpop	{d8-d10}
 80197a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197a4:	4694      	mov	ip, r2
 80197a6:	4604      	mov	r4, r0
 80197a8:	460d      	mov	r5, r1
 80197aa:	68d0      	ldr	r0, [r2, #12]
 80197ac:	6911      	ldr	r1, [r2, #16]
 80197ae:	6952      	ldr	r2, [r2, #20]
 80197b0:	edd3 9a00 	vldr	s19, [r3]
 80197b4:	ab13      	add	r3, sp, #76	; 0x4c
 80197b6:	c307      	stmia	r3!, {r0, r1, r2}
 80197b8:	f8dc 0000 	ldr.w	r0, [ip]
 80197bc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80197c0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80197c4:	ab10      	add	r3, sp, #64	; 0x40
 80197c6:	c307      	stmia	r3!, {r0, r1, r2}
 80197c8:	f8dc 0018 	ldr.w	r0, [ip, #24]
 80197cc:	f8dc 101c 	ldr.w	r1, [ip, #28]
 80197d0:	f8dc 2020 	ldr.w	r2, [ip, #32]
 80197d4:	ab16      	add	r3, sp, #88	; 0x58
 80197d6:	f104 073a 	add.w	r7, r4, #58	; 0x3a
 80197da:	c307      	stmia	r3!, {r0, r1, r2}
 80197dc:	4639      	mov	r1, r7
 80197de:	a803      	add	r0, sp, #12
 80197e0:	aa13      	add	r2, sp, #76	; 0x4c
 80197e2:	f7f6 feb3 	bl	801054c <rotVect>
 80197e6:	aa16      	add	r2, sp, #88	; 0x58
 80197e8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80197ec:	a806      	add	r0, sp, #24
 80197ee:	f7f6 fead 	bl	801054c <rotVect>
 80197f2:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 80197f6:	2b09      	cmp	r3, #9
 80197f8:	d829      	bhi.n	801984e <MotionFX_propagate+0xc6>
 80197fa:	eddd 8a04 	vldr	s17, [sp, #16]
 80197fe:	ed9d 9a03 	vldr	s18, [sp, #12]
 8019802:	ed9d 8a05 	vldr	s16, [sp, #20]
 8019806:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801980a:	eee9 7a09 	vfma.f32	s15, s18, s18
 801980e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8019812:	ee17 0a90 	vmov	r0, s15
 8019816:	f7e6 fe97 	bl	8000548 <__aeabi_f2d>
 801981a:	ec41 0b10 	vmov	d0, r0, r1
 801981e:	f003 fab9 	bl	801cd94 <sqrt>
 8019822:	ec51 0b10 	vmov	r0, r1, d0
 8019826:	f7e7 f9bf 	bl	8000ba8 <__aeabi_d2f>
 801982a:	ee07 0a90 	vmov	s15, r0
 801982e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019832:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8019836:	ee29 9a27 	vmul.f32	s18, s18, s15
 801983a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801983e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019842:	ed8d 9a03 	vstr	s18, [sp, #12]
 8019846:	edcd 8a04 	vstr	s17, [sp, #16]
 801984a:	ed8d 8a05 	vstr	s16, [sp, #20]
 801984e:	7923      	ldrb	r3, [r4, #4]
 8019850:	2b00      	cmp	r3, #0
 8019852:	f000 80ce 	beq.w	80199f2 <MotionFX_propagate+0x26a>
 8019856:	ee07 3a90 	vmov	s15, r3
 801985a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801985e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019866:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 801986a:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 801986e:	edd3 7a00 	vldr	s15, [r3]
 8019872:	eddd 8a06 	vldr	s17, [sp, #24]
 8019876:	ed9d 6a07 	vldr	s12, [sp, #28]
 801987a:	eddd 6a08 	vldr	s13, [sp, #32]
 801987e:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8019a20 <MotionFX_propagate+0x298>
 8019882:	eddf 5a68 	vldr	s11, [pc, #416]	; 8019a24 <MotionFX_propagate+0x29c>
 8019886:	eee7 7a28 	vfma.f32	s15, s14, s17
 801988a:	ee26 9a08 	vmul.f32	s18, s12, s16
 801988e:	edc3 7a00 	vstr	s15, [r3]
 8019892:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8019896:	edd3 7a00 	vldr	s15, [r3]
 801989a:	ed8d 9a07 	vstr	s18, [sp, #28]
 801989e:	eee7 7a06 	vfma.f32	s15, s14, s12
 80198a2:	ee68 8a88 	vmul.f32	s17, s17, s16
 80198a6:	edc3 7a00 	vstr	s15, [r3]
 80198aa:	f604 1364 	addw	r3, r4, #2404	; 0x964
 80198ae:	edd3 7a00 	vldr	s15, [r3]
 80198b2:	edcd 8a06 	vstr	s17, [sp, #24]
 80198b6:	eee7 7a26 	vfma.f32	s15, s14, s13
 80198ba:	ee26 8a88 	vmul.f32	s16, s13, s16
 80198be:	edc3 7a00 	vstr	s15, [r3]
 80198c2:	f604 1344 	addw	r3, r4, #2372	; 0x944
 80198c6:	edd3 7a00 	vldr	s15, [r3]
 80198ca:	ed8d 8a08 	vstr	s16, [sp, #32]
 80198ce:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 80198d2:	ed93 7a00 	vldr	s14, [r3]
 80198d6:	ee39 9a67 	vsub.f32	s18, s18, s15
 80198da:	ee78 8ac7 	vsub.f32	s17, s17, s14
 80198de:	ee69 7a09 	vmul.f32	s15, s18, s18
 80198e2:	f604 1348 	addw	r3, r4, #2376	; 0x948
 80198e6:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80198ea:	ed93 7a00 	vldr	s14, [r3]
 80198ee:	ee38 8a47 	vsub.f32	s16, s16, s14
 80198f2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80198f6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80198fa:	ee29 0a80 	vmul.f32	s0, s19, s0
 80198fe:	eef4 7ae5 	vcmpe.f32	s15, s11
 8019902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019906:	dd79      	ble.n	80199fc <MotionFX_propagate+0x274>
 8019908:	eeb1 aae7 	vsqrt.f32	s20, s15
 801990c:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8019910:	eeb0 0a69 	vmov.f32	s0, s19
 8019914:	f003 fb10 	bl	801cf38 <sinf>
 8019918:	eeb0 7a40 	vmov.f32	s14, s0
 801991c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019920:	eeb0 0a69 	vmov.f32	s0, s19
 8019924:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8019928:	ee29 9a27 	vmul.f32	s18, s18, s15
 801992c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019930:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8019934:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8019938:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 801993c:	f003 fab0 	bl	801cea0 <cosf>
 8019940:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8019944:	a809      	add	r0, sp, #36	; 0x24
 8019946:	f604 1838 	addw	r8, r4, #2360	; 0x938
 801994a:	4632      	mov	r2, r6
 801994c:	4631      	mov	r1, r6
 801994e:	f7f7 f889 	bl	8010a64 <qmult>
 8019952:	edd8 6a00 	vldr	s13, [r8]
 8019956:	edd6 5a00 	vldr	s11, [r6]
 801995a:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 801995e:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8019962:	ed99 6a00 	vldr	s12, [r9]
 8019966:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801996a:	4639      	mov	r1, r7
 801996c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8019970:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8019974:	3301      	adds	r3, #1
 8019976:	ed97 7a00 	vldr	s14, [r7]
 801997a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801997e:	aa13      	add	r2, sp, #76	; 0x4c
 8019980:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8019984:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8019988:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801998c:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8019990:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8019994:	ee27 6a86 	vmul.f32	s12, s15, s12
 8019998:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801999c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80199a0:	edc6 5a00 	vstr	s11, [r6]
 80199a4:	ed89 6a00 	vstr	s12, [r9]
 80199a8:	edc8 6a00 	vstr	s13, [r8]
 80199ac:	ed87 7a00 	vstr	s14, [r7]
 80199b0:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 80199b4:	f7f6 fdca 	bl	801054c <rotVect>
 80199b8:	6833      	ldr	r3, [r6, #0]
 80199ba:	60eb      	str	r3, [r5, #12]
 80199bc:	f8d9 3000 	ldr.w	r3, [r9]
 80199c0:	f8d8 2000 	ldr.w	r2, [r8]
 80199c4:	612b      	str	r3, [r5, #16]
 80199c6:	683b      	ldr	r3, [r7, #0]
 80199c8:	61ab      	str	r3, [r5, #24]
 80199ca:	616a      	str	r2, [r5, #20]
 80199cc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80199d0:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80199d4:	e9cd 3200 	strd	r3, r2, [sp]
 80199d8:	4601      	mov	r1, r0
 80199da:	f105 031c 	add.w	r3, r5, #28
 80199de:	462a      	mov	r2, r5
 80199e0:	f105 000c 	add.w	r0, r5, #12
 80199e4:	f7f8 fb86 	bl	80120f4 <output_update>
 80199e8:	b021      	add	sp, #132	; 0x84
 80199ea:	ecbd 8b06 	vpop	{d8-d10}
 80199ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199f2:	2301      	movs	r3, #1
 80199f4:	7123      	strb	r3, [r4, #4]
 80199f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80199fa:	e734      	b.n	8019866 <MotionFX_propagate+0xde>
 80199fc:	ee68 8a80 	vmul.f32	s17, s17, s0
 8019a00:	ee29 9a00 	vmul.f32	s18, s18, s0
 8019a04:	ee28 8a00 	vmul.f32	s16, s16, s0
 8019a08:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8019a0c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8019a10:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8019a14:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8019a18:	930c      	str	r3, [sp, #48]	; 0x30
 8019a1a:	e793      	b.n	8019944 <MotionFX_propagate+0x1bc>
 8019a1c:	200003ac 	.word	0x200003ac
 8019a20:	3c8efa35 	.word	0x3c8efa35
 8019a24:	38d1b718 	.word	0x38d1b718

08019a28 <MotionFX_MagCal_init>:
 8019a28:	b570      	push	{r4, r5, r6, lr}
 8019a2a:	4c42      	ldr	r4, [pc, #264]	; (8019b34 <MotionFX_MagCal_init+0x10c>)
 8019a2c:	f894 33c4 	ldrb.w	r3, [r4, #964]	; 0x3c4
 8019a30:	b903      	cbnz	r3, 8019a34 <MotionFX_MagCal_init+0xc>
 8019a32:	bd70      	pop	{r4, r5, r6, pc}
 8019a34:	1e43      	subs	r3, r0, #1
 8019a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019a3a:	4605      	mov	r5, r0
 8019a3c:	d2f9      	bcs.n	8019a32 <MotionFX_MagCal_init+0xa>
 8019a3e:	2900      	cmp	r1, #0
 8019a40:	d139      	bne.n	8019ab6 <MotionFX_MagCal_init+0x8e>
 8019a42:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
 8019a46:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019a4a:	4a3b      	ldr	r2, [pc, #236]	; (8019b38 <MotionFX_MagCal_init+0x110>)
 8019a4c:	1b5b      	subs	r3, r3, r5
 8019a4e:	ee07 3a90 	vmov	s15, r3
 8019a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a56:	23c8      	movs	r3, #200	; 0xc8
 8019a58:	eef0 7ae7 	vabs.f32	s15, s15
 8019a5c:	fb93 f3f5 	sdiv	r3, r3, r5
 8019a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a64:	b2db      	uxtb	r3, r3
 8019a66:	2b0f      	cmp	r3, #15
 8019a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019a6c:	bf28      	it	cs
 8019a6e:	230f      	movcs	r3, #15
 8019a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a74:	6015      	str	r5, [r2, #0]
 8019a76:	f884 37de 	strb.w	r3, [r4, #2014]	; 0x7de
 8019a7a:	b22d      	sxth	r5, r5
 8019a7c:	dc0e      	bgt.n	8019a9c <MotionFX_MagCal_init+0x74>
 8019a7e:	edd4 7a01 	vldr	s15, [r4, #4]
 8019a82:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8019b3c <MotionFX_MagCal_init+0x114>
 8019a86:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8019b40 <MotionFX_MagCal_init+0x118>
 8019a8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019a8e:	eef0 7ae7 	vabs.f32	s15, s15
 8019a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a9a:	dd08      	ble.n	8019aae <MotionFX_MagCal_init+0x86>
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	4a29      	ldr	r2, [pc, #164]	; (8019b44 <MotionFX_MagCal_init+0x11c>)
 8019aa0:	8123      	strh	r3, [r4, #8]
 8019aa2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8019aa6:	60e3      	str	r3, [r4, #12]
 8019aa8:	8021      	strh	r1, [r4, #0]
 8019aaa:	8065      	strh	r5, [r4, #2]
 8019aac:	6062      	str	r2, [r4, #4]
 8019aae:	2300      	movs	r3, #0
 8019ab0:	f884 3858 	strb.w	r3, [r4, #2136]	; 0x858
 8019ab4:	bd70      	pop	{r4, r5, r6, pc}
 8019ab6:	2600      	movs	r6, #0
 8019ab8:	f44f 0302 	mov.w	r3, #8519680	; 0x820000
 8019abc:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8019ac0:	f504 7372 	add.w	r3, r4, #968	; 0x3c8
 8019ac4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019ac8:	4631      	mov	r1, r6
 8019aca:	6123      	str	r3, [r4, #16]
 8019acc:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 8019ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019ad4:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8019ad8:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
 8019adc:	64e6      	str	r6, [r4, #76]	; 0x4c
 8019ade:	82a6      	strh	r6, [r4, #20]
 8019ae0:	f001 f853 	bl	801ab8a <memset>
 8019ae4:	225f      	movs	r2, #95	; 0x5f
 8019ae6:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 8019aea:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8019aee:	84a2      	strh	r2, [r4, #36]	; 0x24
 8019af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019af4:	23ff      	movs	r3, #255	; 0xff
 8019af6:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
 8019afa:	4631      	mov	r1, r6
 8019afc:	2230      	movs	r2, #48	; 0x30
 8019afe:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8019b02:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 8019b06:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 8019b0a:	e9c4 6606 	strd	r6, r6, [r4, #24]
 8019b0e:	6226      	str	r6, [r4, #32]
 8019b10:	f001 f83b 	bl	801ab8a <memset>
 8019b14:	f1a5 030a 	sub.w	r3, r5, #10
 8019b18:	b29b      	uxth	r3, r3
 8019b1a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019b1e:	2101      	movs	r1, #1
 8019b20:	2b32      	cmp	r3, #50	; 0x32
 8019b22:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
 8019b26:	67e2      	str	r2, [r4, #124]	; 0x7c
 8019b28:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8019b2c:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8019b30:	d889      	bhi.n	8019a46 <MotionFX_MagCal_init+0x1e>
 8019b32:	e786      	b.n	8019a42 <MotionFX_MagCal_init+0x1a>
 8019b34:	200003ac 	.word	0x200003ac
 8019b38:	20000000 	.word	0x20000000
 8019b3c:	3dcccccd 	.word	0x3dcccccd
 8019b40:	3c23d70a 	.word	0x3c23d70a
 8019b44:	3dcccccd 	.word	0x3dcccccd

08019b48 <MotionFX_MagCal_run>:
 8019b48:	4a3c      	ldr	r2, [pc, #240]	; (8019c3c <MotionFX_MagCal_run+0xf4>)
 8019b4a:	f892 33c4 	ldrb.w	r3, [r2, #964]	; 0x3c4
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d073      	beq.n	8019c3a <MotionFX_MagCal_run+0xf2>
 8019b52:	ed90 7a00 	vldr	s14, [r0]
 8019b56:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8019c40 <MotionFX_MagCal_run+0xf8>
 8019b5a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b62:	bfb4      	ite	lt
 8019b64:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8019b68:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8019b6c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8019b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b72:	ed90 7a01 	vldr	s14, [r0, #4]
 8019b76:	eddf 6a32 	vldr	s13, [pc, #200]	; 8019c40 <MotionFX_MagCal_run+0xf8>
 8019b7a:	f892 3858 	ldrb.w	r3, [r2, #2136]	; 0x858
 8019b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b82:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b8a:	ee17 1a90 	vmov	r1, s15
 8019b8e:	bfb4      	ite	lt
 8019b90:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8019b94:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8019b98:	eee7 7a26 	vfma.f32	s15, s14, s13
 8019b9c:	4604      	mov	r4, r0
 8019b9e:	ed90 7a02 	vldr	s14, [r0, #8]
 8019ba2:	eddf 6a27 	vldr	s13, [pc, #156]	; 8019c40 <MotionFX_MagCal_run+0xf8>
 8019ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019baa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8019bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bb2:	ee17 ca90 	vmov	ip, s15
 8019bb6:	bfac      	ite	ge
 8019bb8:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8019bbc:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8019bc0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8019bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019bc8:	ee17 0a90 	vmov	r0, s15
 8019bcc:	b36b      	cbz	r3, 8019c2a <MotionFX_MagCal_run+0xe2>
 8019bce:	4c1d      	ldr	r4, [pc, #116]	; (8019c44 <MotionFX_MagCal_run+0xfc>)
 8019bd0:	6824      	ldr	r4, [r4, #0]
 8019bd2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8019bd6:	fb14 f403 	smulbb	r4, r4, r3
 8019bda:	f8a5 47e0 	strh.w	r4, [r5, #2016]	; 0x7e0
 8019bde:	00dc      	lsls	r4, r3, #3
 8019be0:	f647 7efe 	movw	lr, #32766	; 0x7ffe
 8019be4:	4d18      	ldr	r5, [pc, #96]	; (8019c48 <MotionFX_MagCal_run+0x100>)
 8019be6:	4571      	cmp	r1, lr
 8019be8:	bfa8      	it	ge
 8019bea:	4671      	movge	r1, lr
 8019bec:	4570      	cmp	r0, lr
 8019bee:	bfa8      	it	ge
 8019bf0:	4670      	movge	r0, lr
 8019bf2:	42a9      	cmp	r1, r5
 8019bf4:	bfb8      	it	lt
 8019bf6:	4629      	movlt	r1, r5
 8019bf8:	45ac      	cmp	ip, r5
 8019bfa:	db02      	blt.n	8019c02 <MotionFX_MagCal_run+0xba>
 8019bfc:	45e6      	cmp	lr, ip
 8019bfe:	bfa8      	it	ge
 8019c00:	46e6      	movge	lr, ip
 8019c02:	4414      	add	r4, r2
 8019c04:	3301      	adds	r3, #1
 8019c06:	f8a4 17e2 	strh.w	r1, [r4, #2018]	; 0x7e2
 8019c0a:	490f      	ldr	r1, [pc, #60]	; (8019c48 <MotionFX_MagCal_run+0x100>)
 8019c0c:	f8a4 e7e4 	strh.w	lr, [r4, #2020]	; 0x7e4
 8019c10:	4288      	cmp	r0, r1
 8019c12:	bfb8      	it	lt
 8019c14:	4608      	movlt	r0, r1
 8019c16:	f892 17de 	ldrb.w	r1, [r2, #2014]	; 0x7de
 8019c1a:	f8a4 07e6 	strh.w	r0, [r4, #2022]	; 0x7e6
 8019c1e:	b2db      	uxtb	r3, r3
 8019c20:	428b      	cmp	r3, r1
 8019c22:	f882 3858 	strb.w	r3, [r2, #2136]	; 0x858
 8019c26:	d011      	beq.n	8019c4c <MotionFX_MagCal_run+0x104>
 8019c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c2a:	68e4      	ldr	r4, [r4, #12]
 8019c2c:	f8c2 47d8 	str.w	r4, [r2, #2008]	; 0x7d8
 8019c30:	2401      	movs	r4, #1
 8019c32:	f882 47dc 	strb.w	r4, [r2, #2012]	; 0x7dc
 8019c36:	461c      	mov	r4, r3
 8019c38:	e7d2      	b.n	8019be0 <MotionFX_MagCal_run+0x98>
 8019c3a:	4770      	bx	lr
 8019c3c:	200003ac 	.word	0x200003ac
 8019c40:	43fa0000 	.word	0x43fa0000
 8019c44:	20000000 	.word	0x20000000
 8019c48:	ffff8002 	.word	0xffff8002
 8019c4c:	f892 37dc 	ldrb.w	r3, [r2, #2012]	; 0x7dc
 8019c50:	f8d2 67d8 	ldr.w	r6, [r2, #2008]	; 0x7d8
 8019c54:	2000      	movs	r0, #0
 8019c56:	f882 0858 	strb.w	r0, [r2, #2136]	; 0x858
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	f000 8152 	beq.w	8019f04 <MotionFX_MagCal_run+0x3bc>
 8019c60:	e9d2 5003 	ldrd	r5, r0, [r2, #12]
 8019c64:	8954      	ldrh	r4, [r2, #10]
 8019c66:	8913      	ldrh	r3, [r2, #8]
 8019c68:	2900      	cmp	r1, #0
 8019c6a:	f000 8149 	beq.w	8019f00 <MotionFX_MagCal_run+0x3b8>
 8019c6e:	2c00      	cmp	r4, #0
 8019c70:	f000 8146 	beq.w	8019f00 <MotionFX_MagCal_run+0x3b8>
 8019c74:	42a3      	cmp	r3, r4
 8019c76:	bf28      	it	cs
 8019c78:	4623      	movcs	r3, r4
 8019c7a:	3301      	adds	r3, #1
 8019c7c:	b29b      	uxth	r3, r3
 8019c7e:	42a3      	cmp	r3, r4
 8019c80:	bf28      	it	cs
 8019c82:	4623      	movcs	r3, r4
 8019c84:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
 8019c88:	eb03 050c 	add.w	r5, r3, ip
 8019c8c:	f04f 0e01 	mov.w	lr, #1
 8019c90:	f800 e035 	strb.w	lr, [r0, r5, lsl #3]
 8019c94:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8019c98:	f8d2 77e2 	ldr.w	r7, [r2, #2018]	; 0x7e2
 8019c9c:	f8c5 7002 	str.w	r7, [r5, #2]
 8019ca0:	f8b2 77e6 	ldrh.w	r7, [r2, #2022]	; 0x7e6
 8019ca4:	80ef      	strh	r7, [r5, #6]
 8019ca6:	4571      	cmp	r1, lr
 8019ca8:	f000 8123 	beq.w	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019cac:	4473      	add	r3, lr
 8019cae:	b29b      	uxth	r3, r3
 8019cb0:	42a3      	cmp	r3, r4
 8019cb2:	bf28      	it	cs
 8019cb4:	4623      	movcs	r3, r4
 8019cb6:	eb03 050c 	add.w	r5, r3, ip
 8019cba:	2902      	cmp	r1, #2
 8019cbc:	f800 e035 	strb.w	lr, [r0, r5, lsl #3]
 8019cc0:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8019cc4:	f8d2 77ea 	ldr.w	r7, [r2, #2026]	; 0x7ea
 8019cc8:	f8c5 7002 	str.w	r7, [r5, #2]
 8019ccc:	f8b2 77ee 	ldrh.w	r7, [r2, #2030]	; 0x7ee
 8019cd0:	80ef      	strh	r7, [r5, #6]
 8019cd2:	f000 810e 	beq.w	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019cd6:	4473      	add	r3, lr
 8019cd8:	b29b      	uxth	r3, r3
 8019cda:	42a3      	cmp	r3, r4
 8019cdc:	bf28      	it	cs
 8019cde:	4623      	movcs	r3, r4
 8019ce0:	eb03 050c 	add.w	r5, r3, ip
 8019ce4:	2903      	cmp	r1, #3
 8019ce6:	f800 e035 	strb.w	lr, [r0, r5, lsl #3]
 8019cea:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8019cee:	f8d2 77f2 	ldr.w	r7, [r2, #2034]	; 0x7f2
 8019cf2:	f8c5 7002 	str.w	r7, [r5, #2]
 8019cf6:	f8b2 77f6 	ldrh.w	r7, [r2, #2038]	; 0x7f6
 8019cfa:	80ef      	strh	r7, [r5, #6]
 8019cfc:	f000 80f9 	beq.w	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019d00:	4473      	add	r3, lr
 8019d02:	b29b      	uxth	r3, r3
 8019d04:	42a3      	cmp	r3, r4
 8019d06:	bf28      	it	cs
 8019d08:	4623      	movcs	r3, r4
 8019d0a:	eb03 050c 	add.w	r5, r3, ip
 8019d0e:	2904      	cmp	r1, #4
 8019d10:	f800 e035 	strb.w	lr, [r0, r5, lsl #3]
 8019d14:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8019d18:	f8d2 77fa 	ldr.w	r7, [r2, #2042]	; 0x7fa
 8019d1c:	f8c5 7002 	str.w	r7, [r5, #2]
 8019d20:	f8b2 77fe 	ldrh.w	r7, [r2, #2046]	; 0x7fe
 8019d24:	80ef      	strh	r7, [r5, #6]
 8019d26:	f000 80e4 	beq.w	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019d2a:	4473      	add	r3, lr
 8019d2c:	b29b      	uxth	r3, r3
 8019d2e:	42a3      	cmp	r3, r4
 8019d30:	bf28      	it	cs
 8019d32:	4623      	movcs	r3, r4
 8019d34:	eb03 050c 	add.w	r5, r3, ip
 8019d38:	2905      	cmp	r1, #5
 8019d3a:	f800 e035 	strb.w	lr, [r0, r5, lsl #3]
 8019d3e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8019d42:	f8d2 7802 	ldr.w	r7, [r2, #2050]	; 0x802
 8019d46:	f8c5 7002 	str.w	r7, [r5, #2]
 8019d4a:	f8b2 7806 	ldrh.w	r7, [r2, #2054]	; 0x806
 8019d4e:	80ef      	strh	r7, [r5, #6]
 8019d50:	f000 80cf 	beq.w	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019d54:	4473      	add	r3, lr
 8019d56:	b29b      	uxth	r3, r3
 8019d58:	42a3      	cmp	r3, r4
 8019d5a:	bf28      	it	cs
 8019d5c:	4623      	movcs	r3, r4
 8019d5e:	449c      	add	ip, r3
 8019d60:	2906      	cmp	r1, #6
 8019d62:	f800 e03c 	strb.w	lr, [r0, ip, lsl #3]
 8019d66:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8019d6a:	f8d2 580a 	ldr.w	r5, [r2, #2058]	; 0x80a
 8019d6e:	f8cc 5002 	str.w	r5, [ip, #2]
 8019d72:	f8b2 580e 	ldrh.w	r5, [r2, #2062]	; 0x80e
 8019d76:	f8ac 5006 	strh.w	r5, [ip, #6]
 8019d7a:	f000 80ba 	beq.w	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019d7e:	4473      	add	r3, lr
 8019d80:	b29b      	uxth	r3, r3
 8019d82:	42a3      	cmp	r3, r4
 8019d84:	bf28      	it	cs
 8019d86:	4623      	movcs	r3, r4
 8019d88:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 8019d8c:	eb03 0e05 	add.w	lr, r3, r5
 8019d90:	f04f 0c01 	mov.w	ip, #1
 8019d94:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8019d98:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8019d9c:	f8d2 7812 	ldr.w	r7, [r2, #2066]	; 0x812
 8019da0:	f8ce 7002 	str.w	r7, [lr, #2]
 8019da4:	f8b2 7816 	ldrh.w	r7, [r2, #2070]	; 0x816
 8019da8:	f8ae 7006 	strh.w	r7, [lr, #6]
 8019dac:	2907      	cmp	r1, #7
 8019dae:	f000 80a0 	beq.w	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019db2:	4463      	add	r3, ip
 8019db4:	b29b      	uxth	r3, r3
 8019db6:	42a3      	cmp	r3, r4
 8019db8:	bf28      	it	cs
 8019dba:	4623      	movcs	r3, r4
 8019dbc:	eb03 0e05 	add.w	lr, r3, r5
 8019dc0:	2908      	cmp	r1, #8
 8019dc2:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8019dc6:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8019dca:	f8d2 781a 	ldr.w	r7, [r2, #2074]	; 0x81a
 8019dce:	f8ce 7002 	str.w	r7, [lr, #2]
 8019dd2:	f8b2 781e 	ldrh.w	r7, [r2, #2078]	; 0x81e
 8019dd6:	f8ae 7006 	strh.w	r7, [lr, #6]
 8019dda:	f000 808a 	beq.w	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019dde:	4463      	add	r3, ip
 8019de0:	b29b      	uxth	r3, r3
 8019de2:	42a3      	cmp	r3, r4
 8019de4:	bf28      	it	cs
 8019de6:	4623      	movcs	r3, r4
 8019de8:	eb03 0e05 	add.w	lr, r3, r5
 8019dec:	2909      	cmp	r1, #9
 8019dee:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8019df2:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8019df6:	f8d2 7822 	ldr.w	r7, [r2, #2082]	; 0x822
 8019dfa:	f8ce 7002 	str.w	r7, [lr, #2]
 8019dfe:	f8b2 7826 	ldrh.w	r7, [r2, #2086]	; 0x826
 8019e02:	f8ae 7006 	strh.w	r7, [lr, #6]
 8019e06:	d074      	beq.n	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019e08:	4463      	add	r3, ip
 8019e0a:	b29b      	uxth	r3, r3
 8019e0c:	42a3      	cmp	r3, r4
 8019e0e:	bf28      	it	cs
 8019e10:	4623      	movcs	r3, r4
 8019e12:	195f      	adds	r7, r3, r5
 8019e14:	290a      	cmp	r1, #10
 8019e16:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8019e1a:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8019e1e:	f8d2 e82a 	ldr.w	lr, [r2, #2090]	; 0x82a
 8019e22:	f8c7 e002 	str.w	lr, [r7, #2]
 8019e26:	f8b2 e82e 	ldrh.w	lr, [r2, #2094]	; 0x82e
 8019e2a:	f8a7 e006 	strh.w	lr, [r7, #6]
 8019e2e:	d060      	beq.n	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019e30:	4463      	add	r3, ip
 8019e32:	b29b      	uxth	r3, r3
 8019e34:	42a3      	cmp	r3, r4
 8019e36:	bf28      	it	cs
 8019e38:	4623      	movcs	r3, r4
 8019e3a:	195f      	adds	r7, r3, r5
 8019e3c:	290b      	cmp	r1, #11
 8019e3e:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8019e42:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8019e46:	f8d2 e832 	ldr.w	lr, [r2, #2098]	; 0x832
 8019e4a:	f8c7 e002 	str.w	lr, [r7, #2]
 8019e4e:	f8b2 e836 	ldrh.w	lr, [r2, #2102]	; 0x836
 8019e52:	f8a7 e006 	strh.w	lr, [r7, #6]
 8019e56:	d04c      	beq.n	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019e58:	4463      	add	r3, ip
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	42a3      	cmp	r3, r4
 8019e5e:	bf28      	it	cs
 8019e60:	4623      	movcs	r3, r4
 8019e62:	195f      	adds	r7, r3, r5
 8019e64:	290c      	cmp	r1, #12
 8019e66:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8019e6a:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8019e6e:	f8d2 e83a 	ldr.w	lr, [r2, #2106]	; 0x83a
 8019e72:	f8c7 e002 	str.w	lr, [r7, #2]
 8019e76:	f8b2 e83e 	ldrh.w	lr, [r2, #2110]	; 0x83e
 8019e7a:	f8a7 e006 	strh.w	lr, [r7, #6]
 8019e7e:	d038      	beq.n	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019e80:	4463      	add	r3, ip
 8019e82:	b29b      	uxth	r3, r3
 8019e84:	42a3      	cmp	r3, r4
 8019e86:	bf28      	it	cs
 8019e88:	4623      	movcs	r3, r4
 8019e8a:	195f      	adds	r7, r3, r5
 8019e8c:	290d      	cmp	r1, #13
 8019e8e:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8019e92:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8019e96:	f8d2 e842 	ldr.w	lr, [r2, #2114]	; 0x842
 8019e9a:	f8c7 e002 	str.w	lr, [r7, #2]
 8019e9e:	f8b2 e846 	ldrh.w	lr, [r2, #2118]	; 0x846
 8019ea2:	f8a7 e006 	strh.w	lr, [r7, #6]
 8019ea6:	d024      	beq.n	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019ea8:	4463      	add	r3, ip
 8019eaa:	b29b      	uxth	r3, r3
 8019eac:	42a3      	cmp	r3, r4
 8019eae:	bf28      	it	cs
 8019eb0:	4623      	movcs	r3, r4
 8019eb2:	195f      	adds	r7, r3, r5
 8019eb4:	290e      	cmp	r1, #14
 8019eb6:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8019eba:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8019ebe:	f8d2 e84a 	ldr.w	lr, [r2, #2122]	; 0x84a
 8019ec2:	f8c7 e002 	str.w	lr, [r7, #2]
 8019ec6:	f8b2 e84e 	ldrh.w	lr, [r2, #2126]	; 0x84e
 8019eca:	f8a7 e006 	strh.w	lr, [r7, #6]
 8019ece:	d010      	beq.n	8019ef2 <MotionFX_MagCal_run+0x3aa>
 8019ed0:	4463      	add	r3, ip
 8019ed2:	b29b      	uxth	r3, r3
 8019ed4:	42a3      	cmp	r3, r4
 8019ed6:	bf28      	it	cs
 8019ed8:	4623      	movcs	r3, r4
 8019eda:	441d      	add	r5, r3
 8019edc:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 8019ee0:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8019ee4:	f8d2 4852 	ldr.w	r4, [r2, #2130]	; 0x852
 8019ee8:	f8c0 4002 	str.w	r4, [r0, #2]
 8019eec:	f8b2 4856 	ldrh.w	r4, [r2, #2134]	; 0x856
 8019ef0:	80c4      	strh	r4, [r0, #6]
 8019ef2:	3901      	subs	r1, #1
 8019ef4:	b2c9      	uxtb	r1, r1
 8019ef6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8019efa:	f8b1 57e0 	ldrh.w	r5, [r1, #2016]	; 0x7e0
 8019efe:	4435      	add	r5, r6
 8019f00:	8113      	strh	r3, [r2, #8]
 8019f02:	60d5      	str	r5, [r2, #12]
 8019f04:	f892 3048 	ldrb.w	r3, [r2, #72]	; 0x48
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	f43f ae8d 	beq.w	8019c28 <MotionFX_MagCal_run+0xe0>
 8019f0e:	8911      	ldrh	r1, [r2, #8]
 8019f10:	8953      	ldrh	r3, [r2, #10]
 8019f12:	428b      	cmp	r3, r1
 8019f14:	d022      	beq.n	8019f5c <MotionFX_MagCal_run+0x414>
 8019f16:	b329      	cbz	r1, 8019f64 <MotionFX_MagCal_run+0x41c>
 8019f18:	68d3      	ldr	r3, [r2, #12]
 8019f1a:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8019f1e:	3301      	adds	r3, #1
 8019f20:	4403      	add	r3, r0
 8019f22:	1c58      	adds	r0, r3, #1
 8019f24:	d01e      	beq.n	8019f64 <MotionFX_MagCal_run+0x41c>
 8019f26:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8019f2a:	3410      	adds	r4, #16
 8019f2c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8019f2e:	42a0      	cmp	r0, r4
 8019f30:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8019f34:	bf84      	itt	hi
 8019f36:	64d3      	strhi	r3, [r2, #76]	; 0x4c
 8019f38:	4618      	movhi	r0, r3
 8019f3a:	4420      	add	r0, r4
 8019f3c:	4283      	cmp	r3, r0
 8019f3e:	f4ff ae73 	bcc.w	8019c28 <MotionFX_MagCal_run+0xe0>
 8019f42:	b131      	cbz	r1, 8019f52 <MotionFX_MagCal_run+0x40a>
 8019f44:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8019f48:	68d2      	ldr	r2, [r2, #12]
 8019f4a:	3901      	subs	r1, #1
 8019f4c:	fb00 2111 	mls	r1, r0, r1, r2
 8019f50:	b289      	uxth	r1, r1
 8019f52:	1a5b      	subs	r3, r3, r1
 8019f54:	b21b      	sxth	r3, r3
 8019f56:	42a3      	cmp	r3, r4
 8019f58:	f6ff ae66 	blt.w	8019c28 <MotionFX_MagCal_run+0xe0>
 8019f5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019f60:	f7f8 bc82 	b.w	8012868 <MEMS_runMagCal.constprop.0>
 8019f64:	f242 7410 	movw	r4, #10000	; 0x2710
 8019f68:	2300      	movs	r3, #0
 8019f6a:	e7df      	b.n	8019f2c <MotionFX_MagCal_run+0x3e4>

08019f6c <MotionFX_MagCal_getParams>:
 8019f6c:	4b20      	ldr	r3, [pc, #128]	; (8019ff0 <MotionFX_MagCal_getParams+0x84>)
 8019f6e:	f893 23c4 	ldrb.w	r2, [r3, #964]	; 0x3c4
 8019f72:	b902      	cbnz	r2, 8019f76 <MotionFX_MagCal_getParams+0xa>
 8019f74:	4770      	bx	lr
 8019f76:	b530      	push	{r4, r5, lr}
 8019f78:	f103 0e6c 	add.w	lr, r3, #108	; 0x6c
 8019f7c:	4604      	mov	r4, r0
 8019f7e:	f893 506c 	ldrb.w	r5, [r3, #108]	; 0x6c
 8019f82:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8019ff4 <MotionFX_MagCal_getParams+0x88>
 8019f86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019f8a:	b08f      	sub	sp, #60	; 0x3c
 8019f8c:	f10d 0c04 	add.w	ip, sp, #4
 8019f90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019f94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019f98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019f9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019fa0:	eddd 6a02 	vldr	s13, [sp, #8]
 8019fa4:	ed9d 7a03 	vldr	s14, [sp, #12]
 8019fa8:	eddd 7a04 	vldr	s15, [sp, #16]
 8019fac:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8019fb0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019fb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019fb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019fbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019fc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019fc8:	f8de 3000 	ldr.w	r3, [lr]
 8019fcc:	7325      	strb	r5, [r4, #12]
 8019fce:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019fd2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019fd6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019fda:	edc4 6a00 	vstr	s13, [r4]
 8019fde:	f8cc 3000 	str.w	r3, [ip]
 8019fe2:	ed84 7a01 	vstr	s14, [r4, #4]
 8019fe6:	edc4 7a02 	vstr	s15, [r4, #8]
 8019fea:	b00f      	add	sp, #60	; 0x3c
 8019fec:	bd30      	pop	{r4, r5, pc}
 8019fee:	bf00      	nop
 8019ff0:	200003ac 	.word	0x200003ac
 8019ff4:	3b03126f 	.word	0x3b03126f

08019ff8 <MotionFX_GetLibVersion>:
 8019ff8:	b570      	push	{r4, r5, r6, lr}
 8019ffa:	4b13      	ldr	r3, [pc, #76]	; (801a048 <MotionFX_GetLibVersion+0x50>)
 8019ffc:	f893 63c4 	ldrb.w	r6, [r3, #964]	; 0x3c4
 801a000:	b08a      	sub	sp, #40	; 0x28
 801a002:	b1ee      	cbz	r6, 801a040 <MotionFX_GetLibVersion+0x48>
 801a004:	4d11      	ldr	r5, [pc, #68]	; (801a04c <MotionFX_GetLibVersion+0x54>)
 801a006:	4684      	mov	ip, r0
 801a008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a00a:	f10d 0e04 	add.w	lr, sp, #4
 801a00e:	4674      	mov	r4, lr
 801a010:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a014:	682b      	ldr	r3, [r5, #0]
 801a016:	f82e 3b02 	strh.w	r3, [lr], #2
 801a01a:	0c1b      	lsrs	r3, r3, #16
 801a01c:	f88e 3000 	strb.w	r3, [lr]
 801a020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a022:	f8cc 2008 	str.w	r2, [ip, #8]
 801a026:	8822      	ldrh	r2, [r4, #0]
 801a028:	f8ac 2010 	strh.w	r2, [ip, #16]
 801a02c:	78a2      	ldrb	r2, [r4, #2]
 801a02e:	f8cc 0000 	str.w	r0, [ip]
 801a032:	2612      	movs	r6, #18
 801a034:	f8cc 1004 	str.w	r1, [ip, #4]
 801a038:	f8cc 300c 	str.w	r3, [ip, #12]
 801a03c:	f88c 2012 	strb.w	r2, [ip, #18]
 801a040:	4630      	mov	r0, r6
 801a042:	b00a      	add	sp, #40	; 0x28
 801a044:	bd70      	pop	{r4, r5, r6, pc}
 801a046:	bf00      	nop
 801a048:	200003ac 	.word	0x200003ac
 801a04c:	0801ebbc 	.word	0x0801ebbc

0801a050 <__cvt>:
 801a050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a054:	ec55 4b10 	vmov	r4, r5, d0
 801a058:	2d00      	cmp	r5, #0
 801a05a:	460e      	mov	r6, r1
 801a05c:	4619      	mov	r1, r3
 801a05e:	462b      	mov	r3, r5
 801a060:	bfbb      	ittet	lt
 801a062:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a066:	461d      	movlt	r5, r3
 801a068:	2300      	movge	r3, #0
 801a06a:	232d      	movlt	r3, #45	; 0x2d
 801a06c:	700b      	strb	r3, [r1, #0]
 801a06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a070:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a074:	4691      	mov	r9, r2
 801a076:	f023 0820 	bic.w	r8, r3, #32
 801a07a:	bfbc      	itt	lt
 801a07c:	4622      	movlt	r2, r4
 801a07e:	4614      	movlt	r4, r2
 801a080:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a084:	d005      	beq.n	801a092 <__cvt+0x42>
 801a086:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a08a:	d100      	bne.n	801a08e <__cvt+0x3e>
 801a08c:	3601      	adds	r6, #1
 801a08e:	2102      	movs	r1, #2
 801a090:	e000      	b.n	801a094 <__cvt+0x44>
 801a092:	2103      	movs	r1, #3
 801a094:	ab03      	add	r3, sp, #12
 801a096:	9301      	str	r3, [sp, #4]
 801a098:	ab02      	add	r3, sp, #8
 801a09a:	9300      	str	r3, [sp, #0]
 801a09c:	ec45 4b10 	vmov	d0, r4, r5
 801a0a0:	4653      	mov	r3, sl
 801a0a2:	4632      	mov	r2, r6
 801a0a4:	f000 fe90 	bl	801adc8 <_dtoa_r>
 801a0a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a0ac:	4607      	mov	r7, r0
 801a0ae:	d102      	bne.n	801a0b6 <__cvt+0x66>
 801a0b0:	f019 0f01 	tst.w	r9, #1
 801a0b4:	d022      	beq.n	801a0fc <__cvt+0xac>
 801a0b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a0ba:	eb07 0906 	add.w	r9, r7, r6
 801a0be:	d110      	bne.n	801a0e2 <__cvt+0x92>
 801a0c0:	783b      	ldrb	r3, [r7, #0]
 801a0c2:	2b30      	cmp	r3, #48	; 0x30
 801a0c4:	d10a      	bne.n	801a0dc <__cvt+0x8c>
 801a0c6:	2200      	movs	r2, #0
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	4620      	mov	r0, r4
 801a0cc:	4629      	mov	r1, r5
 801a0ce:	f7e6 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 801a0d2:	b918      	cbnz	r0, 801a0dc <__cvt+0x8c>
 801a0d4:	f1c6 0601 	rsb	r6, r6, #1
 801a0d8:	f8ca 6000 	str.w	r6, [sl]
 801a0dc:	f8da 3000 	ldr.w	r3, [sl]
 801a0e0:	4499      	add	r9, r3
 801a0e2:	2200      	movs	r2, #0
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	4629      	mov	r1, r5
 801a0ea:	f7e6 fced 	bl	8000ac8 <__aeabi_dcmpeq>
 801a0ee:	b108      	cbz	r0, 801a0f4 <__cvt+0xa4>
 801a0f0:	f8cd 900c 	str.w	r9, [sp, #12]
 801a0f4:	2230      	movs	r2, #48	; 0x30
 801a0f6:	9b03      	ldr	r3, [sp, #12]
 801a0f8:	454b      	cmp	r3, r9
 801a0fa:	d307      	bcc.n	801a10c <__cvt+0xbc>
 801a0fc:	9b03      	ldr	r3, [sp, #12]
 801a0fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a100:	1bdb      	subs	r3, r3, r7
 801a102:	4638      	mov	r0, r7
 801a104:	6013      	str	r3, [r2, #0]
 801a106:	b004      	add	sp, #16
 801a108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a10c:	1c59      	adds	r1, r3, #1
 801a10e:	9103      	str	r1, [sp, #12]
 801a110:	701a      	strb	r2, [r3, #0]
 801a112:	e7f0      	b.n	801a0f6 <__cvt+0xa6>

0801a114 <__exponent>:
 801a114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a116:	4603      	mov	r3, r0
 801a118:	2900      	cmp	r1, #0
 801a11a:	bfb8      	it	lt
 801a11c:	4249      	neglt	r1, r1
 801a11e:	f803 2b02 	strb.w	r2, [r3], #2
 801a122:	bfb4      	ite	lt
 801a124:	222d      	movlt	r2, #45	; 0x2d
 801a126:	222b      	movge	r2, #43	; 0x2b
 801a128:	2909      	cmp	r1, #9
 801a12a:	7042      	strb	r2, [r0, #1]
 801a12c:	dd2a      	ble.n	801a184 <__exponent+0x70>
 801a12e:	f10d 0207 	add.w	r2, sp, #7
 801a132:	4617      	mov	r7, r2
 801a134:	260a      	movs	r6, #10
 801a136:	4694      	mov	ip, r2
 801a138:	fb91 f5f6 	sdiv	r5, r1, r6
 801a13c:	fb06 1415 	mls	r4, r6, r5, r1
 801a140:	3430      	adds	r4, #48	; 0x30
 801a142:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a146:	460c      	mov	r4, r1
 801a148:	2c63      	cmp	r4, #99	; 0x63
 801a14a:	f102 32ff 	add.w	r2, r2, #4294967295
 801a14e:	4629      	mov	r1, r5
 801a150:	dcf1      	bgt.n	801a136 <__exponent+0x22>
 801a152:	3130      	adds	r1, #48	; 0x30
 801a154:	f1ac 0402 	sub.w	r4, ip, #2
 801a158:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a15c:	1c41      	adds	r1, r0, #1
 801a15e:	4622      	mov	r2, r4
 801a160:	42ba      	cmp	r2, r7
 801a162:	d30a      	bcc.n	801a17a <__exponent+0x66>
 801a164:	f10d 0209 	add.w	r2, sp, #9
 801a168:	eba2 020c 	sub.w	r2, r2, ip
 801a16c:	42bc      	cmp	r4, r7
 801a16e:	bf88      	it	hi
 801a170:	2200      	movhi	r2, #0
 801a172:	4413      	add	r3, r2
 801a174:	1a18      	subs	r0, r3, r0
 801a176:	b003      	add	sp, #12
 801a178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a17a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a17e:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a182:	e7ed      	b.n	801a160 <__exponent+0x4c>
 801a184:	2330      	movs	r3, #48	; 0x30
 801a186:	3130      	adds	r1, #48	; 0x30
 801a188:	7083      	strb	r3, [r0, #2]
 801a18a:	70c1      	strb	r1, [r0, #3]
 801a18c:	1d03      	adds	r3, r0, #4
 801a18e:	e7f1      	b.n	801a174 <__exponent+0x60>

0801a190 <_printf_float>:
 801a190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a194:	ed2d 8b02 	vpush	{d8}
 801a198:	b08d      	sub	sp, #52	; 0x34
 801a19a:	460c      	mov	r4, r1
 801a19c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a1a0:	4616      	mov	r6, r2
 801a1a2:	461f      	mov	r7, r3
 801a1a4:	4605      	mov	r5, r0
 801a1a6:	f000 fcf9 	bl	801ab9c <_localeconv_r>
 801a1aa:	f8d0 a000 	ldr.w	sl, [r0]
 801a1ae:	4650      	mov	r0, sl
 801a1b0:	f7e6 f85e 	bl	8000270 <strlen>
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	930a      	str	r3, [sp, #40]	; 0x28
 801a1b8:	6823      	ldr	r3, [r4, #0]
 801a1ba:	9305      	str	r3, [sp, #20]
 801a1bc:	f8d8 3000 	ldr.w	r3, [r8]
 801a1c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a1c4:	3307      	adds	r3, #7
 801a1c6:	f023 0307 	bic.w	r3, r3, #7
 801a1ca:	f103 0208 	add.w	r2, r3, #8
 801a1ce:	f8c8 2000 	str.w	r2, [r8]
 801a1d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a1d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a1da:	9307      	str	r3, [sp, #28]
 801a1dc:	f8cd 8018 	str.w	r8, [sp, #24]
 801a1e0:	ee08 0a10 	vmov	s16, r0
 801a1e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801a1e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a1ec:	4b9e      	ldr	r3, [pc, #632]	; (801a468 <_printf_float+0x2d8>)
 801a1ee:	f04f 32ff 	mov.w	r2, #4294967295
 801a1f2:	f7e6 fc9b 	bl	8000b2c <__aeabi_dcmpun>
 801a1f6:	bb88      	cbnz	r0, 801a25c <_printf_float+0xcc>
 801a1f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a1fc:	4b9a      	ldr	r3, [pc, #616]	; (801a468 <_printf_float+0x2d8>)
 801a1fe:	f04f 32ff 	mov.w	r2, #4294967295
 801a202:	f7e6 fc75 	bl	8000af0 <__aeabi_dcmple>
 801a206:	bb48      	cbnz	r0, 801a25c <_printf_float+0xcc>
 801a208:	2200      	movs	r2, #0
 801a20a:	2300      	movs	r3, #0
 801a20c:	4640      	mov	r0, r8
 801a20e:	4649      	mov	r1, r9
 801a210:	f7e6 fc64 	bl	8000adc <__aeabi_dcmplt>
 801a214:	b110      	cbz	r0, 801a21c <_printf_float+0x8c>
 801a216:	232d      	movs	r3, #45	; 0x2d
 801a218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a21c:	4a93      	ldr	r2, [pc, #588]	; (801a46c <_printf_float+0x2dc>)
 801a21e:	4b94      	ldr	r3, [pc, #592]	; (801a470 <_printf_float+0x2e0>)
 801a220:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a224:	bf94      	ite	ls
 801a226:	4690      	movls	r8, r2
 801a228:	4698      	movhi	r8, r3
 801a22a:	2303      	movs	r3, #3
 801a22c:	6123      	str	r3, [r4, #16]
 801a22e:	9b05      	ldr	r3, [sp, #20]
 801a230:	f023 0304 	bic.w	r3, r3, #4
 801a234:	6023      	str	r3, [r4, #0]
 801a236:	f04f 0900 	mov.w	r9, #0
 801a23a:	9700      	str	r7, [sp, #0]
 801a23c:	4633      	mov	r3, r6
 801a23e:	aa0b      	add	r2, sp, #44	; 0x2c
 801a240:	4621      	mov	r1, r4
 801a242:	4628      	mov	r0, r5
 801a244:	f000 f9da 	bl	801a5fc <_printf_common>
 801a248:	3001      	adds	r0, #1
 801a24a:	f040 8090 	bne.w	801a36e <_printf_float+0x1de>
 801a24e:	f04f 30ff 	mov.w	r0, #4294967295
 801a252:	b00d      	add	sp, #52	; 0x34
 801a254:	ecbd 8b02 	vpop	{d8}
 801a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a25c:	4642      	mov	r2, r8
 801a25e:	464b      	mov	r3, r9
 801a260:	4640      	mov	r0, r8
 801a262:	4649      	mov	r1, r9
 801a264:	f7e6 fc62 	bl	8000b2c <__aeabi_dcmpun>
 801a268:	b140      	cbz	r0, 801a27c <_printf_float+0xec>
 801a26a:	464b      	mov	r3, r9
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	bfbc      	itt	lt
 801a270:	232d      	movlt	r3, #45	; 0x2d
 801a272:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a276:	4a7f      	ldr	r2, [pc, #508]	; (801a474 <_printf_float+0x2e4>)
 801a278:	4b7f      	ldr	r3, [pc, #508]	; (801a478 <_printf_float+0x2e8>)
 801a27a:	e7d1      	b.n	801a220 <_printf_float+0x90>
 801a27c:	6863      	ldr	r3, [r4, #4]
 801a27e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a282:	9206      	str	r2, [sp, #24]
 801a284:	1c5a      	adds	r2, r3, #1
 801a286:	d13f      	bne.n	801a308 <_printf_float+0x178>
 801a288:	2306      	movs	r3, #6
 801a28a:	6063      	str	r3, [r4, #4]
 801a28c:	9b05      	ldr	r3, [sp, #20]
 801a28e:	6861      	ldr	r1, [r4, #4]
 801a290:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a294:	2300      	movs	r3, #0
 801a296:	9303      	str	r3, [sp, #12]
 801a298:	ab0a      	add	r3, sp, #40	; 0x28
 801a29a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a29e:	ab09      	add	r3, sp, #36	; 0x24
 801a2a0:	ec49 8b10 	vmov	d0, r8, r9
 801a2a4:	9300      	str	r3, [sp, #0]
 801a2a6:	6022      	str	r2, [r4, #0]
 801a2a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a2ac:	4628      	mov	r0, r5
 801a2ae:	f7ff fecf 	bl	801a050 <__cvt>
 801a2b2:	9b06      	ldr	r3, [sp, #24]
 801a2b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a2b6:	2b47      	cmp	r3, #71	; 0x47
 801a2b8:	4680      	mov	r8, r0
 801a2ba:	d108      	bne.n	801a2ce <_printf_float+0x13e>
 801a2bc:	1cc8      	adds	r0, r1, #3
 801a2be:	db02      	blt.n	801a2c6 <_printf_float+0x136>
 801a2c0:	6863      	ldr	r3, [r4, #4]
 801a2c2:	4299      	cmp	r1, r3
 801a2c4:	dd41      	ble.n	801a34a <_printf_float+0x1ba>
 801a2c6:	f1ab 0302 	sub.w	r3, fp, #2
 801a2ca:	fa5f fb83 	uxtb.w	fp, r3
 801a2ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a2d2:	d820      	bhi.n	801a316 <_printf_float+0x186>
 801a2d4:	3901      	subs	r1, #1
 801a2d6:	465a      	mov	r2, fp
 801a2d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a2dc:	9109      	str	r1, [sp, #36]	; 0x24
 801a2de:	f7ff ff19 	bl	801a114 <__exponent>
 801a2e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a2e4:	1813      	adds	r3, r2, r0
 801a2e6:	2a01      	cmp	r2, #1
 801a2e8:	4681      	mov	r9, r0
 801a2ea:	6123      	str	r3, [r4, #16]
 801a2ec:	dc02      	bgt.n	801a2f4 <_printf_float+0x164>
 801a2ee:	6822      	ldr	r2, [r4, #0]
 801a2f0:	07d2      	lsls	r2, r2, #31
 801a2f2:	d501      	bpl.n	801a2f8 <_printf_float+0x168>
 801a2f4:	3301      	adds	r3, #1
 801a2f6:	6123      	str	r3, [r4, #16]
 801a2f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d09c      	beq.n	801a23a <_printf_float+0xaa>
 801a300:	232d      	movs	r3, #45	; 0x2d
 801a302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a306:	e798      	b.n	801a23a <_printf_float+0xaa>
 801a308:	9a06      	ldr	r2, [sp, #24]
 801a30a:	2a47      	cmp	r2, #71	; 0x47
 801a30c:	d1be      	bne.n	801a28c <_printf_float+0xfc>
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d1bc      	bne.n	801a28c <_printf_float+0xfc>
 801a312:	2301      	movs	r3, #1
 801a314:	e7b9      	b.n	801a28a <_printf_float+0xfa>
 801a316:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a31a:	d118      	bne.n	801a34e <_printf_float+0x1be>
 801a31c:	2900      	cmp	r1, #0
 801a31e:	6863      	ldr	r3, [r4, #4]
 801a320:	dd0b      	ble.n	801a33a <_printf_float+0x1aa>
 801a322:	6121      	str	r1, [r4, #16]
 801a324:	b913      	cbnz	r3, 801a32c <_printf_float+0x19c>
 801a326:	6822      	ldr	r2, [r4, #0]
 801a328:	07d0      	lsls	r0, r2, #31
 801a32a:	d502      	bpl.n	801a332 <_printf_float+0x1a2>
 801a32c:	3301      	adds	r3, #1
 801a32e:	440b      	add	r3, r1
 801a330:	6123      	str	r3, [r4, #16]
 801a332:	65a1      	str	r1, [r4, #88]	; 0x58
 801a334:	f04f 0900 	mov.w	r9, #0
 801a338:	e7de      	b.n	801a2f8 <_printf_float+0x168>
 801a33a:	b913      	cbnz	r3, 801a342 <_printf_float+0x1b2>
 801a33c:	6822      	ldr	r2, [r4, #0]
 801a33e:	07d2      	lsls	r2, r2, #31
 801a340:	d501      	bpl.n	801a346 <_printf_float+0x1b6>
 801a342:	3302      	adds	r3, #2
 801a344:	e7f4      	b.n	801a330 <_printf_float+0x1a0>
 801a346:	2301      	movs	r3, #1
 801a348:	e7f2      	b.n	801a330 <_printf_float+0x1a0>
 801a34a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a350:	4299      	cmp	r1, r3
 801a352:	db05      	blt.n	801a360 <_printf_float+0x1d0>
 801a354:	6823      	ldr	r3, [r4, #0]
 801a356:	6121      	str	r1, [r4, #16]
 801a358:	07d8      	lsls	r0, r3, #31
 801a35a:	d5ea      	bpl.n	801a332 <_printf_float+0x1a2>
 801a35c:	1c4b      	adds	r3, r1, #1
 801a35e:	e7e7      	b.n	801a330 <_printf_float+0x1a0>
 801a360:	2900      	cmp	r1, #0
 801a362:	bfd4      	ite	le
 801a364:	f1c1 0202 	rsble	r2, r1, #2
 801a368:	2201      	movgt	r2, #1
 801a36a:	4413      	add	r3, r2
 801a36c:	e7e0      	b.n	801a330 <_printf_float+0x1a0>
 801a36e:	6823      	ldr	r3, [r4, #0]
 801a370:	055a      	lsls	r2, r3, #21
 801a372:	d407      	bmi.n	801a384 <_printf_float+0x1f4>
 801a374:	6923      	ldr	r3, [r4, #16]
 801a376:	4642      	mov	r2, r8
 801a378:	4631      	mov	r1, r6
 801a37a:	4628      	mov	r0, r5
 801a37c:	47b8      	blx	r7
 801a37e:	3001      	adds	r0, #1
 801a380:	d12c      	bne.n	801a3dc <_printf_float+0x24c>
 801a382:	e764      	b.n	801a24e <_printf_float+0xbe>
 801a384:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a388:	f240 80e0 	bls.w	801a54c <_printf_float+0x3bc>
 801a38c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a390:	2200      	movs	r2, #0
 801a392:	2300      	movs	r3, #0
 801a394:	f7e6 fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 801a398:	2800      	cmp	r0, #0
 801a39a:	d034      	beq.n	801a406 <_printf_float+0x276>
 801a39c:	4a37      	ldr	r2, [pc, #220]	; (801a47c <_printf_float+0x2ec>)
 801a39e:	2301      	movs	r3, #1
 801a3a0:	4631      	mov	r1, r6
 801a3a2:	4628      	mov	r0, r5
 801a3a4:	47b8      	blx	r7
 801a3a6:	3001      	adds	r0, #1
 801a3a8:	f43f af51 	beq.w	801a24e <_printf_float+0xbe>
 801a3ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a3b0:	429a      	cmp	r2, r3
 801a3b2:	db02      	blt.n	801a3ba <_printf_float+0x22a>
 801a3b4:	6823      	ldr	r3, [r4, #0]
 801a3b6:	07d8      	lsls	r0, r3, #31
 801a3b8:	d510      	bpl.n	801a3dc <_printf_float+0x24c>
 801a3ba:	ee18 3a10 	vmov	r3, s16
 801a3be:	4652      	mov	r2, sl
 801a3c0:	4631      	mov	r1, r6
 801a3c2:	4628      	mov	r0, r5
 801a3c4:	47b8      	blx	r7
 801a3c6:	3001      	adds	r0, #1
 801a3c8:	f43f af41 	beq.w	801a24e <_printf_float+0xbe>
 801a3cc:	f04f 0800 	mov.w	r8, #0
 801a3d0:	f104 091a 	add.w	r9, r4, #26
 801a3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3d6:	3b01      	subs	r3, #1
 801a3d8:	4543      	cmp	r3, r8
 801a3da:	dc09      	bgt.n	801a3f0 <_printf_float+0x260>
 801a3dc:	6823      	ldr	r3, [r4, #0]
 801a3de:	079b      	lsls	r3, r3, #30
 801a3e0:	f100 8107 	bmi.w	801a5f2 <_printf_float+0x462>
 801a3e4:	68e0      	ldr	r0, [r4, #12]
 801a3e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a3e8:	4298      	cmp	r0, r3
 801a3ea:	bfb8      	it	lt
 801a3ec:	4618      	movlt	r0, r3
 801a3ee:	e730      	b.n	801a252 <_printf_float+0xc2>
 801a3f0:	2301      	movs	r3, #1
 801a3f2:	464a      	mov	r2, r9
 801a3f4:	4631      	mov	r1, r6
 801a3f6:	4628      	mov	r0, r5
 801a3f8:	47b8      	blx	r7
 801a3fa:	3001      	adds	r0, #1
 801a3fc:	f43f af27 	beq.w	801a24e <_printf_float+0xbe>
 801a400:	f108 0801 	add.w	r8, r8, #1
 801a404:	e7e6      	b.n	801a3d4 <_printf_float+0x244>
 801a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a408:	2b00      	cmp	r3, #0
 801a40a:	dc39      	bgt.n	801a480 <_printf_float+0x2f0>
 801a40c:	4a1b      	ldr	r2, [pc, #108]	; (801a47c <_printf_float+0x2ec>)
 801a40e:	2301      	movs	r3, #1
 801a410:	4631      	mov	r1, r6
 801a412:	4628      	mov	r0, r5
 801a414:	47b8      	blx	r7
 801a416:	3001      	adds	r0, #1
 801a418:	f43f af19 	beq.w	801a24e <_printf_float+0xbe>
 801a41c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a420:	4313      	orrs	r3, r2
 801a422:	d102      	bne.n	801a42a <_printf_float+0x29a>
 801a424:	6823      	ldr	r3, [r4, #0]
 801a426:	07d9      	lsls	r1, r3, #31
 801a428:	d5d8      	bpl.n	801a3dc <_printf_float+0x24c>
 801a42a:	ee18 3a10 	vmov	r3, s16
 801a42e:	4652      	mov	r2, sl
 801a430:	4631      	mov	r1, r6
 801a432:	4628      	mov	r0, r5
 801a434:	47b8      	blx	r7
 801a436:	3001      	adds	r0, #1
 801a438:	f43f af09 	beq.w	801a24e <_printf_float+0xbe>
 801a43c:	f04f 0900 	mov.w	r9, #0
 801a440:	f104 0a1a 	add.w	sl, r4, #26
 801a444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a446:	425b      	negs	r3, r3
 801a448:	454b      	cmp	r3, r9
 801a44a:	dc01      	bgt.n	801a450 <_printf_float+0x2c0>
 801a44c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a44e:	e792      	b.n	801a376 <_printf_float+0x1e6>
 801a450:	2301      	movs	r3, #1
 801a452:	4652      	mov	r2, sl
 801a454:	4631      	mov	r1, r6
 801a456:	4628      	mov	r0, r5
 801a458:	47b8      	blx	r7
 801a45a:	3001      	adds	r0, #1
 801a45c:	f43f aef7 	beq.w	801a24e <_printf_float+0xbe>
 801a460:	f109 0901 	add.w	r9, r9, #1
 801a464:	e7ee      	b.n	801a444 <_printf_float+0x2b4>
 801a466:	bf00      	nop
 801a468:	7fefffff 	.word	0x7fefffff
 801a46c:	0801ec3c 	.word	0x0801ec3c
 801a470:	0801ec40 	.word	0x0801ec40
 801a474:	0801ec44 	.word	0x0801ec44
 801a478:	0801ec48 	.word	0x0801ec48
 801a47c:	0801ec4c 	.word	0x0801ec4c
 801a480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a482:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a484:	429a      	cmp	r2, r3
 801a486:	bfa8      	it	ge
 801a488:	461a      	movge	r2, r3
 801a48a:	2a00      	cmp	r2, #0
 801a48c:	4691      	mov	r9, r2
 801a48e:	dc37      	bgt.n	801a500 <_printf_float+0x370>
 801a490:	f04f 0b00 	mov.w	fp, #0
 801a494:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a498:	f104 021a 	add.w	r2, r4, #26
 801a49c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a49e:	9305      	str	r3, [sp, #20]
 801a4a0:	eba3 0309 	sub.w	r3, r3, r9
 801a4a4:	455b      	cmp	r3, fp
 801a4a6:	dc33      	bgt.n	801a510 <_printf_float+0x380>
 801a4a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a4ac:	429a      	cmp	r2, r3
 801a4ae:	db3b      	blt.n	801a528 <_printf_float+0x398>
 801a4b0:	6823      	ldr	r3, [r4, #0]
 801a4b2:	07da      	lsls	r2, r3, #31
 801a4b4:	d438      	bmi.n	801a528 <_printf_float+0x398>
 801a4b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a4ba:	eba2 0903 	sub.w	r9, r2, r3
 801a4be:	9b05      	ldr	r3, [sp, #20]
 801a4c0:	1ad2      	subs	r2, r2, r3
 801a4c2:	4591      	cmp	r9, r2
 801a4c4:	bfa8      	it	ge
 801a4c6:	4691      	movge	r9, r2
 801a4c8:	f1b9 0f00 	cmp.w	r9, #0
 801a4cc:	dc35      	bgt.n	801a53a <_printf_float+0x3aa>
 801a4ce:	f04f 0800 	mov.w	r8, #0
 801a4d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a4d6:	f104 0a1a 	add.w	sl, r4, #26
 801a4da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a4de:	1a9b      	subs	r3, r3, r2
 801a4e0:	eba3 0309 	sub.w	r3, r3, r9
 801a4e4:	4543      	cmp	r3, r8
 801a4e6:	f77f af79 	ble.w	801a3dc <_printf_float+0x24c>
 801a4ea:	2301      	movs	r3, #1
 801a4ec:	4652      	mov	r2, sl
 801a4ee:	4631      	mov	r1, r6
 801a4f0:	4628      	mov	r0, r5
 801a4f2:	47b8      	blx	r7
 801a4f4:	3001      	adds	r0, #1
 801a4f6:	f43f aeaa 	beq.w	801a24e <_printf_float+0xbe>
 801a4fa:	f108 0801 	add.w	r8, r8, #1
 801a4fe:	e7ec      	b.n	801a4da <_printf_float+0x34a>
 801a500:	4613      	mov	r3, r2
 801a502:	4631      	mov	r1, r6
 801a504:	4642      	mov	r2, r8
 801a506:	4628      	mov	r0, r5
 801a508:	47b8      	blx	r7
 801a50a:	3001      	adds	r0, #1
 801a50c:	d1c0      	bne.n	801a490 <_printf_float+0x300>
 801a50e:	e69e      	b.n	801a24e <_printf_float+0xbe>
 801a510:	2301      	movs	r3, #1
 801a512:	4631      	mov	r1, r6
 801a514:	4628      	mov	r0, r5
 801a516:	9205      	str	r2, [sp, #20]
 801a518:	47b8      	blx	r7
 801a51a:	3001      	adds	r0, #1
 801a51c:	f43f ae97 	beq.w	801a24e <_printf_float+0xbe>
 801a520:	9a05      	ldr	r2, [sp, #20]
 801a522:	f10b 0b01 	add.w	fp, fp, #1
 801a526:	e7b9      	b.n	801a49c <_printf_float+0x30c>
 801a528:	ee18 3a10 	vmov	r3, s16
 801a52c:	4652      	mov	r2, sl
 801a52e:	4631      	mov	r1, r6
 801a530:	4628      	mov	r0, r5
 801a532:	47b8      	blx	r7
 801a534:	3001      	adds	r0, #1
 801a536:	d1be      	bne.n	801a4b6 <_printf_float+0x326>
 801a538:	e689      	b.n	801a24e <_printf_float+0xbe>
 801a53a:	9a05      	ldr	r2, [sp, #20]
 801a53c:	464b      	mov	r3, r9
 801a53e:	4442      	add	r2, r8
 801a540:	4631      	mov	r1, r6
 801a542:	4628      	mov	r0, r5
 801a544:	47b8      	blx	r7
 801a546:	3001      	adds	r0, #1
 801a548:	d1c1      	bne.n	801a4ce <_printf_float+0x33e>
 801a54a:	e680      	b.n	801a24e <_printf_float+0xbe>
 801a54c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a54e:	2a01      	cmp	r2, #1
 801a550:	dc01      	bgt.n	801a556 <_printf_float+0x3c6>
 801a552:	07db      	lsls	r3, r3, #31
 801a554:	d53a      	bpl.n	801a5cc <_printf_float+0x43c>
 801a556:	2301      	movs	r3, #1
 801a558:	4642      	mov	r2, r8
 801a55a:	4631      	mov	r1, r6
 801a55c:	4628      	mov	r0, r5
 801a55e:	47b8      	blx	r7
 801a560:	3001      	adds	r0, #1
 801a562:	f43f ae74 	beq.w	801a24e <_printf_float+0xbe>
 801a566:	ee18 3a10 	vmov	r3, s16
 801a56a:	4652      	mov	r2, sl
 801a56c:	4631      	mov	r1, r6
 801a56e:	4628      	mov	r0, r5
 801a570:	47b8      	blx	r7
 801a572:	3001      	adds	r0, #1
 801a574:	f43f ae6b 	beq.w	801a24e <_printf_float+0xbe>
 801a578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a57c:	2200      	movs	r2, #0
 801a57e:	2300      	movs	r3, #0
 801a580:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801a584:	f7e6 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 801a588:	b9d8      	cbnz	r0, 801a5c2 <_printf_float+0x432>
 801a58a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a58e:	f108 0201 	add.w	r2, r8, #1
 801a592:	4631      	mov	r1, r6
 801a594:	4628      	mov	r0, r5
 801a596:	47b8      	blx	r7
 801a598:	3001      	adds	r0, #1
 801a59a:	d10e      	bne.n	801a5ba <_printf_float+0x42a>
 801a59c:	e657      	b.n	801a24e <_printf_float+0xbe>
 801a59e:	2301      	movs	r3, #1
 801a5a0:	4652      	mov	r2, sl
 801a5a2:	4631      	mov	r1, r6
 801a5a4:	4628      	mov	r0, r5
 801a5a6:	47b8      	blx	r7
 801a5a8:	3001      	adds	r0, #1
 801a5aa:	f43f ae50 	beq.w	801a24e <_printf_float+0xbe>
 801a5ae:	f108 0801 	add.w	r8, r8, #1
 801a5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5b4:	3b01      	subs	r3, #1
 801a5b6:	4543      	cmp	r3, r8
 801a5b8:	dcf1      	bgt.n	801a59e <_printf_float+0x40e>
 801a5ba:	464b      	mov	r3, r9
 801a5bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a5c0:	e6da      	b.n	801a378 <_printf_float+0x1e8>
 801a5c2:	f04f 0800 	mov.w	r8, #0
 801a5c6:	f104 0a1a 	add.w	sl, r4, #26
 801a5ca:	e7f2      	b.n	801a5b2 <_printf_float+0x422>
 801a5cc:	2301      	movs	r3, #1
 801a5ce:	4642      	mov	r2, r8
 801a5d0:	e7df      	b.n	801a592 <_printf_float+0x402>
 801a5d2:	2301      	movs	r3, #1
 801a5d4:	464a      	mov	r2, r9
 801a5d6:	4631      	mov	r1, r6
 801a5d8:	4628      	mov	r0, r5
 801a5da:	47b8      	blx	r7
 801a5dc:	3001      	adds	r0, #1
 801a5de:	f43f ae36 	beq.w	801a24e <_printf_float+0xbe>
 801a5e2:	f108 0801 	add.w	r8, r8, #1
 801a5e6:	68e3      	ldr	r3, [r4, #12]
 801a5e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a5ea:	1a5b      	subs	r3, r3, r1
 801a5ec:	4543      	cmp	r3, r8
 801a5ee:	dcf0      	bgt.n	801a5d2 <_printf_float+0x442>
 801a5f0:	e6f8      	b.n	801a3e4 <_printf_float+0x254>
 801a5f2:	f04f 0800 	mov.w	r8, #0
 801a5f6:	f104 0919 	add.w	r9, r4, #25
 801a5fa:	e7f4      	b.n	801a5e6 <_printf_float+0x456>

0801a5fc <_printf_common>:
 801a5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a600:	4616      	mov	r6, r2
 801a602:	4699      	mov	r9, r3
 801a604:	688a      	ldr	r2, [r1, #8]
 801a606:	690b      	ldr	r3, [r1, #16]
 801a608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a60c:	4293      	cmp	r3, r2
 801a60e:	bfb8      	it	lt
 801a610:	4613      	movlt	r3, r2
 801a612:	6033      	str	r3, [r6, #0]
 801a614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a618:	4607      	mov	r7, r0
 801a61a:	460c      	mov	r4, r1
 801a61c:	b10a      	cbz	r2, 801a622 <_printf_common+0x26>
 801a61e:	3301      	adds	r3, #1
 801a620:	6033      	str	r3, [r6, #0]
 801a622:	6823      	ldr	r3, [r4, #0]
 801a624:	0699      	lsls	r1, r3, #26
 801a626:	bf42      	ittt	mi
 801a628:	6833      	ldrmi	r3, [r6, #0]
 801a62a:	3302      	addmi	r3, #2
 801a62c:	6033      	strmi	r3, [r6, #0]
 801a62e:	6825      	ldr	r5, [r4, #0]
 801a630:	f015 0506 	ands.w	r5, r5, #6
 801a634:	d106      	bne.n	801a644 <_printf_common+0x48>
 801a636:	f104 0a19 	add.w	sl, r4, #25
 801a63a:	68e3      	ldr	r3, [r4, #12]
 801a63c:	6832      	ldr	r2, [r6, #0]
 801a63e:	1a9b      	subs	r3, r3, r2
 801a640:	42ab      	cmp	r3, r5
 801a642:	dc26      	bgt.n	801a692 <_printf_common+0x96>
 801a644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a648:	1e13      	subs	r3, r2, #0
 801a64a:	6822      	ldr	r2, [r4, #0]
 801a64c:	bf18      	it	ne
 801a64e:	2301      	movne	r3, #1
 801a650:	0692      	lsls	r2, r2, #26
 801a652:	d42b      	bmi.n	801a6ac <_printf_common+0xb0>
 801a654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a658:	4649      	mov	r1, r9
 801a65a:	4638      	mov	r0, r7
 801a65c:	47c0      	blx	r8
 801a65e:	3001      	adds	r0, #1
 801a660:	d01e      	beq.n	801a6a0 <_printf_common+0xa4>
 801a662:	6823      	ldr	r3, [r4, #0]
 801a664:	6922      	ldr	r2, [r4, #16]
 801a666:	f003 0306 	and.w	r3, r3, #6
 801a66a:	2b04      	cmp	r3, #4
 801a66c:	bf02      	ittt	eq
 801a66e:	68e5      	ldreq	r5, [r4, #12]
 801a670:	6833      	ldreq	r3, [r6, #0]
 801a672:	1aed      	subeq	r5, r5, r3
 801a674:	68a3      	ldr	r3, [r4, #8]
 801a676:	bf0c      	ite	eq
 801a678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a67c:	2500      	movne	r5, #0
 801a67e:	4293      	cmp	r3, r2
 801a680:	bfc4      	itt	gt
 801a682:	1a9b      	subgt	r3, r3, r2
 801a684:	18ed      	addgt	r5, r5, r3
 801a686:	2600      	movs	r6, #0
 801a688:	341a      	adds	r4, #26
 801a68a:	42b5      	cmp	r5, r6
 801a68c:	d11a      	bne.n	801a6c4 <_printf_common+0xc8>
 801a68e:	2000      	movs	r0, #0
 801a690:	e008      	b.n	801a6a4 <_printf_common+0xa8>
 801a692:	2301      	movs	r3, #1
 801a694:	4652      	mov	r2, sl
 801a696:	4649      	mov	r1, r9
 801a698:	4638      	mov	r0, r7
 801a69a:	47c0      	blx	r8
 801a69c:	3001      	adds	r0, #1
 801a69e:	d103      	bne.n	801a6a8 <_printf_common+0xac>
 801a6a0:	f04f 30ff 	mov.w	r0, #4294967295
 801a6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6a8:	3501      	adds	r5, #1
 801a6aa:	e7c6      	b.n	801a63a <_printf_common+0x3e>
 801a6ac:	18e1      	adds	r1, r4, r3
 801a6ae:	1c5a      	adds	r2, r3, #1
 801a6b0:	2030      	movs	r0, #48	; 0x30
 801a6b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a6b6:	4422      	add	r2, r4
 801a6b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a6bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a6c0:	3302      	adds	r3, #2
 801a6c2:	e7c7      	b.n	801a654 <_printf_common+0x58>
 801a6c4:	2301      	movs	r3, #1
 801a6c6:	4622      	mov	r2, r4
 801a6c8:	4649      	mov	r1, r9
 801a6ca:	4638      	mov	r0, r7
 801a6cc:	47c0      	blx	r8
 801a6ce:	3001      	adds	r0, #1
 801a6d0:	d0e6      	beq.n	801a6a0 <_printf_common+0xa4>
 801a6d2:	3601      	adds	r6, #1
 801a6d4:	e7d9      	b.n	801a68a <_printf_common+0x8e>
	...

0801a6d8 <_printf_i>:
 801a6d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a6dc:	7e0f      	ldrb	r7, [r1, #24]
 801a6de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a6e0:	2f78      	cmp	r7, #120	; 0x78
 801a6e2:	4691      	mov	r9, r2
 801a6e4:	4680      	mov	r8, r0
 801a6e6:	460c      	mov	r4, r1
 801a6e8:	469a      	mov	sl, r3
 801a6ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a6ee:	d807      	bhi.n	801a700 <_printf_i+0x28>
 801a6f0:	2f62      	cmp	r7, #98	; 0x62
 801a6f2:	d80a      	bhi.n	801a70a <_printf_i+0x32>
 801a6f4:	2f00      	cmp	r7, #0
 801a6f6:	f000 80d4 	beq.w	801a8a2 <_printf_i+0x1ca>
 801a6fa:	2f58      	cmp	r7, #88	; 0x58
 801a6fc:	f000 80c0 	beq.w	801a880 <_printf_i+0x1a8>
 801a700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a708:	e03a      	b.n	801a780 <_printf_i+0xa8>
 801a70a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a70e:	2b15      	cmp	r3, #21
 801a710:	d8f6      	bhi.n	801a700 <_printf_i+0x28>
 801a712:	a101      	add	r1, pc, #4	; (adr r1, 801a718 <_printf_i+0x40>)
 801a714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a718:	0801a771 	.word	0x0801a771
 801a71c:	0801a785 	.word	0x0801a785
 801a720:	0801a701 	.word	0x0801a701
 801a724:	0801a701 	.word	0x0801a701
 801a728:	0801a701 	.word	0x0801a701
 801a72c:	0801a701 	.word	0x0801a701
 801a730:	0801a785 	.word	0x0801a785
 801a734:	0801a701 	.word	0x0801a701
 801a738:	0801a701 	.word	0x0801a701
 801a73c:	0801a701 	.word	0x0801a701
 801a740:	0801a701 	.word	0x0801a701
 801a744:	0801a889 	.word	0x0801a889
 801a748:	0801a7b1 	.word	0x0801a7b1
 801a74c:	0801a843 	.word	0x0801a843
 801a750:	0801a701 	.word	0x0801a701
 801a754:	0801a701 	.word	0x0801a701
 801a758:	0801a8ab 	.word	0x0801a8ab
 801a75c:	0801a701 	.word	0x0801a701
 801a760:	0801a7b1 	.word	0x0801a7b1
 801a764:	0801a701 	.word	0x0801a701
 801a768:	0801a701 	.word	0x0801a701
 801a76c:	0801a84b 	.word	0x0801a84b
 801a770:	682b      	ldr	r3, [r5, #0]
 801a772:	1d1a      	adds	r2, r3, #4
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	602a      	str	r2, [r5, #0]
 801a778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a77c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a780:	2301      	movs	r3, #1
 801a782:	e09f      	b.n	801a8c4 <_printf_i+0x1ec>
 801a784:	6820      	ldr	r0, [r4, #0]
 801a786:	682b      	ldr	r3, [r5, #0]
 801a788:	0607      	lsls	r7, r0, #24
 801a78a:	f103 0104 	add.w	r1, r3, #4
 801a78e:	6029      	str	r1, [r5, #0]
 801a790:	d501      	bpl.n	801a796 <_printf_i+0xbe>
 801a792:	681e      	ldr	r6, [r3, #0]
 801a794:	e003      	b.n	801a79e <_printf_i+0xc6>
 801a796:	0646      	lsls	r6, r0, #25
 801a798:	d5fb      	bpl.n	801a792 <_printf_i+0xba>
 801a79a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a79e:	2e00      	cmp	r6, #0
 801a7a0:	da03      	bge.n	801a7aa <_printf_i+0xd2>
 801a7a2:	232d      	movs	r3, #45	; 0x2d
 801a7a4:	4276      	negs	r6, r6
 801a7a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a7aa:	485a      	ldr	r0, [pc, #360]	; (801a914 <_printf_i+0x23c>)
 801a7ac:	230a      	movs	r3, #10
 801a7ae:	e012      	b.n	801a7d6 <_printf_i+0xfe>
 801a7b0:	682b      	ldr	r3, [r5, #0]
 801a7b2:	6820      	ldr	r0, [r4, #0]
 801a7b4:	1d19      	adds	r1, r3, #4
 801a7b6:	6029      	str	r1, [r5, #0]
 801a7b8:	0605      	lsls	r5, r0, #24
 801a7ba:	d501      	bpl.n	801a7c0 <_printf_i+0xe8>
 801a7bc:	681e      	ldr	r6, [r3, #0]
 801a7be:	e002      	b.n	801a7c6 <_printf_i+0xee>
 801a7c0:	0641      	lsls	r1, r0, #25
 801a7c2:	d5fb      	bpl.n	801a7bc <_printf_i+0xe4>
 801a7c4:	881e      	ldrh	r6, [r3, #0]
 801a7c6:	4853      	ldr	r0, [pc, #332]	; (801a914 <_printf_i+0x23c>)
 801a7c8:	2f6f      	cmp	r7, #111	; 0x6f
 801a7ca:	bf0c      	ite	eq
 801a7cc:	2308      	moveq	r3, #8
 801a7ce:	230a      	movne	r3, #10
 801a7d0:	2100      	movs	r1, #0
 801a7d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a7d6:	6865      	ldr	r5, [r4, #4]
 801a7d8:	60a5      	str	r5, [r4, #8]
 801a7da:	2d00      	cmp	r5, #0
 801a7dc:	bfa2      	ittt	ge
 801a7de:	6821      	ldrge	r1, [r4, #0]
 801a7e0:	f021 0104 	bicge.w	r1, r1, #4
 801a7e4:	6021      	strge	r1, [r4, #0]
 801a7e6:	b90e      	cbnz	r6, 801a7ec <_printf_i+0x114>
 801a7e8:	2d00      	cmp	r5, #0
 801a7ea:	d04b      	beq.n	801a884 <_printf_i+0x1ac>
 801a7ec:	4615      	mov	r5, r2
 801a7ee:	fbb6 f1f3 	udiv	r1, r6, r3
 801a7f2:	fb03 6711 	mls	r7, r3, r1, r6
 801a7f6:	5dc7      	ldrb	r7, [r0, r7]
 801a7f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a7fc:	4637      	mov	r7, r6
 801a7fe:	42bb      	cmp	r3, r7
 801a800:	460e      	mov	r6, r1
 801a802:	d9f4      	bls.n	801a7ee <_printf_i+0x116>
 801a804:	2b08      	cmp	r3, #8
 801a806:	d10b      	bne.n	801a820 <_printf_i+0x148>
 801a808:	6823      	ldr	r3, [r4, #0]
 801a80a:	07de      	lsls	r6, r3, #31
 801a80c:	d508      	bpl.n	801a820 <_printf_i+0x148>
 801a80e:	6923      	ldr	r3, [r4, #16]
 801a810:	6861      	ldr	r1, [r4, #4]
 801a812:	4299      	cmp	r1, r3
 801a814:	bfde      	ittt	le
 801a816:	2330      	movle	r3, #48	; 0x30
 801a818:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a81c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a820:	1b52      	subs	r2, r2, r5
 801a822:	6122      	str	r2, [r4, #16]
 801a824:	f8cd a000 	str.w	sl, [sp]
 801a828:	464b      	mov	r3, r9
 801a82a:	aa03      	add	r2, sp, #12
 801a82c:	4621      	mov	r1, r4
 801a82e:	4640      	mov	r0, r8
 801a830:	f7ff fee4 	bl	801a5fc <_printf_common>
 801a834:	3001      	adds	r0, #1
 801a836:	d14a      	bne.n	801a8ce <_printf_i+0x1f6>
 801a838:	f04f 30ff 	mov.w	r0, #4294967295
 801a83c:	b004      	add	sp, #16
 801a83e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a842:	6823      	ldr	r3, [r4, #0]
 801a844:	f043 0320 	orr.w	r3, r3, #32
 801a848:	6023      	str	r3, [r4, #0]
 801a84a:	4833      	ldr	r0, [pc, #204]	; (801a918 <_printf_i+0x240>)
 801a84c:	2778      	movs	r7, #120	; 0x78
 801a84e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a852:	6823      	ldr	r3, [r4, #0]
 801a854:	6829      	ldr	r1, [r5, #0]
 801a856:	061f      	lsls	r7, r3, #24
 801a858:	f851 6b04 	ldr.w	r6, [r1], #4
 801a85c:	d402      	bmi.n	801a864 <_printf_i+0x18c>
 801a85e:	065f      	lsls	r7, r3, #25
 801a860:	bf48      	it	mi
 801a862:	b2b6      	uxthmi	r6, r6
 801a864:	07df      	lsls	r7, r3, #31
 801a866:	bf48      	it	mi
 801a868:	f043 0320 	orrmi.w	r3, r3, #32
 801a86c:	6029      	str	r1, [r5, #0]
 801a86e:	bf48      	it	mi
 801a870:	6023      	strmi	r3, [r4, #0]
 801a872:	b91e      	cbnz	r6, 801a87c <_printf_i+0x1a4>
 801a874:	6823      	ldr	r3, [r4, #0]
 801a876:	f023 0320 	bic.w	r3, r3, #32
 801a87a:	6023      	str	r3, [r4, #0]
 801a87c:	2310      	movs	r3, #16
 801a87e:	e7a7      	b.n	801a7d0 <_printf_i+0xf8>
 801a880:	4824      	ldr	r0, [pc, #144]	; (801a914 <_printf_i+0x23c>)
 801a882:	e7e4      	b.n	801a84e <_printf_i+0x176>
 801a884:	4615      	mov	r5, r2
 801a886:	e7bd      	b.n	801a804 <_printf_i+0x12c>
 801a888:	682b      	ldr	r3, [r5, #0]
 801a88a:	6826      	ldr	r6, [r4, #0]
 801a88c:	6961      	ldr	r1, [r4, #20]
 801a88e:	1d18      	adds	r0, r3, #4
 801a890:	6028      	str	r0, [r5, #0]
 801a892:	0635      	lsls	r5, r6, #24
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	d501      	bpl.n	801a89c <_printf_i+0x1c4>
 801a898:	6019      	str	r1, [r3, #0]
 801a89a:	e002      	b.n	801a8a2 <_printf_i+0x1ca>
 801a89c:	0670      	lsls	r0, r6, #25
 801a89e:	d5fb      	bpl.n	801a898 <_printf_i+0x1c0>
 801a8a0:	8019      	strh	r1, [r3, #0]
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	6123      	str	r3, [r4, #16]
 801a8a6:	4615      	mov	r5, r2
 801a8a8:	e7bc      	b.n	801a824 <_printf_i+0x14c>
 801a8aa:	682b      	ldr	r3, [r5, #0]
 801a8ac:	1d1a      	adds	r2, r3, #4
 801a8ae:	602a      	str	r2, [r5, #0]
 801a8b0:	681d      	ldr	r5, [r3, #0]
 801a8b2:	6862      	ldr	r2, [r4, #4]
 801a8b4:	2100      	movs	r1, #0
 801a8b6:	4628      	mov	r0, r5
 801a8b8:	f7e5 fc8a 	bl	80001d0 <memchr>
 801a8bc:	b108      	cbz	r0, 801a8c2 <_printf_i+0x1ea>
 801a8be:	1b40      	subs	r0, r0, r5
 801a8c0:	6060      	str	r0, [r4, #4]
 801a8c2:	6863      	ldr	r3, [r4, #4]
 801a8c4:	6123      	str	r3, [r4, #16]
 801a8c6:	2300      	movs	r3, #0
 801a8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a8cc:	e7aa      	b.n	801a824 <_printf_i+0x14c>
 801a8ce:	6923      	ldr	r3, [r4, #16]
 801a8d0:	462a      	mov	r2, r5
 801a8d2:	4649      	mov	r1, r9
 801a8d4:	4640      	mov	r0, r8
 801a8d6:	47d0      	blx	sl
 801a8d8:	3001      	adds	r0, #1
 801a8da:	d0ad      	beq.n	801a838 <_printf_i+0x160>
 801a8dc:	6823      	ldr	r3, [r4, #0]
 801a8de:	079b      	lsls	r3, r3, #30
 801a8e0:	d413      	bmi.n	801a90a <_printf_i+0x232>
 801a8e2:	68e0      	ldr	r0, [r4, #12]
 801a8e4:	9b03      	ldr	r3, [sp, #12]
 801a8e6:	4298      	cmp	r0, r3
 801a8e8:	bfb8      	it	lt
 801a8ea:	4618      	movlt	r0, r3
 801a8ec:	e7a6      	b.n	801a83c <_printf_i+0x164>
 801a8ee:	2301      	movs	r3, #1
 801a8f0:	4632      	mov	r2, r6
 801a8f2:	4649      	mov	r1, r9
 801a8f4:	4640      	mov	r0, r8
 801a8f6:	47d0      	blx	sl
 801a8f8:	3001      	adds	r0, #1
 801a8fa:	d09d      	beq.n	801a838 <_printf_i+0x160>
 801a8fc:	3501      	adds	r5, #1
 801a8fe:	68e3      	ldr	r3, [r4, #12]
 801a900:	9903      	ldr	r1, [sp, #12]
 801a902:	1a5b      	subs	r3, r3, r1
 801a904:	42ab      	cmp	r3, r5
 801a906:	dcf2      	bgt.n	801a8ee <_printf_i+0x216>
 801a908:	e7eb      	b.n	801a8e2 <_printf_i+0x20a>
 801a90a:	2500      	movs	r5, #0
 801a90c:	f104 0619 	add.w	r6, r4, #25
 801a910:	e7f5      	b.n	801a8fe <_printf_i+0x226>
 801a912:	bf00      	nop
 801a914:	0801ec4e 	.word	0x0801ec4e
 801a918:	0801ec5f 	.word	0x0801ec5f

0801a91c <std>:
 801a91c:	2300      	movs	r3, #0
 801a91e:	b510      	push	{r4, lr}
 801a920:	4604      	mov	r4, r0
 801a922:	e9c0 3300 	strd	r3, r3, [r0]
 801a926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a92a:	6083      	str	r3, [r0, #8]
 801a92c:	8181      	strh	r1, [r0, #12]
 801a92e:	6643      	str	r3, [r0, #100]	; 0x64
 801a930:	81c2      	strh	r2, [r0, #14]
 801a932:	6183      	str	r3, [r0, #24]
 801a934:	4619      	mov	r1, r3
 801a936:	2208      	movs	r2, #8
 801a938:	305c      	adds	r0, #92	; 0x5c
 801a93a:	f000 f926 	bl	801ab8a <memset>
 801a93e:	4b0d      	ldr	r3, [pc, #52]	; (801a974 <std+0x58>)
 801a940:	6263      	str	r3, [r4, #36]	; 0x24
 801a942:	4b0d      	ldr	r3, [pc, #52]	; (801a978 <std+0x5c>)
 801a944:	62a3      	str	r3, [r4, #40]	; 0x28
 801a946:	4b0d      	ldr	r3, [pc, #52]	; (801a97c <std+0x60>)
 801a948:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a94a:	4b0d      	ldr	r3, [pc, #52]	; (801a980 <std+0x64>)
 801a94c:	6323      	str	r3, [r4, #48]	; 0x30
 801a94e:	4b0d      	ldr	r3, [pc, #52]	; (801a984 <std+0x68>)
 801a950:	6224      	str	r4, [r4, #32]
 801a952:	429c      	cmp	r4, r3
 801a954:	d006      	beq.n	801a964 <std+0x48>
 801a956:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801a95a:	4294      	cmp	r4, r2
 801a95c:	d002      	beq.n	801a964 <std+0x48>
 801a95e:	33d0      	adds	r3, #208	; 0xd0
 801a960:	429c      	cmp	r4, r3
 801a962:	d105      	bne.n	801a970 <std+0x54>
 801a964:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a96c:	f000 b98a 	b.w	801ac84 <__retarget_lock_init_recursive>
 801a970:	bd10      	pop	{r4, pc}
 801a972:	bf00      	nop
 801a974:	0801ab05 	.word	0x0801ab05
 801a978:	0801ab27 	.word	0x0801ab27
 801a97c:	0801ab5f 	.word	0x0801ab5f
 801a980:	0801ab83 	.word	0x0801ab83
 801a984:	20001ef8 	.word	0x20001ef8

0801a988 <stdio_exit_handler>:
 801a988:	4a02      	ldr	r2, [pc, #8]	; (801a994 <stdio_exit_handler+0xc>)
 801a98a:	4903      	ldr	r1, [pc, #12]	; (801a998 <stdio_exit_handler+0x10>)
 801a98c:	4803      	ldr	r0, [pc, #12]	; (801a99c <stdio_exit_handler+0x14>)
 801a98e:	f000 b869 	b.w	801aa64 <_fwalk_sglue>
 801a992:	bf00      	nop
 801a994:	200001b4 	.word	0x200001b4
 801a998:	0801c8e9 	.word	0x0801c8e9
 801a99c:	200001c0 	.word	0x200001c0

0801a9a0 <cleanup_stdio>:
 801a9a0:	6841      	ldr	r1, [r0, #4]
 801a9a2:	4b0c      	ldr	r3, [pc, #48]	; (801a9d4 <cleanup_stdio+0x34>)
 801a9a4:	4299      	cmp	r1, r3
 801a9a6:	b510      	push	{r4, lr}
 801a9a8:	4604      	mov	r4, r0
 801a9aa:	d001      	beq.n	801a9b0 <cleanup_stdio+0x10>
 801a9ac:	f001 ff9c 	bl	801c8e8 <_fflush_r>
 801a9b0:	68a1      	ldr	r1, [r4, #8]
 801a9b2:	4b09      	ldr	r3, [pc, #36]	; (801a9d8 <cleanup_stdio+0x38>)
 801a9b4:	4299      	cmp	r1, r3
 801a9b6:	d002      	beq.n	801a9be <cleanup_stdio+0x1e>
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	f001 ff95 	bl	801c8e8 <_fflush_r>
 801a9be:	68e1      	ldr	r1, [r4, #12]
 801a9c0:	4b06      	ldr	r3, [pc, #24]	; (801a9dc <cleanup_stdio+0x3c>)
 801a9c2:	4299      	cmp	r1, r3
 801a9c4:	d004      	beq.n	801a9d0 <cleanup_stdio+0x30>
 801a9c6:	4620      	mov	r0, r4
 801a9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9cc:	f001 bf8c 	b.w	801c8e8 <_fflush_r>
 801a9d0:	bd10      	pop	{r4, pc}
 801a9d2:	bf00      	nop
 801a9d4:	20001ef8 	.word	0x20001ef8
 801a9d8:	20001f60 	.word	0x20001f60
 801a9dc:	20001fc8 	.word	0x20001fc8

0801a9e0 <global_stdio_init.part.0>:
 801a9e0:	b510      	push	{r4, lr}
 801a9e2:	4b0b      	ldr	r3, [pc, #44]	; (801aa10 <global_stdio_init.part.0+0x30>)
 801a9e4:	4c0b      	ldr	r4, [pc, #44]	; (801aa14 <global_stdio_init.part.0+0x34>)
 801a9e6:	4a0c      	ldr	r2, [pc, #48]	; (801aa18 <global_stdio_init.part.0+0x38>)
 801a9e8:	601a      	str	r2, [r3, #0]
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	2104      	movs	r1, #4
 801a9f0:	f7ff ff94 	bl	801a91c <std>
 801a9f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801a9f8:	2201      	movs	r2, #1
 801a9fa:	2109      	movs	r1, #9
 801a9fc:	f7ff ff8e 	bl	801a91c <std>
 801aa00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801aa04:	2202      	movs	r2, #2
 801aa06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa0a:	2112      	movs	r1, #18
 801aa0c:	f7ff bf86 	b.w	801a91c <std>
 801aa10:	20002030 	.word	0x20002030
 801aa14:	20001ef8 	.word	0x20001ef8
 801aa18:	0801a989 	.word	0x0801a989

0801aa1c <__sfp_lock_acquire>:
 801aa1c:	4801      	ldr	r0, [pc, #4]	; (801aa24 <__sfp_lock_acquire+0x8>)
 801aa1e:	f000 b932 	b.w	801ac86 <__retarget_lock_acquire_recursive>
 801aa22:	bf00      	nop
 801aa24:	20002039 	.word	0x20002039

0801aa28 <__sfp_lock_release>:
 801aa28:	4801      	ldr	r0, [pc, #4]	; (801aa30 <__sfp_lock_release+0x8>)
 801aa2a:	f000 b92d 	b.w	801ac88 <__retarget_lock_release_recursive>
 801aa2e:	bf00      	nop
 801aa30:	20002039 	.word	0x20002039

0801aa34 <__sinit>:
 801aa34:	b510      	push	{r4, lr}
 801aa36:	4604      	mov	r4, r0
 801aa38:	f7ff fff0 	bl	801aa1c <__sfp_lock_acquire>
 801aa3c:	6a23      	ldr	r3, [r4, #32]
 801aa3e:	b11b      	cbz	r3, 801aa48 <__sinit+0x14>
 801aa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa44:	f7ff bff0 	b.w	801aa28 <__sfp_lock_release>
 801aa48:	4b04      	ldr	r3, [pc, #16]	; (801aa5c <__sinit+0x28>)
 801aa4a:	6223      	str	r3, [r4, #32]
 801aa4c:	4b04      	ldr	r3, [pc, #16]	; (801aa60 <__sinit+0x2c>)
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d1f5      	bne.n	801aa40 <__sinit+0xc>
 801aa54:	f7ff ffc4 	bl	801a9e0 <global_stdio_init.part.0>
 801aa58:	e7f2      	b.n	801aa40 <__sinit+0xc>
 801aa5a:	bf00      	nop
 801aa5c:	0801a9a1 	.word	0x0801a9a1
 801aa60:	20002030 	.word	0x20002030

0801aa64 <_fwalk_sglue>:
 801aa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa68:	4607      	mov	r7, r0
 801aa6a:	4688      	mov	r8, r1
 801aa6c:	4614      	mov	r4, r2
 801aa6e:	2600      	movs	r6, #0
 801aa70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aa74:	f1b9 0901 	subs.w	r9, r9, #1
 801aa78:	d505      	bpl.n	801aa86 <_fwalk_sglue+0x22>
 801aa7a:	6824      	ldr	r4, [r4, #0]
 801aa7c:	2c00      	cmp	r4, #0
 801aa7e:	d1f7      	bne.n	801aa70 <_fwalk_sglue+0xc>
 801aa80:	4630      	mov	r0, r6
 801aa82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa86:	89ab      	ldrh	r3, [r5, #12]
 801aa88:	2b01      	cmp	r3, #1
 801aa8a:	d907      	bls.n	801aa9c <_fwalk_sglue+0x38>
 801aa8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801aa90:	3301      	adds	r3, #1
 801aa92:	d003      	beq.n	801aa9c <_fwalk_sglue+0x38>
 801aa94:	4629      	mov	r1, r5
 801aa96:	4638      	mov	r0, r7
 801aa98:	47c0      	blx	r8
 801aa9a:	4306      	orrs	r6, r0
 801aa9c:	3568      	adds	r5, #104	; 0x68
 801aa9e:	e7e9      	b.n	801aa74 <_fwalk_sglue+0x10>

0801aaa0 <iprintf>:
 801aaa0:	b40f      	push	{r0, r1, r2, r3}
 801aaa2:	b507      	push	{r0, r1, r2, lr}
 801aaa4:	4906      	ldr	r1, [pc, #24]	; (801aac0 <iprintf+0x20>)
 801aaa6:	ab04      	add	r3, sp, #16
 801aaa8:	6808      	ldr	r0, [r1, #0]
 801aaaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801aaae:	6881      	ldr	r1, [r0, #8]
 801aab0:	9301      	str	r3, [sp, #4]
 801aab2:	f001 fd79 	bl	801c5a8 <_vfiprintf_r>
 801aab6:	b003      	add	sp, #12
 801aab8:	f85d eb04 	ldr.w	lr, [sp], #4
 801aabc:	b004      	add	sp, #16
 801aabe:	4770      	bx	lr
 801aac0:	2000020c 	.word	0x2000020c

0801aac4 <siprintf>:
 801aac4:	b40e      	push	{r1, r2, r3}
 801aac6:	b500      	push	{lr}
 801aac8:	b09c      	sub	sp, #112	; 0x70
 801aaca:	ab1d      	add	r3, sp, #116	; 0x74
 801aacc:	9002      	str	r0, [sp, #8]
 801aace:	9006      	str	r0, [sp, #24]
 801aad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801aad4:	4809      	ldr	r0, [pc, #36]	; (801aafc <siprintf+0x38>)
 801aad6:	9107      	str	r1, [sp, #28]
 801aad8:	9104      	str	r1, [sp, #16]
 801aada:	4909      	ldr	r1, [pc, #36]	; (801ab00 <siprintf+0x3c>)
 801aadc:	f853 2b04 	ldr.w	r2, [r3], #4
 801aae0:	9105      	str	r1, [sp, #20]
 801aae2:	6800      	ldr	r0, [r0, #0]
 801aae4:	9301      	str	r3, [sp, #4]
 801aae6:	a902      	add	r1, sp, #8
 801aae8:	f001 fc36 	bl	801c358 <_svfiprintf_r>
 801aaec:	9b02      	ldr	r3, [sp, #8]
 801aaee:	2200      	movs	r2, #0
 801aaf0:	701a      	strb	r2, [r3, #0]
 801aaf2:	b01c      	add	sp, #112	; 0x70
 801aaf4:	f85d eb04 	ldr.w	lr, [sp], #4
 801aaf8:	b003      	add	sp, #12
 801aafa:	4770      	bx	lr
 801aafc:	2000020c 	.word	0x2000020c
 801ab00:	ffff0208 	.word	0xffff0208

0801ab04 <__sread>:
 801ab04:	b510      	push	{r4, lr}
 801ab06:	460c      	mov	r4, r1
 801ab08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab0c:	f000 f86c 	bl	801abe8 <_read_r>
 801ab10:	2800      	cmp	r0, #0
 801ab12:	bfab      	itete	ge
 801ab14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ab16:	89a3      	ldrhlt	r3, [r4, #12]
 801ab18:	181b      	addge	r3, r3, r0
 801ab1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ab1e:	bfac      	ite	ge
 801ab20:	6563      	strge	r3, [r4, #84]	; 0x54
 801ab22:	81a3      	strhlt	r3, [r4, #12]
 801ab24:	bd10      	pop	{r4, pc}

0801ab26 <__swrite>:
 801ab26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab2a:	461f      	mov	r7, r3
 801ab2c:	898b      	ldrh	r3, [r1, #12]
 801ab2e:	05db      	lsls	r3, r3, #23
 801ab30:	4605      	mov	r5, r0
 801ab32:	460c      	mov	r4, r1
 801ab34:	4616      	mov	r6, r2
 801ab36:	d505      	bpl.n	801ab44 <__swrite+0x1e>
 801ab38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab3c:	2302      	movs	r3, #2
 801ab3e:	2200      	movs	r2, #0
 801ab40:	f000 f840 	bl	801abc4 <_lseek_r>
 801ab44:	89a3      	ldrh	r3, [r4, #12]
 801ab46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ab4e:	81a3      	strh	r3, [r4, #12]
 801ab50:	4632      	mov	r2, r6
 801ab52:	463b      	mov	r3, r7
 801ab54:	4628      	mov	r0, r5
 801ab56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ab5a:	f000 b857 	b.w	801ac0c <_write_r>

0801ab5e <__sseek>:
 801ab5e:	b510      	push	{r4, lr}
 801ab60:	460c      	mov	r4, r1
 801ab62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab66:	f000 f82d 	bl	801abc4 <_lseek_r>
 801ab6a:	1c43      	adds	r3, r0, #1
 801ab6c:	89a3      	ldrh	r3, [r4, #12]
 801ab6e:	bf15      	itete	ne
 801ab70:	6560      	strne	r0, [r4, #84]	; 0x54
 801ab72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ab76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ab7a:	81a3      	strheq	r3, [r4, #12]
 801ab7c:	bf18      	it	ne
 801ab7e:	81a3      	strhne	r3, [r4, #12]
 801ab80:	bd10      	pop	{r4, pc}

0801ab82 <__sclose>:
 801ab82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab86:	f000 b80d 	b.w	801aba4 <_close_r>

0801ab8a <memset>:
 801ab8a:	4402      	add	r2, r0
 801ab8c:	4603      	mov	r3, r0
 801ab8e:	4293      	cmp	r3, r2
 801ab90:	d100      	bne.n	801ab94 <memset+0xa>
 801ab92:	4770      	bx	lr
 801ab94:	f803 1b01 	strb.w	r1, [r3], #1
 801ab98:	e7f9      	b.n	801ab8e <memset+0x4>
	...

0801ab9c <_localeconv_r>:
 801ab9c:	4800      	ldr	r0, [pc, #0]	; (801aba0 <_localeconv_r+0x4>)
 801ab9e:	4770      	bx	lr
 801aba0:	20000300 	.word	0x20000300

0801aba4 <_close_r>:
 801aba4:	b538      	push	{r3, r4, r5, lr}
 801aba6:	4d06      	ldr	r5, [pc, #24]	; (801abc0 <_close_r+0x1c>)
 801aba8:	2300      	movs	r3, #0
 801abaa:	4604      	mov	r4, r0
 801abac:	4608      	mov	r0, r1
 801abae:	602b      	str	r3, [r5, #0]
 801abb0:	f7e7 f909 	bl	8001dc6 <_close>
 801abb4:	1c43      	adds	r3, r0, #1
 801abb6:	d102      	bne.n	801abbe <_close_r+0x1a>
 801abb8:	682b      	ldr	r3, [r5, #0]
 801abba:	b103      	cbz	r3, 801abbe <_close_r+0x1a>
 801abbc:	6023      	str	r3, [r4, #0]
 801abbe:	bd38      	pop	{r3, r4, r5, pc}
 801abc0:	20002034 	.word	0x20002034

0801abc4 <_lseek_r>:
 801abc4:	b538      	push	{r3, r4, r5, lr}
 801abc6:	4d07      	ldr	r5, [pc, #28]	; (801abe4 <_lseek_r+0x20>)
 801abc8:	4604      	mov	r4, r0
 801abca:	4608      	mov	r0, r1
 801abcc:	4611      	mov	r1, r2
 801abce:	2200      	movs	r2, #0
 801abd0:	602a      	str	r2, [r5, #0]
 801abd2:	461a      	mov	r2, r3
 801abd4:	f7e7 f91e 	bl	8001e14 <_lseek>
 801abd8:	1c43      	adds	r3, r0, #1
 801abda:	d102      	bne.n	801abe2 <_lseek_r+0x1e>
 801abdc:	682b      	ldr	r3, [r5, #0]
 801abde:	b103      	cbz	r3, 801abe2 <_lseek_r+0x1e>
 801abe0:	6023      	str	r3, [r4, #0]
 801abe2:	bd38      	pop	{r3, r4, r5, pc}
 801abe4:	20002034 	.word	0x20002034

0801abe8 <_read_r>:
 801abe8:	b538      	push	{r3, r4, r5, lr}
 801abea:	4d07      	ldr	r5, [pc, #28]	; (801ac08 <_read_r+0x20>)
 801abec:	4604      	mov	r4, r0
 801abee:	4608      	mov	r0, r1
 801abf0:	4611      	mov	r1, r2
 801abf2:	2200      	movs	r2, #0
 801abf4:	602a      	str	r2, [r5, #0]
 801abf6:	461a      	mov	r2, r3
 801abf8:	f7e7 f8ac 	bl	8001d54 <_read>
 801abfc:	1c43      	adds	r3, r0, #1
 801abfe:	d102      	bne.n	801ac06 <_read_r+0x1e>
 801ac00:	682b      	ldr	r3, [r5, #0]
 801ac02:	b103      	cbz	r3, 801ac06 <_read_r+0x1e>
 801ac04:	6023      	str	r3, [r4, #0]
 801ac06:	bd38      	pop	{r3, r4, r5, pc}
 801ac08:	20002034 	.word	0x20002034

0801ac0c <_write_r>:
 801ac0c:	b538      	push	{r3, r4, r5, lr}
 801ac0e:	4d07      	ldr	r5, [pc, #28]	; (801ac2c <_write_r+0x20>)
 801ac10:	4604      	mov	r4, r0
 801ac12:	4608      	mov	r0, r1
 801ac14:	4611      	mov	r1, r2
 801ac16:	2200      	movs	r2, #0
 801ac18:	602a      	str	r2, [r5, #0]
 801ac1a:	461a      	mov	r2, r3
 801ac1c:	f7e7 f8b7 	bl	8001d8e <_write>
 801ac20:	1c43      	adds	r3, r0, #1
 801ac22:	d102      	bne.n	801ac2a <_write_r+0x1e>
 801ac24:	682b      	ldr	r3, [r5, #0]
 801ac26:	b103      	cbz	r3, 801ac2a <_write_r+0x1e>
 801ac28:	6023      	str	r3, [r4, #0]
 801ac2a:	bd38      	pop	{r3, r4, r5, pc}
 801ac2c:	20002034 	.word	0x20002034

0801ac30 <__errno>:
 801ac30:	4b01      	ldr	r3, [pc, #4]	; (801ac38 <__errno+0x8>)
 801ac32:	6818      	ldr	r0, [r3, #0]
 801ac34:	4770      	bx	lr
 801ac36:	bf00      	nop
 801ac38:	2000020c 	.word	0x2000020c

0801ac3c <__libc_init_array>:
 801ac3c:	b570      	push	{r4, r5, r6, lr}
 801ac3e:	4d0d      	ldr	r5, [pc, #52]	; (801ac74 <__libc_init_array+0x38>)
 801ac40:	4c0d      	ldr	r4, [pc, #52]	; (801ac78 <__libc_init_array+0x3c>)
 801ac42:	1b64      	subs	r4, r4, r5
 801ac44:	10a4      	asrs	r4, r4, #2
 801ac46:	2600      	movs	r6, #0
 801ac48:	42a6      	cmp	r6, r4
 801ac4a:	d109      	bne.n	801ac60 <__libc_init_array+0x24>
 801ac4c:	4d0b      	ldr	r5, [pc, #44]	; (801ac7c <__libc_init_array+0x40>)
 801ac4e:	4c0c      	ldr	r4, [pc, #48]	; (801ac80 <__libc_init_array+0x44>)
 801ac50:	f003 ff7e 	bl	801eb50 <_init>
 801ac54:	1b64      	subs	r4, r4, r5
 801ac56:	10a4      	asrs	r4, r4, #2
 801ac58:	2600      	movs	r6, #0
 801ac5a:	42a6      	cmp	r6, r4
 801ac5c:	d105      	bne.n	801ac6a <__libc_init_array+0x2e>
 801ac5e:	bd70      	pop	{r4, r5, r6, pc}
 801ac60:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac64:	4798      	blx	r3
 801ac66:	3601      	adds	r6, #1
 801ac68:	e7ee      	b.n	801ac48 <__libc_init_array+0xc>
 801ac6a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac6e:	4798      	blx	r3
 801ac70:	3601      	adds	r6, #1
 801ac72:	e7f2      	b.n	801ac5a <__libc_init_array+0x1e>
 801ac74:	0801f430 	.word	0x0801f430
 801ac78:	0801f430 	.word	0x0801f430
 801ac7c:	0801f430 	.word	0x0801f430
 801ac80:	0801f434 	.word	0x0801f434

0801ac84 <__retarget_lock_init_recursive>:
 801ac84:	4770      	bx	lr

0801ac86 <__retarget_lock_acquire_recursive>:
 801ac86:	4770      	bx	lr

0801ac88 <__retarget_lock_release_recursive>:
 801ac88:	4770      	bx	lr

0801ac8a <strcpy>:
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac90:	f803 2b01 	strb.w	r2, [r3], #1
 801ac94:	2a00      	cmp	r2, #0
 801ac96:	d1f9      	bne.n	801ac8c <strcpy+0x2>
 801ac98:	4770      	bx	lr

0801ac9a <memcpy>:
 801ac9a:	440a      	add	r2, r1
 801ac9c:	4291      	cmp	r1, r2
 801ac9e:	f100 33ff 	add.w	r3, r0, #4294967295
 801aca2:	d100      	bne.n	801aca6 <memcpy+0xc>
 801aca4:	4770      	bx	lr
 801aca6:	b510      	push	{r4, lr}
 801aca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801acac:	f803 4f01 	strb.w	r4, [r3, #1]!
 801acb0:	4291      	cmp	r1, r2
 801acb2:	d1f9      	bne.n	801aca8 <memcpy+0xe>
 801acb4:	bd10      	pop	{r4, pc}

0801acb6 <quorem>:
 801acb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acba:	6903      	ldr	r3, [r0, #16]
 801acbc:	690c      	ldr	r4, [r1, #16]
 801acbe:	42a3      	cmp	r3, r4
 801acc0:	4607      	mov	r7, r0
 801acc2:	db7e      	blt.n	801adc2 <quorem+0x10c>
 801acc4:	3c01      	subs	r4, #1
 801acc6:	f101 0814 	add.w	r8, r1, #20
 801acca:	f100 0514 	add.w	r5, r0, #20
 801acce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801acd2:	9301      	str	r3, [sp, #4]
 801acd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801acd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801acdc:	3301      	adds	r3, #1
 801acde:	429a      	cmp	r2, r3
 801ace0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ace4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ace8:	fbb2 f6f3 	udiv	r6, r2, r3
 801acec:	d331      	bcc.n	801ad52 <quorem+0x9c>
 801acee:	f04f 0e00 	mov.w	lr, #0
 801acf2:	4640      	mov	r0, r8
 801acf4:	46ac      	mov	ip, r5
 801acf6:	46f2      	mov	sl, lr
 801acf8:	f850 2b04 	ldr.w	r2, [r0], #4
 801acfc:	b293      	uxth	r3, r2
 801acfe:	fb06 e303 	mla	r3, r6, r3, lr
 801ad02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ad06:	0c1a      	lsrs	r2, r3, #16
 801ad08:	b29b      	uxth	r3, r3
 801ad0a:	ebaa 0303 	sub.w	r3, sl, r3
 801ad0e:	f8dc a000 	ldr.w	sl, [ip]
 801ad12:	fa13 f38a 	uxtah	r3, r3, sl
 801ad16:	fb06 220e 	mla	r2, r6, lr, r2
 801ad1a:	9300      	str	r3, [sp, #0]
 801ad1c:	9b00      	ldr	r3, [sp, #0]
 801ad1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801ad22:	b292      	uxth	r2, r2
 801ad24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801ad28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ad2c:	f8bd 3000 	ldrh.w	r3, [sp]
 801ad30:	4581      	cmp	r9, r0
 801ad32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ad36:	f84c 3b04 	str.w	r3, [ip], #4
 801ad3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ad3e:	d2db      	bcs.n	801acf8 <quorem+0x42>
 801ad40:	f855 300b 	ldr.w	r3, [r5, fp]
 801ad44:	b92b      	cbnz	r3, 801ad52 <quorem+0x9c>
 801ad46:	9b01      	ldr	r3, [sp, #4]
 801ad48:	3b04      	subs	r3, #4
 801ad4a:	429d      	cmp	r5, r3
 801ad4c:	461a      	mov	r2, r3
 801ad4e:	d32c      	bcc.n	801adaa <quorem+0xf4>
 801ad50:	613c      	str	r4, [r7, #16]
 801ad52:	4638      	mov	r0, r7
 801ad54:	f001 f9a6 	bl	801c0a4 <__mcmp>
 801ad58:	2800      	cmp	r0, #0
 801ad5a:	db22      	blt.n	801ada2 <quorem+0xec>
 801ad5c:	3601      	adds	r6, #1
 801ad5e:	4629      	mov	r1, r5
 801ad60:	2000      	movs	r0, #0
 801ad62:	f858 2b04 	ldr.w	r2, [r8], #4
 801ad66:	f8d1 c000 	ldr.w	ip, [r1]
 801ad6a:	b293      	uxth	r3, r2
 801ad6c:	1ac3      	subs	r3, r0, r3
 801ad6e:	0c12      	lsrs	r2, r2, #16
 801ad70:	fa13 f38c 	uxtah	r3, r3, ip
 801ad74:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801ad78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ad7c:	b29b      	uxth	r3, r3
 801ad7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ad82:	45c1      	cmp	r9, r8
 801ad84:	f841 3b04 	str.w	r3, [r1], #4
 801ad88:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ad8c:	d2e9      	bcs.n	801ad62 <quorem+0xac>
 801ad8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ad92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ad96:	b922      	cbnz	r2, 801ada2 <quorem+0xec>
 801ad98:	3b04      	subs	r3, #4
 801ad9a:	429d      	cmp	r5, r3
 801ad9c:	461a      	mov	r2, r3
 801ad9e:	d30a      	bcc.n	801adb6 <quorem+0x100>
 801ada0:	613c      	str	r4, [r7, #16]
 801ada2:	4630      	mov	r0, r6
 801ada4:	b003      	add	sp, #12
 801ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adaa:	6812      	ldr	r2, [r2, #0]
 801adac:	3b04      	subs	r3, #4
 801adae:	2a00      	cmp	r2, #0
 801adb0:	d1ce      	bne.n	801ad50 <quorem+0x9a>
 801adb2:	3c01      	subs	r4, #1
 801adb4:	e7c9      	b.n	801ad4a <quorem+0x94>
 801adb6:	6812      	ldr	r2, [r2, #0]
 801adb8:	3b04      	subs	r3, #4
 801adba:	2a00      	cmp	r2, #0
 801adbc:	d1f0      	bne.n	801ada0 <quorem+0xea>
 801adbe:	3c01      	subs	r4, #1
 801adc0:	e7eb      	b.n	801ad9a <quorem+0xe4>
 801adc2:	2000      	movs	r0, #0
 801adc4:	e7ee      	b.n	801ada4 <quorem+0xee>
	...

0801adc8 <_dtoa_r>:
 801adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adcc:	ed2d 8b04 	vpush	{d8-d9}
 801add0:	69c5      	ldr	r5, [r0, #28]
 801add2:	b093      	sub	sp, #76	; 0x4c
 801add4:	ed8d 0b02 	vstr	d0, [sp, #8]
 801add8:	ec57 6b10 	vmov	r6, r7, d0
 801addc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ade0:	9107      	str	r1, [sp, #28]
 801ade2:	4604      	mov	r4, r0
 801ade4:	920a      	str	r2, [sp, #40]	; 0x28
 801ade6:	930d      	str	r3, [sp, #52]	; 0x34
 801ade8:	b975      	cbnz	r5, 801ae08 <_dtoa_r+0x40>
 801adea:	2010      	movs	r0, #16
 801adec:	f000 fe2a 	bl	801ba44 <malloc>
 801adf0:	4602      	mov	r2, r0
 801adf2:	61e0      	str	r0, [r4, #28]
 801adf4:	b920      	cbnz	r0, 801ae00 <_dtoa_r+0x38>
 801adf6:	4bae      	ldr	r3, [pc, #696]	; (801b0b0 <_dtoa_r+0x2e8>)
 801adf8:	21ef      	movs	r1, #239	; 0xef
 801adfa:	48ae      	ldr	r0, [pc, #696]	; (801b0b4 <_dtoa_r+0x2ec>)
 801adfc:	f001 fe5c 	bl	801cab8 <__assert_func>
 801ae00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ae04:	6005      	str	r5, [r0, #0]
 801ae06:	60c5      	str	r5, [r0, #12]
 801ae08:	69e3      	ldr	r3, [r4, #28]
 801ae0a:	6819      	ldr	r1, [r3, #0]
 801ae0c:	b151      	cbz	r1, 801ae24 <_dtoa_r+0x5c>
 801ae0e:	685a      	ldr	r2, [r3, #4]
 801ae10:	604a      	str	r2, [r1, #4]
 801ae12:	2301      	movs	r3, #1
 801ae14:	4093      	lsls	r3, r2
 801ae16:	608b      	str	r3, [r1, #8]
 801ae18:	4620      	mov	r0, r4
 801ae1a:	f000 ff07 	bl	801bc2c <_Bfree>
 801ae1e:	69e3      	ldr	r3, [r4, #28]
 801ae20:	2200      	movs	r2, #0
 801ae22:	601a      	str	r2, [r3, #0]
 801ae24:	1e3b      	subs	r3, r7, #0
 801ae26:	bfbb      	ittet	lt
 801ae28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801ae2c:	9303      	strlt	r3, [sp, #12]
 801ae2e:	2300      	movge	r3, #0
 801ae30:	2201      	movlt	r2, #1
 801ae32:	bfac      	ite	ge
 801ae34:	f8c8 3000 	strge.w	r3, [r8]
 801ae38:	f8c8 2000 	strlt.w	r2, [r8]
 801ae3c:	4b9e      	ldr	r3, [pc, #632]	; (801b0b8 <_dtoa_r+0x2f0>)
 801ae3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801ae42:	ea33 0308 	bics.w	r3, r3, r8
 801ae46:	d11b      	bne.n	801ae80 <_dtoa_r+0xb8>
 801ae48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ae4a:	f242 730f 	movw	r3, #9999	; 0x270f
 801ae4e:	6013      	str	r3, [r2, #0]
 801ae50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801ae54:	4333      	orrs	r3, r6
 801ae56:	f000 8593 	beq.w	801b980 <_dtoa_r+0xbb8>
 801ae5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ae5c:	b963      	cbnz	r3, 801ae78 <_dtoa_r+0xb0>
 801ae5e:	4b97      	ldr	r3, [pc, #604]	; (801b0bc <_dtoa_r+0x2f4>)
 801ae60:	e027      	b.n	801aeb2 <_dtoa_r+0xea>
 801ae62:	4b97      	ldr	r3, [pc, #604]	; (801b0c0 <_dtoa_r+0x2f8>)
 801ae64:	9300      	str	r3, [sp, #0]
 801ae66:	3308      	adds	r3, #8
 801ae68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ae6a:	6013      	str	r3, [r2, #0]
 801ae6c:	9800      	ldr	r0, [sp, #0]
 801ae6e:	b013      	add	sp, #76	; 0x4c
 801ae70:	ecbd 8b04 	vpop	{d8-d9}
 801ae74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae78:	4b90      	ldr	r3, [pc, #576]	; (801b0bc <_dtoa_r+0x2f4>)
 801ae7a:	9300      	str	r3, [sp, #0]
 801ae7c:	3303      	adds	r3, #3
 801ae7e:	e7f3      	b.n	801ae68 <_dtoa_r+0xa0>
 801ae80:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ae84:	2200      	movs	r2, #0
 801ae86:	ec51 0b17 	vmov	r0, r1, d7
 801ae8a:	eeb0 8a47 	vmov.f32	s16, s14
 801ae8e:	eef0 8a67 	vmov.f32	s17, s15
 801ae92:	2300      	movs	r3, #0
 801ae94:	f7e5 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 801ae98:	4681      	mov	r9, r0
 801ae9a:	b160      	cbz	r0, 801aeb6 <_dtoa_r+0xee>
 801ae9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ae9e:	2301      	movs	r3, #1
 801aea0:	6013      	str	r3, [r2, #0]
 801aea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	f000 8568 	beq.w	801b97a <_dtoa_r+0xbb2>
 801aeaa:	4b86      	ldr	r3, [pc, #536]	; (801b0c4 <_dtoa_r+0x2fc>)
 801aeac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801aeae:	6013      	str	r3, [r2, #0]
 801aeb0:	3b01      	subs	r3, #1
 801aeb2:	9300      	str	r3, [sp, #0]
 801aeb4:	e7da      	b.n	801ae6c <_dtoa_r+0xa4>
 801aeb6:	aa10      	add	r2, sp, #64	; 0x40
 801aeb8:	a911      	add	r1, sp, #68	; 0x44
 801aeba:	4620      	mov	r0, r4
 801aebc:	eeb0 0a48 	vmov.f32	s0, s16
 801aec0:	eef0 0a68 	vmov.f32	s1, s17
 801aec4:	f001 f994 	bl	801c1f0 <__d2b>
 801aec8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801aecc:	4682      	mov	sl, r0
 801aece:	2d00      	cmp	r5, #0
 801aed0:	d07f      	beq.n	801afd2 <_dtoa_r+0x20a>
 801aed2:	ee18 3a90 	vmov	r3, s17
 801aed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801aeda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801aede:	ec51 0b18 	vmov	r0, r1, d8
 801aee2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801aee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801aeea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801aeee:	4619      	mov	r1, r3
 801aef0:	2200      	movs	r2, #0
 801aef2:	4b75      	ldr	r3, [pc, #468]	; (801b0c8 <_dtoa_r+0x300>)
 801aef4:	f7e5 f9c8 	bl	8000288 <__aeabi_dsub>
 801aef8:	a367      	add	r3, pc, #412	; (adr r3, 801b098 <_dtoa_r+0x2d0>)
 801aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aefe:	f7e5 fb7b 	bl	80005f8 <__aeabi_dmul>
 801af02:	a367      	add	r3, pc, #412	; (adr r3, 801b0a0 <_dtoa_r+0x2d8>)
 801af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af08:	f7e5 f9c0 	bl	800028c <__adddf3>
 801af0c:	4606      	mov	r6, r0
 801af0e:	4628      	mov	r0, r5
 801af10:	460f      	mov	r7, r1
 801af12:	f7e5 fb07 	bl	8000524 <__aeabi_i2d>
 801af16:	a364      	add	r3, pc, #400	; (adr r3, 801b0a8 <_dtoa_r+0x2e0>)
 801af18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af1c:	f7e5 fb6c 	bl	80005f8 <__aeabi_dmul>
 801af20:	4602      	mov	r2, r0
 801af22:	460b      	mov	r3, r1
 801af24:	4630      	mov	r0, r6
 801af26:	4639      	mov	r1, r7
 801af28:	f7e5 f9b0 	bl	800028c <__adddf3>
 801af2c:	4606      	mov	r6, r0
 801af2e:	460f      	mov	r7, r1
 801af30:	f7e5 fe12 	bl	8000b58 <__aeabi_d2iz>
 801af34:	2200      	movs	r2, #0
 801af36:	4683      	mov	fp, r0
 801af38:	2300      	movs	r3, #0
 801af3a:	4630      	mov	r0, r6
 801af3c:	4639      	mov	r1, r7
 801af3e:	f7e5 fdcd 	bl	8000adc <__aeabi_dcmplt>
 801af42:	b148      	cbz	r0, 801af58 <_dtoa_r+0x190>
 801af44:	4658      	mov	r0, fp
 801af46:	f7e5 faed 	bl	8000524 <__aeabi_i2d>
 801af4a:	4632      	mov	r2, r6
 801af4c:	463b      	mov	r3, r7
 801af4e:	f7e5 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 801af52:	b908      	cbnz	r0, 801af58 <_dtoa_r+0x190>
 801af54:	f10b 3bff 	add.w	fp, fp, #4294967295
 801af58:	f1bb 0f16 	cmp.w	fp, #22
 801af5c:	d857      	bhi.n	801b00e <_dtoa_r+0x246>
 801af5e:	4b5b      	ldr	r3, [pc, #364]	; (801b0cc <_dtoa_r+0x304>)
 801af60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af68:	ec51 0b18 	vmov	r0, r1, d8
 801af6c:	f7e5 fdb6 	bl	8000adc <__aeabi_dcmplt>
 801af70:	2800      	cmp	r0, #0
 801af72:	d04e      	beq.n	801b012 <_dtoa_r+0x24a>
 801af74:	f10b 3bff 	add.w	fp, fp, #4294967295
 801af78:	2300      	movs	r3, #0
 801af7a:	930c      	str	r3, [sp, #48]	; 0x30
 801af7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801af7e:	1b5b      	subs	r3, r3, r5
 801af80:	1e5a      	subs	r2, r3, #1
 801af82:	bf45      	ittet	mi
 801af84:	f1c3 0301 	rsbmi	r3, r3, #1
 801af88:	9305      	strmi	r3, [sp, #20]
 801af8a:	2300      	movpl	r3, #0
 801af8c:	2300      	movmi	r3, #0
 801af8e:	9206      	str	r2, [sp, #24]
 801af90:	bf54      	ite	pl
 801af92:	9305      	strpl	r3, [sp, #20]
 801af94:	9306      	strmi	r3, [sp, #24]
 801af96:	f1bb 0f00 	cmp.w	fp, #0
 801af9a:	db3c      	blt.n	801b016 <_dtoa_r+0x24e>
 801af9c:	9b06      	ldr	r3, [sp, #24]
 801af9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801afa2:	445b      	add	r3, fp
 801afa4:	9306      	str	r3, [sp, #24]
 801afa6:	2300      	movs	r3, #0
 801afa8:	9308      	str	r3, [sp, #32]
 801afaa:	9b07      	ldr	r3, [sp, #28]
 801afac:	2b09      	cmp	r3, #9
 801afae:	d868      	bhi.n	801b082 <_dtoa_r+0x2ba>
 801afb0:	2b05      	cmp	r3, #5
 801afb2:	bfc4      	itt	gt
 801afb4:	3b04      	subgt	r3, #4
 801afb6:	9307      	strgt	r3, [sp, #28]
 801afb8:	9b07      	ldr	r3, [sp, #28]
 801afba:	f1a3 0302 	sub.w	r3, r3, #2
 801afbe:	bfcc      	ite	gt
 801afc0:	2500      	movgt	r5, #0
 801afc2:	2501      	movle	r5, #1
 801afc4:	2b03      	cmp	r3, #3
 801afc6:	f200 8085 	bhi.w	801b0d4 <_dtoa_r+0x30c>
 801afca:	e8df f003 	tbb	[pc, r3]
 801afce:	3b2e      	.short	0x3b2e
 801afd0:	5839      	.short	0x5839
 801afd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801afd6:	441d      	add	r5, r3
 801afd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801afdc:	2b20      	cmp	r3, #32
 801afde:	bfc1      	itttt	gt
 801afe0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801afe4:	fa08 f803 	lslgt.w	r8, r8, r3
 801afe8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801afec:	fa26 f303 	lsrgt.w	r3, r6, r3
 801aff0:	bfd6      	itet	le
 801aff2:	f1c3 0320 	rsble	r3, r3, #32
 801aff6:	ea48 0003 	orrgt.w	r0, r8, r3
 801affa:	fa06 f003 	lslle.w	r0, r6, r3
 801affe:	f7e5 fa81 	bl	8000504 <__aeabi_ui2d>
 801b002:	2201      	movs	r2, #1
 801b004:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801b008:	3d01      	subs	r5, #1
 801b00a:	920e      	str	r2, [sp, #56]	; 0x38
 801b00c:	e76f      	b.n	801aeee <_dtoa_r+0x126>
 801b00e:	2301      	movs	r3, #1
 801b010:	e7b3      	b.n	801af7a <_dtoa_r+0x1b2>
 801b012:	900c      	str	r0, [sp, #48]	; 0x30
 801b014:	e7b2      	b.n	801af7c <_dtoa_r+0x1b4>
 801b016:	9b05      	ldr	r3, [sp, #20]
 801b018:	eba3 030b 	sub.w	r3, r3, fp
 801b01c:	9305      	str	r3, [sp, #20]
 801b01e:	f1cb 0300 	rsb	r3, fp, #0
 801b022:	9308      	str	r3, [sp, #32]
 801b024:	2300      	movs	r3, #0
 801b026:	930b      	str	r3, [sp, #44]	; 0x2c
 801b028:	e7bf      	b.n	801afaa <_dtoa_r+0x1e2>
 801b02a:	2300      	movs	r3, #0
 801b02c:	9309      	str	r3, [sp, #36]	; 0x24
 801b02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b030:	2b00      	cmp	r3, #0
 801b032:	dc52      	bgt.n	801b0da <_dtoa_r+0x312>
 801b034:	2301      	movs	r3, #1
 801b036:	9301      	str	r3, [sp, #4]
 801b038:	9304      	str	r3, [sp, #16]
 801b03a:	461a      	mov	r2, r3
 801b03c:	920a      	str	r2, [sp, #40]	; 0x28
 801b03e:	e00b      	b.n	801b058 <_dtoa_r+0x290>
 801b040:	2301      	movs	r3, #1
 801b042:	e7f3      	b.n	801b02c <_dtoa_r+0x264>
 801b044:	2300      	movs	r3, #0
 801b046:	9309      	str	r3, [sp, #36]	; 0x24
 801b048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b04a:	445b      	add	r3, fp
 801b04c:	9301      	str	r3, [sp, #4]
 801b04e:	3301      	adds	r3, #1
 801b050:	2b01      	cmp	r3, #1
 801b052:	9304      	str	r3, [sp, #16]
 801b054:	bfb8      	it	lt
 801b056:	2301      	movlt	r3, #1
 801b058:	69e0      	ldr	r0, [r4, #28]
 801b05a:	2100      	movs	r1, #0
 801b05c:	2204      	movs	r2, #4
 801b05e:	f102 0614 	add.w	r6, r2, #20
 801b062:	429e      	cmp	r6, r3
 801b064:	d93d      	bls.n	801b0e2 <_dtoa_r+0x31a>
 801b066:	6041      	str	r1, [r0, #4]
 801b068:	4620      	mov	r0, r4
 801b06a:	f000 fd9f 	bl	801bbac <_Balloc>
 801b06e:	9000      	str	r0, [sp, #0]
 801b070:	2800      	cmp	r0, #0
 801b072:	d139      	bne.n	801b0e8 <_dtoa_r+0x320>
 801b074:	4b16      	ldr	r3, [pc, #88]	; (801b0d0 <_dtoa_r+0x308>)
 801b076:	4602      	mov	r2, r0
 801b078:	f240 11af 	movw	r1, #431	; 0x1af
 801b07c:	e6bd      	b.n	801adfa <_dtoa_r+0x32>
 801b07e:	2301      	movs	r3, #1
 801b080:	e7e1      	b.n	801b046 <_dtoa_r+0x27e>
 801b082:	2501      	movs	r5, #1
 801b084:	2300      	movs	r3, #0
 801b086:	9307      	str	r3, [sp, #28]
 801b088:	9509      	str	r5, [sp, #36]	; 0x24
 801b08a:	f04f 33ff 	mov.w	r3, #4294967295
 801b08e:	9301      	str	r3, [sp, #4]
 801b090:	9304      	str	r3, [sp, #16]
 801b092:	2200      	movs	r2, #0
 801b094:	2312      	movs	r3, #18
 801b096:	e7d1      	b.n	801b03c <_dtoa_r+0x274>
 801b098:	636f4361 	.word	0x636f4361
 801b09c:	3fd287a7 	.word	0x3fd287a7
 801b0a0:	8b60c8b3 	.word	0x8b60c8b3
 801b0a4:	3fc68a28 	.word	0x3fc68a28
 801b0a8:	509f79fb 	.word	0x509f79fb
 801b0ac:	3fd34413 	.word	0x3fd34413
 801b0b0:	0801ec7d 	.word	0x0801ec7d
 801b0b4:	0801ec94 	.word	0x0801ec94
 801b0b8:	7ff00000 	.word	0x7ff00000
 801b0bc:	0801ec79 	.word	0x0801ec79
 801b0c0:	0801ec70 	.word	0x0801ec70
 801b0c4:	0801ec4d 	.word	0x0801ec4d
 801b0c8:	3ff80000 	.word	0x3ff80000
 801b0cc:	0801ed80 	.word	0x0801ed80
 801b0d0:	0801ecec 	.word	0x0801ecec
 801b0d4:	2301      	movs	r3, #1
 801b0d6:	9309      	str	r3, [sp, #36]	; 0x24
 801b0d8:	e7d7      	b.n	801b08a <_dtoa_r+0x2c2>
 801b0da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0dc:	9301      	str	r3, [sp, #4]
 801b0de:	9304      	str	r3, [sp, #16]
 801b0e0:	e7ba      	b.n	801b058 <_dtoa_r+0x290>
 801b0e2:	3101      	adds	r1, #1
 801b0e4:	0052      	lsls	r2, r2, #1
 801b0e6:	e7ba      	b.n	801b05e <_dtoa_r+0x296>
 801b0e8:	69e3      	ldr	r3, [r4, #28]
 801b0ea:	9a00      	ldr	r2, [sp, #0]
 801b0ec:	601a      	str	r2, [r3, #0]
 801b0ee:	9b04      	ldr	r3, [sp, #16]
 801b0f0:	2b0e      	cmp	r3, #14
 801b0f2:	f200 80a8 	bhi.w	801b246 <_dtoa_r+0x47e>
 801b0f6:	2d00      	cmp	r5, #0
 801b0f8:	f000 80a5 	beq.w	801b246 <_dtoa_r+0x47e>
 801b0fc:	f1bb 0f00 	cmp.w	fp, #0
 801b100:	dd38      	ble.n	801b174 <_dtoa_r+0x3ac>
 801b102:	4bc0      	ldr	r3, [pc, #768]	; (801b404 <_dtoa_r+0x63c>)
 801b104:	f00b 020f 	and.w	r2, fp, #15
 801b108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b10c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801b110:	e9d3 6700 	ldrd	r6, r7, [r3]
 801b114:	ea4f 182b 	mov.w	r8, fp, asr #4
 801b118:	d019      	beq.n	801b14e <_dtoa_r+0x386>
 801b11a:	4bbb      	ldr	r3, [pc, #748]	; (801b408 <_dtoa_r+0x640>)
 801b11c:	ec51 0b18 	vmov	r0, r1, d8
 801b120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b124:	f7e5 fb92 	bl	800084c <__aeabi_ddiv>
 801b128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b12c:	f008 080f 	and.w	r8, r8, #15
 801b130:	2503      	movs	r5, #3
 801b132:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801b408 <_dtoa_r+0x640>
 801b136:	f1b8 0f00 	cmp.w	r8, #0
 801b13a:	d10a      	bne.n	801b152 <_dtoa_r+0x38a>
 801b13c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b140:	4632      	mov	r2, r6
 801b142:	463b      	mov	r3, r7
 801b144:	f7e5 fb82 	bl	800084c <__aeabi_ddiv>
 801b148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b14c:	e02b      	b.n	801b1a6 <_dtoa_r+0x3de>
 801b14e:	2502      	movs	r5, #2
 801b150:	e7ef      	b.n	801b132 <_dtoa_r+0x36a>
 801b152:	f018 0f01 	tst.w	r8, #1
 801b156:	d008      	beq.n	801b16a <_dtoa_r+0x3a2>
 801b158:	4630      	mov	r0, r6
 801b15a:	4639      	mov	r1, r7
 801b15c:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b160:	f7e5 fa4a 	bl	80005f8 <__aeabi_dmul>
 801b164:	3501      	adds	r5, #1
 801b166:	4606      	mov	r6, r0
 801b168:	460f      	mov	r7, r1
 801b16a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b16e:	f109 0908 	add.w	r9, r9, #8
 801b172:	e7e0      	b.n	801b136 <_dtoa_r+0x36e>
 801b174:	f000 809f 	beq.w	801b2b6 <_dtoa_r+0x4ee>
 801b178:	f1cb 0600 	rsb	r6, fp, #0
 801b17c:	4ba1      	ldr	r3, [pc, #644]	; (801b404 <_dtoa_r+0x63c>)
 801b17e:	4fa2      	ldr	r7, [pc, #648]	; (801b408 <_dtoa_r+0x640>)
 801b180:	f006 020f 	and.w	r2, r6, #15
 801b184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b18c:	ec51 0b18 	vmov	r0, r1, d8
 801b190:	f7e5 fa32 	bl	80005f8 <__aeabi_dmul>
 801b194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b198:	1136      	asrs	r6, r6, #4
 801b19a:	2300      	movs	r3, #0
 801b19c:	2502      	movs	r5, #2
 801b19e:	2e00      	cmp	r6, #0
 801b1a0:	d17e      	bne.n	801b2a0 <_dtoa_r+0x4d8>
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d1d0      	bne.n	801b148 <_dtoa_r+0x380>
 801b1a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b1a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	f000 8084 	beq.w	801b2ba <_dtoa_r+0x4f2>
 801b1b2:	4b96      	ldr	r3, [pc, #600]	; (801b40c <_dtoa_r+0x644>)
 801b1b4:	2200      	movs	r2, #0
 801b1b6:	4640      	mov	r0, r8
 801b1b8:	4649      	mov	r1, r9
 801b1ba:	f7e5 fc8f 	bl	8000adc <__aeabi_dcmplt>
 801b1be:	2800      	cmp	r0, #0
 801b1c0:	d07b      	beq.n	801b2ba <_dtoa_r+0x4f2>
 801b1c2:	9b04      	ldr	r3, [sp, #16]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d078      	beq.n	801b2ba <_dtoa_r+0x4f2>
 801b1c8:	9b01      	ldr	r3, [sp, #4]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	dd39      	ble.n	801b242 <_dtoa_r+0x47a>
 801b1ce:	4b90      	ldr	r3, [pc, #576]	; (801b410 <_dtoa_r+0x648>)
 801b1d0:	2200      	movs	r2, #0
 801b1d2:	4640      	mov	r0, r8
 801b1d4:	4649      	mov	r1, r9
 801b1d6:	f7e5 fa0f 	bl	80005f8 <__aeabi_dmul>
 801b1da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b1de:	9e01      	ldr	r6, [sp, #4]
 801b1e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 801b1e4:	3501      	adds	r5, #1
 801b1e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801b1ea:	4628      	mov	r0, r5
 801b1ec:	f7e5 f99a 	bl	8000524 <__aeabi_i2d>
 801b1f0:	4642      	mov	r2, r8
 801b1f2:	464b      	mov	r3, r9
 801b1f4:	f7e5 fa00 	bl	80005f8 <__aeabi_dmul>
 801b1f8:	4b86      	ldr	r3, [pc, #536]	; (801b414 <_dtoa_r+0x64c>)
 801b1fa:	2200      	movs	r2, #0
 801b1fc:	f7e5 f846 	bl	800028c <__adddf3>
 801b200:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801b204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b208:	9303      	str	r3, [sp, #12]
 801b20a:	2e00      	cmp	r6, #0
 801b20c:	d158      	bne.n	801b2c0 <_dtoa_r+0x4f8>
 801b20e:	4b82      	ldr	r3, [pc, #520]	; (801b418 <_dtoa_r+0x650>)
 801b210:	2200      	movs	r2, #0
 801b212:	4640      	mov	r0, r8
 801b214:	4649      	mov	r1, r9
 801b216:	f7e5 f837 	bl	8000288 <__aeabi_dsub>
 801b21a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b21e:	4680      	mov	r8, r0
 801b220:	4689      	mov	r9, r1
 801b222:	f7e5 fc79 	bl	8000b18 <__aeabi_dcmpgt>
 801b226:	2800      	cmp	r0, #0
 801b228:	f040 8296 	bne.w	801b758 <_dtoa_r+0x990>
 801b22c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b230:	4640      	mov	r0, r8
 801b232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b236:	4649      	mov	r1, r9
 801b238:	f7e5 fc50 	bl	8000adc <__aeabi_dcmplt>
 801b23c:	2800      	cmp	r0, #0
 801b23e:	f040 8289 	bne.w	801b754 <_dtoa_r+0x98c>
 801b242:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b248:	2b00      	cmp	r3, #0
 801b24a:	f2c0 814e 	blt.w	801b4ea <_dtoa_r+0x722>
 801b24e:	f1bb 0f0e 	cmp.w	fp, #14
 801b252:	f300 814a 	bgt.w	801b4ea <_dtoa_r+0x722>
 801b256:	4b6b      	ldr	r3, [pc, #428]	; (801b404 <_dtoa_r+0x63c>)
 801b258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b25c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b262:	2b00      	cmp	r3, #0
 801b264:	f280 80dc 	bge.w	801b420 <_dtoa_r+0x658>
 801b268:	9b04      	ldr	r3, [sp, #16]
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	f300 80d8 	bgt.w	801b420 <_dtoa_r+0x658>
 801b270:	f040 826f 	bne.w	801b752 <_dtoa_r+0x98a>
 801b274:	4b68      	ldr	r3, [pc, #416]	; (801b418 <_dtoa_r+0x650>)
 801b276:	2200      	movs	r2, #0
 801b278:	4640      	mov	r0, r8
 801b27a:	4649      	mov	r1, r9
 801b27c:	f7e5 f9bc 	bl	80005f8 <__aeabi_dmul>
 801b280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b284:	f7e5 fc3e 	bl	8000b04 <__aeabi_dcmpge>
 801b288:	9e04      	ldr	r6, [sp, #16]
 801b28a:	4637      	mov	r7, r6
 801b28c:	2800      	cmp	r0, #0
 801b28e:	f040 8245 	bne.w	801b71c <_dtoa_r+0x954>
 801b292:	9d00      	ldr	r5, [sp, #0]
 801b294:	2331      	movs	r3, #49	; 0x31
 801b296:	f805 3b01 	strb.w	r3, [r5], #1
 801b29a:	f10b 0b01 	add.w	fp, fp, #1
 801b29e:	e241      	b.n	801b724 <_dtoa_r+0x95c>
 801b2a0:	07f2      	lsls	r2, r6, #31
 801b2a2:	d505      	bpl.n	801b2b0 <_dtoa_r+0x4e8>
 801b2a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b2a8:	f7e5 f9a6 	bl	80005f8 <__aeabi_dmul>
 801b2ac:	3501      	adds	r5, #1
 801b2ae:	2301      	movs	r3, #1
 801b2b0:	1076      	asrs	r6, r6, #1
 801b2b2:	3708      	adds	r7, #8
 801b2b4:	e773      	b.n	801b19e <_dtoa_r+0x3d6>
 801b2b6:	2502      	movs	r5, #2
 801b2b8:	e775      	b.n	801b1a6 <_dtoa_r+0x3de>
 801b2ba:	9e04      	ldr	r6, [sp, #16]
 801b2bc:	465f      	mov	r7, fp
 801b2be:	e792      	b.n	801b1e6 <_dtoa_r+0x41e>
 801b2c0:	9900      	ldr	r1, [sp, #0]
 801b2c2:	4b50      	ldr	r3, [pc, #320]	; (801b404 <_dtoa_r+0x63c>)
 801b2c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b2c8:	4431      	add	r1, r6
 801b2ca:	9102      	str	r1, [sp, #8]
 801b2cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b2ce:	eeb0 9a47 	vmov.f32	s18, s14
 801b2d2:	eef0 9a67 	vmov.f32	s19, s15
 801b2d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b2da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b2de:	2900      	cmp	r1, #0
 801b2e0:	d044      	beq.n	801b36c <_dtoa_r+0x5a4>
 801b2e2:	494e      	ldr	r1, [pc, #312]	; (801b41c <_dtoa_r+0x654>)
 801b2e4:	2000      	movs	r0, #0
 801b2e6:	f7e5 fab1 	bl	800084c <__aeabi_ddiv>
 801b2ea:	ec53 2b19 	vmov	r2, r3, d9
 801b2ee:	f7e4 ffcb 	bl	8000288 <__aeabi_dsub>
 801b2f2:	9d00      	ldr	r5, [sp, #0]
 801b2f4:	ec41 0b19 	vmov	d9, r0, r1
 801b2f8:	4649      	mov	r1, r9
 801b2fa:	4640      	mov	r0, r8
 801b2fc:	f7e5 fc2c 	bl	8000b58 <__aeabi_d2iz>
 801b300:	4606      	mov	r6, r0
 801b302:	f7e5 f90f 	bl	8000524 <__aeabi_i2d>
 801b306:	4602      	mov	r2, r0
 801b308:	460b      	mov	r3, r1
 801b30a:	4640      	mov	r0, r8
 801b30c:	4649      	mov	r1, r9
 801b30e:	f7e4 ffbb 	bl	8000288 <__aeabi_dsub>
 801b312:	3630      	adds	r6, #48	; 0x30
 801b314:	f805 6b01 	strb.w	r6, [r5], #1
 801b318:	ec53 2b19 	vmov	r2, r3, d9
 801b31c:	4680      	mov	r8, r0
 801b31e:	4689      	mov	r9, r1
 801b320:	f7e5 fbdc 	bl	8000adc <__aeabi_dcmplt>
 801b324:	2800      	cmp	r0, #0
 801b326:	d164      	bne.n	801b3f2 <_dtoa_r+0x62a>
 801b328:	4642      	mov	r2, r8
 801b32a:	464b      	mov	r3, r9
 801b32c:	4937      	ldr	r1, [pc, #220]	; (801b40c <_dtoa_r+0x644>)
 801b32e:	2000      	movs	r0, #0
 801b330:	f7e4 ffaa 	bl	8000288 <__aeabi_dsub>
 801b334:	ec53 2b19 	vmov	r2, r3, d9
 801b338:	f7e5 fbd0 	bl	8000adc <__aeabi_dcmplt>
 801b33c:	2800      	cmp	r0, #0
 801b33e:	f040 80b6 	bne.w	801b4ae <_dtoa_r+0x6e6>
 801b342:	9b02      	ldr	r3, [sp, #8]
 801b344:	429d      	cmp	r5, r3
 801b346:	f43f af7c 	beq.w	801b242 <_dtoa_r+0x47a>
 801b34a:	4b31      	ldr	r3, [pc, #196]	; (801b410 <_dtoa_r+0x648>)
 801b34c:	ec51 0b19 	vmov	r0, r1, d9
 801b350:	2200      	movs	r2, #0
 801b352:	f7e5 f951 	bl	80005f8 <__aeabi_dmul>
 801b356:	4b2e      	ldr	r3, [pc, #184]	; (801b410 <_dtoa_r+0x648>)
 801b358:	ec41 0b19 	vmov	d9, r0, r1
 801b35c:	2200      	movs	r2, #0
 801b35e:	4640      	mov	r0, r8
 801b360:	4649      	mov	r1, r9
 801b362:	f7e5 f949 	bl	80005f8 <__aeabi_dmul>
 801b366:	4680      	mov	r8, r0
 801b368:	4689      	mov	r9, r1
 801b36a:	e7c5      	b.n	801b2f8 <_dtoa_r+0x530>
 801b36c:	ec51 0b17 	vmov	r0, r1, d7
 801b370:	f7e5 f942 	bl	80005f8 <__aeabi_dmul>
 801b374:	9b02      	ldr	r3, [sp, #8]
 801b376:	9d00      	ldr	r5, [sp, #0]
 801b378:	930f      	str	r3, [sp, #60]	; 0x3c
 801b37a:	ec41 0b19 	vmov	d9, r0, r1
 801b37e:	4649      	mov	r1, r9
 801b380:	4640      	mov	r0, r8
 801b382:	f7e5 fbe9 	bl	8000b58 <__aeabi_d2iz>
 801b386:	4606      	mov	r6, r0
 801b388:	f7e5 f8cc 	bl	8000524 <__aeabi_i2d>
 801b38c:	3630      	adds	r6, #48	; 0x30
 801b38e:	4602      	mov	r2, r0
 801b390:	460b      	mov	r3, r1
 801b392:	4640      	mov	r0, r8
 801b394:	4649      	mov	r1, r9
 801b396:	f7e4 ff77 	bl	8000288 <__aeabi_dsub>
 801b39a:	f805 6b01 	strb.w	r6, [r5], #1
 801b39e:	9b02      	ldr	r3, [sp, #8]
 801b3a0:	429d      	cmp	r5, r3
 801b3a2:	4680      	mov	r8, r0
 801b3a4:	4689      	mov	r9, r1
 801b3a6:	f04f 0200 	mov.w	r2, #0
 801b3aa:	d124      	bne.n	801b3f6 <_dtoa_r+0x62e>
 801b3ac:	4b1b      	ldr	r3, [pc, #108]	; (801b41c <_dtoa_r+0x654>)
 801b3ae:	ec51 0b19 	vmov	r0, r1, d9
 801b3b2:	f7e4 ff6b 	bl	800028c <__adddf3>
 801b3b6:	4602      	mov	r2, r0
 801b3b8:	460b      	mov	r3, r1
 801b3ba:	4640      	mov	r0, r8
 801b3bc:	4649      	mov	r1, r9
 801b3be:	f7e5 fbab 	bl	8000b18 <__aeabi_dcmpgt>
 801b3c2:	2800      	cmp	r0, #0
 801b3c4:	d173      	bne.n	801b4ae <_dtoa_r+0x6e6>
 801b3c6:	ec53 2b19 	vmov	r2, r3, d9
 801b3ca:	4914      	ldr	r1, [pc, #80]	; (801b41c <_dtoa_r+0x654>)
 801b3cc:	2000      	movs	r0, #0
 801b3ce:	f7e4 ff5b 	bl	8000288 <__aeabi_dsub>
 801b3d2:	4602      	mov	r2, r0
 801b3d4:	460b      	mov	r3, r1
 801b3d6:	4640      	mov	r0, r8
 801b3d8:	4649      	mov	r1, r9
 801b3da:	f7e5 fb7f 	bl	8000adc <__aeabi_dcmplt>
 801b3de:	2800      	cmp	r0, #0
 801b3e0:	f43f af2f 	beq.w	801b242 <_dtoa_r+0x47a>
 801b3e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b3e6:	1e6b      	subs	r3, r5, #1
 801b3e8:	930f      	str	r3, [sp, #60]	; 0x3c
 801b3ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b3ee:	2b30      	cmp	r3, #48	; 0x30
 801b3f0:	d0f8      	beq.n	801b3e4 <_dtoa_r+0x61c>
 801b3f2:	46bb      	mov	fp, r7
 801b3f4:	e04a      	b.n	801b48c <_dtoa_r+0x6c4>
 801b3f6:	4b06      	ldr	r3, [pc, #24]	; (801b410 <_dtoa_r+0x648>)
 801b3f8:	f7e5 f8fe 	bl	80005f8 <__aeabi_dmul>
 801b3fc:	4680      	mov	r8, r0
 801b3fe:	4689      	mov	r9, r1
 801b400:	e7bd      	b.n	801b37e <_dtoa_r+0x5b6>
 801b402:	bf00      	nop
 801b404:	0801ed80 	.word	0x0801ed80
 801b408:	0801ed58 	.word	0x0801ed58
 801b40c:	3ff00000 	.word	0x3ff00000
 801b410:	40240000 	.word	0x40240000
 801b414:	401c0000 	.word	0x401c0000
 801b418:	40140000 	.word	0x40140000
 801b41c:	3fe00000 	.word	0x3fe00000
 801b420:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b424:	9d00      	ldr	r5, [sp, #0]
 801b426:	4642      	mov	r2, r8
 801b428:	464b      	mov	r3, r9
 801b42a:	4630      	mov	r0, r6
 801b42c:	4639      	mov	r1, r7
 801b42e:	f7e5 fa0d 	bl	800084c <__aeabi_ddiv>
 801b432:	f7e5 fb91 	bl	8000b58 <__aeabi_d2iz>
 801b436:	9001      	str	r0, [sp, #4]
 801b438:	f7e5 f874 	bl	8000524 <__aeabi_i2d>
 801b43c:	4642      	mov	r2, r8
 801b43e:	464b      	mov	r3, r9
 801b440:	f7e5 f8da 	bl	80005f8 <__aeabi_dmul>
 801b444:	4602      	mov	r2, r0
 801b446:	460b      	mov	r3, r1
 801b448:	4630      	mov	r0, r6
 801b44a:	4639      	mov	r1, r7
 801b44c:	f7e4 ff1c 	bl	8000288 <__aeabi_dsub>
 801b450:	9e01      	ldr	r6, [sp, #4]
 801b452:	9f04      	ldr	r7, [sp, #16]
 801b454:	3630      	adds	r6, #48	; 0x30
 801b456:	f805 6b01 	strb.w	r6, [r5], #1
 801b45a:	9e00      	ldr	r6, [sp, #0]
 801b45c:	1bae      	subs	r6, r5, r6
 801b45e:	42b7      	cmp	r7, r6
 801b460:	4602      	mov	r2, r0
 801b462:	460b      	mov	r3, r1
 801b464:	d134      	bne.n	801b4d0 <_dtoa_r+0x708>
 801b466:	f7e4 ff11 	bl	800028c <__adddf3>
 801b46a:	4642      	mov	r2, r8
 801b46c:	464b      	mov	r3, r9
 801b46e:	4606      	mov	r6, r0
 801b470:	460f      	mov	r7, r1
 801b472:	f7e5 fb51 	bl	8000b18 <__aeabi_dcmpgt>
 801b476:	b9c8      	cbnz	r0, 801b4ac <_dtoa_r+0x6e4>
 801b478:	4642      	mov	r2, r8
 801b47a:	464b      	mov	r3, r9
 801b47c:	4630      	mov	r0, r6
 801b47e:	4639      	mov	r1, r7
 801b480:	f7e5 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 801b484:	b110      	cbz	r0, 801b48c <_dtoa_r+0x6c4>
 801b486:	9b01      	ldr	r3, [sp, #4]
 801b488:	07db      	lsls	r3, r3, #31
 801b48a:	d40f      	bmi.n	801b4ac <_dtoa_r+0x6e4>
 801b48c:	4651      	mov	r1, sl
 801b48e:	4620      	mov	r0, r4
 801b490:	f000 fbcc 	bl	801bc2c <_Bfree>
 801b494:	2300      	movs	r3, #0
 801b496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b498:	702b      	strb	r3, [r5, #0]
 801b49a:	f10b 0301 	add.w	r3, fp, #1
 801b49e:	6013      	str	r3, [r2, #0]
 801b4a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	f43f ace2 	beq.w	801ae6c <_dtoa_r+0xa4>
 801b4a8:	601d      	str	r5, [r3, #0]
 801b4aa:	e4df      	b.n	801ae6c <_dtoa_r+0xa4>
 801b4ac:	465f      	mov	r7, fp
 801b4ae:	462b      	mov	r3, r5
 801b4b0:	461d      	mov	r5, r3
 801b4b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b4b6:	2a39      	cmp	r2, #57	; 0x39
 801b4b8:	d106      	bne.n	801b4c8 <_dtoa_r+0x700>
 801b4ba:	9a00      	ldr	r2, [sp, #0]
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d1f7      	bne.n	801b4b0 <_dtoa_r+0x6e8>
 801b4c0:	9900      	ldr	r1, [sp, #0]
 801b4c2:	2230      	movs	r2, #48	; 0x30
 801b4c4:	3701      	adds	r7, #1
 801b4c6:	700a      	strb	r2, [r1, #0]
 801b4c8:	781a      	ldrb	r2, [r3, #0]
 801b4ca:	3201      	adds	r2, #1
 801b4cc:	701a      	strb	r2, [r3, #0]
 801b4ce:	e790      	b.n	801b3f2 <_dtoa_r+0x62a>
 801b4d0:	4ba3      	ldr	r3, [pc, #652]	; (801b760 <_dtoa_r+0x998>)
 801b4d2:	2200      	movs	r2, #0
 801b4d4:	f7e5 f890 	bl	80005f8 <__aeabi_dmul>
 801b4d8:	2200      	movs	r2, #0
 801b4da:	2300      	movs	r3, #0
 801b4dc:	4606      	mov	r6, r0
 801b4de:	460f      	mov	r7, r1
 801b4e0:	f7e5 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 801b4e4:	2800      	cmp	r0, #0
 801b4e6:	d09e      	beq.n	801b426 <_dtoa_r+0x65e>
 801b4e8:	e7d0      	b.n	801b48c <_dtoa_r+0x6c4>
 801b4ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4ec:	2a00      	cmp	r2, #0
 801b4ee:	f000 80ca 	beq.w	801b686 <_dtoa_r+0x8be>
 801b4f2:	9a07      	ldr	r2, [sp, #28]
 801b4f4:	2a01      	cmp	r2, #1
 801b4f6:	f300 80ad 	bgt.w	801b654 <_dtoa_r+0x88c>
 801b4fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b4fc:	2a00      	cmp	r2, #0
 801b4fe:	f000 80a5 	beq.w	801b64c <_dtoa_r+0x884>
 801b502:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b506:	9e08      	ldr	r6, [sp, #32]
 801b508:	9d05      	ldr	r5, [sp, #20]
 801b50a:	9a05      	ldr	r2, [sp, #20]
 801b50c:	441a      	add	r2, r3
 801b50e:	9205      	str	r2, [sp, #20]
 801b510:	9a06      	ldr	r2, [sp, #24]
 801b512:	2101      	movs	r1, #1
 801b514:	441a      	add	r2, r3
 801b516:	4620      	mov	r0, r4
 801b518:	9206      	str	r2, [sp, #24]
 801b51a:	f000 fc3d 	bl	801bd98 <__i2b>
 801b51e:	4607      	mov	r7, r0
 801b520:	b165      	cbz	r5, 801b53c <_dtoa_r+0x774>
 801b522:	9b06      	ldr	r3, [sp, #24]
 801b524:	2b00      	cmp	r3, #0
 801b526:	dd09      	ble.n	801b53c <_dtoa_r+0x774>
 801b528:	42ab      	cmp	r3, r5
 801b52a:	9a05      	ldr	r2, [sp, #20]
 801b52c:	bfa8      	it	ge
 801b52e:	462b      	movge	r3, r5
 801b530:	1ad2      	subs	r2, r2, r3
 801b532:	9205      	str	r2, [sp, #20]
 801b534:	9a06      	ldr	r2, [sp, #24]
 801b536:	1aed      	subs	r5, r5, r3
 801b538:	1ad3      	subs	r3, r2, r3
 801b53a:	9306      	str	r3, [sp, #24]
 801b53c:	9b08      	ldr	r3, [sp, #32]
 801b53e:	b1f3      	cbz	r3, 801b57e <_dtoa_r+0x7b6>
 801b540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b542:	2b00      	cmp	r3, #0
 801b544:	f000 80a3 	beq.w	801b68e <_dtoa_r+0x8c6>
 801b548:	2e00      	cmp	r6, #0
 801b54a:	dd10      	ble.n	801b56e <_dtoa_r+0x7a6>
 801b54c:	4639      	mov	r1, r7
 801b54e:	4632      	mov	r2, r6
 801b550:	4620      	mov	r0, r4
 801b552:	f000 fce1 	bl	801bf18 <__pow5mult>
 801b556:	4652      	mov	r2, sl
 801b558:	4601      	mov	r1, r0
 801b55a:	4607      	mov	r7, r0
 801b55c:	4620      	mov	r0, r4
 801b55e:	f000 fc31 	bl	801bdc4 <__multiply>
 801b562:	4651      	mov	r1, sl
 801b564:	4680      	mov	r8, r0
 801b566:	4620      	mov	r0, r4
 801b568:	f000 fb60 	bl	801bc2c <_Bfree>
 801b56c:	46c2      	mov	sl, r8
 801b56e:	9b08      	ldr	r3, [sp, #32]
 801b570:	1b9a      	subs	r2, r3, r6
 801b572:	d004      	beq.n	801b57e <_dtoa_r+0x7b6>
 801b574:	4651      	mov	r1, sl
 801b576:	4620      	mov	r0, r4
 801b578:	f000 fcce 	bl	801bf18 <__pow5mult>
 801b57c:	4682      	mov	sl, r0
 801b57e:	2101      	movs	r1, #1
 801b580:	4620      	mov	r0, r4
 801b582:	f000 fc09 	bl	801bd98 <__i2b>
 801b586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b588:	2b00      	cmp	r3, #0
 801b58a:	4606      	mov	r6, r0
 801b58c:	f340 8081 	ble.w	801b692 <_dtoa_r+0x8ca>
 801b590:	461a      	mov	r2, r3
 801b592:	4601      	mov	r1, r0
 801b594:	4620      	mov	r0, r4
 801b596:	f000 fcbf 	bl	801bf18 <__pow5mult>
 801b59a:	9b07      	ldr	r3, [sp, #28]
 801b59c:	2b01      	cmp	r3, #1
 801b59e:	4606      	mov	r6, r0
 801b5a0:	dd7a      	ble.n	801b698 <_dtoa_r+0x8d0>
 801b5a2:	f04f 0800 	mov.w	r8, #0
 801b5a6:	6933      	ldr	r3, [r6, #16]
 801b5a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b5ac:	6918      	ldr	r0, [r3, #16]
 801b5ae:	f000 fba5 	bl	801bcfc <__hi0bits>
 801b5b2:	f1c0 0020 	rsb	r0, r0, #32
 801b5b6:	9b06      	ldr	r3, [sp, #24]
 801b5b8:	4418      	add	r0, r3
 801b5ba:	f010 001f 	ands.w	r0, r0, #31
 801b5be:	f000 8094 	beq.w	801b6ea <_dtoa_r+0x922>
 801b5c2:	f1c0 0320 	rsb	r3, r0, #32
 801b5c6:	2b04      	cmp	r3, #4
 801b5c8:	f340 8085 	ble.w	801b6d6 <_dtoa_r+0x90e>
 801b5cc:	9b05      	ldr	r3, [sp, #20]
 801b5ce:	f1c0 001c 	rsb	r0, r0, #28
 801b5d2:	4403      	add	r3, r0
 801b5d4:	9305      	str	r3, [sp, #20]
 801b5d6:	9b06      	ldr	r3, [sp, #24]
 801b5d8:	4403      	add	r3, r0
 801b5da:	4405      	add	r5, r0
 801b5dc:	9306      	str	r3, [sp, #24]
 801b5de:	9b05      	ldr	r3, [sp, #20]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	dd05      	ble.n	801b5f0 <_dtoa_r+0x828>
 801b5e4:	4651      	mov	r1, sl
 801b5e6:	461a      	mov	r2, r3
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	f000 fcef 	bl	801bfcc <__lshift>
 801b5ee:	4682      	mov	sl, r0
 801b5f0:	9b06      	ldr	r3, [sp, #24]
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	dd05      	ble.n	801b602 <_dtoa_r+0x83a>
 801b5f6:	4631      	mov	r1, r6
 801b5f8:	461a      	mov	r2, r3
 801b5fa:	4620      	mov	r0, r4
 801b5fc:	f000 fce6 	bl	801bfcc <__lshift>
 801b600:	4606      	mov	r6, r0
 801b602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b604:	2b00      	cmp	r3, #0
 801b606:	d072      	beq.n	801b6ee <_dtoa_r+0x926>
 801b608:	4631      	mov	r1, r6
 801b60a:	4650      	mov	r0, sl
 801b60c:	f000 fd4a 	bl	801c0a4 <__mcmp>
 801b610:	2800      	cmp	r0, #0
 801b612:	da6c      	bge.n	801b6ee <_dtoa_r+0x926>
 801b614:	2300      	movs	r3, #0
 801b616:	4651      	mov	r1, sl
 801b618:	220a      	movs	r2, #10
 801b61a:	4620      	mov	r0, r4
 801b61c:	f000 fb28 	bl	801bc70 <__multadd>
 801b620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b622:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b626:	4682      	mov	sl, r0
 801b628:	2b00      	cmp	r3, #0
 801b62a:	f000 81b0 	beq.w	801b98e <_dtoa_r+0xbc6>
 801b62e:	2300      	movs	r3, #0
 801b630:	4639      	mov	r1, r7
 801b632:	220a      	movs	r2, #10
 801b634:	4620      	mov	r0, r4
 801b636:	f000 fb1b 	bl	801bc70 <__multadd>
 801b63a:	9b01      	ldr	r3, [sp, #4]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	4607      	mov	r7, r0
 801b640:	f300 8096 	bgt.w	801b770 <_dtoa_r+0x9a8>
 801b644:	9b07      	ldr	r3, [sp, #28]
 801b646:	2b02      	cmp	r3, #2
 801b648:	dc59      	bgt.n	801b6fe <_dtoa_r+0x936>
 801b64a:	e091      	b.n	801b770 <_dtoa_r+0x9a8>
 801b64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b64e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b652:	e758      	b.n	801b506 <_dtoa_r+0x73e>
 801b654:	9b04      	ldr	r3, [sp, #16]
 801b656:	1e5e      	subs	r6, r3, #1
 801b658:	9b08      	ldr	r3, [sp, #32]
 801b65a:	42b3      	cmp	r3, r6
 801b65c:	bfbf      	itttt	lt
 801b65e:	9b08      	ldrlt	r3, [sp, #32]
 801b660:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801b662:	9608      	strlt	r6, [sp, #32]
 801b664:	1af3      	sublt	r3, r6, r3
 801b666:	bfb4      	ite	lt
 801b668:	18d2      	addlt	r2, r2, r3
 801b66a:	1b9e      	subge	r6, r3, r6
 801b66c:	9b04      	ldr	r3, [sp, #16]
 801b66e:	bfbc      	itt	lt
 801b670:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801b672:	2600      	movlt	r6, #0
 801b674:	2b00      	cmp	r3, #0
 801b676:	bfb7      	itett	lt
 801b678:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801b67c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801b680:	1a9d      	sublt	r5, r3, r2
 801b682:	2300      	movlt	r3, #0
 801b684:	e741      	b.n	801b50a <_dtoa_r+0x742>
 801b686:	9e08      	ldr	r6, [sp, #32]
 801b688:	9d05      	ldr	r5, [sp, #20]
 801b68a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b68c:	e748      	b.n	801b520 <_dtoa_r+0x758>
 801b68e:	9a08      	ldr	r2, [sp, #32]
 801b690:	e770      	b.n	801b574 <_dtoa_r+0x7ac>
 801b692:	9b07      	ldr	r3, [sp, #28]
 801b694:	2b01      	cmp	r3, #1
 801b696:	dc19      	bgt.n	801b6cc <_dtoa_r+0x904>
 801b698:	9b02      	ldr	r3, [sp, #8]
 801b69a:	b9bb      	cbnz	r3, 801b6cc <_dtoa_r+0x904>
 801b69c:	9b03      	ldr	r3, [sp, #12]
 801b69e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b6a2:	b99b      	cbnz	r3, 801b6cc <_dtoa_r+0x904>
 801b6a4:	9b03      	ldr	r3, [sp, #12]
 801b6a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b6aa:	0d1b      	lsrs	r3, r3, #20
 801b6ac:	051b      	lsls	r3, r3, #20
 801b6ae:	b183      	cbz	r3, 801b6d2 <_dtoa_r+0x90a>
 801b6b0:	9b05      	ldr	r3, [sp, #20]
 801b6b2:	3301      	adds	r3, #1
 801b6b4:	9305      	str	r3, [sp, #20]
 801b6b6:	9b06      	ldr	r3, [sp, #24]
 801b6b8:	3301      	adds	r3, #1
 801b6ba:	9306      	str	r3, [sp, #24]
 801b6bc:	f04f 0801 	mov.w	r8, #1
 801b6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	f47f af6f 	bne.w	801b5a6 <_dtoa_r+0x7de>
 801b6c8:	2001      	movs	r0, #1
 801b6ca:	e774      	b.n	801b5b6 <_dtoa_r+0x7ee>
 801b6cc:	f04f 0800 	mov.w	r8, #0
 801b6d0:	e7f6      	b.n	801b6c0 <_dtoa_r+0x8f8>
 801b6d2:	4698      	mov	r8, r3
 801b6d4:	e7f4      	b.n	801b6c0 <_dtoa_r+0x8f8>
 801b6d6:	d082      	beq.n	801b5de <_dtoa_r+0x816>
 801b6d8:	9a05      	ldr	r2, [sp, #20]
 801b6da:	331c      	adds	r3, #28
 801b6dc:	441a      	add	r2, r3
 801b6de:	9205      	str	r2, [sp, #20]
 801b6e0:	9a06      	ldr	r2, [sp, #24]
 801b6e2:	441a      	add	r2, r3
 801b6e4:	441d      	add	r5, r3
 801b6e6:	9206      	str	r2, [sp, #24]
 801b6e8:	e779      	b.n	801b5de <_dtoa_r+0x816>
 801b6ea:	4603      	mov	r3, r0
 801b6ec:	e7f4      	b.n	801b6d8 <_dtoa_r+0x910>
 801b6ee:	9b04      	ldr	r3, [sp, #16]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	dc37      	bgt.n	801b764 <_dtoa_r+0x99c>
 801b6f4:	9b07      	ldr	r3, [sp, #28]
 801b6f6:	2b02      	cmp	r3, #2
 801b6f8:	dd34      	ble.n	801b764 <_dtoa_r+0x99c>
 801b6fa:	9b04      	ldr	r3, [sp, #16]
 801b6fc:	9301      	str	r3, [sp, #4]
 801b6fe:	9b01      	ldr	r3, [sp, #4]
 801b700:	b963      	cbnz	r3, 801b71c <_dtoa_r+0x954>
 801b702:	4631      	mov	r1, r6
 801b704:	2205      	movs	r2, #5
 801b706:	4620      	mov	r0, r4
 801b708:	f000 fab2 	bl	801bc70 <__multadd>
 801b70c:	4601      	mov	r1, r0
 801b70e:	4606      	mov	r6, r0
 801b710:	4650      	mov	r0, sl
 801b712:	f000 fcc7 	bl	801c0a4 <__mcmp>
 801b716:	2800      	cmp	r0, #0
 801b718:	f73f adbb 	bgt.w	801b292 <_dtoa_r+0x4ca>
 801b71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b71e:	9d00      	ldr	r5, [sp, #0]
 801b720:	ea6f 0b03 	mvn.w	fp, r3
 801b724:	f04f 0800 	mov.w	r8, #0
 801b728:	4631      	mov	r1, r6
 801b72a:	4620      	mov	r0, r4
 801b72c:	f000 fa7e 	bl	801bc2c <_Bfree>
 801b730:	2f00      	cmp	r7, #0
 801b732:	f43f aeab 	beq.w	801b48c <_dtoa_r+0x6c4>
 801b736:	f1b8 0f00 	cmp.w	r8, #0
 801b73a:	d005      	beq.n	801b748 <_dtoa_r+0x980>
 801b73c:	45b8      	cmp	r8, r7
 801b73e:	d003      	beq.n	801b748 <_dtoa_r+0x980>
 801b740:	4641      	mov	r1, r8
 801b742:	4620      	mov	r0, r4
 801b744:	f000 fa72 	bl	801bc2c <_Bfree>
 801b748:	4639      	mov	r1, r7
 801b74a:	4620      	mov	r0, r4
 801b74c:	f000 fa6e 	bl	801bc2c <_Bfree>
 801b750:	e69c      	b.n	801b48c <_dtoa_r+0x6c4>
 801b752:	2600      	movs	r6, #0
 801b754:	4637      	mov	r7, r6
 801b756:	e7e1      	b.n	801b71c <_dtoa_r+0x954>
 801b758:	46bb      	mov	fp, r7
 801b75a:	4637      	mov	r7, r6
 801b75c:	e599      	b.n	801b292 <_dtoa_r+0x4ca>
 801b75e:	bf00      	nop
 801b760:	40240000 	.word	0x40240000
 801b764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b766:	2b00      	cmp	r3, #0
 801b768:	f000 80c8 	beq.w	801b8fc <_dtoa_r+0xb34>
 801b76c:	9b04      	ldr	r3, [sp, #16]
 801b76e:	9301      	str	r3, [sp, #4]
 801b770:	2d00      	cmp	r5, #0
 801b772:	dd05      	ble.n	801b780 <_dtoa_r+0x9b8>
 801b774:	4639      	mov	r1, r7
 801b776:	462a      	mov	r2, r5
 801b778:	4620      	mov	r0, r4
 801b77a:	f000 fc27 	bl	801bfcc <__lshift>
 801b77e:	4607      	mov	r7, r0
 801b780:	f1b8 0f00 	cmp.w	r8, #0
 801b784:	d05b      	beq.n	801b83e <_dtoa_r+0xa76>
 801b786:	6879      	ldr	r1, [r7, #4]
 801b788:	4620      	mov	r0, r4
 801b78a:	f000 fa0f 	bl	801bbac <_Balloc>
 801b78e:	4605      	mov	r5, r0
 801b790:	b928      	cbnz	r0, 801b79e <_dtoa_r+0x9d6>
 801b792:	4b83      	ldr	r3, [pc, #524]	; (801b9a0 <_dtoa_r+0xbd8>)
 801b794:	4602      	mov	r2, r0
 801b796:	f240 21ef 	movw	r1, #751	; 0x2ef
 801b79a:	f7ff bb2e 	b.w	801adfa <_dtoa_r+0x32>
 801b79e:	693a      	ldr	r2, [r7, #16]
 801b7a0:	3202      	adds	r2, #2
 801b7a2:	0092      	lsls	r2, r2, #2
 801b7a4:	f107 010c 	add.w	r1, r7, #12
 801b7a8:	300c      	adds	r0, #12
 801b7aa:	f7ff fa76 	bl	801ac9a <memcpy>
 801b7ae:	2201      	movs	r2, #1
 801b7b0:	4629      	mov	r1, r5
 801b7b2:	4620      	mov	r0, r4
 801b7b4:	f000 fc0a 	bl	801bfcc <__lshift>
 801b7b8:	9b00      	ldr	r3, [sp, #0]
 801b7ba:	3301      	adds	r3, #1
 801b7bc:	9304      	str	r3, [sp, #16]
 801b7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b7c2:	4413      	add	r3, r2
 801b7c4:	9308      	str	r3, [sp, #32]
 801b7c6:	9b02      	ldr	r3, [sp, #8]
 801b7c8:	f003 0301 	and.w	r3, r3, #1
 801b7cc:	46b8      	mov	r8, r7
 801b7ce:	9306      	str	r3, [sp, #24]
 801b7d0:	4607      	mov	r7, r0
 801b7d2:	9b04      	ldr	r3, [sp, #16]
 801b7d4:	4631      	mov	r1, r6
 801b7d6:	3b01      	subs	r3, #1
 801b7d8:	4650      	mov	r0, sl
 801b7da:	9301      	str	r3, [sp, #4]
 801b7dc:	f7ff fa6b 	bl	801acb6 <quorem>
 801b7e0:	4641      	mov	r1, r8
 801b7e2:	9002      	str	r0, [sp, #8]
 801b7e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801b7e8:	4650      	mov	r0, sl
 801b7ea:	f000 fc5b 	bl	801c0a4 <__mcmp>
 801b7ee:	463a      	mov	r2, r7
 801b7f0:	9005      	str	r0, [sp, #20]
 801b7f2:	4631      	mov	r1, r6
 801b7f4:	4620      	mov	r0, r4
 801b7f6:	f000 fc71 	bl	801c0dc <__mdiff>
 801b7fa:	68c2      	ldr	r2, [r0, #12]
 801b7fc:	4605      	mov	r5, r0
 801b7fe:	bb02      	cbnz	r2, 801b842 <_dtoa_r+0xa7a>
 801b800:	4601      	mov	r1, r0
 801b802:	4650      	mov	r0, sl
 801b804:	f000 fc4e 	bl	801c0a4 <__mcmp>
 801b808:	4602      	mov	r2, r0
 801b80a:	4629      	mov	r1, r5
 801b80c:	4620      	mov	r0, r4
 801b80e:	9209      	str	r2, [sp, #36]	; 0x24
 801b810:	f000 fa0c 	bl	801bc2c <_Bfree>
 801b814:	9b07      	ldr	r3, [sp, #28]
 801b816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b818:	9d04      	ldr	r5, [sp, #16]
 801b81a:	ea43 0102 	orr.w	r1, r3, r2
 801b81e:	9b06      	ldr	r3, [sp, #24]
 801b820:	4319      	orrs	r1, r3
 801b822:	d110      	bne.n	801b846 <_dtoa_r+0xa7e>
 801b824:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801b828:	d029      	beq.n	801b87e <_dtoa_r+0xab6>
 801b82a:	9b05      	ldr	r3, [sp, #20]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	dd02      	ble.n	801b836 <_dtoa_r+0xa6e>
 801b830:	9b02      	ldr	r3, [sp, #8]
 801b832:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801b836:	9b01      	ldr	r3, [sp, #4]
 801b838:	f883 9000 	strb.w	r9, [r3]
 801b83c:	e774      	b.n	801b728 <_dtoa_r+0x960>
 801b83e:	4638      	mov	r0, r7
 801b840:	e7ba      	b.n	801b7b8 <_dtoa_r+0x9f0>
 801b842:	2201      	movs	r2, #1
 801b844:	e7e1      	b.n	801b80a <_dtoa_r+0xa42>
 801b846:	9b05      	ldr	r3, [sp, #20]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	db04      	blt.n	801b856 <_dtoa_r+0xa8e>
 801b84c:	9907      	ldr	r1, [sp, #28]
 801b84e:	430b      	orrs	r3, r1
 801b850:	9906      	ldr	r1, [sp, #24]
 801b852:	430b      	orrs	r3, r1
 801b854:	d120      	bne.n	801b898 <_dtoa_r+0xad0>
 801b856:	2a00      	cmp	r2, #0
 801b858:	dded      	ble.n	801b836 <_dtoa_r+0xa6e>
 801b85a:	4651      	mov	r1, sl
 801b85c:	2201      	movs	r2, #1
 801b85e:	4620      	mov	r0, r4
 801b860:	f000 fbb4 	bl	801bfcc <__lshift>
 801b864:	4631      	mov	r1, r6
 801b866:	4682      	mov	sl, r0
 801b868:	f000 fc1c 	bl	801c0a4 <__mcmp>
 801b86c:	2800      	cmp	r0, #0
 801b86e:	dc03      	bgt.n	801b878 <_dtoa_r+0xab0>
 801b870:	d1e1      	bne.n	801b836 <_dtoa_r+0xa6e>
 801b872:	f019 0f01 	tst.w	r9, #1
 801b876:	d0de      	beq.n	801b836 <_dtoa_r+0xa6e>
 801b878:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801b87c:	d1d8      	bne.n	801b830 <_dtoa_r+0xa68>
 801b87e:	9a01      	ldr	r2, [sp, #4]
 801b880:	2339      	movs	r3, #57	; 0x39
 801b882:	7013      	strb	r3, [r2, #0]
 801b884:	462b      	mov	r3, r5
 801b886:	461d      	mov	r5, r3
 801b888:	3b01      	subs	r3, #1
 801b88a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b88e:	2a39      	cmp	r2, #57	; 0x39
 801b890:	d06c      	beq.n	801b96c <_dtoa_r+0xba4>
 801b892:	3201      	adds	r2, #1
 801b894:	701a      	strb	r2, [r3, #0]
 801b896:	e747      	b.n	801b728 <_dtoa_r+0x960>
 801b898:	2a00      	cmp	r2, #0
 801b89a:	dd07      	ble.n	801b8ac <_dtoa_r+0xae4>
 801b89c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801b8a0:	d0ed      	beq.n	801b87e <_dtoa_r+0xab6>
 801b8a2:	9a01      	ldr	r2, [sp, #4]
 801b8a4:	f109 0301 	add.w	r3, r9, #1
 801b8a8:	7013      	strb	r3, [r2, #0]
 801b8aa:	e73d      	b.n	801b728 <_dtoa_r+0x960>
 801b8ac:	9b04      	ldr	r3, [sp, #16]
 801b8ae:	9a08      	ldr	r2, [sp, #32]
 801b8b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 801b8b4:	4293      	cmp	r3, r2
 801b8b6:	d043      	beq.n	801b940 <_dtoa_r+0xb78>
 801b8b8:	4651      	mov	r1, sl
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	220a      	movs	r2, #10
 801b8be:	4620      	mov	r0, r4
 801b8c0:	f000 f9d6 	bl	801bc70 <__multadd>
 801b8c4:	45b8      	cmp	r8, r7
 801b8c6:	4682      	mov	sl, r0
 801b8c8:	f04f 0300 	mov.w	r3, #0
 801b8cc:	f04f 020a 	mov.w	r2, #10
 801b8d0:	4641      	mov	r1, r8
 801b8d2:	4620      	mov	r0, r4
 801b8d4:	d107      	bne.n	801b8e6 <_dtoa_r+0xb1e>
 801b8d6:	f000 f9cb 	bl	801bc70 <__multadd>
 801b8da:	4680      	mov	r8, r0
 801b8dc:	4607      	mov	r7, r0
 801b8de:	9b04      	ldr	r3, [sp, #16]
 801b8e0:	3301      	adds	r3, #1
 801b8e2:	9304      	str	r3, [sp, #16]
 801b8e4:	e775      	b.n	801b7d2 <_dtoa_r+0xa0a>
 801b8e6:	f000 f9c3 	bl	801bc70 <__multadd>
 801b8ea:	4639      	mov	r1, r7
 801b8ec:	4680      	mov	r8, r0
 801b8ee:	2300      	movs	r3, #0
 801b8f0:	220a      	movs	r2, #10
 801b8f2:	4620      	mov	r0, r4
 801b8f4:	f000 f9bc 	bl	801bc70 <__multadd>
 801b8f8:	4607      	mov	r7, r0
 801b8fa:	e7f0      	b.n	801b8de <_dtoa_r+0xb16>
 801b8fc:	9b04      	ldr	r3, [sp, #16]
 801b8fe:	9301      	str	r3, [sp, #4]
 801b900:	9d00      	ldr	r5, [sp, #0]
 801b902:	4631      	mov	r1, r6
 801b904:	4650      	mov	r0, sl
 801b906:	f7ff f9d6 	bl	801acb6 <quorem>
 801b90a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801b90e:	9b00      	ldr	r3, [sp, #0]
 801b910:	f805 9b01 	strb.w	r9, [r5], #1
 801b914:	1aea      	subs	r2, r5, r3
 801b916:	9b01      	ldr	r3, [sp, #4]
 801b918:	4293      	cmp	r3, r2
 801b91a:	dd07      	ble.n	801b92c <_dtoa_r+0xb64>
 801b91c:	4651      	mov	r1, sl
 801b91e:	2300      	movs	r3, #0
 801b920:	220a      	movs	r2, #10
 801b922:	4620      	mov	r0, r4
 801b924:	f000 f9a4 	bl	801bc70 <__multadd>
 801b928:	4682      	mov	sl, r0
 801b92a:	e7ea      	b.n	801b902 <_dtoa_r+0xb3a>
 801b92c:	9b01      	ldr	r3, [sp, #4]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	bfc8      	it	gt
 801b932:	461d      	movgt	r5, r3
 801b934:	9b00      	ldr	r3, [sp, #0]
 801b936:	bfd8      	it	le
 801b938:	2501      	movle	r5, #1
 801b93a:	441d      	add	r5, r3
 801b93c:	f04f 0800 	mov.w	r8, #0
 801b940:	4651      	mov	r1, sl
 801b942:	2201      	movs	r2, #1
 801b944:	4620      	mov	r0, r4
 801b946:	f000 fb41 	bl	801bfcc <__lshift>
 801b94a:	4631      	mov	r1, r6
 801b94c:	4682      	mov	sl, r0
 801b94e:	f000 fba9 	bl	801c0a4 <__mcmp>
 801b952:	2800      	cmp	r0, #0
 801b954:	dc96      	bgt.n	801b884 <_dtoa_r+0xabc>
 801b956:	d102      	bne.n	801b95e <_dtoa_r+0xb96>
 801b958:	f019 0f01 	tst.w	r9, #1
 801b95c:	d192      	bne.n	801b884 <_dtoa_r+0xabc>
 801b95e:	462b      	mov	r3, r5
 801b960:	461d      	mov	r5, r3
 801b962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b966:	2a30      	cmp	r2, #48	; 0x30
 801b968:	d0fa      	beq.n	801b960 <_dtoa_r+0xb98>
 801b96a:	e6dd      	b.n	801b728 <_dtoa_r+0x960>
 801b96c:	9a00      	ldr	r2, [sp, #0]
 801b96e:	429a      	cmp	r2, r3
 801b970:	d189      	bne.n	801b886 <_dtoa_r+0xabe>
 801b972:	f10b 0b01 	add.w	fp, fp, #1
 801b976:	2331      	movs	r3, #49	; 0x31
 801b978:	e796      	b.n	801b8a8 <_dtoa_r+0xae0>
 801b97a:	4b0a      	ldr	r3, [pc, #40]	; (801b9a4 <_dtoa_r+0xbdc>)
 801b97c:	f7ff ba99 	b.w	801aeb2 <_dtoa_r+0xea>
 801b980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b982:	2b00      	cmp	r3, #0
 801b984:	f47f aa6d 	bne.w	801ae62 <_dtoa_r+0x9a>
 801b988:	4b07      	ldr	r3, [pc, #28]	; (801b9a8 <_dtoa_r+0xbe0>)
 801b98a:	f7ff ba92 	b.w	801aeb2 <_dtoa_r+0xea>
 801b98e:	9b01      	ldr	r3, [sp, #4]
 801b990:	2b00      	cmp	r3, #0
 801b992:	dcb5      	bgt.n	801b900 <_dtoa_r+0xb38>
 801b994:	9b07      	ldr	r3, [sp, #28]
 801b996:	2b02      	cmp	r3, #2
 801b998:	f73f aeb1 	bgt.w	801b6fe <_dtoa_r+0x936>
 801b99c:	e7b0      	b.n	801b900 <_dtoa_r+0xb38>
 801b99e:	bf00      	nop
 801b9a0:	0801ecec 	.word	0x0801ecec
 801b9a4:	0801ec4c 	.word	0x0801ec4c
 801b9a8:	0801ec70 	.word	0x0801ec70

0801b9ac <_free_r>:
 801b9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b9ae:	2900      	cmp	r1, #0
 801b9b0:	d044      	beq.n	801ba3c <_free_r+0x90>
 801b9b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b9b6:	9001      	str	r0, [sp, #4]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	f1a1 0404 	sub.w	r4, r1, #4
 801b9be:	bfb8      	it	lt
 801b9c0:	18e4      	addlt	r4, r4, r3
 801b9c2:	f000 f8e7 	bl	801bb94 <__malloc_lock>
 801b9c6:	4a1e      	ldr	r2, [pc, #120]	; (801ba40 <_free_r+0x94>)
 801b9c8:	9801      	ldr	r0, [sp, #4]
 801b9ca:	6813      	ldr	r3, [r2, #0]
 801b9cc:	b933      	cbnz	r3, 801b9dc <_free_r+0x30>
 801b9ce:	6063      	str	r3, [r4, #4]
 801b9d0:	6014      	str	r4, [r2, #0]
 801b9d2:	b003      	add	sp, #12
 801b9d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b9d8:	f000 b8e2 	b.w	801bba0 <__malloc_unlock>
 801b9dc:	42a3      	cmp	r3, r4
 801b9de:	d908      	bls.n	801b9f2 <_free_r+0x46>
 801b9e0:	6825      	ldr	r5, [r4, #0]
 801b9e2:	1961      	adds	r1, r4, r5
 801b9e4:	428b      	cmp	r3, r1
 801b9e6:	bf01      	itttt	eq
 801b9e8:	6819      	ldreq	r1, [r3, #0]
 801b9ea:	685b      	ldreq	r3, [r3, #4]
 801b9ec:	1949      	addeq	r1, r1, r5
 801b9ee:	6021      	streq	r1, [r4, #0]
 801b9f0:	e7ed      	b.n	801b9ce <_free_r+0x22>
 801b9f2:	461a      	mov	r2, r3
 801b9f4:	685b      	ldr	r3, [r3, #4]
 801b9f6:	b10b      	cbz	r3, 801b9fc <_free_r+0x50>
 801b9f8:	42a3      	cmp	r3, r4
 801b9fa:	d9fa      	bls.n	801b9f2 <_free_r+0x46>
 801b9fc:	6811      	ldr	r1, [r2, #0]
 801b9fe:	1855      	adds	r5, r2, r1
 801ba00:	42a5      	cmp	r5, r4
 801ba02:	d10b      	bne.n	801ba1c <_free_r+0x70>
 801ba04:	6824      	ldr	r4, [r4, #0]
 801ba06:	4421      	add	r1, r4
 801ba08:	1854      	adds	r4, r2, r1
 801ba0a:	42a3      	cmp	r3, r4
 801ba0c:	6011      	str	r1, [r2, #0]
 801ba0e:	d1e0      	bne.n	801b9d2 <_free_r+0x26>
 801ba10:	681c      	ldr	r4, [r3, #0]
 801ba12:	685b      	ldr	r3, [r3, #4]
 801ba14:	6053      	str	r3, [r2, #4]
 801ba16:	440c      	add	r4, r1
 801ba18:	6014      	str	r4, [r2, #0]
 801ba1a:	e7da      	b.n	801b9d2 <_free_r+0x26>
 801ba1c:	d902      	bls.n	801ba24 <_free_r+0x78>
 801ba1e:	230c      	movs	r3, #12
 801ba20:	6003      	str	r3, [r0, #0]
 801ba22:	e7d6      	b.n	801b9d2 <_free_r+0x26>
 801ba24:	6825      	ldr	r5, [r4, #0]
 801ba26:	1961      	adds	r1, r4, r5
 801ba28:	428b      	cmp	r3, r1
 801ba2a:	bf04      	itt	eq
 801ba2c:	6819      	ldreq	r1, [r3, #0]
 801ba2e:	685b      	ldreq	r3, [r3, #4]
 801ba30:	6063      	str	r3, [r4, #4]
 801ba32:	bf04      	itt	eq
 801ba34:	1949      	addeq	r1, r1, r5
 801ba36:	6021      	streq	r1, [r4, #0]
 801ba38:	6054      	str	r4, [r2, #4]
 801ba3a:	e7ca      	b.n	801b9d2 <_free_r+0x26>
 801ba3c:	b003      	add	sp, #12
 801ba3e:	bd30      	pop	{r4, r5, pc}
 801ba40:	2000203c 	.word	0x2000203c

0801ba44 <malloc>:
 801ba44:	4b02      	ldr	r3, [pc, #8]	; (801ba50 <malloc+0xc>)
 801ba46:	4601      	mov	r1, r0
 801ba48:	6818      	ldr	r0, [r3, #0]
 801ba4a:	f000 b823 	b.w	801ba94 <_malloc_r>
 801ba4e:	bf00      	nop
 801ba50:	2000020c 	.word	0x2000020c

0801ba54 <sbrk_aligned>:
 801ba54:	b570      	push	{r4, r5, r6, lr}
 801ba56:	4e0e      	ldr	r6, [pc, #56]	; (801ba90 <sbrk_aligned+0x3c>)
 801ba58:	460c      	mov	r4, r1
 801ba5a:	6831      	ldr	r1, [r6, #0]
 801ba5c:	4605      	mov	r5, r0
 801ba5e:	b911      	cbnz	r1, 801ba66 <sbrk_aligned+0x12>
 801ba60:	f001 f81a 	bl	801ca98 <_sbrk_r>
 801ba64:	6030      	str	r0, [r6, #0]
 801ba66:	4621      	mov	r1, r4
 801ba68:	4628      	mov	r0, r5
 801ba6a:	f001 f815 	bl	801ca98 <_sbrk_r>
 801ba6e:	1c43      	adds	r3, r0, #1
 801ba70:	d00a      	beq.n	801ba88 <sbrk_aligned+0x34>
 801ba72:	1cc4      	adds	r4, r0, #3
 801ba74:	f024 0403 	bic.w	r4, r4, #3
 801ba78:	42a0      	cmp	r0, r4
 801ba7a:	d007      	beq.n	801ba8c <sbrk_aligned+0x38>
 801ba7c:	1a21      	subs	r1, r4, r0
 801ba7e:	4628      	mov	r0, r5
 801ba80:	f001 f80a 	bl	801ca98 <_sbrk_r>
 801ba84:	3001      	adds	r0, #1
 801ba86:	d101      	bne.n	801ba8c <sbrk_aligned+0x38>
 801ba88:	f04f 34ff 	mov.w	r4, #4294967295
 801ba8c:	4620      	mov	r0, r4
 801ba8e:	bd70      	pop	{r4, r5, r6, pc}
 801ba90:	20002040 	.word	0x20002040

0801ba94 <_malloc_r>:
 801ba94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba98:	1ccd      	adds	r5, r1, #3
 801ba9a:	f025 0503 	bic.w	r5, r5, #3
 801ba9e:	3508      	adds	r5, #8
 801baa0:	2d0c      	cmp	r5, #12
 801baa2:	bf38      	it	cc
 801baa4:	250c      	movcc	r5, #12
 801baa6:	2d00      	cmp	r5, #0
 801baa8:	4607      	mov	r7, r0
 801baaa:	db01      	blt.n	801bab0 <_malloc_r+0x1c>
 801baac:	42a9      	cmp	r1, r5
 801baae:	d905      	bls.n	801babc <_malloc_r+0x28>
 801bab0:	230c      	movs	r3, #12
 801bab2:	603b      	str	r3, [r7, #0]
 801bab4:	2600      	movs	r6, #0
 801bab6:	4630      	mov	r0, r6
 801bab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801babc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801bb90 <_malloc_r+0xfc>
 801bac0:	f000 f868 	bl	801bb94 <__malloc_lock>
 801bac4:	f8d8 3000 	ldr.w	r3, [r8]
 801bac8:	461c      	mov	r4, r3
 801baca:	bb5c      	cbnz	r4, 801bb24 <_malloc_r+0x90>
 801bacc:	4629      	mov	r1, r5
 801bace:	4638      	mov	r0, r7
 801bad0:	f7ff ffc0 	bl	801ba54 <sbrk_aligned>
 801bad4:	1c43      	adds	r3, r0, #1
 801bad6:	4604      	mov	r4, r0
 801bad8:	d155      	bne.n	801bb86 <_malloc_r+0xf2>
 801bada:	f8d8 4000 	ldr.w	r4, [r8]
 801bade:	4626      	mov	r6, r4
 801bae0:	2e00      	cmp	r6, #0
 801bae2:	d145      	bne.n	801bb70 <_malloc_r+0xdc>
 801bae4:	2c00      	cmp	r4, #0
 801bae6:	d048      	beq.n	801bb7a <_malloc_r+0xe6>
 801bae8:	6823      	ldr	r3, [r4, #0]
 801baea:	4631      	mov	r1, r6
 801baec:	4638      	mov	r0, r7
 801baee:	eb04 0903 	add.w	r9, r4, r3
 801baf2:	f000 ffd1 	bl	801ca98 <_sbrk_r>
 801baf6:	4581      	cmp	r9, r0
 801baf8:	d13f      	bne.n	801bb7a <_malloc_r+0xe6>
 801bafa:	6821      	ldr	r1, [r4, #0]
 801bafc:	1a6d      	subs	r5, r5, r1
 801bafe:	4629      	mov	r1, r5
 801bb00:	4638      	mov	r0, r7
 801bb02:	f7ff ffa7 	bl	801ba54 <sbrk_aligned>
 801bb06:	3001      	adds	r0, #1
 801bb08:	d037      	beq.n	801bb7a <_malloc_r+0xe6>
 801bb0a:	6823      	ldr	r3, [r4, #0]
 801bb0c:	442b      	add	r3, r5
 801bb0e:	6023      	str	r3, [r4, #0]
 801bb10:	f8d8 3000 	ldr.w	r3, [r8]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d038      	beq.n	801bb8a <_malloc_r+0xf6>
 801bb18:	685a      	ldr	r2, [r3, #4]
 801bb1a:	42a2      	cmp	r2, r4
 801bb1c:	d12b      	bne.n	801bb76 <_malloc_r+0xe2>
 801bb1e:	2200      	movs	r2, #0
 801bb20:	605a      	str	r2, [r3, #4]
 801bb22:	e00f      	b.n	801bb44 <_malloc_r+0xb0>
 801bb24:	6822      	ldr	r2, [r4, #0]
 801bb26:	1b52      	subs	r2, r2, r5
 801bb28:	d41f      	bmi.n	801bb6a <_malloc_r+0xd6>
 801bb2a:	2a0b      	cmp	r2, #11
 801bb2c:	d917      	bls.n	801bb5e <_malloc_r+0xca>
 801bb2e:	1961      	adds	r1, r4, r5
 801bb30:	42a3      	cmp	r3, r4
 801bb32:	6025      	str	r5, [r4, #0]
 801bb34:	bf18      	it	ne
 801bb36:	6059      	strne	r1, [r3, #4]
 801bb38:	6863      	ldr	r3, [r4, #4]
 801bb3a:	bf08      	it	eq
 801bb3c:	f8c8 1000 	streq.w	r1, [r8]
 801bb40:	5162      	str	r2, [r4, r5]
 801bb42:	604b      	str	r3, [r1, #4]
 801bb44:	4638      	mov	r0, r7
 801bb46:	f104 060b 	add.w	r6, r4, #11
 801bb4a:	f000 f829 	bl	801bba0 <__malloc_unlock>
 801bb4e:	f026 0607 	bic.w	r6, r6, #7
 801bb52:	1d23      	adds	r3, r4, #4
 801bb54:	1af2      	subs	r2, r6, r3
 801bb56:	d0ae      	beq.n	801bab6 <_malloc_r+0x22>
 801bb58:	1b9b      	subs	r3, r3, r6
 801bb5a:	50a3      	str	r3, [r4, r2]
 801bb5c:	e7ab      	b.n	801bab6 <_malloc_r+0x22>
 801bb5e:	42a3      	cmp	r3, r4
 801bb60:	6862      	ldr	r2, [r4, #4]
 801bb62:	d1dd      	bne.n	801bb20 <_malloc_r+0x8c>
 801bb64:	f8c8 2000 	str.w	r2, [r8]
 801bb68:	e7ec      	b.n	801bb44 <_malloc_r+0xb0>
 801bb6a:	4623      	mov	r3, r4
 801bb6c:	6864      	ldr	r4, [r4, #4]
 801bb6e:	e7ac      	b.n	801baca <_malloc_r+0x36>
 801bb70:	4634      	mov	r4, r6
 801bb72:	6876      	ldr	r6, [r6, #4]
 801bb74:	e7b4      	b.n	801bae0 <_malloc_r+0x4c>
 801bb76:	4613      	mov	r3, r2
 801bb78:	e7cc      	b.n	801bb14 <_malloc_r+0x80>
 801bb7a:	230c      	movs	r3, #12
 801bb7c:	603b      	str	r3, [r7, #0]
 801bb7e:	4638      	mov	r0, r7
 801bb80:	f000 f80e 	bl	801bba0 <__malloc_unlock>
 801bb84:	e797      	b.n	801bab6 <_malloc_r+0x22>
 801bb86:	6025      	str	r5, [r4, #0]
 801bb88:	e7dc      	b.n	801bb44 <_malloc_r+0xb0>
 801bb8a:	605b      	str	r3, [r3, #4]
 801bb8c:	deff      	udf	#255	; 0xff
 801bb8e:	bf00      	nop
 801bb90:	2000203c 	.word	0x2000203c

0801bb94 <__malloc_lock>:
 801bb94:	4801      	ldr	r0, [pc, #4]	; (801bb9c <__malloc_lock+0x8>)
 801bb96:	f7ff b876 	b.w	801ac86 <__retarget_lock_acquire_recursive>
 801bb9a:	bf00      	nop
 801bb9c:	20002038 	.word	0x20002038

0801bba0 <__malloc_unlock>:
 801bba0:	4801      	ldr	r0, [pc, #4]	; (801bba8 <__malloc_unlock+0x8>)
 801bba2:	f7ff b871 	b.w	801ac88 <__retarget_lock_release_recursive>
 801bba6:	bf00      	nop
 801bba8:	20002038 	.word	0x20002038

0801bbac <_Balloc>:
 801bbac:	b570      	push	{r4, r5, r6, lr}
 801bbae:	69c6      	ldr	r6, [r0, #28]
 801bbb0:	4604      	mov	r4, r0
 801bbb2:	460d      	mov	r5, r1
 801bbb4:	b976      	cbnz	r6, 801bbd4 <_Balloc+0x28>
 801bbb6:	2010      	movs	r0, #16
 801bbb8:	f7ff ff44 	bl	801ba44 <malloc>
 801bbbc:	4602      	mov	r2, r0
 801bbbe:	61e0      	str	r0, [r4, #28]
 801bbc0:	b920      	cbnz	r0, 801bbcc <_Balloc+0x20>
 801bbc2:	4b18      	ldr	r3, [pc, #96]	; (801bc24 <_Balloc+0x78>)
 801bbc4:	4818      	ldr	r0, [pc, #96]	; (801bc28 <_Balloc+0x7c>)
 801bbc6:	216b      	movs	r1, #107	; 0x6b
 801bbc8:	f000 ff76 	bl	801cab8 <__assert_func>
 801bbcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bbd0:	6006      	str	r6, [r0, #0]
 801bbd2:	60c6      	str	r6, [r0, #12]
 801bbd4:	69e6      	ldr	r6, [r4, #28]
 801bbd6:	68f3      	ldr	r3, [r6, #12]
 801bbd8:	b183      	cbz	r3, 801bbfc <_Balloc+0x50>
 801bbda:	69e3      	ldr	r3, [r4, #28]
 801bbdc:	68db      	ldr	r3, [r3, #12]
 801bbde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bbe2:	b9b8      	cbnz	r0, 801bc14 <_Balloc+0x68>
 801bbe4:	2101      	movs	r1, #1
 801bbe6:	fa01 f605 	lsl.w	r6, r1, r5
 801bbea:	1d72      	adds	r2, r6, #5
 801bbec:	0092      	lsls	r2, r2, #2
 801bbee:	4620      	mov	r0, r4
 801bbf0:	f000 ff80 	bl	801caf4 <_calloc_r>
 801bbf4:	b160      	cbz	r0, 801bc10 <_Balloc+0x64>
 801bbf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801bbfa:	e00e      	b.n	801bc1a <_Balloc+0x6e>
 801bbfc:	2221      	movs	r2, #33	; 0x21
 801bbfe:	2104      	movs	r1, #4
 801bc00:	4620      	mov	r0, r4
 801bc02:	f000 ff77 	bl	801caf4 <_calloc_r>
 801bc06:	69e3      	ldr	r3, [r4, #28]
 801bc08:	60f0      	str	r0, [r6, #12]
 801bc0a:	68db      	ldr	r3, [r3, #12]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d1e4      	bne.n	801bbda <_Balloc+0x2e>
 801bc10:	2000      	movs	r0, #0
 801bc12:	bd70      	pop	{r4, r5, r6, pc}
 801bc14:	6802      	ldr	r2, [r0, #0]
 801bc16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801bc1a:	2300      	movs	r3, #0
 801bc1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bc20:	e7f7      	b.n	801bc12 <_Balloc+0x66>
 801bc22:	bf00      	nop
 801bc24:	0801ec7d 	.word	0x0801ec7d
 801bc28:	0801ecfd 	.word	0x0801ecfd

0801bc2c <_Bfree>:
 801bc2c:	b570      	push	{r4, r5, r6, lr}
 801bc2e:	69c6      	ldr	r6, [r0, #28]
 801bc30:	4605      	mov	r5, r0
 801bc32:	460c      	mov	r4, r1
 801bc34:	b976      	cbnz	r6, 801bc54 <_Bfree+0x28>
 801bc36:	2010      	movs	r0, #16
 801bc38:	f7ff ff04 	bl	801ba44 <malloc>
 801bc3c:	4602      	mov	r2, r0
 801bc3e:	61e8      	str	r0, [r5, #28]
 801bc40:	b920      	cbnz	r0, 801bc4c <_Bfree+0x20>
 801bc42:	4b09      	ldr	r3, [pc, #36]	; (801bc68 <_Bfree+0x3c>)
 801bc44:	4809      	ldr	r0, [pc, #36]	; (801bc6c <_Bfree+0x40>)
 801bc46:	218f      	movs	r1, #143	; 0x8f
 801bc48:	f000 ff36 	bl	801cab8 <__assert_func>
 801bc4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bc50:	6006      	str	r6, [r0, #0]
 801bc52:	60c6      	str	r6, [r0, #12]
 801bc54:	b13c      	cbz	r4, 801bc66 <_Bfree+0x3a>
 801bc56:	69eb      	ldr	r3, [r5, #28]
 801bc58:	6862      	ldr	r2, [r4, #4]
 801bc5a:	68db      	ldr	r3, [r3, #12]
 801bc5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bc60:	6021      	str	r1, [r4, #0]
 801bc62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801bc66:	bd70      	pop	{r4, r5, r6, pc}
 801bc68:	0801ec7d 	.word	0x0801ec7d
 801bc6c:	0801ecfd 	.word	0x0801ecfd

0801bc70 <__multadd>:
 801bc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc74:	690d      	ldr	r5, [r1, #16]
 801bc76:	4607      	mov	r7, r0
 801bc78:	460c      	mov	r4, r1
 801bc7a:	461e      	mov	r6, r3
 801bc7c:	f101 0c14 	add.w	ip, r1, #20
 801bc80:	2000      	movs	r0, #0
 801bc82:	f8dc 3000 	ldr.w	r3, [ip]
 801bc86:	b299      	uxth	r1, r3
 801bc88:	fb02 6101 	mla	r1, r2, r1, r6
 801bc8c:	0c1e      	lsrs	r6, r3, #16
 801bc8e:	0c0b      	lsrs	r3, r1, #16
 801bc90:	fb02 3306 	mla	r3, r2, r6, r3
 801bc94:	b289      	uxth	r1, r1
 801bc96:	3001      	adds	r0, #1
 801bc98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801bc9c:	4285      	cmp	r5, r0
 801bc9e:	f84c 1b04 	str.w	r1, [ip], #4
 801bca2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801bca6:	dcec      	bgt.n	801bc82 <__multadd+0x12>
 801bca8:	b30e      	cbz	r6, 801bcee <__multadd+0x7e>
 801bcaa:	68a3      	ldr	r3, [r4, #8]
 801bcac:	42ab      	cmp	r3, r5
 801bcae:	dc19      	bgt.n	801bce4 <__multadd+0x74>
 801bcb0:	6861      	ldr	r1, [r4, #4]
 801bcb2:	4638      	mov	r0, r7
 801bcb4:	3101      	adds	r1, #1
 801bcb6:	f7ff ff79 	bl	801bbac <_Balloc>
 801bcba:	4680      	mov	r8, r0
 801bcbc:	b928      	cbnz	r0, 801bcca <__multadd+0x5a>
 801bcbe:	4602      	mov	r2, r0
 801bcc0:	4b0c      	ldr	r3, [pc, #48]	; (801bcf4 <__multadd+0x84>)
 801bcc2:	480d      	ldr	r0, [pc, #52]	; (801bcf8 <__multadd+0x88>)
 801bcc4:	21ba      	movs	r1, #186	; 0xba
 801bcc6:	f000 fef7 	bl	801cab8 <__assert_func>
 801bcca:	6922      	ldr	r2, [r4, #16]
 801bccc:	3202      	adds	r2, #2
 801bcce:	f104 010c 	add.w	r1, r4, #12
 801bcd2:	0092      	lsls	r2, r2, #2
 801bcd4:	300c      	adds	r0, #12
 801bcd6:	f7fe ffe0 	bl	801ac9a <memcpy>
 801bcda:	4621      	mov	r1, r4
 801bcdc:	4638      	mov	r0, r7
 801bcde:	f7ff ffa5 	bl	801bc2c <_Bfree>
 801bce2:	4644      	mov	r4, r8
 801bce4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bce8:	3501      	adds	r5, #1
 801bcea:	615e      	str	r6, [r3, #20]
 801bcec:	6125      	str	r5, [r4, #16]
 801bcee:	4620      	mov	r0, r4
 801bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcf4:	0801ecec 	.word	0x0801ecec
 801bcf8:	0801ecfd 	.word	0x0801ecfd

0801bcfc <__hi0bits>:
 801bcfc:	0c03      	lsrs	r3, r0, #16
 801bcfe:	041b      	lsls	r3, r3, #16
 801bd00:	b9d3      	cbnz	r3, 801bd38 <__hi0bits+0x3c>
 801bd02:	0400      	lsls	r0, r0, #16
 801bd04:	2310      	movs	r3, #16
 801bd06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801bd0a:	bf04      	itt	eq
 801bd0c:	0200      	lsleq	r0, r0, #8
 801bd0e:	3308      	addeq	r3, #8
 801bd10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801bd14:	bf04      	itt	eq
 801bd16:	0100      	lsleq	r0, r0, #4
 801bd18:	3304      	addeq	r3, #4
 801bd1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801bd1e:	bf04      	itt	eq
 801bd20:	0080      	lsleq	r0, r0, #2
 801bd22:	3302      	addeq	r3, #2
 801bd24:	2800      	cmp	r0, #0
 801bd26:	db05      	blt.n	801bd34 <__hi0bits+0x38>
 801bd28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801bd2c:	f103 0301 	add.w	r3, r3, #1
 801bd30:	bf08      	it	eq
 801bd32:	2320      	moveq	r3, #32
 801bd34:	4618      	mov	r0, r3
 801bd36:	4770      	bx	lr
 801bd38:	2300      	movs	r3, #0
 801bd3a:	e7e4      	b.n	801bd06 <__hi0bits+0xa>

0801bd3c <__lo0bits>:
 801bd3c:	6803      	ldr	r3, [r0, #0]
 801bd3e:	f013 0207 	ands.w	r2, r3, #7
 801bd42:	d00c      	beq.n	801bd5e <__lo0bits+0x22>
 801bd44:	07d9      	lsls	r1, r3, #31
 801bd46:	d422      	bmi.n	801bd8e <__lo0bits+0x52>
 801bd48:	079a      	lsls	r2, r3, #30
 801bd4a:	bf49      	itett	mi
 801bd4c:	085b      	lsrmi	r3, r3, #1
 801bd4e:	089b      	lsrpl	r3, r3, #2
 801bd50:	6003      	strmi	r3, [r0, #0]
 801bd52:	2201      	movmi	r2, #1
 801bd54:	bf5c      	itt	pl
 801bd56:	6003      	strpl	r3, [r0, #0]
 801bd58:	2202      	movpl	r2, #2
 801bd5a:	4610      	mov	r0, r2
 801bd5c:	4770      	bx	lr
 801bd5e:	b299      	uxth	r1, r3
 801bd60:	b909      	cbnz	r1, 801bd66 <__lo0bits+0x2a>
 801bd62:	0c1b      	lsrs	r3, r3, #16
 801bd64:	2210      	movs	r2, #16
 801bd66:	b2d9      	uxtb	r1, r3
 801bd68:	b909      	cbnz	r1, 801bd6e <__lo0bits+0x32>
 801bd6a:	3208      	adds	r2, #8
 801bd6c:	0a1b      	lsrs	r3, r3, #8
 801bd6e:	0719      	lsls	r1, r3, #28
 801bd70:	bf04      	itt	eq
 801bd72:	091b      	lsreq	r3, r3, #4
 801bd74:	3204      	addeq	r2, #4
 801bd76:	0799      	lsls	r1, r3, #30
 801bd78:	bf04      	itt	eq
 801bd7a:	089b      	lsreq	r3, r3, #2
 801bd7c:	3202      	addeq	r2, #2
 801bd7e:	07d9      	lsls	r1, r3, #31
 801bd80:	d403      	bmi.n	801bd8a <__lo0bits+0x4e>
 801bd82:	085b      	lsrs	r3, r3, #1
 801bd84:	f102 0201 	add.w	r2, r2, #1
 801bd88:	d003      	beq.n	801bd92 <__lo0bits+0x56>
 801bd8a:	6003      	str	r3, [r0, #0]
 801bd8c:	e7e5      	b.n	801bd5a <__lo0bits+0x1e>
 801bd8e:	2200      	movs	r2, #0
 801bd90:	e7e3      	b.n	801bd5a <__lo0bits+0x1e>
 801bd92:	2220      	movs	r2, #32
 801bd94:	e7e1      	b.n	801bd5a <__lo0bits+0x1e>
	...

0801bd98 <__i2b>:
 801bd98:	b510      	push	{r4, lr}
 801bd9a:	460c      	mov	r4, r1
 801bd9c:	2101      	movs	r1, #1
 801bd9e:	f7ff ff05 	bl	801bbac <_Balloc>
 801bda2:	4602      	mov	r2, r0
 801bda4:	b928      	cbnz	r0, 801bdb2 <__i2b+0x1a>
 801bda6:	4b05      	ldr	r3, [pc, #20]	; (801bdbc <__i2b+0x24>)
 801bda8:	4805      	ldr	r0, [pc, #20]	; (801bdc0 <__i2b+0x28>)
 801bdaa:	f240 1145 	movw	r1, #325	; 0x145
 801bdae:	f000 fe83 	bl	801cab8 <__assert_func>
 801bdb2:	2301      	movs	r3, #1
 801bdb4:	6144      	str	r4, [r0, #20]
 801bdb6:	6103      	str	r3, [r0, #16]
 801bdb8:	bd10      	pop	{r4, pc}
 801bdba:	bf00      	nop
 801bdbc:	0801ecec 	.word	0x0801ecec
 801bdc0:	0801ecfd 	.word	0x0801ecfd

0801bdc4 <__multiply>:
 801bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdc8:	4691      	mov	r9, r2
 801bdca:	690a      	ldr	r2, [r1, #16]
 801bdcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bdd0:	429a      	cmp	r2, r3
 801bdd2:	bfb8      	it	lt
 801bdd4:	460b      	movlt	r3, r1
 801bdd6:	460c      	mov	r4, r1
 801bdd8:	bfbc      	itt	lt
 801bdda:	464c      	movlt	r4, r9
 801bddc:	4699      	movlt	r9, r3
 801bdde:	6927      	ldr	r7, [r4, #16]
 801bde0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801bde4:	68a3      	ldr	r3, [r4, #8]
 801bde6:	6861      	ldr	r1, [r4, #4]
 801bde8:	eb07 060a 	add.w	r6, r7, sl
 801bdec:	42b3      	cmp	r3, r6
 801bdee:	b085      	sub	sp, #20
 801bdf0:	bfb8      	it	lt
 801bdf2:	3101      	addlt	r1, #1
 801bdf4:	f7ff feda 	bl	801bbac <_Balloc>
 801bdf8:	b930      	cbnz	r0, 801be08 <__multiply+0x44>
 801bdfa:	4602      	mov	r2, r0
 801bdfc:	4b44      	ldr	r3, [pc, #272]	; (801bf10 <__multiply+0x14c>)
 801bdfe:	4845      	ldr	r0, [pc, #276]	; (801bf14 <__multiply+0x150>)
 801be00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801be04:	f000 fe58 	bl	801cab8 <__assert_func>
 801be08:	f100 0514 	add.w	r5, r0, #20
 801be0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801be10:	462b      	mov	r3, r5
 801be12:	2200      	movs	r2, #0
 801be14:	4543      	cmp	r3, r8
 801be16:	d321      	bcc.n	801be5c <__multiply+0x98>
 801be18:	f104 0314 	add.w	r3, r4, #20
 801be1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801be20:	f109 0314 	add.w	r3, r9, #20
 801be24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801be28:	9202      	str	r2, [sp, #8]
 801be2a:	1b3a      	subs	r2, r7, r4
 801be2c:	3a15      	subs	r2, #21
 801be2e:	f022 0203 	bic.w	r2, r2, #3
 801be32:	3204      	adds	r2, #4
 801be34:	f104 0115 	add.w	r1, r4, #21
 801be38:	428f      	cmp	r7, r1
 801be3a:	bf38      	it	cc
 801be3c:	2204      	movcc	r2, #4
 801be3e:	9201      	str	r2, [sp, #4]
 801be40:	9a02      	ldr	r2, [sp, #8]
 801be42:	9303      	str	r3, [sp, #12]
 801be44:	429a      	cmp	r2, r3
 801be46:	d80c      	bhi.n	801be62 <__multiply+0x9e>
 801be48:	2e00      	cmp	r6, #0
 801be4a:	dd03      	ble.n	801be54 <__multiply+0x90>
 801be4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801be50:	2b00      	cmp	r3, #0
 801be52:	d05b      	beq.n	801bf0c <__multiply+0x148>
 801be54:	6106      	str	r6, [r0, #16]
 801be56:	b005      	add	sp, #20
 801be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be5c:	f843 2b04 	str.w	r2, [r3], #4
 801be60:	e7d8      	b.n	801be14 <__multiply+0x50>
 801be62:	f8b3 a000 	ldrh.w	sl, [r3]
 801be66:	f1ba 0f00 	cmp.w	sl, #0
 801be6a:	d024      	beq.n	801beb6 <__multiply+0xf2>
 801be6c:	f104 0e14 	add.w	lr, r4, #20
 801be70:	46a9      	mov	r9, r5
 801be72:	f04f 0c00 	mov.w	ip, #0
 801be76:	f85e 2b04 	ldr.w	r2, [lr], #4
 801be7a:	f8d9 1000 	ldr.w	r1, [r9]
 801be7e:	fa1f fb82 	uxth.w	fp, r2
 801be82:	b289      	uxth	r1, r1
 801be84:	fb0a 110b 	mla	r1, sl, fp, r1
 801be88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801be8c:	f8d9 2000 	ldr.w	r2, [r9]
 801be90:	4461      	add	r1, ip
 801be92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801be96:	fb0a c20b 	mla	r2, sl, fp, ip
 801be9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801be9e:	b289      	uxth	r1, r1
 801bea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bea4:	4577      	cmp	r7, lr
 801bea6:	f849 1b04 	str.w	r1, [r9], #4
 801beaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801beae:	d8e2      	bhi.n	801be76 <__multiply+0xb2>
 801beb0:	9a01      	ldr	r2, [sp, #4]
 801beb2:	f845 c002 	str.w	ip, [r5, r2]
 801beb6:	9a03      	ldr	r2, [sp, #12]
 801beb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801bebc:	3304      	adds	r3, #4
 801bebe:	f1b9 0f00 	cmp.w	r9, #0
 801bec2:	d021      	beq.n	801bf08 <__multiply+0x144>
 801bec4:	6829      	ldr	r1, [r5, #0]
 801bec6:	f104 0c14 	add.w	ip, r4, #20
 801beca:	46ae      	mov	lr, r5
 801becc:	f04f 0a00 	mov.w	sl, #0
 801bed0:	f8bc b000 	ldrh.w	fp, [ip]
 801bed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801bed8:	fb09 220b 	mla	r2, r9, fp, r2
 801bedc:	4452      	add	r2, sl
 801bede:	b289      	uxth	r1, r1
 801bee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bee4:	f84e 1b04 	str.w	r1, [lr], #4
 801bee8:	f85c 1b04 	ldr.w	r1, [ip], #4
 801beec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bef0:	f8be 1000 	ldrh.w	r1, [lr]
 801bef4:	fb09 110a 	mla	r1, r9, sl, r1
 801bef8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801befc:	4567      	cmp	r7, ip
 801befe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bf02:	d8e5      	bhi.n	801bed0 <__multiply+0x10c>
 801bf04:	9a01      	ldr	r2, [sp, #4]
 801bf06:	50a9      	str	r1, [r5, r2]
 801bf08:	3504      	adds	r5, #4
 801bf0a:	e799      	b.n	801be40 <__multiply+0x7c>
 801bf0c:	3e01      	subs	r6, #1
 801bf0e:	e79b      	b.n	801be48 <__multiply+0x84>
 801bf10:	0801ecec 	.word	0x0801ecec
 801bf14:	0801ecfd 	.word	0x0801ecfd

0801bf18 <__pow5mult>:
 801bf18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bf1c:	4615      	mov	r5, r2
 801bf1e:	f012 0203 	ands.w	r2, r2, #3
 801bf22:	4606      	mov	r6, r0
 801bf24:	460f      	mov	r7, r1
 801bf26:	d007      	beq.n	801bf38 <__pow5mult+0x20>
 801bf28:	4c25      	ldr	r4, [pc, #148]	; (801bfc0 <__pow5mult+0xa8>)
 801bf2a:	3a01      	subs	r2, #1
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bf32:	f7ff fe9d 	bl	801bc70 <__multadd>
 801bf36:	4607      	mov	r7, r0
 801bf38:	10ad      	asrs	r5, r5, #2
 801bf3a:	d03d      	beq.n	801bfb8 <__pow5mult+0xa0>
 801bf3c:	69f4      	ldr	r4, [r6, #28]
 801bf3e:	b97c      	cbnz	r4, 801bf60 <__pow5mult+0x48>
 801bf40:	2010      	movs	r0, #16
 801bf42:	f7ff fd7f 	bl	801ba44 <malloc>
 801bf46:	4602      	mov	r2, r0
 801bf48:	61f0      	str	r0, [r6, #28]
 801bf4a:	b928      	cbnz	r0, 801bf58 <__pow5mult+0x40>
 801bf4c:	4b1d      	ldr	r3, [pc, #116]	; (801bfc4 <__pow5mult+0xac>)
 801bf4e:	481e      	ldr	r0, [pc, #120]	; (801bfc8 <__pow5mult+0xb0>)
 801bf50:	f240 11b3 	movw	r1, #435	; 0x1b3
 801bf54:	f000 fdb0 	bl	801cab8 <__assert_func>
 801bf58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bf5c:	6004      	str	r4, [r0, #0]
 801bf5e:	60c4      	str	r4, [r0, #12]
 801bf60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801bf64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bf68:	b94c      	cbnz	r4, 801bf7e <__pow5mult+0x66>
 801bf6a:	f240 2171 	movw	r1, #625	; 0x271
 801bf6e:	4630      	mov	r0, r6
 801bf70:	f7ff ff12 	bl	801bd98 <__i2b>
 801bf74:	2300      	movs	r3, #0
 801bf76:	f8c8 0008 	str.w	r0, [r8, #8]
 801bf7a:	4604      	mov	r4, r0
 801bf7c:	6003      	str	r3, [r0, #0]
 801bf7e:	f04f 0900 	mov.w	r9, #0
 801bf82:	07eb      	lsls	r3, r5, #31
 801bf84:	d50a      	bpl.n	801bf9c <__pow5mult+0x84>
 801bf86:	4639      	mov	r1, r7
 801bf88:	4622      	mov	r2, r4
 801bf8a:	4630      	mov	r0, r6
 801bf8c:	f7ff ff1a 	bl	801bdc4 <__multiply>
 801bf90:	4639      	mov	r1, r7
 801bf92:	4680      	mov	r8, r0
 801bf94:	4630      	mov	r0, r6
 801bf96:	f7ff fe49 	bl	801bc2c <_Bfree>
 801bf9a:	4647      	mov	r7, r8
 801bf9c:	106d      	asrs	r5, r5, #1
 801bf9e:	d00b      	beq.n	801bfb8 <__pow5mult+0xa0>
 801bfa0:	6820      	ldr	r0, [r4, #0]
 801bfa2:	b938      	cbnz	r0, 801bfb4 <__pow5mult+0x9c>
 801bfa4:	4622      	mov	r2, r4
 801bfa6:	4621      	mov	r1, r4
 801bfa8:	4630      	mov	r0, r6
 801bfaa:	f7ff ff0b 	bl	801bdc4 <__multiply>
 801bfae:	6020      	str	r0, [r4, #0]
 801bfb0:	f8c0 9000 	str.w	r9, [r0]
 801bfb4:	4604      	mov	r4, r0
 801bfb6:	e7e4      	b.n	801bf82 <__pow5mult+0x6a>
 801bfb8:	4638      	mov	r0, r7
 801bfba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bfbe:	bf00      	nop
 801bfc0:	0801ee48 	.word	0x0801ee48
 801bfc4:	0801ec7d 	.word	0x0801ec7d
 801bfc8:	0801ecfd 	.word	0x0801ecfd

0801bfcc <__lshift>:
 801bfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bfd0:	460c      	mov	r4, r1
 801bfd2:	6849      	ldr	r1, [r1, #4]
 801bfd4:	6923      	ldr	r3, [r4, #16]
 801bfd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bfda:	68a3      	ldr	r3, [r4, #8]
 801bfdc:	4607      	mov	r7, r0
 801bfde:	4691      	mov	r9, r2
 801bfe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bfe4:	f108 0601 	add.w	r6, r8, #1
 801bfe8:	42b3      	cmp	r3, r6
 801bfea:	db0b      	blt.n	801c004 <__lshift+0x38>
 801bfec:	4638      	mov	r0, r7
 801bfee:	f7ff fddd 	bl	801bbac <_Balloc>
 801bff2:	4605      	mov	r5, r0
 801bff4:	b948      	cbnz	r0, 801c00a <__lshift+0x3e>
 801bff6:	4602      	mov	r2, r0
 801bff8:	4b28      	ldr	r3, [pc, #160]	; (801c09c <__lshift+0xd0>)
 801bffa:	4829      	ldr	r0, [pc, #164]	; (801c0a0 <__lshift+0xd4>)
 801bffc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801c000:	f000 fd5a 	bl	801cab8 <__assert_func>
 801c004:	3101      	adds	r1, #1
 801c006:	005b      	lsls	r3, r3, #1
 801c008:	e7ee      	b.n	801bfe8 <__lshift+0x1c>
 801c00a:	2300      	movs	r3, #0
 801c00c:	f100 0114 	add.w	r1, r0, #20
 801c010:	f100 0210 	add.w	r2, r0, #16
 801c014:	4618      	mov	r0, r3
 801c016:	4553      	cmp	r3, sl
 801c018:	db33      	blt.n	801c082 <__lshift+0xb6>
 801c01a:	6920      	ldr	r0, [r4, #16]
 801c01c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c020:	f104 0314 	add.w	r3, r4, #20
 801c024:	f019 091f 	ands.w	r9, r9, #31
 801c028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c02c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c030:	d02b      	beq.n	801c08a <__lshift+0xbe>
 801c032:	f1c9 0e20 	rsb	lr, r9, #32
 801c036:	468a      	mov	sl, r1
 801c038:	2200      	movs	r2, #0
 801c03a:	6818      	ldr	r0, [r3, #0]
 801c03c:	fa00 f009 	lsl.w	r0, r0, r9
 801c040:	4310      	orrs	r0, r2
 801c042:	f84a 0b04 	str.w	r0, [sl], #4
 801c046:	f853 2b04 	ldr.w	r2, [r3], #4
 801c04a:	459c      	cmp	ip, r3
 801c04c:	fa22 f20e 	lsr.w	r2, r2, lr
 801c050:	d8f3      	bhi.n	801c03a <__lshift+0x6e>
 801c052:	ebac 0304 	sub.w	r3, ip, r4
 801c056:	3b15      	subs	r3, #21
 801c058:	f023 0303 	bic.w	r3, r3, #3
 801c05c:	3304      	adds	r3, #4
 801c05e:	f104 0015 	add.w	r0, r4, #21
 801c062:	4584      	cmp	ip, r0
 801c064:	bf38      	it	cc
 801c066:	2304      	movcc	r3, #4
 801c068:	50ca      	str	r2, [r1, r3]
 801c06a:	b10a      	cbz	r2, 801c070 <__lshift+0xa4>
 801c06c:	f108 0602 	add.w	r6, r8, #2
 801c070:	3e01      	subs	r6, #1
 801c072:	4638      	mov	r0, r7
 801c074:	612e      	str	r6, [r5, #16]
 801c076:	4621      	mov	r1, r4
 801c078:	f7ff fdd8 	bl	801bc2c <_Bfree>
 801c07c:	4628      	mov	r0, r5
 801c07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c082:	f842 0f04 	str.w	r0, [r2, #4]!
 801c086:	3301      	adds	r3, #1
 801c088:	e7c5      	b.n	801c016 <__lshift+0x4a>
 801c08a:	3904      	subs	r1, #4
 801c08c:	f853 2b04 	ldr.w	r2, [r3], #4
 801c090:	f841 2f04 	str.w	r2, [r1, #4]!
 801c094:	459c      	cmp	ip, r3
 801c096:	d8f9      	bhi.n	801c08c <__lshift+0xc0>
 801c098:	e7ea      	b.n	801c070 <__lshift+0xa4>
 801c09a:	bf00      	nop
 801c09c:	0801ecec 	.word	0x0801ecec
 801c0a0:	0801ecfd 	.word	0x0801ecfd

0801c0a4 <__mcmp>:
 801c0a4:	b530      	push	{r4, r5, lr}
 801c0a6:	6902      	ldr	r2, [r0, #16]
 801c0a8:	690c      	ldr	r4, [r1, #16]
 801c0aa:	1b12      	subs	r2, r2, r4
 801c0ac:	d10e      	bne.n	801c0cc <__mcmp+0x28>
 801c0ae:	f100 0314 	add.w	r3, r0, #20
 801c0b2:	3114      	adds	r1, #20
 801c0b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c0b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c0bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c0c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c0c4:	42a5      	cmp	r5, r4
 801c0c6:	d003      	beq.n	801c0d0 <__mcmp+0x2c>
 801c0c8:	d305      	bcc.n	801c0d6 <__mcmp+0x32>
 801c0ca:	2201      	movs	r2, #1
 801c0cc:	4610      	mov	r0, r2
 801c0ce:	bd30      	pop	{r4, r5, pc}
 801c0d0:	4283      	cmp	r3, r0
 801c0d2:	d3f3      	bcc.n	801c0bc <__mcmp+0x18>
 801c0d4:	e7fa      	b.n	801c0cc <__mcmp+0x28>
 801c0d6:	f04f 32ff 	mov.w	r2, #4294967295
 801c0da:	e7f7      	b.n	801c0cc <__mcmp+0x28>

0801c0dc <__mdiff>:
 801c0dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0e0:	460c      	mov	r4, r1
 801c0e2:	4606      	mov	r6, r0
 801c0e4:	4611      	mov	r1, r2
 801c0e6:	4620      	mov	r0, r4
 801c0e8:	4690      	mov	r8, r2
 801c0ea:	f7ff ffdb 	bl	801c0a4 <__mcmp>
 801c0ee:	1e05      	subs	r5, r0, #0
 801c0f0:	d110      	bne.n	801c114 <__mdiff+0x38>
 801c0f2:	4629      	mov	r1, r5
 801c0f4:	4630      	mov	r0, r6
 801c0f6:	f7ff fd59 	bl	801bbac <_Balloc>
 801c0fa:	b930      	cbnz	r0, 801c10a <__mdiff+0x2e>
 801c0fc:	4b3a      	ldr	r3, [pc, #232]	; (801c1e8 <__mdiff+0x10c>)
 801c0fe:	4602      	mov	r2, r0
 801c100:	f240 2137 	movw	r1, #567	; 0x237
 801c104:	4839      	ldr	r0, [pc, #228]	; (801c1ec <__mdiff+0x110>)
 801c106:	f000 fcd7 	bl	801cab8 <__assert_func>
 801c10a:	2301      	movs	r3, #1
 801c10c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c114:	bfa4      	itt	ge
 801c116:	4643      	movge	r3, r8
 801c118:	46a0      	movge	r8, r4
 801c11a:	4630      	mov	r0, r6
 801c11c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c120:	bfa6      	itte	ge
 801c122:	461c      	movge	r4, r3
 801c124:	2500      	movge	r5, #0
 801c126:	2501      	movlt	r5, #1
 801c128:	f7ff fd40 	bl	801bbac <_Balloc>
 801c12c:	b920      	cbnz	r0, 801c138 <__mdiff+0x5c>
 801c12e:	4b2e      	ldr	r3, [pc, #184]	; (801c1e8 <__mdiff+0x10c>)
 801c130:	4602      	mov	r2, r0
 801c132:	f240 2145 	movw	r1, #581	; 0x245
 801c136:	e7e5      	b.n	801c104 <__mdiff+0x28>
 801c138:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c13c:	6926      	ldr	r6, [r4, #16]
 801c13e:	60c5      	str	r5, [r0, #12]
 801c140:	f104 0914 	add.w	r9, r4, #20
 801c144:	f108 0514 	add.w	r5, r8, #20
 801c148:	f100 0e14 	add.w	lr, r0, #20
 801c14c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801c150:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801c154:	f108 0210 	add.w	r2, r8, #16
 801c158:	46f2      	mov	sl, lr
 801c15a:	2100      	movs	r1, #0
 801c15c:	f859 3b04 	ldr.w	r3, [r9], #4
 801c160:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c164:	fa11 f88b 	uxtah	r8, r1, fp
 801c168:	b299      	uxth	r1, r3
 801c16a:	0c1b      	lsrs	r3, r3, #16
 801c16c:	eba8 0801 	sub.w	r8, r8, r1
 801c170:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c174:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c178:	fa1f f888 	uxth.w	r8, r8
 801c17c:	1419      	asrs	r1, r3, #16
 801c17e:	454e      	cmp	r6, r9
 801c180:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c184:	f84a 3b04 	str.w	r3, [sl], #4
 801c188:	d8e8      	bhi.n	801c15c <__mdiff+0x80>
 801c18a:	1b33      	subs	r3, r6, r4
 801c18c:	3b15      	subs	r3, #21
 801c18e:	f023 0303 	bic.w	r3, r3, #3
 801c192:	3304      	adds	r3, #4
 801c194:	3415      	adds	r4, #21
 801c196:	42a6      	cmp	r6, r4
 801c198:	bf38      	it	cc
 801c19a:	2304      	movcc	r3, #4
 801c19c:	441d      	add	r5, r3
 801c19e:	4473      	add	r3, lr
 801c1a0:	469e      	mov	lr, r3
 801c1a2:	462e      	mov	r6, r5
 801c1a4:	4566      	cmp	r6, ip
 801c1a6:	d30e      	bcc.n	801c1c6 <__mdiff+0xea>
 801c1a8:	f10c 0203 	add.w	r2, ip, #3
 801c1ac:	1b52      	subs	r2, r2, r5
 801c1ae:	f022 0203 	bic.w	r2, r2, #3
 801c1b2:	3d03      	subs	r5, #3
 801c1b4:	45ac      	cmp	ip, r5
 801c1b6:	bf38      	it	cc
 801c1b8:	2200      	movcc	r2, #0
 801c1ba:	4413      	add	r3, r2
 801c1bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c1c0:	b17a      	cbz	r2, 801c1e2 <__mdiff+0x106>
 801c1c2:	6107      	str	r7, [r0, #16]
 801c1c4:	e7a4      	b.n	801c110 <__mdiff+0x34>
 801c1c6:	f856 8b04 	ldr.w	r8, [r6], #4
 801c1ca:	fa11 f288 	uxtah	r2, r1, r8
 801c1ce:	1414      	asrs	r4, r2, #16
 801c1d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c1d4:	b292      	uxth	r2, r2
 801c1d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c1da:	f84e 2b04 	str.w	r2, [lr], #4
 801c1de:	1421      	asrs	r1, r4, #16
 801c1e0:	e7e0      	b.n	801c1a4 <__mdiff+0xc8>
 801c1e2:	3f01      	subs	r7, #1
 801c1e4:	e7ea      	b.n	801c1bc <__mdiff+0xe0>
 801c1e6:	bf00      	nop
 801c1e8:	0801ecec 	.word	0x0801ecec
 801c1ec:	0801ecfd 	.word	0x0801ecfd

0801c1f0 <__d2b>:
 801c1f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c1f4:	460f      	mov	r7, r1
 801c1f6:	2101      	movs	r1, #1
 801c1f8:	ec59 8b10 	vmov	r8, r9, d0
 801c1fc:	4616      	mov	r6, r2
 801c1fe:	f7ff fcd5 	bl	801bbac <_Balloc>
 801c202:	4604      	mov	r4, r0
 801c204:	b930      	cbnz	r0, 801c214 <__d2b+0x24>
 801c206:	4602      	mov	r2, r0
 801c208:	4b24      	ldr	r3, [pc, #144]	; (801c29c <__d2b+0xac>)
 801c20a:	4825      	ldr	r0, [pc, #148]	; (801c2a0 <__d2b+0xb0>)
 801c20c:	f240 310f 	movw	r1, #783	; 0x30f
 801c210:	f000 fc52 	bl	801cab8 <__assert_func>
 801c214:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c218:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c21c:	bb2d      	cbnz	r5, 801c26a <__d2b+0x7a>
 801c21e:	9301      	str	r3, [sp, #4]
 801c220:	f1b8 0300 	subs.w	r3, r8, #0
 801c224:	d026      	beq.n	801c274 <__d2b+0x84>
 801c226:	4668      	mov	r0, sp
 801c228:	9300      	str	r3, [sp, #0]
 801c22a:	f7ff fd87 	bl	801bd3c <__lo0bits>
 801c22e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c232:	b1e8      	cbz	r0, 801c270 <__d2b+0x80>
 801c234:	f1c0 0320 	rsb	r3, r0, #32
 801c238:	fa02 f303 	lsl.w	r3, r2, r3
 801c23c:	430b      	orrs	r3, r1
 801c23e:	40c2      	lsrs	r2, r0
 801c240:	6163      	str	r3, [r4, #20]
 801c242:	9201      	str	r2, [sp, #4]
 801c244:	9b01      	ldr	r3, [sp, #4]
 801c246:	61a3      	str	r3, [r4, #24]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	bf14      	ite	ne
 801c24c:	2202      	movne	r2, #2
 801c24e:	2201      	moveq	r2, #1
 801c250:	6122      	str	r2, [r4, #16]
 801c252:	b1bd      	cbz	r5, 801c284 <__d2b+0x94>
 801c254:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c258:	4405      	add	r5, r0
 801c25a:	603d      	str	r5, [r7, #0]
 801c25c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c260:	6030      	str	r0, [r6, #0]
 801c262:	4620      	mov	r0, r4
 801c264:	b003      	add	sp, #12
 801c266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c26a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c26e:	e7d6      	b.n	801c21e <__d2b+0x2e>
 801c270:	6161      	str	r1, [r4, #20]
 801c272:	e7e7      	b.n	801c244 <__d2b+0x54>
 801c274:	a801      	add	r0, sp, #4
 801c276:	f7ff fd61 	bl	801bd3c <__lo0bits>
 801c27a:	9b01      	ldr	r3, [sp, #4]
 801c27c:	6163      	str	r3, [r4, #20]
 801c27e:	3020      	adds	r0, #32
 801c280:	2201      	movs	r2, #1
 801c282:	e7e5      	b.n	801c250 <__d2b+0x60>
 801c284:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c288:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c28c:	6038      	str	r0, [r7, #0]
 801c28e:	6918      	ldr	r0, [r3, #16]
 801c290:	f7ff fd34 	bl	801bcfc <__hi0bits>
 801c294:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c298:	e7e2      	b.n	801c260 <__d2b+0x70>
 801c29a:	bf00      	nop
 801c29c:	0801ecec 	.word	0x0801ecec
 801c2a0:	0801ecfd 	.word	0x0801ecfd

0801c2a4 <__ssputs_r>:
 801c2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c2a8:	688e      	ldr	r6, [r1, #8]
 801c2aa:	461f      	mov	r7, r3
 801c2ac:	42be      	cmp	r6, r7
 801c2ae:	680b      	ldr	r3, [r1, #0]
 801c2b0:	4682      	mov	sl, r0
 801c2b2:	460c      	mov	r4, r1
 801c2b4:	4690      	mov	r8, r2
 801c2b6:	d82c      	bhi.n	801c312 <__ssputs_r+0x6e>
 801c2b8:	898a      	ldrh	r2, [r1, #12]
 801c2ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c2be:	d026      	beq.n	801c30e <__ssputs_r+0x6a>
 801c2c0:	6965      	ldr	r5, [r4, #20]
 801c2c2:	6909      	ldr	r1, [r1, #16]
 801c2c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c2c8:	eba3 0901 	sub.w	r9, r3, r1
 801c2cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c2d0:	1c7b      	adds	r3, r7, #1
 801c2d2:	444b      	add	r3, r9
 801c2d4:	106d      	asrs	r5, r5, #1
 801c2d6:	429d      	cmp	r5, r3
 801c2d8:	bf38      	it	cc
 801c2da:	461d      	movcc	r5, r3
 801c2dc:	0553      	lsls	r3, r2, #21
 801c2de:	d527      	bpl.n	801c330 <__ssputs_r+0x8c>
 801c2e0:	4629      	mov	r1, r5
 801c2e2:	f7ff fbd7 	bl	801ba94 <_malloc_r>
 801c2e6:	4606      	mov	r6, r0
 801c2e8:	b360      	cbz	r0, 801c344 <__ssputs_r+0xa0>
 801c2ea:	6921      	ldr	r1, [r4, #16]
 801c2ec:	464a      	mov	r2, r9
 801c2ee:	f7fe fcd4 	bl	801ac9a <memcpy>
 801c2f2:	89a3      	ldrh	r3, [r4, #12]
 801c2f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c2f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c2fc:	81a3      	strh	r3, [r4, #12]
 801c2fe:	6126      	str	r6, [r4, #16]
 801c300:	6165      	str	r5, [r4, #20]
 801c302:	444e      	add	r6, r9
 801c304:	eba5 0509 	sub.w	r5, r5, r9
 801c308:	6026      	str	r6, [r4, #0]
 801c30a:	60a5      	str	r5, [r4, #8]
 801c30c:	463e      	mov	r6, r7
 801c30e:	42be      	cmp	r6, r7
 801c310:	d900      	bls.n	801c314 <__ssputs_r+0x70>
 801c312:	463e      	mov	r6, r7
 801c314:	6820      	ldr	r0, [r4, #0]
 801c316:	4632      	mov	r2, r6
 801c318:	4641      	mov	r1, r8
 801c31a:	f000 fba3 	bl	801ca64 <memmove>
 801c31e:	68a3      	ldr	r3, [r4, #8]
 801c320:	1b9b      	subs	r3, r3, r6
 801c322:	60a3      	str	r3, [r4, #8]
 801c324:	6823      	ldr	r3, [r4, #0]
 801c326:	4433      	add	r3, r6
 801c328:	6023      	str	r3, [r4, #0]
 801c32a:	2000      	movs	r0, #0
 801c32c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c330:	462a      	mov	r2, r5
 801c332:	f000 fc07 	bl	801cb44 <_realloc_r>
 801c336:	4606      	mov	r6, r0
 801c338:	2800      	cmp	r0, #0
 801c33a:	d1e0      	bne.n	801c2fe <__ssputs_r+0x5a>
 801c33c:	6921      	ldr	r1, [r4, #16]
 801c33e:	4650      	mov	r0, sl
 801c340:	f7ff fb34 	bl	801b9ac <_free_r>
 801c344:	230c      	movs	r3, #12
 801c346:	f8ca 3000 	str.w	r3, [sl]
 801c34a:	89a3      	ldrh	r3, [r4, #12]
 801c34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c350:	81a3      	strh	r3, [r4, #12]
 801c352:	f04f 30ff 	mov.w	r0, #4294967295
 801c356:	e7e9      	b.n	801c32c <__ssputs_r+0x88>

0801c358 <_svfiprintf_r>:
 801c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c35c:	4698      	mov	r8, r3
 801c35e:	898b      	ldrh	r3, [r1, #12]
 801c360:	061b      	lsls	r3, r3, #24
 801c362:	b09d      	sub	sp, #116	; 0x74
 801c364:	4607      	mov	r7, r0
 801c366:	460d      	mov	r5, r1
 801c368:	4614      	mov	r4, r2
 801c36a:	d50e      	bpl.n	801c38a <_svfiprintf_r+0x32>
 801c36c:	690b      	ldr	r3, [r1, #16]
 801c36e:	b963      	cbnz	r3, 801c38a <_svfiprintf_r+0x32>
 801c370:	2140      	movs	r1, #64	; 0x40
 801c372:	f7ff fb8f 	bl	801ba94 <_malloc_r>
 801c376:	6028      	str	r0, [r5, #0]
 801c378:	6128      	str	r0, [r5, #16]
 801c37a:	b920      	cbnz	r0, 801c386 <_svfiprintf_r+0x2e>
 801c37c:	230c      	movs	r3, #12
 801c37e:	603b      	str	r3, [r7, #0]
 801c380:	f04f 30ff 	mov.w	r0, #4294967295
 801c384:	e0d0      	b.n	801c528 <_svfiprintf_r+0x1d0>
 801c386:	2340      	movs	r3, #64	; 0x40
 801c388:	616b      	str	r3, [r5, #20]
 801c38a:	2300      	movs	r3, #0
 801c38c:	9309      	str	r3, [sp, #36]	; 0x24
 801c38e:	2320      	movs	r3, #32
 801c390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c394:	f8cd 800c 	str.w	r8, [sp, #12]
 801c398:	2330      	movs	r3, #48	; 0x30
 801c39a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801c540 <_svfiprintf_r+0x1e8>
 801c39e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c3a2:	f04f 0901 	mov.w	r9, #1
 801c3a6:	4623      	mov	r3, r4
 801c3a8:	469a      	mov	sl, r3
 801c3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c3ae:	b10a      	cbz	r2, 801c3b4 <_svfiprintf_r+0x5c>
 801c3b0:	2a25      	cmp	r2, #37	; 0x25
 801c3b2:	d1f9      	bne.n	801c3a8 <_svfiprintf_r+0x50>
 801c3b4:	ebba 0b04 	subs.w	fp, sl, r4
 801c3b8:	d00b      	beq.n	801c3d2 <_svfiprintf_r+0x7a>
 801c3ba:	465b      	mov	r3, fp
 801c3bc:	4622      	mov	r2, r4
 801c3be:	4629      	mov	r1, r5
 801c3c0:	4638      	mov	r0, r7
 801c3c2:	f7ff ff6f 	bl	801c2a4 <__ssputs_r>
 801c3c6:	3001      	adds	r0, #1
 801c3c8:	f000 80a9 	beq.w	801c51e <_svfiprintf_r+0x1c6>
 801c3cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c3ce:	445a      	add	r2, fp
 801c3d0:	9209      	str	r2, [sp, #36]	; 0x24
 801c3d2:	f89a 3000 	ldrb.w	r3, [sl]
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	f000 80a1 	beq.w	801c51e <_svfiprintf_r+0x1c6>
 801c3dc:	2300      	movs	r3, #0
 801c3de:	f04f 32ff 	mov.w	r2, #4294967295
 801c3e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c3e6:	f10a 0a01 	add.w	sl, sl, #1
 801c3ea:	9304      	str	r3, [sp, #16]
 801c3ec:	9307      	str	r3, [sp, #28]
 801c3ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c3f2:	931a      	str	r3, [sp, #104]	; 0x68
 801c3f4:	4654      	mov	r4, sl
 801c3f6:	2205      	movs	r2, #5
 801c3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3fc:	4850      	ldr	r0, [pc, #320]	; (801c540 <_svfiprintf_r+0x1e8>)
 801c3fe:	f7e3 fee7 	bl	80001d0 <memchr>
 801c402:	9a04      	ldr	r2, [sp, #16]
 801c404:	b9d8      	cbnz	r0, 801c43e <_svfiprintf_r+0xe6>
 801c406:	06d0      	lsls	r0, r2, #27
 801c408:	bf44      	itt	mi
 801c40a:	2320      	movmi	r3, #32
 801c40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c410:	0711      	lsls	r1, r2, #28
 801c412:	bf44      	itt	mi
 801c414:	232b      	movmi	r3, #43	; 0x2b
 801c416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c41a:	f89a 3000 	ldrb.w	r3, [sl]
 801c41e:	2b2a      	cmp	r3, #42	; 0x2a
 801c420:	d015      	beq.n	801c44e <_svfiprintf_r+0xf6>
 801c422:	9a07      	ldr	r2, [sp, #28]
 801c424:	4654      	mov	r4, sl
 801c426:	2000      	movs	r0, #0
 801c428:	f04f 0c0a 	mov.w	ip, #10
 801c42c:	4621      	mov	r1, r4
 801c42e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c432:	3b30      	subs	r3, #48	; 0x30
 801c434:	2b09      	cmp	r3, #9
 801c436:	d94d      	bls.n	801c4d4 <_svfiprintf_r+0x17c>
 801c438:	b1b0      	cbz	r0, 801c468 <_svfiprintf_r+0x110>
 801c43a:	9207      	str	r2, [sp, #28]
 801c43c:	e014      	b.n	801c468 <_svfiprintf_r+0x110>
 801c43e:	eba0 0308 	sub.w	r3, r0, r8
 801c442:	fa09 f303 	lsl.w	r3, r9, r3
 801c446:	4313      	orrs	r3, r2
 801c448:	9304      	str	r3, [sp, #16]
 801c44a:	46a2      	mov	sl, r4
 801c44c:	e7d2      	b.n	801c3f4 <_svfiprintf_r+0x9c>
 801c44e:	9b03      	ldr	r3, [sp, #12]
 801c450:	1d19      	adds	r1, r3, #4
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	9103      	str	r1, [sp, #12]
 801c456:	2b00      	cmp	r3, #0
 801c458:	bfbb      	ittet	lt
 801c45a:	425b      	neglt	r3, r3
 801c45c:	f042 0202 	orrlt.w	r2, r2, #2
 801c460:	9307      	strge	r3, [sp, #28]
 801c462:	9307      	strlt	r3, [sp, #28]
 801c464:	bfb8      	it	lt
 801c466:	9204      	strlt	r2, [sp, #16]
 801c468:	7823      	ldrb	r3, [r4, #0]
 801c46a:	2b2e      	cmp	r3, #46	; 0x2e
 801c46c:	d10c      	bne.n	801c488 <_svfiprintf_r+0x130>
 801c46e:	7863      	ldrb	r3, [r4, #1]
 801c470:	2b2a      	cmp	r3, #42	; 0x2a
 801c472:	d134      	bne.n	801c4de <_svfiprintf_r+0x186>
 801c474:	9b03      	ldr	r3, [sp, #12]
 801c476:	1d1a      	adds	r2, r3, #4
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	9203      	str	r2, [sp, #12]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	bfb8      	it	lt
 801c480:	f04f 33ff 	movlt.w	r3, #4294967295
 801c484:	3402      	adds	r4, #2
 801c486:	9305      	str	r3, [sp, #20]
 801c488:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801c550 <_svfiprintf_r+0x1f8>
 801c48c:	7821      	ldrb	r1, [r4, #0]
 801c48e:	2203      	movs	r2, #3
 801c490:	4650      	mov	r0, sl
 801c492:	f7e3 fe9d 	bl	80001d0 <memchr>
 801c496:	b138      	cbz	r0, 801c4a8 <_svfiprintf_r+0x150>
 801c498:	9b04      	ldr	r3, [sp, #16]
 801c49a:	eba0 000a 	sub.w	r0, r0, sl
 801c49e:	2240      	movs	r2, #64	; 0x40
 801c4a0:	4082      	lsls	r2, r0
 801c4a2:	4313      	orrs	r3, r2
 801c4a4:	3401      	adds	r4, #1
 801c4a6:	9304      	str	r3, [sp, #16]
 801c4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c4ac:	4825      	ldr	r0, [pc, #148]	; (801c544 <_svfiprintf_r+0x1ec>)
 801c4ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c4b2:	2206      	movs	r2, #6
 801c4b4:	f7e3 fe8c 	bl	80001d0 <memchr>
 801c4b8:	2800      	cmp	r0, #0
 801c4ba:	d038      	beq.n	801c52e <_svfiprintf_r+0x1d6>
 801c4bc:	4b22      	ldr	r3, [pc, #136]	; (801c548 <_svfiprintf_r+0x1f0>)
 801c4be:	bb1b      	cbnz	r3, 801c508 <_svfiprintf_r+0x1b0>
 801c4c0:	9b03      	ldr	r3, [sp, #12]
 801c4c2:	3307      	adds	r3, #7
 801c4c4:	f023 0307 	bic.w	r3, r3, #7
 801c4c8:	3308      	adds	r3, #8
 801c4ca:	9303      	str	r3, [sp, #12]
 801c4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4ce:	4433      	add	r3, r6
 801c4d0:	9309      	str	r3, [sp, #36]	; 0x24
 801c4d2:	e768      	b.n	801c3a6 <_svfiprintf_r+0x4e>
 801c4d4:	fb0c 3202 	mla	r2, ip, r2, r3
 801c4d8:	460c      	mov	r4, r1
 801c4da:	2001      	movs	r0, #1
 801c4dc:	e7a6      	b.n	801c42c <_svfiprintf_r+0xd4>
 801c4de:	2300      	movs	r3, #0
 801c4e0:	3401      	adds	r4, #1
 801c4e2:	9305      	str	r3, [sp, #20]
 801c4e4:	4619      	mov	r1, r3
 801c4e6:	f04f 0c0a 	mov.w	ip, #10
 801c4ea:	4620      	mov	r0, r4
 801c4ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c4f0:	3a30      	subs	r2, #48	; 0x30
 801c4f2:	2a09      	cmp	r2, #9
 801c4f4:	d903      	bls.n	801c4fe <_svfiprintf_r+0x1a6>
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d0c6      	beq.n	801c488 <_svfiprintf_r+0x130>
 801c4fa:	9105      	str	r1, [sp, #20]
 801c4fc:	e7c4      	b.n	801c488 <_svfiprintf_r+0x130>
 801c4fe:	fb0c 2101 	mla	r1, ip, r1, r2
 801c502:	4604      	mov	r4, r0
 801c504:	2301      	movs	r3, #1
 801c506:	e7f0      	b.n	801c4ea <_svfiprintf_r+0x192>
 801c508:	ab03      	add	r3, sp, #12
 801c50a:	9300      	str	r3, [sp, #0]
 801c50c:	462a      	mov	r2, r5
 801c50e:	4b0f      	ldr	r3, [pc, #60]	; (801c54c <_svfiprintf_r+0x1f4>)
 801c510:	a904      	add	r1, sp, #16
 801c512:	4638      	mov	r0, r7
 801c514:	f7fd fe3c 	bl	801a190 <_printf_float>
 801c518:	1c42      	adds	r2, r0, #1
 801c51a:	4606      	mov	r6, r0
 801c51c:	d1d6      	bne.n	801c4cc <_svfiprintf_r+0x174>
 801c51e:	89ab      	ldrh	r3, [r5, #12]
 801c520:	065b      	lsls	r3, r3, #25
 801c522:	f53f af2d 	bmi.w	801c380 <_svfiprintf_r+0x28>
 801c526:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c528:	b01d      	add	sp, #116	; 0x74
 801c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c52e:	ab03      	add	r3, sp, #12
 801c530:	9300      	str	r3, [sp, #0]
 801c532:	462a      	mov	r2, r5
 801c534:	4b05      	ldr	r3, [pc, #20]	; (801c54c <_svfiprintf_r+0x1f4>)
 801c536:	a904      	add	r1, sp, #16
 801c538:	4638      	mov	r0, r7
 801c53a:	f7fe f8cd 	bl	801a6d8 <_printf_i>
 801c53e:	e7eb      	b.n	801c518 <_svfiprintf_r+0x1c0>
 801c540:	0801ee54 	.word	0x0801ee54
 801c544:	0801ee5e 	.word	0x0801ee5e
 801c548:	0801a191 	.word	0x0801a191
 801c54c:	0801c2a5 	.word	0x0801c2a5
 801c550:	0801ee5a 	.word	0x0801ee5a

0801c554 <__sfputc_r>:
 801c554:	6893      	ldr	r3, [r2, #8]
 801c556:	3b01      	subs	r3, #1
 801c558:	2b00      	cmp	r3, #0
 801c55a:	b410      	push	{r4}
 801c55c:	6093      	str	r3, [r2, #8]
 801c55e:	da08      	bge.n	801c572 <__sfputc_r+0x1e>
 801c560:	6994      	ldr	r4, [r2, #24]
 801c562:	42a3      	cmp	r3, r4
 801c564:	db01      	blt.n	801c56a <__sfputc_r+0x16>
 801c566:	290a      	cmp	r1, #10
 801c568:	d103      	bne.n	801c572 <__sfputc_r+0x1e>
 801c56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c56e:	f000 b9e3 	b.w	801c938 <__swbuf_r>
 801c572:	6813      	ldr	r3, [r2, #0]
 801c574:	1c58      	adds	r0, r3, #1
 801c576:	6010      	str	r0, [r2, #0]
 801c578:	7019      	strb	r1, [r3, #0]
 801c57a:	4608      	mov	r0, r1
 801c57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c580:	4770      	bx	lr

0801c582 <__sfputs_r>:
 801c582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c584:	4606      	mov	r6, r0
 801c586:	460f      	mov	r7, r1
 801c588:	4614      	mov	r4, r2
 801c58a:	18d5      	adds	r5, r2, r3
 801c58c:	42ac      	cmp	r4, r5
 801c58e:	d101      	bne.n	801c594 <__sfputs_r+0x12>
 801c590:	2000      	movs	r0, #0
 801c592:	e007      	b.n	801c5a4 <__sfputs_r+0x22>
 801c594:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c598:	463a      	mov	r2, r7
 801c59a:	4630      	mov	r0, r6
 801c59c:	f7ff ffda 	bl	801c554 <__sfputc_r>
 801c5a0:	1c43      	adds	r3, r0, #1
 801c5a2:	d1f3      	bne.n	801c58c <__sfputs_r+0xa>
 801c5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c5a8 <_vfiprintf_r>:
 801c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5ac:	460d      	mov	r5, r1
 801c5ae:	b09d      	sub	sp, #116	; 0x74
 801c5b0:	4614      	mov	r4, r2
 801c5b2:	4698      	mov	r8, r3
 801c5b4:	4606      	mov	r6, r0
 801c5b6:	b118      	cbz	r0, 801c5c0 <_vfiprintf_r+0x18>
 801c5b8:	6a03      	ldr	r3, [r0, #32]
 801c5ba:	b90b      	cbnz	r3, 801c5c0 <_vfiprintf_r+0x18>
 801c5bc:	f7fe fa3a 	bl	801aa34 <__sinit>
 801c5c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c5c2:	07d9      	lsls	r1, r3, #31
 801c5c4:	d405      	bmi.n	801c5d2 <_vfiprintf_r+0x2a>
 801c5c6:	89ab      	ldrh	r3, [r5, #12]
 801c5c8:	059a      	lsls	r2, r3, #22
 801c5ca:	d402      	bmi.n	801c5d2 <_vfiprintf_r+0x2a>
 801c5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c5ce:	f7fe fb5a 	bl	801ac86 <__retarget_lock_acquire_recursive>
 801c5d2:	89ab      	ldrh	r3, [r5, #12]
 801c5d4:	071b      	lsls	r3, r3, #28
 801c5d6:	d501      	bpl.n	801c5dc <_vfiprintf_r+0x34>
 801c5d8:	692b      	ldr	r3, [r5, #16]
 801c5da:	b99b      	cbnz	r3, 801c604 <_vfiprintf_r+0x5c>
 801c5dc:	4629      	mov	r1, r5
 801c5de:	4630      	mov	r0, r6
 801c5e0:	f000 f9e8 	bl	801c9b4 <__swsetup_r>
 801c5e4:	b170      	cbz	r0, 801c604 <_vfiprintf_r+0x5c>
 801c5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c5e8:	07dc      	lsls	r4, r3, #31
 801c5ea:	d504      	bpl.n	801c5f6 <_vfiprintf_r+0x4e>
 801c5ec:	f04f 30ff 	mov.w	r0, #4294967295
 801c5f0:	b01d      	add	sp, #116	; 0x74
 801c5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5f6:	89ab      	ldrh	r3, [r5, #12]
 801c5f8:	0598      	lsls	r0, r3, #22
 801c5fa:	d4f7      	bmi.n	801c5ec <_vfiprintf_r+0x44>
 801c5fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c5fe:	f7fe fb43 	bl	801ac88 <__retarget_lock_release_recursive>
 801c602:	e7f3      	b.n	801c5ec <_vfiprintf_r+0x44>
 801c604:	2300      	movs	r3, #0
 801c606:	9309      	str	r3, [sp, #36]	; 0x24
 801c608:	2320      	movs	r3, #32
 801c60a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c60e:	f8cd 800c 	str.w	r8, [sp, #12]
 801c612:	2330      	movs	r3, #48	; 0x30
 801c614:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c7c8 <_vfiprintf_r+0x220>
 801c618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c61c:	f04f 0901 	mov.w	r9, #1
 801c620:	4623      	mov	r3, r4
 801c622:	469a      	mov	sl, r3
 801c624:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c628:	b10a      	cbz	r2, 801c62e <_vfiprintf_r+0x86>
 801c62a:	2a25      	cmp	r2, #37	; 0x25
 801c62c:	d1f9      	bne.n	801c622 <_vfiprintf_r+0x7a>
 801c62e:	ebba 0b04 	subs.w	fp, sl, r4
 801c632:	d00b      	beq.n	801c64c <_vfiprintf_r+0xa4>
 801c634:	465b      	mov	r3, fp
 801c636:	4622      	mov	r2, r4
 801c638:	4629      	mov	r1, r5
 801c63a:	4630      	mov	r0, r6
 801c63c:	f7ff ffa1 	bl	801c582 <__sfputs_r>
 801c640:	3001      	adds	r0, #1
 801c642:	f000 80a9 	beq.w	801c798 <_vfiprintf_r+0x1f0>
 801c646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c648:	445a      	add	r2, fp
 801c64a:	9209      	str	r2, [sp, #36]	; 0x24
 801c64c:	f89a 3000 	ldrb.w	r3, [sl]
 801c650:	2b00      	cmp	r3, #0
 801c652:	f000 80a1 	beq.w	801c798 <_vfiprintf_r+0x1f0>
 801c656:	2300      	movs	r3, #0
 801c658:	f04f 32ff 	mov.w	r2, #4294967295
 801c65c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c660:	f10a 0a01 	add.w	sl, sl, #1
 801c664:	9304      	str	r3, [sp, #16]
 801c666:	9307      	str	r3, [sp, #28]
 801c668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c66c:	931a      	str	r3, [sp, #104]	; 0x68
 801c66e:	4654      	mov	r4, sl
 801c670:	2205      	movs	r2, #5
 801c672:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c676:	4854      	ldr	r0, [pc, #336]	; (801c7c8 <_vfiprintf_r+0x220>)
 801c678:	f7e3 fdaa 	bl	80001d0 <memchr>
 801c67c:	9a04      	ldr	r2, [sp, #16]
 801c67e:	b9d8      	cbnz	r0, 801c6b8 <_vfiprintf_r+0x110>
 801c680:	06d1      	lsls	r1, r2, #27
 801c682:	bf44      	itt	mi
 801c684:	2320      	movmi	r3, #32
 801c686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c68a:	0713      	lsls	r3, r2, #28
 801c68c:	bf44      	itt	mi
 801c68e:	232b      	movmi	r3, #43	; 0x2b
 801c690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c694:	f89a 3000 	ldrb.w	r3, [sl]
 801c698:	2b2a      	cmp	r3, #42	; 0x2a
 801c69a:	d015      	beq.n	801c6c8 <_vfiprintf_r+0x120>
 801c69c:	9a07      	ldr	r2, [sp, #28]
 801c69e:	4654      	mov	r4, sl
 801c6a0:	2000      	movs	r0, #0
 801c6a2:	f04f 0c0a 	mov.w	ip, #10
 801c6a6:	4621      	mov	r1, r4
 801c6a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c6ac:	3b30      	subs	r3, #48	; 0x30
 801c6ae:	2b09      	cmp	r3, #9
 801c6b0:	d94d      	bls.n	801c74e <_vfiprintf_r+0x1a6>
 801c6b2:	b1b0      	cbz	r0, 801c6e2 <_vfiprintf_r+0x13a>
 801c6b4:	9207      	str	r2, [sp, #28]
 801c6b6:	e014      	b.n	801c6e2 <_vfiprintf_r+0x13a>
 801c6b8:	eba0 0308 	sub.w	r3, r0, r8
 801c6bc:	fa09 f303 	lsl.w	r3, r9, r3
 801c6c0:	4313      	orrs	r3, r2
 801c6c2:	9304      	str	r3, [sp, #16]
 801c6c4:	46a2      	mov	sl, r4
 801c6c6:	e7d2      	b.n	801c66e <_vfiprintf_r+0xc6>
 801c6c8:	9b03      	ldr	r3, [sp, #12]
 801c6ca:	1d19      	adds	r1, r3, #4
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	9103      	str	r1, [sp, #12]
 801c6d0:	2b00      	cmp	r3, #0
 801c6d2:	bfbb      	ittet	lt
 801c6d4:	425b      	neglt	r3, r3
 801c6d6:	f042 0202 	orrlt.w	r2, r2, #2
 801c6da:	9307      	strge	r3, [sp, #28]
 801c6dc:	9307      	strlt	r3, [sp, #28]
 801c6de:	bfb8      	it	lt
 801c6e0:	9204      	strlt	r2, [sp, #16]
 801c6e2:	7823      	ldrb	r3, [r4, #0]
 801c6e4:	2b2e      	cmp	r3, #46	; 0x2e
 801c6e6:	d10c      	bne.n	801c702 <_vfiprintf_r+0x15a>
 801c6e8:	7863      	ldrb	r3, [r4, #1]
 801c6ea:	2b2a      	cmp	r3, #42	; 0x2a
 801c6ec:	d134      	bne.n	801c758 <_vfiprintf_r+0x1b0>
 801c6ee:	9b03      	ldr	r3, [sp, #12]
 801c6f0:	1d1a      	adds	r2, r3, #4
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	9203      	str	r2, [sp, #12]
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	bfb8      	it	lt
 801c6fa:	f04f 33ff 	movlt.w	r3, #4294967295
 801c6fe:	3402      	adds	r4, #2
 801c700:	9305      	str	r3, [sp, #20]
 801c702:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c7d8 <_vfiprintf_r+0x230>
 801c706:	7821      	ldrb	r1, [r4, #0]
 801c708:	2203      	movs	r2, #3
 801c70a:	4650      	mov	r0, sl
 801c70c:	f7e3 fd60 	bl	80001d0 <memchr>
 801c710:	b138      	cbz	r0, 801c722 <_vfiprintf_r+0x17a>
 801c712:	9b04      	ldr	r3, [sp, #16]
 801c714:	eba0 000a 	sub.w	r0, r0, sl
 801c718:	2240      	movs	r2, #64	; 0x40
 801c71a:	4082      	lsls	r2, r0
 801c71c:	4313      	orrs	r3, r2
 801c71e:	3401      	adds	r4, #1
 801c720:	9304      	str	r3, [sp, #16]
 801c722:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c726:	4829      	ldr	r0, [pc, #164]	; (801c7cc <_vfiprintf_r+0x224>)
 801c728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c72c:	2206      	movs	r2, #6
 801c72e:	f7e3 fd4f 	bl	80001d0 <memchr>
 801c732:	2800      	cmp	r0, #0
 801c734:	d03f      	beq.n	801c7b6 <_vfiprintf_r+0x20e>
 801c736:	4b26      	ldr	r3, [pc, #152]	; (801c7d0 <_vfiprintf_r+0x228>)
 801c738:	bb1b      	cbnz	r3, 801c782 <_vfiprintf_r+0x1da>
 801c73a:	9b03      	ldr	r3, [sp, #12]
 801c73c:	3307      	adds	r3, #7
 801c73e:	f023 0307 	bic.w	r3, r3, #7
 801c742:	3308      	adds	r3, #8
 801c744:	9303      	str	r3, [sp, #12]
 801c746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c748:	443b      	add	r3, r7
 801c74a:	9309      	str	r3, [sp, #36]	; 0x24
 801c74c:	e768      	b.n	801c620 <_vfiprintf_r+0x78>
 801c74e:	fb0c 3202 	mla	r2, ip, r2, r3
 801c752:	460c      	mov	r4, r1
 801c754:	2001      	movs	r0, #1
 801c756:	e7a6      	b.n	801c6a6 <_vfiprintf_r+0xfe>
 801c758:	2300      	movs	r3, #0
 801c75a:	3401      	adds	r4, #1
 801c75c:	9305      	str	r3, [sp, #20]
 801c75e:	4619      	mov	r1, r3
 801c760:	f04f 0c0a 	mov.w	ip, #10
 801c764:	4620      	mov	r0, r4
 801c766:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c76a:	3a30      	subs	r2, #48	; 0x30
 801c76c:	2a09      	cmp	r2, #9
 801c76e:	d903      	bls.n	801c778 <_vfiprintf_r+0x1d0>
 801c770:	2b00      	cmp	r3, #0
 801c772:	d0c6      	beq.n	801c702 <_vfiprintf_r+0x15a>
 801c774:	9105      	str	r1, [sp, #20]
 801c776:	e7c4      	b.n	801c702 <_vfiprintf_r+0x15a>
 801c778:	fb0c 2101 	mla	r1, ip, r1, r2
 801c77c:	4604      	mov	r4, r0
 801c77e:	2301      	movs	r3, #1
 801c780:	e7f0      	b.n	801c764 <_vfiprintf_r+0x1bc>
 801c782:	ab03      	add	r3, sp, #12
 801c784:	9300      	str	r3, [sp, #0]
 801c786:	462a      	mov	r2, r5
 801c788:	4b12      	ldr	r3, [pc, #72]	; (801c7d4 <_vfiprintf_r+0x22c>)
 801c78a:	a904      	add	r1, sp, #16
 801c78c:	4630      	mov	r0, r6
 801c78e:	f7fd fcff 	bl	801a190 <_printf_float>
 801c792:	4607      	mov	r7, r0
 801c794:	1c78      	adds	r0, r7, #1
 801c796:	d1d6      	bne.n	801c746 <_vfiprintf_r+0x19e>
 801c798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c79a:	07d9      	lsls	r1, r3, #31
 801c79c:	d405      	bmi.n	801c7aa <_vfiprintf_r+0x202>
 801c79e:	89ab      	ldrh	r3, [r5, #12]
 801c7a0:	059a      	lsls	r2, r3, #22
 801c7a2:	d402      	bmi.n	801c7aa <_vfiprintf_r+0x202>
 801c7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c7a6:	f7fe fa6f 	bl	801ac88 <__retarget_lock_release_recursive>
 801c7aa:	89ab      	ldrh	r3, [r5, #12]
 801c7ac:	065b      	lsls	r3, r3, #25
 801c7ae:	f53f af1d 	bmi.w	801c5ec <_vfiprintf_r+0x44>
 801c7b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c7b4:	e71c      	b.n	801c5f0 <_vfiprintf_r+0x48>
 801c7b6:	ab03      	add	r3, sp, #12
 801c7b8:	9300      	str	r3, [sp, #0]
 801c7ba:	462a      	mov	r2, r5
 801c7bc:	4b05      	ldr	r3, [pc, #20]	; (801c7d4 <_vfiprintf_r+0x22c>)
 801c7be:	a904      	add	r1, sp, #16
 801c7c0:	4630      	mov	r0, r6
 801c7c2:	f7fd ff89 	bl	801a6d8 <_printf_i>
 801c7c6:	e7e4      	b.n	801c792 <_vfiprintf_r+0x1ea>
 801c7c8:	0801ee54 	.word	0x0801ee54
 801c7cc:	0801ee5e 	.word	0x0801ee5e
 801c7d0:	0801a191 	.word	0x0801a191
 801c7d4:	0801c583 	.word	0x0801c583
 801c7d8:	0801ee5a 	.word	0x0801ee5a

0801c7dc <__sflush_r>:
 801c7dc:	898a      	ldrh	r2, [r1, #12]
 801c7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7e2:	4605      	mov	r5, r0
 801c7e4:	0710      	lsls	r0, r2, #28
 801c7e6:	460c      	mov	r4, r1
 801c7e8:	d458      	bmi.n	801c89c <__sflush_r+0xc0>
 801c7ea:	684b      	ldr	r3, [r1, #4]
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	dc05      	bgt.n	801c7fc <__sflush_r+0x20>
 801c7f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	dc02      	bgt.n	801c7fc <__sflush_r+0x20>
 801c7f6:	2000      	movs	r0, #0
 801c7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c7fe:	2e00      	cmp	r6, #0
 801c800:	d0f9      	beq.n	801c7f6 <__sflush_r+0x1a>
 801c802:	2300      	movs	r3, #0
 801c804:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c808:	682f      	ldr	r7, [r5, #0]
 801c80a:	6a21      	ldr	r1, [r4, #32]
 801c80c:	602b      	str	r3, [r5, #0]
 801c80e:	d032      	beq.n	801c876 <__sflush_r+0x9a>
 801c810:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c812:	89a3      	ldrh	r3, [r4, #12]
 801c814:	075a      	lsls	r2, r3, #29
 801c816:	d505      	bpl.n	801c824 <__sflush_r+0x48>
 801c818:	6863      	ldr	r3, [r4, #4]
 801c81a:	1ac0      	subs	r0, r0, r3
 801c81c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c81e:	b10b      	cbz	r3, 801c824 <__sflush_r+0x48>
 801c820:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c822:	1ac0      	subs	r0, r0, r3
 801c824:	2300      	movs	r3, #0
 801c826:	4602      	mov	r2, r0
 801c828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c82a:	6a21      	ldr	r1, [r4, #32]
 801c82c:	4628      	mov	r0, r5
 801c82e:	47b0      	blx	r6
 801c830:	1c43      	adds	r3, r0, #1
 801c832:	89a3      	ldrh	r3, [r4, #12]
 801c834:	d106      	bne.n	801c844 <__sflush_r+0x68>
 801c836:	6829      	ldr	r1, [r5, #0]
 801c838:	291d      	cmp	r1, #29
 801c83a:	d82b      	bhi.n	801c894 <__sflush_r+0xb8>
 801c83c:	4a29      	ldr	r2, [pc, #164]	; (801c8e4 <__sflush_r+0x108>)
 801c83e:	410a      	asrs	r2, r1
 801c840:	07d6      	lsls	r6, r2, #31
 801c842:	d427      	bmi.n	801c894 <__sflush_r+0xb8>
 801c844:	2200      	movs	r2, #0
 801c846:	6062      	str	r2, [r4, #4]
 801c848:	04d9      	lsls	r1, r3, #19
 801c84a:	6922      	ldr	r2, [r4, #16]
 801c84c:	6022      	str	r2, [r4, #0]
 801c84e:	d504      	bpl.n	801c85a <__sflush_r+0x7e>
 801c850:	1c42      	adds	r2, r0, #1
 801c852:	d101      	bne.n	801c858 <__sflush_r+0x7c>
 801c854:	682b      	ldr	r3, [r5, #0]
 801c856:	b903      	cbnz	r3, 801c85a <__sflush_r+0x7e>
 801c858:	6560      	str	r0, [r4, #84]	; 0x54
 801c85a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c85c:	602f      	str	r7, [r5, #0]
 801c85e:	2900      	cmp	r1, #0
 801c860:	d0c9      	beq.n	801c7f6 <__sflush_r+0x1a>
 801c862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c866:	4299      	cmp	r1, r3
 801c868:	d002      	beq.n	801c870 <__sflush_r+0x94>
 801c86a:	4628      	mov	r0, r5
 801c86c:	f7ff f89e 	bl	801b9ac <_free_r>
 801c870:	2000      	movs	r0, #0
 801c872:	6360      	str	r0, [r4, #52]	; 0x34
 801c874:	e7c0      	b.n	801c7f8 <__sflush_r+0x1c>
 801c876:	2301      	movs	r3, #1
 801c878:	4628      	mov	r0, r5
 801c87a:	47b0      	blx	r6
 801c87c:	1c41      	adds	r1, r0, #1
 801c87e:	d1c8      	bne.n	801c812 <__sflush_r+0x36>
 801c880:	682b      	ldr	r3, [r5, #0]
 801c882:	2b00      	cmp	r3, #0
 801c884:	d0c5      	beq.n	801c812 <__sflush_r+0x36>
 801c886:	2b1d      	cmp	r3, #29
 801c888:	d001      	beq.n	801c88e <__sflush_r+0xb2>
 801c88a:	2b16      	cmp	r3, #22
 801c88c:	d101      	bne.n	801c892 <__sflush_r+0xb6>
 801c88e:	602f      	str	r7, [r5, #0]
 801c890:	e7b1      	b.n	801c7f6 <__sflush_r+0x1a>
 801c892:	89a3      	ldrh	r3, [r4, #12]
 801c894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c898:	81a3      	strh	r3, [r4, #12]
 801c89a:	e7ad      	b.n	801c7f8 <__sflush_r+0x1c>
 801c89c:	690f      	ldr	r7, [r1, #16]
 801c89e:	2f00      	cmp	r7, #0
 801c8a0:	d0a9      	beq.n	801c7f6 <__sflush_r+0x1a>
 801c8a2:	0793      	lsls	r3, r2, #30
 801c8a4:	680e      	ldr	r6, [r1, #0]
 801c8a6:	bf08      	it	eq
 801c8a8:	694b      	ldreq	r3, [r1, #20]
 801c8aa:	600f      	str	r7, [r1, #0]
 801c8ac:	bf18      	it	ne
 801c8ae:	2300      	movne	r3, #0
 801c8b0:	eba6 0807 	sub.w	r8, r6, r7
 801c8b4:	608b      	str	r3, [r1, #8]
 801c8b6:	f1b8 0f00 	cmp.w	r8, #0
 801c8ba:	dd9c      	ble.n	801c7f6 <__sflush_r+0x1a>
 801c8bc:	6a21      	ldr	r1, [r4, #32]
 801c8be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c8c0:	4643      	mov	r3, r8
 801c8c2:	463a      	mov	r2, r7
 801c8c4:	4628      	mov	r0, r5
 801c8c6:	47b0      	blx	r6
 801c8c8:	2800      	cmp	r0, #0
 801c8ca:	dc06      	bgt.n	801c8da <__sflush_r+0xfe>
 801c8cc:	89a3      	ldrh	r3, [r4, #12]
 801c8ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c8d2:	81a3      	strh	r3, [r4, #12]
 801c8d4:	f04f 30ff 	mov.w	r0, #4294967295
 801c8d8:	e78e      	b.n	801c7f8 <__sflush_r+0x1c>
 801c8da:	4407      	add	r7, r0
 801c8dc:	eba8 0800 	sub.w	r8, r8, r0
 801c8e0:	e7e9      	b.n	801c8b6 <__sflush_r+0xda>
 801c8e2:	bf00      	nop
 801c8e4:	dfbffffe 	.word	0xdfbffffe

0801c8e8 <_fflush_r>:
 801c8e8:	b538      	push	{r3, r4, r5, lr}
 801c8ea:	690b      	ldr	r3, [r1, #16]
 801c8ec:	4605      	mov	r5, r0
 801c8ee:	460c      	mov	r4, r1
 801c8f0:	b913      	cbnz	r3, 801c8f8 <_fflush_r+0x10>
 801c8f2:	2500      	movs	r5, #0
 801c8f4:	4628      	mov	r0, r5
 801c8f6:	bd38      	pop	{r3, r4, r5, pc}
 801c8f8:	b118      	cbz	r0, 801c902 <_fflush_r+0x1a>
 801c8fa:	6a03      	ldr	r3, [r0, #32]
 801c8fc:	b90b      	cbnz	r3, 801c902 <_fflush_r+0x1a>
 801c8fe:	f7fe f899 	bl	801aa34 <__sinit>
 801c902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c906:	2b00      	cmp	r3, #0
 801c908:	d0f3      	beq.n	801c8f2 <_fflush_r+0xa>
 801c90a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c90c:	07d0      	lsls	r0, r2, #31
 801c90e:	d404      	bmi.n	801c91a <_fflush_r+0x32>
 801c910:	0599      	lsls	r1, r3, #22
 801c912:	d402      	bmi.n	801c91a <_fflush_r+0x32>
 801c914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c916:	f7fe f9b6 	bl	801ac86 <__retarget_lock_acquire_recursive>
 801c91a:	4628      	mov	r0, r5
 801c91c:	4621      	mov	r1, r4
 801c91e:	f7ff ff5d 	bl	801c7dc <__sflush_r>
 801c922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c924:	07da      	lsls	r2, r3, #31
 801c926:	4605      	mov	r5, r0
 801c928:	d4e4      	bmi.n	801c8f4 <_fflush_r+0xc>
 801c92a:	89a3      	ldrh	r3, [r4, #12]
 801c92c:	059b      	lsls	r3, r3, #22
 801c92e:	d4e1      	bmi.n	801c8f4 <_fflush_r+0xc>
 801c930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c932:	f7fe f9a9 	bl	801ac88 <__retarget_lock_release_recursive>
 801c936:	e7dd      	b.n	801c8f4 <_fflush_r+0xc>

0801c938 <__swbuf_r>:
 801c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c93a:	460e      	mov	r6, r1
 801c93c:	4614      	mov	r4, r2
 801c93e:	4605      	mov	r5, r0
 801c940:	b118      	cbz	r0, 801c94a <__swbuf_r+0x12>
 801c942:	6a03      	ldr	r3, [r0, #32]
 801c944:	b90b      	cbnz	r3, 801c94a <__swbuf_r+0x12>
 801c946:	f7fe f875 	bl	801aa34 <__sinit>
 801c94a:	69a3      	ldr	r3, [r4, #24]
 801c94c:	60a3      	str	r3, [r4, #8]
 801c94e:	89a3      	ldrh	r3, [r4, #12]
 801c950:	071a      	lsls	r2, r3, #28
 801c952:	d525      	bpl.n	801c9a0 <__swbuf_r+0x68>
 801c954:	6923      	ldr	r3, [r4, #16]
 801c956:	b31b      	cbz	r3, 801c9a0 <__swbuf_r+0x68>
 801c958:	6823      	ldr	r3, [r4, #0]
 801c95a:	6922      	ldr	r2, [r4, #16]
 801c95c:	1a98      	subs	r0, r3, r2
 801c95e:	6963      	ldr	r3, [r4, #20]
 801c960:	b2f6      	uxtb	r6, r6
 801c962:	4283      	cmp	r3, r0
 801c964:	4637      	mov	r7, r6
 801c966:	dc04      	bgt.n	801c972 <__swbuf_r+0x3a>
 801c968:	4621      	mov	r1, r4
 801c96a:	4628      	mov	r0, r5
 801c96c:	f7ff ffbc 	bl	801c8e8 <_fflush_r>
 801c970:	b9e0      	cbnz	r0, 801c9ac <__swbuf_r+0x74>
 801c972:	68a3      	ldr	r3, [r4, #8]
 801c974:	3b01      	subs	r3, #1
 801c976:	60a3      	str	r3, [r4, #8]
 801c978:	6823      	ldr	r3, [r4, #0]
 801c97a:	1c5a      	adds	r2, r3, #1
 801c97c:	6022      	str	r2, [r4, #0]
 801c97e:	701e      	strb	r6, [r3, #0]
 801c980:	6962      	ldr	r2, [r4, #20]
 801c982:	1c43      	adds	r3, r0, #1
 801c984:	429a      	cmp	r2, r3
 801c986:	d004      	beq.n	801c992 <__swbuf_r+0x5a>
 801c988:	89a3      	ldrh	r3, [r4, #12]
 801c98a:	07db      	lsls	r3, r3, #31
 801c98c:	d506      	bpl.n	801c99c <__swbuf_r+0x64>
 801c98e:	2e0a      	cmp	r6, #10
 801c990:	d104      	bne.n	801c99c <__swbuf_r+0x64>
 801c992:	4621      	mov	r1, r4
 801c994:	4628      	mov	r0, r5
 801c996:	f7ff ffa7 	bl	801c8e8 <_fflush_r>
 801c99a:	b938      	cbnz	r0, 801c9ac <__swbuf_r+0x74>
 801c99c:	4638      	mov	r0, r7
 801c99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c9a0:	4621      	mov	r1, r4
 801c9a2:	4628      	mov	r0, r5
 801c9a4:	f000 f806 	bl	801c9b4 <__swsetup_r>
 801c9a8:	2800      	cmp	r0, #0
 801c9aa:	d0d5      	beq.n	801c958 <__swbuf_r+0x20>
 801c9ac:	f04f 37ff 	mov.w	r7, #4294967295
 801c9b0:	e7f4      	b.n	801c99c <__swbuf_r+0x64>
	...

0801c9b4 <__swsetup_r>:
 801c9b4:	b538      	push	{r3, r4, r5, lr}
 801c9b6:	4b2a      	ldr	r3, [pc, #168]	; (801ca60 <__swsetup_r+0xac>)
 801c9b8:	4605      	mov	r5, r0
 801c9ba:	6818      	ldr	r0, [r3, #0]
 801c9bc:	460c      	mov	r4, r1
 801c9be:	b118      	cbz	r0, 801c9c8 <__swsetup_r+0x14>
 801c9c0:	6a03      	ldr	r3, [r0, #32]
 801c9c2:	b90b      	cbnz	r3, 801c9c8 <__swsetup_r+0x14>
 801c9c4:	f7fe f836 	bl	801aa34 <__sinit>
 801c9c8:	89a3      	ldrh	r3, [r4, #12]
 801c9ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c9ce:	0718      	lsls	r0, r3, #28
 801c9d0:	d422      	bmi.n	801ca18 <__swsetup_r+0x64>
 801c9d2:	06d9      	lsls	r1, r3, #27
 801c9d4:	d407      	bmi.n	801c9e6 <__swsetup_r+0x32>
 801c9d6:	2309      	movs	r3, #9
 801c9d8:	602b      	str	r3, [r5, #0]
 801c9da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c9de:	81a3      	strh	r3, [r4, #12]
 801c9e0:	f04f 30ff 	mov.w	r0, #4294967295
 801c9e4:	e034      	b.n	801ca50 <__swsetup_r+0x9c>
 801c9e6:	0758      	lsls	r0, r3, #29
 801c9e8:	d512      	bpl.n	801ca10 <__swsetup_r+0x5c>
 801c9ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c9ec:	b141      	cbz	r1, 801ca00 <__swsetup_r+0x4c>
 801c9ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c9f2:	4299      	cmp	r1, r3
 801c9f4:	d002      	beq.n	801c9fc <__swsetup_r+0x48>
 801c9f6:	4628      	mov	r0, r5
 801c9f8:	f7fe ffd8 	bl	801b9ac <_free_r>
 801c9fc:	2300      	movs	r3, #0
 801c9fe:	6363      	str	r3, [r4, #52]	; 0x34
 801ca00:	89a3      	ldrh	r3, [r4, #12]
 801ca02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ca06:	81a3      	strh	r3, [r4, #12]
 801ca08:	2300      	movs	r3, #0
 801ca0a:	6063      	str	r3, [r4, #4]
 801ca0c:	6923      	ldr	r3, [r4, #16]
 801ca0e:	6023      	str	r3, [r4, #0]
 801ca10:	89a3      	ldrh	r3, [r4, #12]
 801ca12:	f043 0308 	orr.w	r3, r3, #8
 801ca16:	81a3      	strh	r3, [r4, #12]
 801ca18:	6923      	ldr	r3, [r4, #16]
 801ca1a:	b94b      	cbnz	r3, 801ca30 <__swsetup_r+0x7c>
 801ca1c:	89a3      	ldrh	r3, [r4, #12]
 801ca1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ca22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ca26:	d003      	beq.n	801ca30 <__swsetup_r+0x7c>
 801ca28:	4621      	mov	r1, r4
 801ca2a:	4628      	mov	r0, r5
 801ca2c:	f000 f8fe 	bl	801cc2c <__smakebuf_r>
 801ca30:	89a0      	ldrh	r0, [r4, #12]
 801ca32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ca36:	f010 0301 	ands.w	r3, r0, #1
 801ca3a:	d00a      	beq.n	801ca52 <__swsetup_r+0x9e>
 801ca3c:	2300      	movs	r3, #0
 801ca3e:	60a3      	str	r3, [r4, #8]
 801ca40:	6963      	ldr	r3, [r4, #20]
 801ca42:	425b      	negs	r3, r3
 801ca44:	61a3      	str	r3, [r4, #24]
 801ca46:	6923      	ldr	r3, [r4, #16]
 801ca48:	b943      	cbnz	r3, 801ca5c <__swsetup_r+0xa8>
 801ca4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ca4e:	d1c4      	bne.n	801c9da <__swsetup_r+0x26>
 801ca50:	bd38      	pop	{r3, r4, r5, pc}
 801ca52:	0781      	lsls	r1, r0, #30
 801ca54:	bf58      	it	pl
 801ca56:	6963      	ldrpl	r3, [r4, #20]
 801ca58:	60a3      	str	r3, [r4, #8]
 801ca5a:	e7f4      	b.n	801ca46 <__swsetup_r+0x92>
 801ca5c:	2000      	movs	r0, #0
 801ca5e:	e7f7      	b.n	801ca50 <__swsetup_r+0x9c>
 801ca60:	2000020c 	.word	0x2000020c

0801ca64 <memmove>:
 801ca64:	4288      	cmp	r0, r1
 801ca66:	b510      	push	{r4, lr}
 801ca68:	eb01 0402 	add.w	r4, r1, r2
 801ca6c:	d902      	bls.n	801ca74 <memmove+0x10>
 801ca6e:	4284      	cmp	r4, r0
 801ca70:	4623      	mov	r3, r4
 801ca72:	d807      	bhi.n	801ca84 <memmove+0x20>
 801ca74:	1e43      	subs	r3, r0, #1
 801ca76:	42a1      	cmp	r1, r4
 801ca78:	d008      	beq.n	801ca8c <memmove+0x28>
 801ca7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ca7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ca82:	e7f8      	b.n	801ca76 <memmove+0x12>
 801ca84:	4402      	add	r2, r0
 801ca86:	4601      	mov	r1, r0
 801ca88:	428a      	cmp	r2, r1
 801ca8a:	d100      	bne.n	801ca8e <memmove+0x2a>
 801ca8c:	bd10      	pop	{r4, pc}
 801ca8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ca92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ca96:	e7f7      	b.n	801ca88 <memmove+0x24>

0801ca98 <_sbrk_r>:
 801ca98:	b538      	push	{r3, r4, r5, lr}
 801ca9a:	4d06      	ldr	r5, [pc, #24]	; (801cab4 <_sbrk_r+0x1c>)
 801ca9c:	2300      	movs	r3, #0
 801ca9e:	4604      	mov	r4, r0
 801caa0:	4608      	mov	r0, r1
 801caa2:	602b      	str	r3, [r5, #0]
 801caa4:	f7e5 f9c4 	bl	8001e30 <_sbrk>
 801caa8:	1c43      	adds	r3, r0, #1
 801caaa:	d102      	bne.n	801cab2 <_sbrk_r+0x1a>
 801caac:	682b      	ldr	r3, [r5, #0]
 801caae:	b103      	cbz	r3, 801cab2 <_sbrk_r+0x1a>
 801cab0:	6023      	str	r3, [r4, #0]
 801cab2:	bd38      	pop	{r3, r4, r5, pc}
 801cab4:	20002034 	.word	0x20002034

0801cab8 <__assert_func>:
 801cab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801caba:	4614      	mov	r4, r2
 801cabc:	461a      	mov	r2, r3
 801cabe:	4b09      	ldr	r3, [pc, #36]	; (801cae4 <__assert_func+0x2c>)
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	4605      	mov	r5, r0
 801cac4:	68d8      	ldr	r0, [r3, #12]
 801cac6:	b14c      	cbz	r4, 801cadc <__assert_func+0x24>
 801cac8:	4b07      	ldr	r3, [pc, #28]	; (801cae8 <__assert_func+0x30>)
 801caca:	9100      	str	r1, [sp, #0]
 801cacc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cad0:	4906      	ldr	r1, [pc, #24]	; (801caec <__assert_func+0x34>)
 801cad2:	462b      	mov	r3, r5
 801cad4:	f000 f872 	bl	801cbbc <fiprintf>
 801cad8:	f000 f906 	bl	801cce8 <abort>
 801cadc:	4b04      	ldr	r3, [pc, #16]	; (801caf0 <__assert_func+0x38>)
 801cade:	461c      	mov	r4, r3
 801cae0:	e7f3      	b.n	801caca <__assert_func+0x12>
 801cae2:	bf00      	nop
 801cae4:	2000020c 	.word	0x2000020c
 801cae8:	0801ee6f 	.word	0x0801ee6f
 801caec:	0801ee7c 	.word	0x0801ee7c
 801caf0:	0801eeaa 	.word	0x0801eeaa

0801caf4 <_calloc_r>:
 801caf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801caf6:	fba1 2402 	umull	r2, r4, r1, r2
 801cafa:	b94c      	cbnz	r4, 801cb10 <_calloc_r+0x1c>
 801cafc:	4611      	mov	r1, r2
 801cafe:	9201      	str	r2, [sp, #4]
 801cb00:	f7fe ffc8 	bl	801ba94 <_malloc_r>
 801cb04:	9a01      	ldr	r2, [sp, #4]
 801cb06:	4605      	mov	r5, r0
 801cb08:	b930      	cbnz	r0, 801cb18 <_calloc_r+0x24>
 801cb0a:	4628      	mov	r0, r5
 801cb0c:	b003      	add	sp, #12
 801cb0e:	bd30      	pop	{r4, r5, pc}
 801cb10:	220c      	movs	r2, #12
 801cb12:	6002      	str	r2, [r0, #0]
 801cb14:	2500      	movs	r5, #0
 801cb16:	e7f8      	b.n	801cb0a <_calloc_r+0x16>
 801cb18:	4621      	mov	r1, r4
 801cb1a:	f7fe f836 	bl	801ab8a <memset>
 801cb1e:	e7f4      	b.n	801cb0a <_calloc_r+0x16>

0801cb20 <__ascii_mbtowc>:
 801cb20:	b082      	sub	sp, #8
 801cb22:	b901      	cbnz	r1, 801cb26 <__ascii_mbtowc+0x6>
 801cb24:	a901      	add	r1, sp, #4
 801cb26:	b142      	cbz	r2, 801cb3a <__ascii_mbtowc+0x1a>
 801cb28:	b14b      	cbz	r3, 801cb3e <__ascii_mbtowc+0x1e>
 801cb2a:	7813      	ldrb	r3, [r2, #0]
 801cb2c:	600b      	str	r3, [r1, #0]
 801cb2e:	7812      	ldrb	r2, [r2, #0]
 801cb30:	1e10      	subs	r0, r2, #0
 801cb32:	bf18      	it	ne
 801cb34:	2001      	movne	r0, #1
 801cb36:	b002      	add	sp, #8
 801cb38:	4770      	bx	lr
 801cb3a:	4610      	mov	r0, r2
 801cb3c:	e7fb      	b.n	801cb36 <__ascii_mbtowc+0x16>
 801cb3e:	f06f 0001 	mvn.w	r0, #1
 801cb42:	e7f8      	b.n	801cb36 <__ascii_mbtowc+0x16>

0801cb44 <_realloc_r>:
 801cb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb48:	4680      	mov	r8, r0
 801cb4a:	4614      	mov	r4, r2
 801cb4c:	460e      	mov	r6, r1
 801cb4e:	b921      	cbnz	r1, 801cb5a <_realloc_r+0x16>
 801cb50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cb54:	4611      	mov	r1, r2
 801cb56:	f7fe bf9d 	b.w	801ba94 <_malloc_r>
 801cb5a:	b92a      	cbnz	r2, 801cb68 <_realloc_r+0x24>
 801cb5c:	f7fe ff26 	bl	801b9ac <_free_r>
 801cb60:	4625      	mov	r5, r4
 801cb62:	4628      	mov	r0, r5
 801cb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb68:	f000 f8c5 	bl	801ccf6 <_malloc_usable_size_r>
 801cb6c:	4284      	cmp	r4, r0
 801cb6e:	4607      	mov	r7, r0
 801cb70:	d802      	bhi.n	801cb78 <_realloc_r+0x34>
 801cb72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cb76:	d812      	bhi.n	801cb9e <_realloc_r+0x5a>
 801cb78:	4621      	mov	r1, r4
 801cb7a:	4640      	mov	r0, r8
 801cb7c:	f7fe ff8a 	bl	801ba94 <_malloc_r>
 801cb80:	4605      	mov	r5, r0
 801cb82:	2800      	cmp	r0, #0
 801cb84:	d0ed      	beq.n	801cb62 <_realloc_r+0x1e>
 801cb86:	42bc      	cmp	r4, r7
 801cb88:	4622      	mov	r2, r4
 801cb8a:	4631      	mov	r1, r6
 801cb8c:	bf28      	it	cs
 801cb8e:	463a      	movcs	r2, r7
 801cb90:	f7fe f883 	bl	801ac9a <memcpy>
 801cb94:	4631      	mov	r1, r6
 801cb96:	4640      	mov	r0, r8
 801cb98:	f7fe ff08 	bl	801b9ac <_free_r>
 801cb9c:	e7e1      	b.n	801cb62 <_realloc_r+0x1e>
 801cb9e:	4635      	mov	r5, r6
 801cba0:	e7df      	b.n	801cb62 <_realloc_r+0x1e>

0801cba2 <__ascii_wctomb>:
 801cba2:	b149      	cbz	r1, 801cbb8 <__ascii_wctomb+0x16>
 801cba4:	2aff      	cmp	r2, #255	; 0xff
 801cba6:	bf85      	ittet	hi
 801cba8:	238a      	movhi	r3, #138	; 0x8a
 801cbaa:	6003      	strhi	r3, [r0, #0]
 801cbac:	700a      	strbls	r2, [r1, #0]
 801cbae:	f04f 30ff 	movhi.w	r0, #4294967295
 801cbb2:	bf98      	it	ls
 801cbb4:	2001      	movls	r0, #1
 801cbb6:	4770      	bx	lr
 801cbb8:	4608      	mov	r0, r1
 801cbba:	4770      	bx	lr

0801cbbc <fiprintf>:
 801cbbc:	b40e      	push	{r1, r2, r3}
 801cbbe:	b503      	push	{r0, r1, lr}
 801cbc0:	4601      	mov	r1, r0
 801cbc2:	ab03      	add	r3, sp, #12
 801cbc4:	4805      	ldr	r0, [pc, #20]	; (801cbdc <fiprintf+0x20>)
 801cbc6:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbca:	6800      	ldr	r0, [r0, #0]
 801cbcc:	9301      	str	r3, [sp, #4]
 801cbce:	f7ff fceb 	bl	801c5a8 <_vfiprintf_r>
 801cbd2:	b002      	add	sp, #8
 801cbd4:	f85d eb04 	ldr.w	lr, [sp], #4
 801cbd8:	b003      	add	sp, #12
 801cbda:	4770      	bx	lr
 801cbdc:	2000020c 	.word	0x2000020c

0801cbe0 <__swhatbuf_r>:
 801cbe0:	b570      	push	{r4, r5, r6, lr}
 801cbe2:	460c      	mov	r4, r1
 801cbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cbe8:	2900      	cmp	r1, #0
 801cbea:	b096      	sub	sp, #88	; 0x58
 801cbec:	4615      	mov	r5, r2
 801cbee:	461e      	mov	r6, r3
 801cbf0:	da0d      	bge.n	801cc0e <__swhatbuf_r+0x2e>
 801cbf2:	89a3      	ldrh	r3, [r4, #12]
 801cbf4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801cbf8:	f04f 0100 	mov.w	r1, #0
 801cbfc:	bf0c      	ite	eq
 801cbfe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801cc02:	2340      	movne	r3, #64	; 0x40
 801cc04:	2000      	movs	r0, #0
 801cc06:	6031      	str	r1, [r6, #0]
 801cc08:	602b      	str	r3, [r5, #0]
 801cc0a:	b016      	add	sp, #88	; 0x58
 801cc0c:	bd70      	pop	{r4, r5, r6, pc}
 801cc0e:	466a      	mov	r2, sp
 801cc10:	f000 f848 	bl	801cca4 <_fstat_r>
 801cc14:	2800      	cmp	r0, #0
 801cc16:	dbec      	blt.n	801cbf2 <__swhatbuf_r+0x12>
 801cc18:	9901      	ldr	r1, [sp, #4]
 801cc1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801cc1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801cc22:	4259      	negs	r1, r3
 801cc24:	4159      	adcs	r1, r3
 801cc26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc2a:	e7eb      	b.n	801cc04 <__swhatbuf_r+0x24>

0801cc2c <__smakebuf_r>:
 801cc2c:	898b      	ldrh	r3, [r1, #12]
 801cc2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cc30:	079d      	lsls	r5, r3, #30
 801cc32:	4606      	mov	r6, r0
 801cc34:	460c      	mov	r4, r1
 801cc36:	d507      	bpl.n	801cc48 <__smakebuf_r+0x1c>
 801cc38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cc3c:	6023      	str	r3, [r4, #0]
 801cc3e:	6123      	str	r3, [r4, #16]
 801cc40:	2301      	movs	r3, #1
 801cc42:	6163      	str	r3, [r4, #20]
 801cc44:	b002      	add	sp, #8
 801cc46:	bd70      	pop	{r4, r5, r6, pc}
 801cc48:	ab01      	add	r3, sp, #4
 801cc4a:	466a      	mov	r2, sp
 801cc4c:	f7ff ffc8 	bl	801cbe0 <__swhatbuf_r>
 801cc50:	9900      	ldr	r1, [sp, #0]
 801cc52:	4605      	mov	r5, r0
 801cc54:	4630      	mov	r0, r6
 801cc56:	f7fe ff1d 	bl	801ba94 <_malloc_r>
 801cc5a:	b948      	cbnz	r0, 801cc70 <__smakebuf_r+0x44>
 801cc5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc60:	059a      	lsls	r2, r3, #22
 801cc62:	d4ef      	bmi.n	801cc44 <__smakebuf_r+0x18>
 801cc64:	f023 0303 	bic.w	r3, r3, #3
 801cc68:	f043 0302 	orr.w	r3, r3, #2
 801cc6c:	81a3      	strh	r3, [r4, #12]
 801cc6e:	e7e3      	b.n	801cc38 <__smakebuf_r+0xc>
 801cc70:	89a3      	ldrh	r3, [r4, #12]
 801cc72:	6020      	str	r0, [r4, #0]
 801cc74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc78:	81a3      	strh	r3, [r4, #12]
 801cc7a:	9b00      	ldr	r3, [sp, #0]
 801cc7c:	6163      	str	r3, [r4, #20]
 801cc7e:	9b01      	ldr	r3, [sp, #4]
 801cc80:	6120      	str	r0, [r4, #16]
 801cc82:	b15b      	cbz	r3, 801cc9c <__smakebuf_r+0x70>
 801cc84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cc88:	4630      	mov	r0, r6
 801cc8a:	f000 f81d 	bl	801ccc8 <_isatty_r>
 801cc8e:	b128      	cbz	r0, 801cc9c <__smakebuf_r+0x70>
 801cc90:	89a3      	ldrh	r3, [r4, #12]
 801cc92:	f023 0303 	bic.w	r3, r3, #3
 801cc96:	f043 0301 	orr.w	r3, r3, #1
 801cc9a:	81a3      	strh	r3, [r4, #12]
 801cc9c:	89a3      	ldrh	r3, [r4, #12]
 801cc9e:	431d      	orrs	r5, r3
 801cca0:	81a5      	strh	r5, [r4, #12]
 801cca2:	e7cf      	b.n	801cc44 <__smakebuf_r+0x18>

0801cca4 <_fstat_r>:
 801cca4:	b538      	push	{r3, r4, r5, lr}
 801cca6:	4d07      	ldr	r5, [pc, #28]	; (801ccc4 <_fstat_r+0x20>)
 801cca8:	2300      	movs	r3, #0
 801ccaa:	4604      	mov	r4, r0
 801ccac:	4608      	mov	r0, r1
 801ccae:	4611      	mov	r1, r2
 801ccb0:	602b      	str	r3, [r5, #0]
 801ccb2:	f7e5 f894 	bl	8001dde <_fstat>
 801ccb6:	1c43      	adds	r3, r0, #1
 801ccb8:	d102      	bne.n	801ccc0 <_fstat_r+0x1c>
 801ccba:	682b      	ldr	r3, [r5, #0]
 801ccbc:	b103      	cbz	r3, 801ccc0 <_fstat_r+0x1c>
 801ccbe:	6023      	str	r3, [r4, #0]
 801ccc0:	bd38      	pop	{r3, r4, r5, pc}
 801ccc2:	bf00      	nop
 801ccc4:	20002034 	.word	0x20002034

0801ccc8 <_isatty_r>:
 801ccc8:	b538      	push	{r3, r4, r5, lr}
 801ccca:	4d06      	ldr	r5, [pc, #24]	; (801cce4 <_isatty_r+0x1c>)
 801cccc:	2300      	movs	r3, #0
 801ccce:	4604      	mov	r4, r0
 801ccd0:	4608      	mov	r0, r1
 801ccd2:	602b      	str	r3, [r5, #0]
 801ccd4:	f7e5 f893 	bl	8001dfe <_isatty>
 801ccd8:	1c43      	adds	r3, r0, #1
 801ccda:	d102      	bne.n	801cce2 <_isatty_r+0x1a>
 801ccdc:	682b      	ldr	r3, [r5, #0]
 801ccde:	b103      	cbz	r3, 801cce2 <_isatty_r+0x1a>
 801cce0:	6023      	str	r3, [r4, #0]
 801cce2:	bd38      	pop	{r3, r4, r5, pc}
 801cce4:	20002034 	.word	0x20002034

0801cce8 <abort>:
 801cce8:	b508      	push	{r3, lr}
 801ccea:	2006      	movs	r0, #6
 801ccec:	f000 f834 	bl	801cd58 <raise>
 801ccf0:	2001      	movs	r0, #1
 801ccf2:	f7e5 f825 	bl	8001d40 <_exit>

0801ccf6 <_malloc_usable_size_r>:
 801ccf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ccfa:	1f18      	subs	r0, r3, #4
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	bfbc      	itt	lt
 801cd00:	580b      	ldrlt	r3, [r1, r0]
 801cd02:	18c0      	addlt	r0, r0, r3
 801cd04:	4770      	bx	lr

0801cd06 <_raise_r>:
 801cd06:	291f      	cmp	r1, #31
 801cd08:	b538      	push	{r3, r4, r5, lr}
 801cd0a:	4604      	mov	r4, r0
 801cd0c:	460d      	mov	r5, r1
 801cd0e:	d904      	bls.n	801cd1a <_raise_r+0x14>
 801cd10:	2316      	movs	r3, #22
 801cd12:	6003      	str	r3, [r0, #0]
 801cd14:	f04f 30ff 	mov.w	r0, #4294967295
 801cd18:	bd38      	pop	{r3, r4, r5, pc}
 801cd1a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801cd1c:	b112      	cbz	r2, 801cd24 <_raise_r+0x1e>
 801cd1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cd22:	b94b      	cbnz	r3, 801cd38 <_raise_r+0x32>
 801cd24:	4620      	mov	r0, r4
 801cd26:	f000 f831 	bl	801cd8c <_getpid_r>
 801cd2a:	462a      	mov	r2, r5
 801cd2c:	4601      	mov	r1, r0
 801cd2e:	4620      	mov	r0, r4
 801cd30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cd34:	f000 b818 	b.w	801cd68 <_kill_r>
 801cd38:	2b01      	cmp	r3, #1
 801cd3a:	d00a      	beq.n	801cd52 <_raise_r+0x4c>
 801cd3c:	1c59      	adds	r1, r3, #1
 801cd3e:	d103      	bne.n	801cd48 <_raise_r+0x42>
 801cd40:	2316      	movs	r3, #22
 801cd42:	6003      	str	r3, [r0, #0]
 801cd44:	2001      	movs	r0, #1
 801cd46:	e7e7      	b.n	801cd18 <_raise_r+0x12>
 801cd48:	2400      	movs	r4, #0
 801cd4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cd4e:	4628      	mov	r0, r5
 801cd50:	4798      	blx	r3
 801cd52:	2000      	movs	r0, #0
 801cd54:	e7e0      	b.n	801cd18 <_raise_r+0x12>
	...

0801cd58 <raise>:
 801cd58:	4b02      	ldr	r3, [pc, #8]	; (801cd64 <raise+0xc>)
 801cd5a:	4601      	mov	r1, r0
 801cd5c:	6818      	ldr	r0, [r3, #0]
 801cd5e:	f7ff bfd2 	b.w	801cd06 <_raise_r>
 801cd62:	bf00      	nop
 801cd64:	2000020c 	.word	0x2000020c

0801cd68 <_kill_r>:
 801cd68:	b538      	push	{r3, r4, r5, lr}
 801cd6a:	4d07      	ldr	r5, [pc, #28]	; (801cd88 <_kill_r+0x20>)
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	4604      	mov	r4, r0
 801cd70:	4608      	mov	r0, r1
 801cd72:	4611      	mov	r1, r2
 801cd74:	602b      	str	r3, [r5, #0]
 801cd76:	f7e4 ffd3 	bl	8001d20 <_kill>
 801cd7a:	1c43      	adds	r3, r0, #1
 801cd7c:	d102      	bne.n	801cd84 <_kill_r+0x1c>
 801cd7e:	682b      	ldr	r3, [r5, #0]
 801cd80:	b103      	cbz	r3, 801cd84 <_kill_r+0x1c>
 801cd82:	6023      	str	r3, [r4, #0]
 801cd84:	bd38      	pop	{r3, r4, r5, pc}
 801cd86:	bf00      	nop
 801cd88:	20002034 	.word	0x20002034

0801cd8c <_getpid_r>:
 801cd8c:	f7e4 bfc0 	b.w	8001d10 <_getpid>

0801cd90 <atan2>:
 801cd90:	f000 bb4a 	b.w	801d428 <__ieee754_atan2>

0801cd94 <sqrt>:
 801cd94:	b538      	push	{r3, r4, r5, lr}
 801cd96:	ed2d 8b02 	vpush	{d8}
 801cd9a:	ec55 4b10 	vmov	r4, r5, d0
 801cd9e:	f000 f943 	bl	801d028 <__ieee754_sqrt>
 801cda2:	4622      	mov	r2, r4
 801cda4:	462b      	mov	r3, r5
 801cda6:	4620      	mov	r0, r4
 801cda8:	4629      	mov	r1, r5
 801cdaa:	eeb0 8a40 	vmov.f32	s16, s0
 801cdae:	eef0 8a60 	vmov.f32	s17, s1
 801cdb2:	f7e3 febb 	bl	8000b2c <__aeabi_dcmpun>
 801cdb6:	b990      	cbnz	r0, 801cdde <sqrt+0x4a>
 801cdb8:	2200      	movs	r2, #0
 801cdba:	2300      	movs	r3, #0
 801cdbc:	4620      	mov	r0, r4
 801cdbe:	4629      	mov	r1, r5
 801cdc0:	f7e3 fe8c 	bl	8000adc <__aeabi_dcmplt>
 801cdc4:	b158      	cbz	r0, 801cdde <sqrt+0x4a>
 801cdc6:	f7fd ff33 	bl	801ac30 <__errno>
 801cdca:	2321      	movs	r3, #33	; 0x21
 801cdcc:	6003      	str	r3, [r0, #0]
 801cdce:	2200      	movs	r2, #0
 801cdd0:	2300      	movs	r3, #0
 801cdd2:	4610      	mov	r0, r2
 801cdd4:	4619      	mov	r1, r3
 801cdd6:	f7e3 fd39 	bl	800084c <__aeabi_ddiv>
 801cdda:	ec41 0b18 	vmov	d8, r0, r1
 801cdde:	eeb0 0a48 	vmov.f32	s0, s16
 801cde2:	eef0 0a68 	vmov.f32	s1, s17
 801cde6:	ecbd 8b02 	vpop	{d8}
 801cdea:	bd38      	pop	{r3, r4, r5, pc}

0801cdec <acosf>:
 801cdec:	b508      	push	{r3, lr}
 801cdee:	ed2d 8b02 	vpush	{d8}
 801cdf2:	eeb0 8a40 	vmov.f32	s16, s0
 801cdf6:	f000 ff0f 	bl	801dc18 <__ieee754_acosf>
 801cdfa:	eeb4 8a48 	vcmp.f32	s16, s16
 801cdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce02:	eef0 8a40 	vmov.f32	s17, s0
 801ce06:	d615      	bvs.n	801ce34 <acosf+0x48>
 801ce08:	eeb0 0a48 	vmov.f32	s0, s16
 801ce0c:	f000 f88c 	bl	801cf28 <fabsf>
 801ce10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ce14:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ce18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce1c:	dd0a      	ble.n	801ce34 <acosf+0x48>
 801ce1e:	f7fd ff07 	bl	801ac30 <__errno>
 801ce22:	ecbd 8b02 	vpop	{d8}
 801ce26:	2321      	movs	r3, #33	; 0x21
 801ce28:	6003      	str	r3, [r0, #0]
 801ce2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ce2e:	4804      	ldr	r0, [pc, #16]	; (801ce40 <acosf+0x54>)
 801ce30:	f000 b8f4 	b.w	801d01c <nanf>
 801ce34:	eeb0 0a68 	vmov.f32	s0, s17
 801ce38:	ecbd 8b02 	vpop	{d8}
 801ce3c:	bd08      	pop	{r3, pc}
 801ce3e:	bf00      	nop
 801ce40:	0801eeaa 	.word	0x0801eeaa

0801ce44 <asinf>:
 801ce44:	b508      	push	{r3, lr}
 801ce46:	ed2d 8b02 	vpush	{d8}
 801ce4a:	eeb0 8a40 	vmov.f32	s16, s0
 801ce4e:	f000 ffdb 	bl	801de08 <__ieee754_asinf>
 801ce52:	eeb4 8a48 	vcmp.f32	s16, s16
 801ce56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce5a:	eef0 8a40 	vmov.f32	s17, s0
 801ce5e:	d615      	bvs.n	801ce8c <asinf+0x48>
 801ce60:	eeb0 0a48 	vmov.f32	s0, s16
 801ce64:	f000 f860 	bl	801cf28 <fabsf>
 801ce68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ce6c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ce70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce74:	dd0a      	ble.n	801ce8c <asinf+0x48>
 801ce76:	f7fd fedb 	bl	801ac30 <__errno>
 801ce7a:	ecbd 8b02 	vpop	{d8}
 801ce7e:	2321      	movs	r3, #33	; 0x21
 801ce80:	6003      	str	r3, [r0, #0]
 801ce82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ce86:	4804      	ldr	r0, [pc, #16]	; (801ce98 <asinf+0x54>)
 801ce88:	f000 b8c8 	b.w	801d01c <nanf>
 801ce8c:	eeb0 0a68 	vmov.f32	s0, s17
 801ce90:	ecbd 8b02 	vpop	{d8}
 801ce94:	bd08      	pop	{r3, pc}
 801ce96:	bf00      	nop
 801ce98:	0801eeaa 	.word	0x0801eeaa

0801ce9c <atan2f>:
 801ce9c:	f001 b89a 	b.w	801dfd4 <__ieee754_atan2f>

0801cea0 <cosf>:
 801cea0:	ee10 3a10 	vmov	r3, s0
 801cea4:	b507      	push	{r0, r1, r2, lr}
 801cea6:	4a1e      	ldr	r2, [pc, #120]	; (801cf20 <cosf+0x80>)
 801cea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ceac:	4293      	cmp	r3, r2
 801ceae:	dc06      	bgt.n	801cebe <cosf+0x1e>
 801ceb0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801cf24 <cosf+0x84>
 801ceb4:	b003      	add	sp, #12
 801ceb6:	f85d eb04 	ldr.w	lr, [sp], #4
 801ceba:	f000 bd27 	b.w	801d90c <__kernel_cosf>
 801cebe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801cec2:	db04      	blt.n	801cece <cosf+0x2e>
 801cec4:	ee30 0a40 	vsub.f32	s0, s0, s0
 801cec8:	b003      	add	sp, #12
 801ceca:	f85d fb04 	ldr.w	pc, [sp], #4
 801cece:	4668      	mov	r0, sp
 801ced0:	f001 f920 	bl	801e114 <__ieee754_rem_pio2f>
 801ced4:	f000 0003 	and.w	r0, r0, #3
 801ced8:	2801      	cmp	r0, #1
 801ceda:	d009      	beq.n	801cef0 <cosf+0x50>
 801cedc:	2802      	cmp	r0, #2
 801cede:	d010      	beq.n	801cf02 <cosf+0x62>
 801cee0:	b9b0      	cbnz	r0, 801cf10 <cosf+0x70>
 801cee2:	eddd 0a01 	vldr	s1, [sp, #4]
 801cee6:	ed9d 0a00 	vldr	s0, [sp]
 801ceea:	f000 fd0f 	bl	801d90c <__kernel_cosf>
 801ceee:	e7eb      	b.n	801cec8 <cosf+0x28>
 801cef0:	eddd 0a01 	vldr	s1, [sp, #4]
 801cef4:	ed9d 0a00 	vldr	s0, [sp]
 801cef8:	f000 fd66 	bl	801d9c8 <__kernel_sinf>
 801cefc:	eeb1 0a40 	vneg.f32	s0, s0
 801cf00:	e7e2      	b.n	801cec8 <cosf+0x28>
 801cf02:	eddd 0a01 	vldr	s1, [sp, #4]
 801cf06:	ed9d 0a00 	vldr	s0, [sp]
 801cf0a:	f000 fcff 	bl	801d90c <__kernel_cosf>
 801cf0e:	e7f5      	b.n	801cefc <cosf+0x5c>
 801cf10:	eddd 0a01 	vldr	s1, [sp, #4]
 801cf14:	ed9d 0a00 	vldr	s0, [sp]
 801cf18:	2001      	movs	r0, #1
 801cf1a:	f000 fd55 	bl	801d9c8 <__kernel_sinf>
 801cf1e:	e7d3      	b.n	801cec8 <cosf+0x28>
 801cf20:	3f490fd8 	.word	0x3f490fd8
 801cf24:	00000000 	.word	0x00000000

0801cf28 <fabsf>:
 801cf28:	ee10 3a10 	vmov	r3, s0
 801cf2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cf30:	ee00 3a10 	vmov	s0, r3
 801cf34:	4770      	bx	lr
	...

0801cf38 <sinf>:
 801cf38:	ee10 3a10 	vmov	r3, s0
 801cf3c:	b507      	push	{r0, r1, r2, lr}
 801cf3e:	4a1f      	ldr	r2, [pc, #124]	; (801cfbc <sinf+0x84>)
 801cf40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cf44:	4293      	cmp	r3, r2
 801cf46:	dc07      	bgt.n	801cf58 <sinf+0x20>
 801cf48:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801cfc0 <sinf+0x88>
 801cf4c:	2000      	movs	r0, #0
 801cf4e:	b003      	add	sp, #12
 801cf50:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf54:	f000 bd38 	b.w	801d9c8 <__kernel_sinf>
 801cf58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801cf5c:	db04      	blt.n	801cf68 <sinf+0x30>
 801cf5e:	ee30 0a40 	vsub.f32	s0, s0, s0
 801cf62:	b003      	add	sp, #12
 801cf64:	f85d fb04 	ldr.w	pc, [sp], #4
 801cf68:	4668      	mov	r0, sp
 801cf6a:	f001 f8d3 	bl	801e114 <__ieee754_rem_pio2f>
 801cf6e:	f000 0003 	and.w	r0, r0, #3
 801cf72:	2801      	cmp	r0, #1
 801cf74:	d00a      	beq.n	801cf8c <sinf+0x54>
 801cf76:	2802      	cmp	r0, #2
 801cf78:	d00f      	beq.n	801cf9a <sinf+0x62>
 801cf7a:	b9c0      	cbnz	r0, 801cfae <sinf+0x76>
 801cf7c:	eddd 0a01 	vldr	s1, [sp, #4]
 801cf80:	ed9d 0a00 	vldr	s0, [sp]
 801cf84:	2001      	movs	r0, #1
 801cf86:	f000 fd1f 	bl	801d9c8 <__kernel_sinf>
 801cf8a:	e7ea      	b.n	801cf62 <sinf+0x2a>
 801cf8c:	eddd 0a01 	vldr	s1, [sp, #4]
 801cf90:	ed9d 0a00 	vldr	s0, [sp]
 801cf94:	f000 fcba 	bl	801d90c <__kernel_cosf>
 801cf98:	e7e3      	b.n	801cf62 <sinf+0x2a>
 801cf9a:	eddd 0a01 	vldr	s1, [sp, #4]
 801cf9e:	ed9d 0a00 	vldr	s0, [sp]
 801cfa2:	2001      	movs	r0, #1
 801cfa4:	f000 fd10 	bl	801d9c8 <__kernel_sinf>
 801cfa8:	eeb1 0a40 	vneg.f32	s0, s0
 801cfac:	e7d9      	b.n	801cf62 <sinf+0x2a>
 801cfae:	eddd 0a01 	vldr	s1, [sp, #4]
 801cfb2:	ed9d 0a00 	vldr	s0, [sp]
 801cfb6:	f000 fca9 	bl	801d90c <__kernel_cosf>
 801cfba:	e7f5      	b.n	801cfa8 <sinf+0x70>
 801cfbc:	3f490fd8 	.word	0x3f490fd8
 801cfc0:	00000000 	.word	0x00000000

0801cfc4 <tanf>:
 801cfc4:	ee10 3a10 	vmov	r3, s0
 801cfc8:	b507      	push	{r0, r1, r2, lr}
 801cfca:	4a12      	ldr	r2, [pc, #72]	; (801d014 <tanf+0x50>)
 801cfcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cfd0:	4293      	cmp	r3, r2
 801cfd2:	dc07      	bgt.n	801cfe4 <tanf+0x20>
 801cfd4:	eddf 0a10 	vldr	s1, [pc, #64]	; 801d018 <tanf+0x54>
 801cfd8:	2001      	movs	r0, #1
 801cfda:	b003      	add	sp, #12
 801cfdc:	f85d eb04 	ldr.w	lr, [sp], #4
 801cfe0:	f000 bd3a 	b.w	801da58 <__kernel_tanf>
 801cfe4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801cfe8:	db04      	blt.n	801cff4 <tanf+0x30>
 801cfea:	ee30 0a40 	vsub.f32	s0, s0, s0
 801cfee:	b003      	add	sp, #12
 801cff0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cff4:	4668      	mov	r0, sp
 801cff6:	f001 f88d 	bl	801e114 <__ieee754_rem_pio2f>
 801cffa:	0040      	lsls	r0, r0, #1
 801cffc:	f000 0002 	and.w	r0, r0, #2
 801d000:	eddd 0a01 	vldr	s1, [sp, #4]
 801d004:	ed9d 0a00 	vldr	s0, [sp]
 801d008:	f1c0 0001 	rsb	r0, r0, #1
 801d00c:	f000 fd24 	bl	801da58 <__kernel_tanf>
 801d010:	e7ed      	b.n	801cfee <tanf+0x2a>
 801d012:	bf00      	nop
 801d014:	3f490fda 	.word	0x3f490fda
 801d018:	00000000 	.word	0x00000000

0801d01c <nanf>:
 801d01c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d024 <nanf+0x8>
 801d020:	4770      	bx	lr
 801d022:	bf00      	nop
 801d024:	7fc00000 	.word	0x7fc00000

0801d028 <__ieee754_sqrt>:
 801d028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d02c:	ec55 4b10 	vmov	r4, r5, d0
 801d030:	4e67      	ldr	r6, [pc, #412]	; (801d1d0 <__ieee754_sqrt+0x1a8>)
 801d032:	43ae      	bics	r6, r5
 801d034:	ee10 0a10 	vmov	r0, s0
 801d038:	ee10 2a10 	vmov	r2, s0
 801d03c:	4629      	mov	r1, r5
 801d03e:	462b      	mov	r3, r5
 801d040:	d10d      	bne.n	801d05e <__ieee754_sqrt+0x36>
 801d042:	f7e3 fad9 	bl	80005f8 <__aeabi_dmul>
 801d046:	4602      	mov	r2, r0
 801d048:	460b      	mov	r3, r1
 801d04a:	4620      	mov	r0, r4
 801d04c:	4629      	mov	r1, r5
 801d04e:	f7e3 f91d 	bl	800028c <__adddf3>
 801d052:	4604      	mov	r4, r0
 801d054:	460d      	mov	r5, r1
 801d056:	ec45 4b10 	vmov	d0, r4, r5
 801d05a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d05e:	2d00      	cmp	r5, #0
 801d060:	dc0b      	bgt.n	801d07a <__ieee754_sqrt+0x52>
 801d062:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d066:	4326      	orrs	r6, r4
 801d068:	d0f5      	beq.n	801d056 <__ieee754_sqrt+0x2e>
 801d06a:	b135      	cbz	r5, 801d07a <__ieee754_sqrt+0x52>
 801d06c:	f7e3 f90c 	bl	8000288 <__aeabi_dsub>
 801d070:	4602      	mov	r2, r0
 801d072:	460b      	mov	r3, r1
 801d074:	f7e3 fbea 	bl	800084c <__aeabi_ddiv>
 801d078:	e7eb      	b.n	801d052 <__ieee754_sqrt+0x2a>
 801d07a:	1509      	asrs	r1, r1, #20
 801d07c:	f000 808d 	beq.w	801d19a <__ieee754_sqrt+0x172>
 801d080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d084:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801d088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d08c:	07c9      	lsls	r1, r1, #31
 801d08e:	bf5c      	itt	pl
 801d090:	005b      	lslpl	r3, r3, #1
 801d092:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801d096:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d09a:	bf58      	it	pl
 801d09c:	0052      	lslpl	r2, r2, #1
 801d09e:	2500      	movs	r5, #0
 801d0a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d0a4:	1076      	asrs	r6, r6, #1
 801d0a6:	0052      	lsls	r2, r2, #1
 801d0a8:	f04f 0e16 	mov.w	lr, #22
 801d0ac:	46ac      	mov	ip, r5
 801d0ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801d0b2:	eb0c 0001 	add.w	r0, ip, r1
 801d0b6:	4298      	cmp	r0, r3
 801d0b8:	bfde      	ittt	le
 801d0ba:	1a1b      	suble	r3, r3, r0
 801d0bc:	eb00 0c01 	addle.w	ip, r0, r1
 801d0c0:	186d      	addle	r5, r5, r1
 801d0c2:	005b      	lsls	r3, r3, #1
 801d0c4:	f1be 0e01 	subs.w	lr, lr, #1
 801d0c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d0cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d0d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d0d4:	d1ed      	bne.n	801d0b2 <__ieee754_sqrt+0x8a>
 801d0d6:	4674      	mov	r4, lr
 801d0d8:	2720      	movs	r7, #32
 801d0da:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801d0de:	4563      	cmp	r3, ip
 801d0e0:	eb01 000e 	add.w	r0, r1, lr
 801d0e4:	dc02      	bgt.n	801d0ec <__ieee754_sqrt+0xc4>
 801d0e6:	d113      	bne.n	801d110 <__ieee754_sqrt+0xe8>
 801d0e8:	4290      	cmp	r0, r2
 801d0ea:	d811      	bhi.n	801d110 <__ieee754_sqrt+0xe8>
 801d0ec:	2800      	cmp	r0, #0
 801d0ee:	eb00 0e01 	add.w	lr, r0, r1
 801d0f2:	da57      	bge.n	801d1a4 <__ieee754_sqrt+0x17c>
 801d0f4:	f1be 0f00 	cmp.w	lr, #0
 801d0f8:	db54      	blt.n	801d1a4 <__ieee754_sqrt+0x17c>
 801d0fa:	f10c 0801 	add.w	r8, ip, #1
 801d0fe:	eba3 030c 	sub.w	r3, r3, ip
 801d102:	4290      	cmp	r0, r2
 801d104:	bf88      	it	hi
 801d106:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801d10a:	1a12      	subs	r2, r2, r0
 801d10c:	440c      	add	r4, r1
 801d10e:	46c4      	mov	ip, r8
 801d110:	005b      	lsls	r3, r3, #1
 801d112:	3f01      	subs	r7, #1
 801d114:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801d118:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d11c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801d120:	d1dd      	bne.n	801d0de <__ieee754_sqrt+0xb6>
 801d122:	4313      	orrs	r3, r2
 801d124:	d01b      	beq.n	801d15e <__ieee754_sqrt+0x136>
 801d126:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801d1d4 <__ieee754_sqrt+0x1ac>
 801d12a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801d1d8 <__ieee754_sqrt+0x1b0>
 801d12e:	e9da 0100 	ldrd	r0, r1, [sl]
 801d132:	e9db 2300 	ldrd	r2, r3, [fp]
 801d136:	f7e3 f8a7 	bl	8000288 <__aeabi_dsub>
 801d13a:	e9da 8900 	ldrd	r8, r9, [sl]
 801d13e:	4602      	mov	r2, r0
 801d140:	460b      	mov	r3, r1
 801d142:	4640      	mov	r0, r8
 801d144:	4649      	mov	r1, r9
 801d146:	f7e3 fcd3 	bl	8000af0 <__aeabi_dcmple>
 801d14a:	b140      	cbz	r0, 801d15e <__ieee754_sqrt+0x136>
 801d14c:	f1b4 3fff 	cmp.w	r4, #4294967295
 801d150:	e9da 0100 	ldrd	r0, r1, [sl]
 801d154:	e9db 2300 	ldrd	r2, r3, [fp]
 801d158:	d126      	bne.n	801d1a8 <__ieee754_sqrt+0x180>
 801d15a:	3501      	adds	r5, #1
 801d15c:	463c      	mov	r4, r7
 801d15e:	106a      	asrs	r2, r5, #1
 801d160:	0863      	lsrs	r3, r4, #1
 801d162:	07e9      	lsls	r1, r5, #31
 801d164:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801d168:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801d16c:	bf48      	it	mi
 801d16e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801d172:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801d176:	461c      	mov	r4, r3
 801d178:	e76d      	b.n	801d056 <__ieee754_sqrt+0x2e>
 801d17a:	0ad3      	lsrs	r3, r2, #11
 801d17c:	3815      	subs	r0, #21
 801d17e:	0552      	lsls	r2, r2, #21
 801d180:	2b00      	cmp	r3, #0
 801d182:	d0fa      	beq.n	801d17a <__ieee754_sqrt+0x152>
 801d184:	02dc      	lsls	r4, r3, #11
 801d186:	d50a      	bpl.n	801d19e <__ieee754_sqrt+0x176>
 801d188:	f1c1 0420 	rsb	r4, r1, #32
 801d18c:	fa22 f404 	lsr.w	r4, r2, r4
 801d190:	1e4d      	subs	r5, r1, #1
 801d192:	408a      	lsls	r2, r1
 801d194:	4323      	orrs	r3, r4
 801d196:	1b41      	subs	r1, r0, r5
 801d198:	e772      	b.n	801d080 <__ieee754_sqrt+0x58>
 801d19a:	4608      	mov	r0, r1
 801d19c:	e7f0      	b.n	801d180 <__ieee754_sqrt+0x158>
 801d19e:	005b      	lsls	r3, r3, #1
 801d1a0:	3101      	adds	r1, #1
 801d1a2:	e7ef      	b.n	801d184 <__ieee754_sqrt+0x15c>
 801d1a4:	46e0      	mov	r8, ip
 801d1a6:	e7aa      	b.n	801d0fe <__ieee754_sqrt+0xd6>
 801d1a8:	f7e3 f870 	bl	800028c <__adddf3>
 801d1ac:	e9da 8900 	ldrd	r8, r9, [sl]
 801d1b0:	4602      	mov	r2, r0
 801d1b2:	460b      	mov	r3, r1
 801d1b4:	4640      	mov	r0, r8
 801d1b6:	4649      	mov	r1, r9
 801d1b8:	f7e3 fc90 	bl	8000adc <__aeabi_dcmplt>
 801d1bc:	b120      	cbz	r0, 801d1c8 <__ieee754_sqrt+0x1a0>
 801d1be:	1ca0      	adds	r0, r4, #2
 801d1c0:	bf08      	it	eq
 801d1c2:	3501      	addeq	r5, #1
 801d1c4:	3402      	adds	r4, #2
 801d1c6:	e7ca      	b.n	801d15e <__ieee754_sqrt+0x136>
 801d1c8:	3401      	adds	r4, #1
 801d1ca:	f024 0401 	bic.w	r4, r4, #1
 801d1ce:	e7c6      	b.n	801d15e <__ieee754_sqrt+0x136>
 801d1d0:	7ff00000 	.word	0x7ff00000
 801d1d4:	20000380 	.word	0x20000380
 801d1d8:	20000388 	.word	0x20000388
 801d1dc:	00000000 	.word	0x00000000

0801d1e0 <ceil>:
 801d1e0:	ec51 0b10 	vmov	r0, r1, d0
 801d1e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801d1f0:	2e13      	cmp	r6, #19
 801d1f2:	ee10 5a10 	vmov	r5, s0
 801d1f6:	ee10 8a10 	vmov	r8, s0
 801d1fa:	460c      	mov	r4, r1
 801d1fc:	dc2f      	bgt.n	801d25e <ceil+0x7e>
 801d1fe:	2e00      	cmp	r6, #0
 801d200:	da12      	bge.n	801d228 <ceil+0x48>
 801d202:	a333      	add	r3, pc, #204	; (adr r3, 801d2d0 <ceil+0xf0>)
 801d204:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d208:	f7e3 f840 	bl	800028c <__adddf3>
 801d20c:	2200      	movs	r2, #0
 801d20e:	2300      	movs	r3, #0
 801d210:	f7e3 fc82 	bl	8000b18 <__aeabi_dcmpgt>
 801d214:	b128      	cbz	r0, 801d222 <ceil+0x42>
 801d216:	2c00      	cmp	r4, #0
 801d218:	db51      	blt.n	801d2be <ceil+0xde>
 801d21a:	432c      	orrs	r4, r5
 801d21c:	d053      	beq.n	801d2c6 <ceil+0xe6>
 801d21e:	4c2e      	ldr	r4, [pc, #184]	; (801d2d8 <ceil+0xf8>)
 801d220:	2500      	movs	r5, #0
 801d222:	4621      	mov	r1, r4
 801d224:	4628      	mov	r0, r5
 801d226:	e024      	b.n	801d272 <ceil+0x92>
 801d228:	4f2c      	ldr	r7, [pc, #176]	; (801d2dc <ceil+0xfc>)
 801d22a:	4137      	asrs	r7, r6
 801d22c:	ea01 0307 	and.w	r3, r1, r7
 801d230:	4303      	orrs	r3, r0
 801d232:	d01e      	beq.n	801d272 <ceil+0x92>
 801d234:	a326      	add	r3, pc, #152	; (adr r3, 801d2d0 <ceil+0xf0>)
 801d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d23a:	f7e3 f827 	bl	800028c <__adddf3>
 801d23e:	2200      	movs	r2, #0
 801d240:	2300      	movs	r3, #0
 801d242:	f7e3 fc69 	bl	8000b18 <__aeabi_dcmpgt>
 801d246:	2800      	cmp	r0, #0
 801d248:	d0eb      	beq.n	801d222 <ceil+0x42>
 801d24a:	2c00      	cmp	r4, #0
 801d24c:	bfc2      	ittt	gt
 801d24e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801d252:	4133      	asrgt	r3, r6
 801d254:	18e4      	addgt	r4, r4, r3
 801d256:	ea24 0407 	bic.w	r4, r4, r7
 801d25a:	2500      	movs	r5, #0
 801d25c:	e7e1      	b.n	801d222 <ceil+0x42>
 801d25e:	2e33      	cmp	r6, #51	; 0x33
 801d260:	dd0b      	ble.n	801d27a <ceil+0x9a>
 801d262:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d266:	d104      	bne.n	801d272 <ceil+0x92>
 801d268:	ee10 2a10 	vmov	r2, s0
 801d26c:	460b      	mov	r3, r1
 801d26e:	f7e3 f80d 	bl	800028c <__adddf3>
 801d272:	ec41 0b10 	vmov	d0, r0, r1
 801d276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d27a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801d27e:	f04f 37ff 	mov.w	r7, #4294967295
 801d282:	40df      	lsrs	r7, r3
 801d284:	4238      	tst	r0, r7
 801d286:	d0f4      	beq.n	801d272 <ceil+0x92>
 801d288:	a311      	add	r3, pc, #68	; (adr r3, 801d2d0 <ceil+0xf0>)
 801d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d28e:	f7e2 fffd 	bl	800028c <__adddf3>
 801d292:	2200      	movs	r2, #0
 801d294:	2300      	movs	r3, #0
 801d296:	f7e3 fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 801d29a:	2800      	cmp	r0, #0
 801d29c:	d0c1      	beq.n	801d222 <ceil+0x42>
 801d29e:	2c00      	cmp	r4, #0
 801d2a0:	dd0a      	ble.n	801d2b8 <ceil+0xd8>
 801d2a2:	2e14      	cmp	r6, #20
 801d2a4:	d101      	bne.n	801d2aa <ceil+0xca>
 801d2a6:	3401      	adds	r4, #1
 801d2a8:	e006      	b.n	801d2b8 <ceil+0xd8>
 801d2aa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d2ae:	2301      	movs	r3, #1
 801d2b0:	40b3      	lsls	r3, r6
 801d2b2:	441d      	add	r5, r3
 801d2b4:	45a8      	cmp	r8, r5
 801d2b6:	d8f6      	bhi.n	801d2a6 <ceil+0xc6>
 801d2b8:	ea25 0507 	bic.w	r5, r5, r7
 801d2bc:	e7b1      	b.n	801d222 <ceil+0x42>
 801d2be:	2500      	movs	r5, #0
 801d2c0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801d2c4:	e7ad      	b.n	801d222 <ceil+0x42>
 801d2c6:	4625      	mov	r5, r4
 801d2c8:	e7ab      	b.n	801d222 <ceil+0x42>
 801d2ca:	bf00      	nop
 801d2cc:	f3af 8000 	nop.w
 801d2d0:	8800759c 	.word	0x8800759c
 801d2d4:	7e37e43c 	.word	0x7e37e43c
 801d2d8:	3ff00000 	.word	0x3ff00000
 801d2dc:	000fffff 	.word	0x000fffff

0801d2e0 <floor>:
 801d2e0:	ec51 0b10 	vmov	r0, r1, d0
 801d2e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 801d2f0:	2e13      	cmp	r6, #19
 801d2f2:	ee10 5a10 	vmov	r5, s0
 801d2f6:	ee10 8a10 	vmov	r8, s0
 801d2fa:	460c      	mov	r4, r1
 801d2fc:	dc31      	bgt.n	801d362 <floor+0x82>
 801d2fe:	2e00      	cmp	r6, #0
 801d300:	da14      	bge.n	801d32c <floor+0x4c>
 801d302:	a333      	add	r3, pc, #204	; (adr r3, 801d3d0 <floor+0xf0>)
 801d304:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d308:	f7e2 ffc0 	bl	800028c <__adddf3>
 801d30c:	2200      	movs	r2, #0
 801d30e:	2300      	movs	r3, #0
 801d310:	f7e3 fc02 	bl	8000b18 <__aeabi_dcmpgt>
 801d314:	b138      	cbz	r0, 801d326 <floor+0x46>
 801d316:	2c00      	cmp	r4, #0
 801d318:	da53      	bge.n	801d3c2 <floor+0xe2>
 801d31a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801d31e:	4325      	orrs	r5, r4
 801d320:	d052      	beq.n	801d3c8 <floor+0xe8>
 801d322:	4c2d      	ldr	r4, [pc, #180]	; (801d3d8 <floor+0xf8>)
 801d324:	2500      	movs	r5, #0
 801d326:	4621      	mov	r1, r4
 801d328:	4628      	mov	r0, r5
 801d32a:	e024      	b.n	801d376 <floor+0x96>
 801d32c:	4f2b      	ldr	r7, [pc, #172]	; (801d3dc <floor+0xfc>)
 801d32e:	4137      	asrs	r7, r6
 801d330:	ea01 0307 	and.w	r3, r1, r7
 801d334:	4303      	orrs	r3, r0
 801d336:	d01e      	beq.n	801d376 <floor+0x96>
 801d338:	a325      	add	r3, pc, #148	; (adr r3, 801d3d0 <floor+0xf0>)
 801d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d33e:	f7e2 ffa5 	bl	800028c <__adddf3>
 801d342:	2200      	movs	r2, #0
 801d344:	2300      	movs	r3, #0
 801d346:	f7e3 fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 801d34a:	2800      	cmp	r0, #0
 801d34c:	d0eb      	beq.n	801d326 <floor+0x46>
 801d34e:	2c00      	cmp	r4, #0
 801d350:	bfbe      	ittt	lt
 801d352:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801d356:	4133      	asrlt	r3, r6
 801d358:	18e4      	addlt	r4, r4, r3
 801d35a:	ea24 0407 	bic.w	r4, r4, r7
 801d35e:	2500      	movs	r5, #0
 801d360:	e7e1      	b.n	801d326 <floor+0x46>
 801d362:	2e33      	cmp	r6, #51	; 0x33
 801d364:	dd0b      	ble.n	801d37e <floor+0x9e>
 801d366:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801d36a:	d104      	bne.n	801d376 <floor+0x96>
 801d36c:	ee10 2a10 	vmov	r2, s0
 801d370:	460b      	mov	r3, r1
 801d372:	f7e2 ff8b 	bl	800028c <__adddf3>
 801d376:	ec41 0b10 	vmov	d0, r0, r1
 801d37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d37e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801d382:	f04f 37ff 	mov.w	r7, #4294967295
 801d386:	40df      	lsrs	r7, r3
 801d388:	4238      	tst	r0, r7
 801d38a:	d0f4      	beq.n	801d376 <floor+0x96>
 801d38c:	a310      	add	r3, pc, #64	; (adr r3, 801d3d0 <floor+0xf0>)
 801d38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d392:	f7e2 ff7b 	bl	800028c <__adddf3>
 801d396:	2200      	movs	r2, #0
 801d398:	2300      	movs	r3, #0
 801d39a:	f7e3 fbbd 	bl	8000b18 <__aeabi_dcmpgt>
 801d39e:	2800      	cmp	r0, #0
 801d3a0:	d0c1      	beq.n	801d326 <floor+0x46>
 801d3a2:	2c00      	cmp	r4, #0
 801d3a4:	da0a      	bge.n	801d3bc <floor+0xdc>
 801d3a6:	2e14      	cmp	r6, #20
 801d3a8:	d101      	bne.n	801d3ae <floor+0xce>
 801d3aa:	3401      	adds	r4, #1
 801d3ac:	e006      	b.n	801d3bc <floor+0xdc>
 801d3ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801d3b2:	2301      	movs	r3, #1
 801d3b4:	40b3      	lsls	r3, r6
 801d3b6:	441d      	add	r5, r3
 801d3b8:	45a8      	cmp	r8, r5
 801d3ba:	d8f6      	bhi.n	801d3aa <floor+0xca>
 801d3bc:	ea25 0507 	bic.w	r5, r5, r7
 801d3c0:	e7b1      	b.n	801d326 <floor+0x46>
 801d3c2:	2500      	movs	r5, #0
 801d3c4:	462c      	mov	r4, r5
 801d3c6:	e7ae      	b.n	801d326 <floor+0x46>
 801d3c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801d3cc:	e7ab      	b.n	801d326 <floor+0x46>
 801d3ce:	bf00      	nop
 801d3d0:	8800759c 	.word	0x8800759c
 801d3d4:	7e37e43c 	.word	0x7e37e43c
 801d3d8:	bff00000 	.word	0xbff00000
 801d3dc:	000fffff 	.word	0x000fffff

0801d3e0 <roundf>:
 801d3e0:	ee10 0a10 	vmov	r0, s0
 801d3e4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801d3e8:	3a7f      	subs	r2, #127	; 0x7f
 801d3ea:	2a16      	cmp	r2, #22
 801d3ec:	dc15      	bgt.n	801d41a <roundf+0x3a>
 801d3ee:	2a00      	cmp	r2, #0
 801d3f0:	da08      	bge.n	801d404 <roundf+0x24>
 801d3f2:	3201      	adds	r2, #1
 801d3f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801d3f8:	d101      	bne.n	801d3fe <roundf+0x1e>
 801d3fa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801d3fe:	ee00 3a10 	vmov	s0, r3
 801d402:	4770      	bx	lr
 801d404:	4907      	ldr	r1, [pc, #28]	; (801d424 <roundf+0x44>)
 801d406:	4111      	asrs	r1, r2
 801d408:	4208      	tst	r0, r1
 801d40a:	d0fa      	beq.n	801d402 <roundf+0x22>
 801d40c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801d410:	4113      	asrs	r3, r2
 801d412:	4403      	add	r3, r0
 801d414:	ea23 0301 	bic.w	r3, r3, r1
 801d418:	e7f1      	b.n	801d3fe <roundf+0x1e>
 801d41a:	2a80      	cmp	r2, #128	; 0x80
 801d41c:	d1f1      	bne.n	801d402 <roundf+0x22>
 801d41e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d422:	4770      	bx	lr
 801d424:	007fffff 	.word	0x007fffff

0801d428 <__ieee754_atan2>:
 801d428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d42c:	ec57 6b11 	vmov	r6, r7, d1
 801d430:	4273      	negs	r3, r6
 801d432:	f8df 817c 	ldr.w	r8, [pc, #380]	; 801d5b0 <__ieee754_atan2+0x188>
 801d436:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801d43a:	4333      	orrs	r3, r6
 801d43c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801d440:	4543      	cmp	r3, r8
 801d442:	ec51 0b10 	vmov	r0, r1, d0
 801d446:	ee11 5a10 	vmov	r5, s2
 801d44a:	d80a      	bhi.n	801d462 <__ieee754_atan2+0x3a>
 801d44c:	4244      	negs	r4, r0
 801d44e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d452:	4304      	orrs	r4, r0
 801d454:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801d458:	4544      	cmp	r4, r8
 801d45a:	ee10 9a10 	vmov	r9, s0
 801d45e:	468e      	mov	lr, r1
 801d460:	d907      	bls.n	801d472 <__ieee754_atan2+0x4a>
 801d462:	4632      	mov	r2, r6
 801d464:	463b      	mov	r3, r7
 801d466:	f7e2 ff11 	bl	800028c <__adddf3>
 801d46a:	ec41 0b10 	vmov	d0, r0, r1
 801d46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d472:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801d476:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d47a:	4334      	orrs	r4, r6
 801d47c:	d103      	bne.n	801d486 <__ieee754_atan2+0x5e>
 801d47e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d482:	f000 b899 	b.w	801d5b8 <atan>
 801d486:	17bc      	asrs	r4, r7, #30
 801d488:	f004 0402 	and.w	r4, r4, #2
 801d48c:	ea53 0909 	orrs.w	r9, r3, r9
 801d490:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801d494:	d107      	bne.n	801d4a6 <__ieee754_atan2+0x7e>
 801d496:	2c02      	cmp	r4, #2
 801d498:	d05f      	beq.n	801d55a <__ieee754_atan2+0x132>
 801d49a:	2c03      	cmp	r4, #3
 801d49c:	d1e5      	bne.n	801d46a <__ieee754_atan2+0x42>
 801d49e:	a140      	add	r1, pc, #256	; (adr r1, 801d5a0 <__ieee754_atan2+0x178>)
 801d4a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d4a4:	e7e1      	b.n	801d46a <__ieee754_atan2+0x42>
 801d4a6:	4315      	orrs	r5, r2
 801d4a8:	d106      	bne.n	801d4b8 <__ieee754_atan2+0x90>
 801d4aa:	f1be 0f00 	cmp.w	lr, #0
 801d4ae:	da5f      	bge.n	801d570 <__ieee754_atan2+0x148>
 801d4b0:	a13d      	add	r1, pc, #244	; (adr r1, 801d5a8 <__ieee754_atan2+0x180>)
 801d4b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d4b6:	e7d8      	b.n	801d46a <__ieee754_atan2+0x42>
 801d4b8:	4542      	cmp	r2, r8
 801d4ba:	d10f      	bne.n	801d4dc <__ieee754_atan2+0xb4>
 801d4bc:	4293      	cmp	r3, r2
 801d4be:	f104 34ff 	add.w	r4, r4, #4294967295
 801d4c2:	d107      	bne.n	801d4d4 <__ieee754_atan2+0xac>
 801d4c4:	2c02      	cmp	r4, #2
 801d4c6:	d84c      	bhi.n	801d562 <__ieee754_atan2+0x13a>
 801d4c8:	4b33      	ldr	r3, [pc, #204]	; (801d598 <__ieee754_atan2+0x170>)
 801d4ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d4ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d4d2:	e7ca      	b.n	801d46a <__ieee754_atan2+0x42>
 801d4d4:	2c02      	cmp	r4, #2
 801d4d6:	d848      	bhi.n	801d56a <__ieee754_atan2+0x142>
 801d4d8:	4b30      	ldr	r3, [pc, #192]	; (801d59c <__ieee754_atan2+0x174>)
 801d4da:	e7f6      	b.n	801d4ca <__ieee754_atan2+0xa2>
 801d4dc:	4543      	cmp	r3, r8
 801d4de:	d0e4      	beq.n	801d4aa <__ieee754_atan2+0x82>
 801d4e0:	1a9b      	subs	r3, r3, r2
 801d4e2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801d4e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d4ea:	da1e      	bge.n	801d52a <__ieee754_atan2+0x102>
 801d4ec:	2f00      	cmp	r7, #0
 801d4ee:	da01      	bge.n	801d4f4 <__ieee754_atan2+0xcc>
 801d4f0:	323c      	adds	r2, #60	; 0x3c
 801d4f2:	db1e      	blt.n	801d532 <__ieee754_atan2+0x10a>
 801d4f4:	4632      	mov	r2, r6
 801d4f6:	463b      	mov	r3, r7
 801d4f8:	f7e3 f9a8 	bl	800084c <__aeabi_ddiv>
 801d4fc:	ec41 0b10 	vmov	d0, r0, r1
 801d500:	f000 f9fa 	bl	801d8f8 <fabs>
 801d504:	f000 f858 	bl	801d5b8 <atan>
 801d508:	ec51 0b10 	vmov	r0, r1, d0
 801d50c:	2c01      	cmp	r4, #1
 801d50e:	d013      	beq.n	801d538 <__ieee754_atan2+0x110>
 801d510:	2c02      	cmp	r4, #2
 801d512:	d015      	beq.n	801d540 <__ieee754_atan2+0x118>
 801d514:	2c00      	cmp	r4, #0
 801d516:	d0a8      	beq.n	801d46a <__ieee754_atan2+0x42>
 801d518:	a317      	add	r3, pc, #92	; (adr r3, 801d578 <__ieee754_atan2+0x150>)
 801d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d51e:	f7e2 feb3 	bl	8000288 <__aeabi_dsub>
 801d522:	a317      	add	r3, pc, #92	; (adr r3, 801d580 <__ieee754_atan2+0x158>)
 801d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d528:	e014      	b.n	801d554 <__ieee754_atan2+0x12c>
 801d52a:	a117      	add	r1, pc, #92	; (adr r1, 801d588 <__ieee754_atan2+0x160>)
 801d52c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d530:	e7ec      	b.n	801d50c <__ieee754_atan2+0xe4>
 801d532:	2000      	movs	r0, #0
 801d534:	2100      	movs	r1, #0
 801d536:	e7e9      	b.n	801d50c <__ieee754_atan2+0xe4>
 801d538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d53c:	4619      	mov	r1, r3
 801d53e:	e794      	b.n	801d46a <__ieee754_atan2+0x42>
 801d540:	a30d      	add	r3, pc, #52	; (adr r3, 801d578 <__ieee754_atan2+0x150>)
 801d542:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d546:	f7e2 fe9f 	bl	8000288 <__aeabi_dsub>
 801d54a:	4602      	mov	r2, r0
 801d54c:	460b      	mov	r3, r1
 801d54e:	a10c      	add	r1, pc, #48	; (adr r1, 801d580 <__ieee754_atan2+0x158>)
 801d550:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d554:	f7e2 fe98 	bl	8000288 <__aeabi_dsub>
 801d558:	e787      	b.n	801d46a <__ieee754_atan2+0x42>
 801d55a:	a109      	add	r1, pc, #36	; (adr r1, 801d580 <__ieee754_atan2+0x158>)
 801d55c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d560:	e783      	b.n	801d46a <__ieee754_atan2+0x42>
 801d562:	a10b      	add	r1, pc, #44	; (adr r1, 801d590 <__ieee754_atan2+0x168>)
 801d564:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d568:	e77f      	b.n	801d46a <__ieee754_atan2+0x42>
 801d56a:	2000      	movs	r0, #0
 801d56c:	2100      	movs	r1, #0
 801d56e:	e77c      	b.n	801d46a <__ieee754_atan2+0x42>
 801d570:	a105      	add	r1, pc, #20	; (adr r1, 801d588 <__ieee754_atan2+0x160>)
 801d572:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d576:	e778      	b.n	801d46a <__ieee754_atan2+0x42>
 801d578:	33145c07 	.word	0x33145c07
 801d57c:	3ca1a626 	.word	0x3ca1a626
 801d580:	54442d18 	.word	0x54442d18
 801d584:	400921fb 	.word	0x400921fb
 801d588:	54442d18 	.word	0x54442d18
 801d58c:	3ff921fb 	.word	0x3ff921fb
 801d590:	54442d18 	.word	0x54442d18
 801d594:	3fe921fb 	.word	0x3fe921fb
 801d598:	0801efb0 	.word	0x0801efb0
 801d59c:	0801efc8 	.word	0x0801efc8
 801d5a0:	54442d18 	.word	0x54442d18
 801d5a4:	c00921fb 	.word	0xc00921fb
 801d5a8:	54442d18 	.word	0x54442d18
 801d5ac:	bff921fb 	.word	0xbff921fb
 801d5b0:	7ff00000 	.word	0x7ff00000
 801d5b4:	00000000 	.word	0x00000000

0801d5b8 <atan>:
 801d5b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5bc:	ec55 4b10 	vmov	r4, r5, d0
 801d5c0:	4bc3      	ldr	r3, [pc, #780]	; (801d8d0 <atan+0x318>)
 801d5c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d5c6:	429e      	cmp	r6, r3
 801d5c8:	46ab      	mov	fp, r5
 801d5ca:	dd18      	ble.n	801d5fe <atan+0x46>
 801d5cc:	4bc1      	ldr	r3, [pc, #772]	; (801d8d4 <atan+0x31c>)
 801d5ce:	429e      	cmp	r6, r3
 801d5d0:	dc01      	bgt.n	801d5d6 <atan+0x1e>
 801d5d2:	d109      	bne.n	801d5e8 <atan+0x30>
 801d5d4:	b144      	cbz	r4, 801d5e8 <atan+0x30>
 801d5d6:	4622      	mov	r2, r4
 801d5d8:	462b      	mov	r3, r5
 801d5da:	4620      	mov	r0, r4
 801d5dc:	4629      	mov	r1, r5
 801d5de:	f7e2 fe55 	bl	800028c <__adddf3>
 801d5e2:	4604      	mov	r4, r0
 801d5e4:	460d      	mov	r5, r1
 801d5e6:	e006      	b.n	801d5f6 <atan+0x3e>
 801d5e8:	f1bb 0f00 	cmp.w	fp, #0
 801d5ec:	f300 8131 	bgt.w	801d852 <atan+0x29a>
 801d5f0:	a59b      	add	r5, pc, #620	; (adr r5, 801d860 <atan+0x2a8>)
 801d5f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d5f6:	ec45 4b10 	vmov	d0, r4, r5
 801d5fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5fe:	4bb6      	ldr	r3, [pc, #728]	; (801d8d8 <atan+0x320>)
 801d600:	429e      	cmp	r6, r3
 801d602:	dc14      	bgt.n	801d62e <atan+0x76>
 801d604:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801d608:	429e      	cmp	r6, r3
 801d60a:	dc0d      	bgt.n	801d628 <atan+0x70>
 801d60c:	a396      	add	r3, pc, #600	; (adr r3, 801d868 <atan+0x2b0>)
 801d60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d612:	ee10 0a10 	vmov	r0, s0
 801d616:	4629      	mov	r1, r5
 801d618:	f7e2 fe38 	bl	800028c <__adddf3>
 801d61c:	4baf      	ldr	r3, [pc, #700]	; (801d8dc <atan+0x324>)
 801d61e:	2200      	movs	r2, #0
 801d620:	f7e3 fa7a 	bl	8000b18 <__aeabi_dcmpgt>
 801d624:	2800      	cmp	r0, #0
 801d626:	d1e6      	bne.n	801d5f6 <atan+0x3e>
 801d628:	f04f 3aff 	mov.w	sl, #4294967295
 801d62c:	e02b      	b.n	801d686 <atan+0xce>
 801d62e:	f000 f963 	bl	801d8f8 <fabs>
 801d632:	4bab      	ldr	r3, [pc, #684]	; (801d8e0 <atan+0x328>)
 801d634:	429e      	cmp	r6, r3
 801d636:	ec55 4b10 	vmov	r4, r5, d0
 801d63a:	f300 80bf 	bgt.w	801d7bc <atan+0x204>
 801d63e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801d642:	429e      	cmp	r6, r3
 801d644:	f300 80a0 	bgt.w	801d788 <atan+0x1d0>
 801d648:	ee10 2a10 	vmov	r2, s0
 801d64c:	ee10 0a10 	vmov	r0, s0
 801d650:	462b      	mov	r3, r5
 801d652:	4629      	mov	r1, r5
 801d654:	f7e2 fe1a 	bl	800028c <__adddf3>
 801d658:	4ba0      	ldr	r3, [pc, #640]	; (801d8dc <atan+0x324>)
 801d65a:	2200      	movs	r2, #0
 801d65c:	f7e2 fe14 	bl	8000288 <__aeabi_dsub>
 801d660:	2200      	movs	r2, #0
 801d662:	4606      	mov	r6, r0
 801d664:	460f      	mov	r7, r1
 801d666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d66a:	4620      	mov	r0, r4
 801d66c:	4629      	mov	r1, r5
 801d66e:	f7e2 fe0d 	bl	800028c <__adddf3>
 801d672:	4602      	mov	r2, r0
 801d674:	460b      	mov	r3, r1
 801d676:	4630      	mov	r0, r6
 801d678:	4639      	mov	r1, r7
 801d67a:	f7e3 f8e7 	bl	800084c <__aeabi_ddiv>
 801d67e:	f04f 0a00 	mov.w	sl, #0
 801d682:	4604      	mov	r4, r0
 801d684:	460d      	mov	r5, r1
 801d686:	4622      	mov	r2, r4
 801d688:	462b      	mov	r3, r5
 801d68a:	4620      	mov	r0, r4
 801d68c:	4629      	mov	r1, r5
 801d68e:	f7e2 ffb3 	bl	80005f8 <__aeabi_dmul>
 801d692:	4602      	mov	r2, r0
 801d694:	460b      	mov	r3, r1
 801d696:	4680      	mov	r8, r0
 801d698:	4689      	mov	r9, r1
 801d69a:	f7e2 ffad 	bl	80005f8 <__aeabi_dmul>
 801d69e:	a374      	add	r3, pc, #464	; (adr r3, 801d870 <atan+0x2b8>)
 801d6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6a4:	4606      	mov	r6, r0
 801d6a6:	460f      	mov	r7, r1
 801d6a8:	f7e2 ffa6 	bl	80005f8 <__aeabi_dmul>
 801d6ac:	a372      	add	r3, pc, #456	; (adr r3, 801d878 <atan+0x2c0>)
 801d6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6b2:	f7e2 fdeb 	bl	800028c <__adddf3>
 801d6b6:	4632      	mov	r2, r6
 801d6b8:	463b      	mov	r3, r7
 801d6ba:	f7e2 ff9d 	bl	80005f8 <__aeabi_dmul>
 801d6be:	a370      	add	r3, pc, #448	; (adr r3, 801d880 <atan+0x2c8>)
 801d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6c4:	f7e2 fde2 	bl	800028c <__adddf3>
 801d6c8:	4632      	mov	r2, r6
 801d6ca:	463b      	mov	r3, r7
 801d6cc:	f7e2 ff94 	bl	80005f8 <__aeabi_dmul>
 801d6d0:	a36d      	add	r3, pc, #436	; (adr r3, 801d888 <atan+0x2d0>)
 801d6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6d6:	f7e2 fdd9 	bl	800028c <__adddf3>
 801d6da:	4632      	mov	r2, r6
 801d6dc:	463b      	mov	r3, r7
 801d6de:	f7e2 ff8b 	bl	80005f8 <__aeabi_dmul>
 801d6e2:	a36b      	add	r3, pc, #428	; (adr r3, 801d890 <atan+0x2d8>)
 801d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6e8:	f7e2 fdd0 	bl	800028c <__adddf3>
 801d6ec:	4632      	mov	r2, r6
 801d6ee:	463b      	mov	r3, r7
 801d6f0:	f7e2 ff82 	bl	80005f8 <__aeabi_dmul>
 801d6f4:	a368      	add	r3, pc, #416	; (adr r3, 801d898 <atan+0x2e0>)
 801d6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6fa:	f7e2 fdc7 	bl	800028c <__adddf3>
 801d6fe:	4642      	mov	r2, r8
 801d700:	464b      	mov	r3, r9
 801d702:	f7e2 ff79 	bl	80005f8 <__aeabi_dmul>
 801d706:	a366      	add	r3, pc, #408	; (adr r3, 801d8a0 <atan+0x2e8>)
 801d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d70c:	4680      	mov	r8, r0
 801d70e:	4689      	mov	r9, r1
 801d710:	4630      	mov	r0, r6
 801d712:	4639      	mov	r1, r7
 801d714:	f7e2 ff70 	bl	80005f8 <__aeabi_dmul>
 801d718:	a363      	add	r3, pc, #396	; (adr r3, 801d8a8 <atan+0x2f0>)
 801d71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d71e:	f7e2 fdb3 	bl	8000288 <__aeabi_dsub>
 801d722:	4632      	mov	r2, r6
 801d724:	463b      	mov	r3, r7
 801d726:	f7e2 ff67 	bl	80005f8 <__aeabi_dmul>
 801d72a:	a361      	add	r3, pc, #388	; (adr r3, 801d8b0 <atan+0x2f8>)
 801d72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d730:	f7e2 fdaa 	bl	8000288 <__aeabi_dsub>
 801d734:	4632      	mov	r2, r6
 801d736:	463b      	mov	r3, r7
 801d738:	f7e2 ff5e 	bl	80005f8 <__aeabi_dmul>
 801d73c:	a35e      	add	r3, pc, #376	; (adr r3, 801d8b8 <atan+0x300>)
 801d73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d742:	f7e2 fda1 	bl	8000288 <__aeabi_dsub>
 801d746:	4632      	mov	r2, r6
 801d748:	463b      	mov	r3, r7
 801d74a:	f7e2 ff55 	bl	80005f8 <__aeabi_dmul>
 801d74e:	a35c      	add	r3, pc, #368	; (adr r3, 801d8c0 <atan+0x308>)
 801d750:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d754:	f7e2 fd98 	bl	8000288 <__aeabi_dsub>
 801d758:	4632      	mov	r2, r6
 801d75a:	463b      	mov	r3, r7
 801d75c:	f7e2 ff4c 	bl	80005f8 <__aeabi_dmul>
 801d760:	4602      	mov	r2, r0
 801d762:	460b      	mov	r3, r1
 801d764:	4640      	mov	r0, r8
 801d766:	4649      	mov	r1, r9
 801d768:	f7e2 fd90 	bl	800028c <__adddf3>
 801d76c:	4622      	mov	r2, r4
 801d76e:	462b      	mov	r3, r5
 801d770:	f7e2 ff42 	bl	80005f8 <__aeabi_dmul>
 801d774:	f1ba 3fff 	cmp.w	sl, #4294967295
 801d778:	4602      	mov	r2, r0
 801d77a:	460b      	mov	r3, r1
 801d77c:	d14b      	bne.n	801d816 <atan+0x25e>
 801d77e:	4620      	mov	r0, r4
 801d780:	4629      	mov	r1, r5
 801d782:	f7e2 fd81 	bl	8000288 <__aeabi_dsub>
 801d786:	e72c      	b.n	801d5e2 <atan+0x2a>
 801d788:	ee10 0a10 	vmov	r0, s0
 801d78c:	4b53      	ldr	r3, [pc, #332]	; (801d8dc <atan+0x324>)
 801d78e:	2200      	movs	r2, #0
 801d790:	4629      	mov	r1, r5
 801d792:	f7e2 fd79 	bl	8000288 <__aeabi_dsub>
 801d796:	4b51      	ldr	r3, [pc, #324]	; (801d8dc <atan+0x324>)
 801d798:	4606      	mov	r6, r0
 801d79a:	460f      	mov	r7, r1
 801d79c:	2200      	movs	r2, #0
 801d79e:	4620      	mov	r0, r4
 801d7a0:	4629      	mov	r1, r5
 801d7a2:	f7e2 fd73 	bl	800028c <__adddf3>
 801d7a6:	4602      	mov	r2, r0
 801d7a8:	460b      	mov	r3, r1
 801d7aa:	4630      	mov	r0, r6
 801d7ac:	4639      	mov	r1, r7
 801d7ae:	f7e3 f84d 	bl	800084c <__aeabi_ddiv>
 801d7b2:	f04f 0a01 	mov.w	sl, #1
 801d7b6:	4604      	mov	r4, r0
 801d7b8:	460d      	mov	r5, r1
 801d7ba:	e764      	b.n	801d686 <atan+0xce>
 801d7bc:	4b49      	ldr	r3, [pc, #292]	; (801d8e4 <atan+0x32c>)
 801d7be:	429e      	cmp	r6, r3
 801d7c0:	da1d      	bge.n	801d7fe <atan+0x246>
 801d7c2:	ee10 0a10 	vmov	r0, s0
 801d7c6:	4b48      	ldr	r3, [pc, #288]	; (801d8e8 <atan+0x330>)
 801d7c8:	2200      	movs	r2, #0
 801d7ca:	4629      	mov	r1, r5
 801d7cc:	f7e2 fd5c 	bl	8000288 <__aeabi_dsub>
 801d7d0:	4b45      	ldr	r3, [pc, #276]	; (801d8e8 <atan+0x330>)
 801d7d2:	4606      	mov	r6, r0
 801d7d4:	460f      	mov	r7, r1
 801d7d6:	2200      	movs	r2, #0
 801d7d8:	4620      	mov	r0, r4
 801d7da:	4629      	mov	r1, r5
 801d7dc:	f7e2 ff0c 	bl	80005f8 <__aeabi_dmul>
 801d7e0:	4b3e      	ldr	r3, [pc, #248]	; (801d8dc <atan+0x324>)
 801d7e2:	2200      	movs	r2, #0
 801d7e4:	f7e2 fd52 	bl	800028c <__adddf3>
 801d7e8:	4602      	mov	r2, r0
 801d7ea:	460b      	mov	r3, r1
 801d7ec:	4630      	mov	r0, r6
 801d7ee:	4639      	mov	r1, r7
 801d7f0:	f7e3 f82c 	bl	800084c <__aeabi_ddiv>
 801d7f4:	f04f 0a02 	mov.w	sl, #2
 801d7f8:	4604      	mov	r4, r0
 801d7fa:	460d      	mov	r5, r1
 801d7fc:	e743      	b.n	801d686 <atan+0xce>
 801d7fe:	462b      	mov	r3, r5
 801d800:	ee10 2a10 	vmov	r2, s0
 801d804:	4939      	ldr	r1, [pc, #228]	; (801d8ec <atan+0x334>)
 801d806:	2000      	movs	r0, #0
 801d808:	f7e3 f820 	bl	800084c <__aeabi_ddiv>
 801d80c:	f04f 0a03 	mov.w	sl, #3
 801d810:	4604      	mov	r4, r0
 801d812:	460d      	mov	r5, r1
 801d814:	e737      	b.n	801d686 <atan+0xce>
 801d816:	4b36      	ldr	r3, [pc, #216]	; (801d8f0 <atan+0x338>)
 801d818:	4e36      	ldr	r6, [pc, #216]	; (801d8f4 <atan+0x33c>)
 801d81a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d822:	f7e2 fd31 	bl	8000288 <__aeabi_dsub>
 801d826:	4622      	mov	r2, r4
 801d828:	462b      	mov	r3, r5
 801d82a:	f7e2 fd2d 	bl	8000288 <__aeabi_dsub>
 801d82e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801d832:	4602      	mov	r2, r0
 801d834:	460b      	mov	r3, r1
 801d836:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d83a:	f7e2 fd25 	bl	8000288 <__aeabi_dsub>
 801d83e:	f1bb 0f00 	cmp.w	fp, #0
 801d842:	4604      	mov	r4, r0
 801d844:	460d      	mov	r5, r1
 801d846:	f6bf aed6 	bge.w	801d5f6 <atan+0x3e>
 801d84a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d84e:	461d      	mov	r5, r3
 801d850:	e6d1      	b.n	801d5f6 <atan+0x3e>
 801d852:	a51d      	add	r5, pc, #116	; (adr r5, 801d8c8 <atan+0x310>)
 801d854:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d858:	e6cd      	b.n	801d5f6 <atan+0x3e>
 801d85a:	bf00      	nop
 801d85c:	f3af 8000 	nop.w
 801d860:	54442d18 	.word	0x54442d18
 801d864:	bff921fb 	.word	0xbff921fb
 801d868:	8800759c 	.word	0x8800759c
 801d86c:	7e37e43c 	.word	0x7e37e43c
 801d870:	e322da11 	.word	0xe322da11
 801d874:	3f90ad3a 	.word	0x3f90ad3a
 801d878:	24760deb 	.word	0x24760deb
 801d87c:	3fa97b4b 	.word	0x3fa97b4b
 801d880:	a0d03d51 	.word	0xa0d03d51
 801d884:	3fb10d66 	.word	0x3fb10d66
 801d888:	c54c206e 	.word	0xc54c206e
 801d88c:	3fb745cd 	.word	0x3fb745cd
 801d890:	920083ff 	.word	0x920083ff
 801d894:	3fc24924 	.word	0x3fc24924
 801d898:	5555550d 	.word	0x5555550d
 801d89c:	3fd55555 	.word	0x3fd55555
 801d8a0:	2c6a6c2f 	.word	0x2c6a6c2f
 801d8a4:	bfa2b444 	.word	0xbfa2b444
 801d8a8:	52defd9a 	.word	0x52defd9a
 801d8ac:	3fadde2d 	.word	0x3fadde2d
 801d8b0:	af749a6d 	.word	0xaf749a6d
 801d8b4:	3fb3b0f2 	.word	0x3fb3b0f2
 801d8b8:	fe231671 	.word	0xfe231671
 801d8bc:	3fbc71c6 	.word	0x3fbc71c6
 801d8c0:	9998ebc4 	.word	0x9998ebc4
 801d8c4:	3fc99999 	.word	0x3fc99999
 801d8c8:	54442d18 	.word	0x54442d18
 801d8cc:	3ff921fb 	.word	0x3ff921fb
 801d8d0:	440fffff 	.word	0x440fffff
 801d8d4:	7ff00000 	.word	0x7ff00000
 801d8d8:	3fdbffff 	.word	0x3fdbffff
 801d8dc:	3ff00000 	.word	0x3ff00000
 801d8e0:	3ff2ffff 	.word	0x3ff2ffff
 801d8e4:	40038000 	.word	0x40038000
 801d8e8:	3ff80000 	.word	0x3ff80000
 801d8ec:	bff00000 	.word	0xbff00000
 801d8f0:	0801f000 	.word	0x0801f000
 801d8f4:	0801efe0 	.word	0x0801efe0

0801d8f8 <fabs>:
 801d8f8:	ec51 0b10 	vmov	r0, r1, d0
 801d8fc:	ee10 2a10 	vmov	r2, s0
 801d900:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d904:	ec43 2b10 	vmov	d0, r2, r3
 801d908:	4770      	bx	lr
	...

0801d90c <__kernel_cosf>:
 801d90c:	ee10 3a10 	vmov	r3, s0
 801d910:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d914:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801d918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d91c:	da05      	bge.n	801d92a <__kernel_cosf+0x1e>
 801d91e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d922:	ee17 2a90 	vmov	r2, s15
 801d926:	2a00      	cmp	r2, #0
 801d928:	d03b      	beq.n	801d9a2 <__kernel_cosf+0x96>
 801d92a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d92e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801d9a8 <__kernel_cosf+0x9c>
 801d932:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801d9ac <__kernel_cosf+0xa0>
 801d936:	4a1e      	ldr	r2, [pc, #120]	; (801d9b0 <__kernel_cosf+0xa4>)
 801d938:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d93c:	4293      	cmp	r3, r2
 801d93e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801d9b4 <__kernel_cosf+0xa8>
 801d942:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d946:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801d9b8 <__kernel_cosf+0xac>
 801d94a:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d94e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801d9bc <__kernel_cosf+0xb0>
 801d952:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d956:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801d9c0 <__kernel_cosf+0xb4>
 801d95a:	eea7 6a87 	vfma.f32	s12, s15, s14
 801d95e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801d962:	ee26 6a07 	vmul.f32	s12, s12, s14
 801d966:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d96a:	eee7 0a06 	vfma.f32	s1, s14, s12
 801d96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d972:	dc04      	bgt.n	801d97e <__kernel_cosf+0x72>
 801d974:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d978:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801d97c:	4770      	bx	lr
 801d97e:	4a11      	ldr	r2, [pc, #68]	; (801d9c4 <__kernel_cosf+0xb8>)
 801d980:	4293      	cmp	r3, r2
 801d982:	bfda      	itte	le
 801d984:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801d988:	ee07 3a10 	vmovle	s14, r3
 801d98c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801d990:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d994:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801d998:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801d99c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d9a0:	4770      	bx	lr
 801d9a2:	eeb0 0a66 	vmov.f32	s0, s13
 801d9a6:	4770      	bx	lr
 801d9a8:	ad47d74e 	.word	0xad47d74e
 801d9ac:	310f74f6 	.word	0x310f74f6
 801d9b0:	3e999999 	.word	0x3e999999
 801d9b4:	b493f27c 	.word	0xb493f27c
 801d9b8:	37d00d01 	.word	0x37d00d01
 801d9bc:	bab60b61 	.word	0xbab60b61
 801d9c0:	3d2aaaab 	.word	0x3d2aaaab
 801d9c4:	3f480000 	.word	0x3f480000

0801d9c8 <__kernel_sinf>:
 801d9c8:	ee10 3a10 	vmov	r3, s0
 801d9cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d9d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801d9d4:	da04      	bge.n	801d9e0 <__kernel_sinf+0x18>
 801d9d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d9da:	ee17 3a90 	vmov	r3, s15
 801d9de:	b35b      	cbz	r3, 801da38 <__kernel_sinf+0x70>
 801d9e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 801d9e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 801da3c <__kernel_sinf+0x74>
 801d9e8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801da40 <__kernel_sinf+0x78>
 801d9ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 801d9f0:	eddf 7a14 	vldr	s15, [pc, #80]	; 801da44 <__kernel_sinf+0x7c>
 801d9f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801d9f8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801da48 <__kernel_sinf+0x80>
 801d9fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 801da00:	eddf 7a12 	vldr	s15, [pc, #72]	; 801da4c <__kernel_sinf+0x84>
 801da04:	ee60 6a07 	vmul.f32	s13, s0, s14
 801da08:	eee6 7a07 	vfma.f32	s15, s12, s14
 801da0c:	b930      	cbnz	r0, 801da1c <__kernel_sinf+0x54>
 801da0e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801da50 <__kernel_sinf+0x88>
 801da12:	eea7 6a27 	vfma.f32	s12, s14, s15
 801da16:	eea6 0a26 	vfma.f32	s0, s12, s13
 801da1a:	4770      	bx	lr
 801da1c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801da20:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801da24:	eee0 7a86 	vfma.f32	s15, s1, s12
 801da28:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801da2c:	eddf 7a09 	vldr	s15, [pc, #36]	; 801da54 <__kernel_sinf+0x8c>
 801da30:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801da34:	ee30 0a60 	vsub.f32	s0, s0, s1
 801da38:	4770      	bx	lr
 801da3a:	bf00      	nop
 801da3c:	2f2ec9d3 	.word	0x2f2ec9d3
 801da40:	b2d72f34 	.word	0xb2d72f34
 801da44:	3638ef1b 	.word	0x3638ef1b
 801da48:	b9500d01 	.word	0xb9500d01
 801da4c:	3c088889 	.word	0x3c088889
 801da50:	be2aaaab 	.word	0xbe2aaaab
 801da54:	3e2aaaab 	.word	0x3e2aaaab

0801da58 <__kernel_tanf>:
 801da58:	b508      	push	{r3, lr}
 801da5a:	ee10 3a10 	vmov	r3, s0
 801da5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801da62:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801da66:	eef0 7a40 	vmov.f32	s15, s0
 801da6a:	da17      	bge.n	801da9c <__kernel_tanf+0x44>
 801da6c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801da70:	ee17 1a10 	vmov	r1, s14
 801da74:	bb41      	cbnz	r1, 801dac8 <__kernel_tanf+0x70>
 801da76:	1c43      	adds	r3, r0, #1
 801da78:	4313      	orrs	r3, r2
 801da7a:	d108      	bne.n	801da8e <__kernel_tanf+0x36>
 801da7c:	f7ff fa54 	bl	801cf28 <fabsf>
 801da80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801da84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da88:	eeb0 0a67 	vmov.f32	s0, s15
 801da8c:	bd08      	pop	{r3, pc}
 801da8e:	2801      	cmp	r0, #1
 801da90:	d0fa      	beq.n	801da88 <__kernel_tanf+0x30>
 801da92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801da96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da9a:	e7f5      	b.n	801da88 <__kernel_tanf+0x30>
 801da9c:	494c      	ldr	r1, [pc, #304]	; (801dbd0 <__kernel_tanf+0x178>)
 801da9e:	428a      	cmp	r2, r1
 801daa0:	db12      	blt.n	801dac8 <__kernel_tanf+0x70>
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801dbd4 <__kernel_tanf+0x17c>
 801daa8:	bfb8      	it	lt
 801daaa:	eef1 7a40 	vneglt.f32	s15, s0
 801daae:	ee37 7a67 	vsub.f32	s14, s14, s15
 801dab2:	eddf 7a49 	vldr	s15, [pc, #292]	; 801dbd8 <__kernel_tanf+0x180>
 801dab6:	bfb8      	it	lt
 801dab8:	eef1 0a60 	vneglt.f32	s1, s1
 801dabc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801dac0:	eddf 0a46 	vldr	s1, [pc, #280]	; 801dbdc <__kernel_tanf+0x184>
 801dac4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dac8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801dacc:	eddf 5a44 	vldr	s11, [pc, #272]	; 801dbe0 <__kernel_tanf+0x188>
 801dad0:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801dbe4 <__kernel_tanf+0x18c>
 801dad4:	ed9f 5a44 	vldr	s10, [pc, #272]	; 801dbe8 <__kernel_tanf+0x190>
 801dad8:	493d      	ldr	r1, [pc, #244]	; (801dbd0 <__kernel_tanf+0x178>)
 801dada:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801dade:	428a      	cmp	r2, r1
 801dae0:	eea7 6a25 	vfma.f32	s12, s14, s11
 801dae4:	eddf 5a41 	vldr	s11, [pc, #260]	; 801dbec <__kernel_tanf+0x194>
 801dae8:	eee6 5a07 	vfma.f32	s11, s12, s14
 801daec:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801dbf0 <__kernel_tanf+0x198>
 801daf0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801daf4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801dbf4 <__kernel_tanf+0x19c>
 801daf8:	eee6 5a07 	vfma.f32	s11, s12, s14
 801dafc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801dbf8 <__kernel_tanf+0x1a0>
 801db00:	eea5 6a87 	vfma.f32	s12, s11, s14
 801db04:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801dbfc <__kernel_tanf+0x1a4>
 801db08:	eee7 5a05 	vfma.f32	s11, s14, s10
 801db0c:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801dc00 <__kernel_tanf+0x1a8>
 801db10:	eea5 5a87 	vfma.f32	s10, s11, s14
 801db14:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801dc04 <__kernel_tanf+0x1ac>
 801db18:	eee5 5a07 	vfma.f32	s11, s10, s14
 801db1c:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801dc08 <__kernel_tanf+0x1b0>
 801db20:	eea5 5a87 	vfma.f32	s10, s11, s14
 801db24:	eddf 5a39 	vldr	s11, [pc, #228]	; 801dc0c <__kernel_tanf+0x1b4>
 801db28:	eee5 5a07 	vfma.f32	s11, s10, s14
 801db2c:	eeb0 7a46 	vmov.f32	s14, s12
 801db30:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801db34:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801db38:	eeb0 6a60 	vmov.f32	s12, s1
 801db3c:	eea7 6a05 	vfma.f32	s12, s14, s10
 801db40:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801dc10 <__kernel_tanf+0x1b8>
 801db44:	eee6 0a26 	vfma.f32	s1, s12, s13
 801db48:	eee5 0a07 	vfma.f32	s1, s10, s14
 801db4c:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801db50:	db1d      	blt.n	801db8e <__kernel_tanf+0x136>
 801db52:	ee07 0a10 	vmov	s14, r0
 801db56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801db5a:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801db5e:	ee76 6a87 	vadd.f32	s13, s13, s14
 801db62:	179b      	asrs	r3, r3, #30
 801db64:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801db68:	f003 0302 	and.w	r3, r3, #2
 801db6c:	f1c3 0301 	rsb	r3, r3, #1
 801db70:	ee76 6a60 	vsub.f32	s13, s12, s1
 801db74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801db78:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801db7c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801db80:	ee07 3a90 	vmov	s15, r3
 801db84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801db88:	ee67 7a87 	vmul.f32	s15, s15, s14
 801db8c:	e77c      	b.n	801da88 <__kernel_tanf+0x30>
 801db8e:	2801      	cmp	r0, #1
 801db90:	d01b      	beq.n	801dbca <__kernel_tanf+0x172>
 801db92:	4b20      	ldr	r3, [pc, #128]	; (801dc14 <__kernel_tanf+0x1bc>)
 801db94:	ee16 2a90 	vmov	r2, s13
 801db98:	401a      	ands	r2, r3
 801db9a:	ee05 2a90 	vmov	s11, r2
 801db9e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801dba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dba6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801dbaa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801dbae:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801dbb2:	ee16 2a10 	vmov	r2, s12
 801dbb6:	4013      	ands	r3, r2
 801dbb8:	ee07 3a90 	vmov	s15, r3
 801dbbc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801dbc0:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801dbc4:	eee7 7a06 	vfma.f32	s15, s14, s12
 801dbc8:	e75e      	b.n	801da88 <__kernel_tanf+0x30>
 801dbca:	eef0 7a66 	vmov.f32	s15, s13
 801dbce:	e75b      	b.n	801da88 <__kernel_tanf+0x30>
 801dbd0:	3f2ca140 	.word	0x3f2ca140
 801dbd4:	3f490fda 	.word	0x3f490fda
 801dbd8:	33222168 	.word	0x33222168
 801dbdc:	00000000 	.word	0x00000000
 801dbe0:	b79bae5f 	.word	0xb79bae5f
 801dbe4:	38a3f445 	.word	0x38a3f445
 801dbe8:	37d95384 	.word	0x37d95384
 801dbec:	3a1a26c8 	.word	0x3a1a26c8
 801dbf0:	3b6b6916 	.word	0x3b6b6916
 801dbf4:	3cb327a4 	.word	0x3cb327a4
 801dbf8:	3e088889 	.word	0x3e088889
 801dbfc:	3895c07a 	.word	0x3895c07a
 801dc00:	398137b9 	.word	0x398137b9
 801dc04:	3abede48 	.word	0x3abede48
 801dc08:	3c11371f 	.word	0x3c11371f
 801dc0c:	3d5d0dd1 	.word	0x3d5d0dd1
 801dc10:	3eaaaaab 	.word	0x3eaaaaab
 801dc14:	fffff000 	.word	0xfffff000

0801dc18 <__ieee754_acosf>:
 801dc18:	b508      	push	{r3, lr}
 801dc1a:	ee10 3a10 	vmov	r3, s0
 801dc1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801dc22:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801dc26:	ed2d 8b0c 	vpush	{d8-d13}
 801dc2a:	d10a      	bne.n	801dc42 <__ieee754_acosf+0x2a>
 801dc2c:	ed9f 0a65 	vldr	s0, [pc, #404]	; 801ddc4 <__ieee754_acosf+0x1ac>
 801dc30:	eddf 7a65 	vldr	s15, [pc, #404]	; 801ddc8 <__ieee754_acosf+0x1b0>
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	bfd8      	it	le
 801dc38:	eeb0 0a67 	vmovle.f32	s0, s15
 801dc3c:	ecbd 8b0c 	vpop	{d8-d13}
 801dc40:	bd08      	pop	{r3, pc}
 801dc42:	dd04      	ble.n	801dc4e <__ieee754_acosf+0x36>
 801dc44:	ee30 8a40 	vsub.f32	s16, s0, s0
 801dc48:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801dc4c:	e7f6      	b.n	801dc3c <__ieee754_acosf+0x24>
 801dc4e:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801dc52:	da3c      	bge.n	801dcce <__ieee754_acosf+0xb6>
 801dc54:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801dc58:	f340 80b1 	ble.w	801ddbe <__ieee754_acosf+0x1a6>
 801dc5c:	ee60 7a00 	vmul.f32	s15, s0, s0
 801dc60:	eddf 6a5a 	vldr	s13, [pc, #360]	; 801ddcc <__ieee754_acosf+0x1b4>
 801dc64:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 801ddd0 <__ieee754_acosf+0x1b8>
 801dc68:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 801ddd4 <__ieee754_acosf+0x1bc>
 801dc6c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801dc70:	eddf 6a59 	vldr	s13, [pc, #356]	; 801ddd8 <__ieee754_acosf+0x1c0>
 801dc74:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dc78:	ed9f 7a58 	vldr	s14, [pc, #352]	; 801dddc <__ieee754_acosf+0x1c4>
 801dc7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801dc80:	eddf 6a57 	vldr	s13, [pc, #348]	; 801dde0 <__ieee754_acosf+0x1c8>
 801dc84:	eee7 6a27 	vfma.f32	s13, s14, s15
 801dc88:	ed9f 7a56 	vldr	s14, [pc, #344]	; 801dde4 <__ieee754_acosf+0x1cc>
 801dc8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801dc90:	eddf 6a55 	vldr	s13, [pc, #340]	; 801dde8 <__ieee754_acosf+0x1d0>
 801dc94:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801dc98:	eddf 6a54 	vldr	s13, [pc, #336]	; 801ddec <__ieee754_acosf+0x1d4>
 801dc9c:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dca0:	ed9f 6a53 	vldr	s12, [pc, #332]	; 801ddf0 <__ieee754_acosf+0x1d8>
 801dca4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801dca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dcac:	eee6 6a27 	vfma.f32	s13, s12, s15
 801dcb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dcb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801dcb8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 801ddf4 <__ieee754_acosf+0x1dc>
 801dcbc:	eea0 7a67 	vfms.f32	s14, s0, s15
 801dcc0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801ddf8 <__ieee754_acosf+0x1e0>
 801dcc4:	ee30 7a47 	vsub.f32	s14, s0, s14
 801dcc8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801dccc:	e7b6      	b.n	801dc3c <__ieee754_acosf+0x24>
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	eddf da3e 	vldr	s27, [pc, #248]	; 801ddcc <__ieee754_acosf+0x1b4>
 801dcd4:	eddf ca3e 	vldr	s25, [pc, #248]	; 801ddd0 <__ieee754_acosf+0x1b8>
 801dcd8:	ed9f ca3f 	vldr	s24, [pc, #252]	; 801ddd8 <__ieee754_acosf+0x1c0>
 801dcdc:	eddf ba3f 	vldr	s23, [pc, #252]	; 801dddc <__ieee754_acosf+0x1c4>
 801dce0:	ed9f ba3f 	vldr	s22, [pc, #252]	; 801dde0 <__ieee754_acosf+0x1c8>
 801dce4:	eddf 8a3f 	vldr	s17, [pc, #252]	; 801dde4 <__ieee754_acosf+0x1cc>
 801dce8:	ed9f da3f 	vldr	s26, [pc, #252]	; 801dde8 <__ieee754_acosf+0x1d0>
 801dcec:	eddf aa39 	vldr	s21, [pc, #228]	; 801ddd4 <__ieee754_acosf+0x1bc>
 801dcf0:	ed9f aa3e 	vldr	s20, [pc, #248]	; 801ddec <__ieee754_acosf+0x1d4>
 801dcf4:	eddf 9a3e 	vldr	s19, [pc, #248]	; 801ddf0 <__ieee754_acosf+0x1d8>
 801dcf8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801dcfc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801dd00:	da28      	bge.n	801dd54 <__ieee754_acosf+0x13c>
 801dd02:	ee30 0a09 	vadd.f32	s0, s0, s18
 801dd06:	ee20 0a27 	vmul.f32	s0, s0, s15
 801dd0a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801dd0e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801dd12:	eeac ca80 	vfma.f32	s24, s25, s0
 801dd16:	eeaa aa80 	vfma.f32	s20, s21, s0
 801dd1a:	eeec ba00 	vfma.f32	s23, s24, s0
 801dd1e:	eeea 9a00 	vfma.f32	s19, s20, s0
 801dd22:	eeab ba80 	vfma.f32	s22, s23, s0
 801dd26:	eea9 9a80 	vfma.f32	s18, s19, s0
 801dd2a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801dd2e:	ee68 8a80 	vmul.f32	s17, s17, s0
 801dd32:	f000 fbef 	bl	801e514 <__ieee754_sqrtf>
 801dd36:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801dd3a:	eddf 7a30 	vldr	s15, [pc, #192]	; 801ddfc <__ieee754_acosf+0x1e4>
 801dd3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801dd42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801dd46:	ee77 7a80 	vadd.f32	s15, s15, s0
 801dd4a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801de00 <__ieee754_acosf+0x1e8>
 801dd4e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801dd52:	e773      	b.n	801dc3c <__ieee754_acosf+0x24>
 801dd54:	ee39 8a40 	vsub.f32	s16, s18, s0
 801dd58:	ee28 8a27 	vmul.f32	s16, s16, s15
 801dd5c:	eeb0 0a48 	vmov.f32	s0, s16
 801dd60:	f000 fbd8 	bl	801e514 <__ieee754_sqrtf>
 801dd64:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801dd68:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801dd6c:	eeac ca88 	vfma.f32	s24, s25, s16
 801dd70:	eeaa aa88 	vfma.f32	s20, s21, s16
 801dd74:	eeec ba08 	vfma.f32	s23, s24, s16
 801dd78:	ee10 3a10 	vmov	r3, s0
 801dd7c:	eeab ba88 	vfma.f32	s22, s23, s16
 801dd80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801dd84:	f023 030f 	bic.w	r3, r3, #15
 801dd88:	eeea 9a08 	vfma.f32	s19, s20, s16
 801dd8c:	ee07 3a90 	vmov	s15, r3
 801dd90:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801dd94:	eeb0 6a48 	vmov.f32	s12, s16
 801dd98:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801dd9c:	eea9 9a88 	vfma.f32	s18, s19, s16
 801dda0:	ee70 6a27 	vadd.f32	s13, s0, s15
 801dda4:	ee68 8a88 	vmul.f32	s17, s17, s16
 801dda8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801ddac:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801ddb0:	eea0 7a26 	vfma.f32	s14, s0, s13
 801ddb4:	ee37 0a87 	vadd.f32	s0, s15, s14
 801ddb8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ddbc:	e73e      	b.n	801dc3c <__ieee754_acosf+0x24>
 801ddbe:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801de04 <__ieee754_acosf+0x1ec>
 801ddc2:	e73b      	b.n	801dc3c <__ieee754_acosf+0x24>
 801ddc4:	00000000 	.word	0x00000000
 801ddc8:	40490fdb 	.word	0x40490fdb
 801ddcc:	3811ef08 	.word	0x3811ef08
 801ddd0:	3a4f7f04 	.word	0x3a4f7f04
 801ddd4:	bf303361 	.word	0xbf303361
 801ddd8:	bd241146 	.word	0xbd241146
 801dddc:	3e4e0aa8 	.word	0x3e4e0aa8
 801dde0:	bea6b090 	.word	0xbea6b090
 801dde4:	3e2aaaab 	.word	0x3e2aaaab
 801dde8:	3d9dc62e 	.word	0x3d9dc62e
 801ddec:	4001572d 	.word	0x4001572d
 801ddf0:	c019d139 	.word	0xc019d139
 801ddf4:	33a22168 	.word	0x33a22168
 801ddf8:	3fc90fda 	.word	0x3fc90fda
 801ddfc:	b3a22168 	.word	0xb3a22168
 801de00:	40490fda 	.word	0x40490fda
 801de04:	3fc90fdb 	.word	0x3fc90fdb

0801de08 <__ieee754_asinf>:
 801de08:	b538      	push	{r3, r4, r5, lr}
 801de0a:	ee10 5a10 	vmov	r5, s0
 801de0e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801de12:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801de16:	ed2d 8b04 	vpush	{d8-d9}
 801de1a:	d10c      	bne.n	801de36 <__ieee754_asinf+0x2e>
 801de1c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801df94 <__ieee754_asinf+0x18c>
 801de20:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801df98 <__ieee754_asinf+0x190>
 801de24:	ee60 7a27 	vmul.f32	s15, s0, s15
 801de28:	eee0 7a07 	vfma.f32	s15, s0, s14
 801de2c:	eeb0 0a67 	vmov.f32	s0, s15
 801de30:	ecbd 8b04 	vpop	{d8-d9}
 801de34:	bd38      	pop	{r3, r4, r5, pc}
 801de36:	dd04      	ble.n	801de42 <__ieee754_asinf+0x3a>
 801de38:	ee70 7a40 	vsub.f32	s15, s0, s0
 801de3c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801de40:	e7f6      	b.n	801de30 <__ieee754_asinf+0x28>
 801de42:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801de46:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801de4a:	da0b      	bge.n	801de64 <__ieee754_asinf+0x5c>
 801de4c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801de50:	da52      	bge.n	801def8 <__ieee754_asinf+0xf0>
 801de52:	eddf 7a52 	vldr	s15, [pc, #328]	; 801df9c <__ieee754_asinf+0x194>
 801de56:	ee70 7a27 	vadd.f32	s15, s0, s15
 801de5a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801de5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de62:	dce5      	bgt.n	801de30 <__ieee754_asinf+0x28>
 801de64:	f7ff f860 	bl	801cf28 <fabsf>
 801de68:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801de6c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801de70:	ee20 8a27 	vmul.f32	s16, s0, s15
 801de74:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801dfa0 <__ieee754_asinf+0x198>
 801de78:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801dfa4 <__ieee754_asinf+0x19c>
 801de7c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801dfa8 <__ieee754_asinf+0x1a0>
 801de80:	eea8 7a27 	vfma.f32	s14, s16, s15
 801de84:	eddf 7a49 	vldr	s15, [pc, #292]	; 801dfac <__ieee754_asinf+0x1a4>
 801de88:	eee7 7a08 	vfma.f32	s15, s14, s16
 801de8c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801dfb0 <__ieee754_asinf+0x1a8>
 801de90:	eea7 7a88 	vfma.f32	s14, s15, s16
 801de94:	eddf 7a47 	vldr	s15, [pc, #284]	; 801dfb4 <__ieee754_asinf+0x1ac>
 801de98:	eee7 7a08 	vfma.f32	s15, s14, s16
 801de9c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801dfb8 <__ieee754_asinf+0x1b0>
 801dea0:	eea7 9a88 	vfma.f32	s18, s15, s16
 801dea4:	eddf 7a45 	vldr	s15, [pc, #276]	; 801dfbc <__ieee754_asinf+0x1b4>
 801dea8:	eee8 7a07 	vfma.f32	s15, s16, s14
 801deac:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801dfc0 <__ieee754_asinf+0x1b8>
 801deb0:	eea7 7a88 	vfma.f32	s14, s15, s16
 801deb4:	eddf 7a43 	vldr	s15, [pc, #268]	; 801dfc4 <__ieee754_asinf+0x1bc>
 801deb8:	eee7 7a08 	vfma.f32	s15, s14, s16
 801debc:	eeb0 0a48 	vmov.f32	s0, s16
 801dec0:	eee7 8a88 	vfma.f32	s17, s15, s16
 801dec4:	f000 fb26 	bl	801e514 <__ieee754_sqrtf>
 801dec8:	4b3f      	ldr	r3, [pc, #252]	; (801dfc8 <__ieee754_asinf+0x1c0>)
 801deca:	ee29 9a08 	vmul.f32	s18, s18, s16
 801dece:	429c      	cmp	r4, r3
 801ded0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801ded4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801ded8:	dd3d      	ble.n	801df56 <__ieee754_asinf+0x14e>
 801deda:	eea0 0a06 	vfma.f32	s0, s0, s12
 801dede:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801dfcc <__ieee754_asinf+0x1c4>
 801dee2:	eee0 7a26 	vfma.f32	s15, s0, s13
 801dee6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801df98 <__ieee754_asinf+0x190>
 801deea:	ee30 0a67 	vsub.f32	s0, s0, s15
 801deee:	2d00      	cmp	r5, #0
 801def0:	bfd8      	it	le
 801def2:	eeb1 0a40 	vnegle.f32	s0, s0
 801def6:	e79b      	b.n	801de30 <__ieee754_asinf+0x28>
 801def8:	ee60 7a00 	vmul.f32	s15, s0, s0
 801defc:	eddf 6a29 	vldr	s13, [pc, #164]	; 801dfa4 <__ieee754_asinf+0x19c>
 801df00:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801dfa0 <__ieee754_asinf+0x198>
 801df04:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801dfb8 <__ieee754_asinf+0x1b0>
 801df08:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801df0c:	eddf 6a27 	vldr	s13, [pc, #156]	; 801dfac <__ieee754_asinf+0x1a4>
 801df10:	eee7 6a27 	vfma.f32	s13, s14, s15
 801df14:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801dfb0 <__ieee754_asinf+0x1a8>
 801df18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801df1c:	eddf 6a25 	vldr	s13, [pc, #148]	; 801dfb4 <__ieee754_asinf+0x1ac>
 801df20:	eee7 6a27 	vfma.f32	s13, s14, s15
 801df24:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801dfa8 <__ieee754_asinf+0x1a0>
 801df28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801df2c:	eddf 6a23 	vldr	s13, [pc, #140]	; 801dfbc <__ieee754_asinf+0x1b4>
 801df30:	eee7 6a86 	vfma.f32	s13, s15, s12
 801df34:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801dfc0 <__ieee754_asinf+0x1b8>
 801df38:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801df3c:	eddf 6a21 	vldr	s13, [pc, #132]	; 801dfc4 <__ieee754_asinf+0x1bc>
 801df40:	eee6 6a27 	vfma.f32	s13, s12, s15
 801df44:	ee27 7a27 	vmul.f32	s14, s14, s15
 801df48:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801df4c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801df50:	eea0 0a27 	vfma.f32	s0, s0, s15
 801df54:	e76c      	b.n	801de30 <__ieee754_asinf+0x28>
 801df56:	ee10 3a10 	vmov	r3, s0
 801df5a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801df5e:	f023 030f 	bic.w	r3, r3, #15
 801df62:	ee07 3a10 	vmov	s14, r3
 801df66:	eea7 8a47 	vfms.f32	s16, s14, s14
 801df6a:	ee70 7a07 	vadd.f32	s15, s0, s14
 801df6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801df72:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801df76:	eddf 7a07 	vldr	s15, [pc, #28]	; 801df94 <__ieee754_asinf+0x18c>
 801df7a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801df7e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801df82:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801dfd0 <__ieee754_asinf+0x1c8>
 801df86:	eeb0 6a40 	vmov.f32	s12, s0
 801df8a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801df8e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801df92:	e7aa      	b.n	801deea <__ieee754_asinf+0xe2>
 801df94:	b33bbd2e 	.word	0xb33bbd2e
 801df98:	3fc90fdb 	.word	0x3fc90fdb
 801df9c:	7149f2ca 	.word	0x7149f2ca
 801dfa0:	3a4f7f04 	.word	0x3a4f7f04
 801dfa4:	3811ef08 	.word	0x3811ef08
 801dfa8:	3e2aaaab 	.word	0x3e2aaaab
 801dfac:	bd241146 	.word	0xbd241146
 801dfb0:	3e4e0aa8 	.word	0x3e4e0aa8
 801dfb4:	bea6b090 	.word	0xbea6b090
 801dfb8:	3d9dc62e 	.word	0x3d9dc62e
 801dfbc:	bf303361 	.word	0xbf303361
 801dfc0:	4001572d 	.word	0x4001572d
 801dfc4:	c019d139 	.word	0xc019d139
 801dfc8:	3f799999 	.word	0x3f799999
 801dfcc:	333bbd2e 	.word	0x333bbd2e
 801dfd0:	3f490fdb 	.word	0x3f490fdb

0801dfd4 <__ieee754_atan2f>:
 801dfd4:	ee10 2a90 	vmov	r2, s1
 801dfd8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801dfdc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801dfe0:	b510      	push	{r4, lr}
 801dfe2:	eef0 7a40 	vmov.f32	s15, s0
 801dfe6:	dc06      	bgt.n	801dff6 <__ieee754_atan2f+0x22>
 801dfe8:	ee10 0a10 	vmov	r0, s0
 801dfec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801dff0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801dff4:	dd04      	ble.n	801e000 <__ieee754_atan2f+0x2c>
 801dff6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801dffa:	eeb0 0a67 	vmov.f32	s0, s15
 801dffe:	bd10      	pop	{r4, pc}
 801e000:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801e004:	d103      	bne.n	801e00e <__ieee754_atan2f+0x3a>
 801e006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e00a:	f000 b9af 	b.w	801e36c <atanf>
 801e00e:	1794      	asrs	r4, r2, #30
 801e010:	f004 0402 	and.w	r4, r4, #2
 801e014:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801e018:	b943      	cbnz	r3, 801e02c <__ieee754_atan2f+0x58>
 801e01a:	2c02      	cmp	r4, #2
 801e01c:	d05e      	beq.n	801e0dc <__ieee754_atan2f+0x108>
 801e01e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801e0f0 <__ieee754_atan2f+0x11c>
 801e022:	2c03      	cmp	r4, #3
 801e024:	bf08      	it	eq
 801e026:	eef0 7a47 	vmoveq.f32	s15, s14
 801e02a:	e7e6      	b.n	801dffa <__ieee754_atan2f+0x26>
 801e02c:	b941      	cbnz	r1, 801e040 <__ieee754_atan2f+0x6c>
 801e02e:	eddf 7a31 	vldr	s15, [pc, #196]	; 801e0f4 <__ieee754_atan2f+0x120>
 801e032:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801e0f8 <__ieee754_atan2f+0x124>
 801e036:	2800      	cmp	r0, #0
 801e038:	bfb8      	it	lt
 801e03a:	eef0 7a47 	vmovlt.f32	s15, s14
 801e03e:	e7dc      	b.n	801dffa <__ieee754_atan2f+0x26>
 801e040:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801e044:	d110      	bne.n	801e068 <__ieee754_atan2f+0x94>
 801e046:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e04a:	f104 34ff 	add.w	r4, r4, #4294967295
 801e04e:	d107      	bne.n	801e060 <__ieee754_atan2f+0x8c>
 801e050:	2c02      	cmp	r4, #2
 801e052:	d846      	bhi.n	801e0e2 <__ieee754_atan2f+0x10e>
 801e054:	4b29      	ldr	r3, [pc, #164]	; (801e0fc <__ieee754_atan2f+0x128>)
 801e056:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801e05a:	edd3 7a00 	vldr	s15, [r3]
 801e05e:	e7cc      	b.n	801dffa <__ieee754_atan2f+0x26>
 801e060:	2c02      	cmp	r4, #2
 801e062:	d841      	bhi.n	801e0e8 <__ieee754_atan2f+0x114>
 801e064:	4b26      	ldr	r3, [pc, #152]	; (801e100 <__ieee754_atan2f+0x12c>)
 801e066:	e7f6      	b.n	801e056 <__ieee754_atan2f+0x82>
 801e068:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e06c:	d0df      	beq.n	801e02e <__ieee754_atan2f+0x5a>
 801e06e:	1a5b      	subs	r3, r3, r1
 801e070:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801e074:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801e078:	da1a      	bge.n	801e0b0 <__ieee754_atan2f+0xdc>
 801e07a:	2a00      	cmp	r2, #0
 801e07c:	da01      	bge.n	801e082 <__ieee754_atan2f+0xae>
 801e07e:	313c      	adds	r1, #60	; 0x3c
 801e080:	db19      	blt.n	801e0b6 <__ieee754_atan2f+0xe2>
 801e082:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801e086:	f7fe ff4f 	bl	801cf28 <fabsf>
 801e08a:	f000 f96f 	bl	801e36c <atanf>
 801e08e:	eef0 7a40 	vmov.f32	s15, s0
 801e092:	2c01      	cmp	r4, #1
 801e094:	d012      	beq.n	801e0bc <__ieee754_atan2f+0xe8>
 801e096:	2c02      	cmp	r4, #2
 801e098:	d017      	beq.n	801e0ca <__ieee754_atan2f+0xf6>
 801e09a:	2c00      	cmp	r4, #0
 801e09c:	d0ad      	beq.n	801dffa <__ieee754_atan2f+0x26>
 801e09e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801e104 <__ieee754_atan2f+0x130>
 801e0a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e0a6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801e108 <__ieee754_atan2f+0x134>
 801e0aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e0ae:	e7a4      	b.n	801dffa <__ieee754_atan2f+0x26>
 801e0b0:	eddf 7a10 	vldr	s15, [pc, #64]	; 801e0f4 <__ieee754_atan2f+0x120>
 801e0b4:	e7ed      	b.n	801e092 <__ieee754_atan2f+0xbe>
 801e0b6:	eddf 7a15 	vldr	s15, [pc, #84]	; 801e10c <__ieee754_atan2f+0x138>
 801e0ba:	e7ea      	b.n	801e092 <__ieee754_atan2f+0xbe>
 801e0bc:	ee17 3a90 	vmov	r3, s15
 801e0c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e0c4:	ee07 3a90 	vmov	s15, r3
 801e0c8:	e797      	b.n	801dffa <__ieee754_atan2f+0x26>
 801e0ca:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801e104 <__ieee754_atan2f+0x130>
 801e0ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e0d2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801e108 <__ieee754_atan2f+0x134>
 801e0d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e0da:	e78e      	b.n	801dffa <__ieee754_atan2f+0x26>
 801e0dc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801e108 <__ieee754_atan2f+0x134>
 801e0e0:	e78b      	b.n	801dffa <__ieee754_atan2f+0x26>
 801e0e2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801e110 <__ieee754_atan2f+0x13c>
 801e0e6:	e788      	b.n	801dffa <__ieee754_atan2f+0x26>
 801e0e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 801e10c <__ieee754_atan2f+0x138>
 801e0ec:	e785      	b.n	801dffa <__ieee754_atan2f+0x26>
 801e0ee:	bf00      	nop
 801e0f0:	c0490fdb 	.word	0xc0490fdb
 801e0f4:	3fc90fdb 	.word	0x3fc90fdb
 801e0f8:	bfc90fdb 	.word	0xbfc90fdb
 801e0fc:	0801f020 	.word	0x0801f020
 801e100:	0801f02c 	.word	0x0801f02c
 801e104:	33bbbd2e 	.word	0x33bbbd2e
 801e108:	40490fdb 	.word	0x40490fdb
 801e10c:	00000000 	.word	0x00000000
 801e110:	3f490fdb 	.word	0x3f490fdb

0801e114 <__ieee754_rem_pio2f>:
 801e114:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e116:	ee10 6a10 	vmov	r6, s0
 801e11a:	4b86      	ldr	r3, [pc, #536]	; (801e334 <__ieee754_rem_pio2f+0x220>)
 801e11c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801e120:	429d      	cmp	r5, r3
 801e122:	b087      	sub	sp, #28
 801e124:	4604      	mov	r4, r0
 801e126:	dc05      	bgt.n	801e134 <__ieee754_rem_pio2f+0x20>
 801e128:	2300      	movs	r3, #0
 801e12a:	ed80 0a00 	vstr	s0, [r0]
 801e12e:	6043      	str	r3, [r0, #4]
 801e130:	2000      	movs	r0, #0
 801e132:	e020      	b.n	801e176 <__ieee754_rem_pio2f+0x62>
 801e134:	4b80      	ldr	r3, [pc, #512]	; (801e338 <__ieee754_rem_pio2f+0x224>)
 801e136:	429d      	cmp	r5, r3
 801e138:	dc38      	bgt.n	801e1ac <__ieee754_rem_pio2f+0x98>
 801e13a:	2e00      	cmp	r6, #0
 801e13c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801e33c <__ieee754_rem_pio2f+0x228>
 801e140:	4b7f      	ldr	r3, [pc, #508]	; (801e340 <__ieee754_rem_pio2f+0x22c>)
 801e142:	f025 050f 	bic.w	r5, r5, #15
 801e146:	dd18      	ble.n	801e17a <__ieee754_rem_pio2f+0x66>
 801e148:	429d      	cmp	r5, r3
 801e14a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801e14e:	bf09      	itett	eq
 801e150:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801e344 <__ieee754_rem_pio2f+0x230>
 801e154:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801e348 <__ieee754_rem_pio2f+0x234>
 801e158:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801e15c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801e34c <__ieee754_rem_pio2f+0x238>
 801e160:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801e164:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e168:	edc0 6a00 	vstr	s13, [r0]
 801e16c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e170:	edc0 7a01 	vstr	s15, [r0, #4]
 801e174:	2001      	movs	r0, #1
 801e176:	b007      	add	sp, #28
 801e178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e17a:	429d      	cmp	r5, r3
 801e17c:	ee70 7a07 	vadd.f32	s15, s0, s14
 801e180:	bf09      	itett	eq
 801e182:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801e344 <__ieee754_rem_pio2f+0x230>
 801e186:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801e348 <__ieee754_rem_pio2f+0x234>
 801e18a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801e18e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801e34c <__ieee754_rem_pio2f+0x238>
 801e192:	ee77 6a87 	vadd.f32	s13, s15, s14
 801e196:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e19a:	edc0 6a00 	vstr	s13, [r0]
 801e19e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e1a2:	edc0 7a01 	vstr	s15, [r0, #4]
 801e1a6:	f04f 30ff 	mov.w	r0, #4294967295
 801e1aa:	e7e4      	b.n	801e176 <__ieee754_rem_pio2f+0x62>
 801e1ac:	4b68      	ldr	r3, [pc, #416]	; (801e350 <__ieee754_rem_pio2f+0x23c>)
 801e1ae:	429d      	cmp	r5, r3
 801e1b0:	dc71      	bgt.n	801e296 <__ieee754_rem_pio2f+0x182>
 801e1b2:	f7fe feb9 	bl	801cf28 <fabsf>
 801e1b6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801e354 <__ieee754_rem_pio2f+0x240>
 801e1ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e1be:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e1c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e1c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e1ca:	ee17 0a90 	vmov	r0, s15
 801e1ce:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801e33c <__ieee754_rem_pio2f+0x228>
 801e1d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 801e1d6:	281f      	cmp	r0, #31
 801e1d8:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801e348 <__ieee754_rem_pio2f+0x234>
 801e1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1e0:	eeb1 6a47 	vneg.f32	s12, s14
 801e1e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e1e8:	ee16 2a90 	vmov	r2, s13
 801e1ec:	dc1c      	bgt.n	801e228 <__ieee754_rem_pio2f+0x114>
 801e1ee:	495a      	ldr	r1, [pc, #360]	; (801e358 <__ieee754_rem_pio2f+0x244>)
 801e1f0:	1e47      	subs	r7, r0, #1
 801e1f2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801e1f6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801e1fa:	428b      	cmp	r3, r1
 801e1fc:	d014      	beq.n	801e228 <__ieee754_rem_pio2f+0x114>
 801e1fe:	6022      	str	r2, [r4, #0]
 801e200:	ed94 7a00 	vldr	s14, [r4]
 801e204:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e208:	2e00      	cmp	r6, #0
 801e20a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e20e:	ed84 0a01 	vstr	s0, [r4, #4]
 801e212:	dab0      	bge.n	801e176 <__ieee754_rem_pio2f+0x62>
 801e214:	eeb1 7a47 	vneg.f32	s14, s14
 801e218:	eeb1 0a40 	vneg.f32	s0, s0
 801e21c:	ed84 7a00 	vstr	s14, [r4]
 801e220:	ed84 0a01 	vstr	s0, [r4, #4]
 801e224:	4240      	negs	r0, r0
 801e226:	e7a6      	b.n	801e176 <__ieee754_rem_pio2f+0x62>
 801e228:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801e22c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801e230:	2908      	cmp	r1, #8
 801e232:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801e236:	dde2      	ble.n	801e1fe <__ieee754_rem_pio2f+0xea>
 801e238:	eddf 5a42 	vldr	s11, [pc, #264]	; 801e344 <__ieee754_rem_pio2f+0x230>
 801e23c:	eef0 6a40 	vmov.f32	s13, s0
 801e240:	eee6 6a25 	vfma.f32	s13, s12, s11
 801e244:	ee70 7a66 	vsub.f32	s15, s0, s13
 801e248:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e24c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801e34c <__ieee754_rem_pio2f+0x238>
 801e250:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801e254:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801e258:	ee15 2a90 	vmov	r2, s11
 801e25c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801e260:	1a5b      	subs	r3, r3, r1
 801e262:	2b19      	cmp	r3, #25
 801e264:	dc04      	bgt.n	801e270 <__ieee754_rem_pio2f+0x15c>
 801e266:	edc4 5a00 	vstr	s11, [r4]
 801e26a:	eeb0 0a66 	vmov.f32	s0, s13
 801e26e:	e7c7      	b.n	801e200 <__ieee754_rem_pio2f+0xec>
 801e270:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801e35c <__ieee754_rem_pio2f+0x248>
 801e274:	eeb0 0a66 	vmov.f32	s0, s13
 801e278:	eea6 0a25 	vfma.f32	s0, s12, s11
 801e27c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801e280:	eddf 6a37 	vldr	s13, [pc, #220]	; 801e360 <__ieee754_rem_pio2f+0x24c>
 801e284:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e288:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801e28c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e290:	ed84 7a00 	vstr	s14, [r4]
 801e294:	e7b4      	b.n	801e200 <__ieee754_rem_pio2f+0xec>
 801e296:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801e29a:	db06      	blt.n	801e2aa <__ieee754_rem_pio2f+0x196>
 801e29c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e2a0:	edc0 7a01 	vstr	s15, [r0, #4]
 801e2a4:	edc0 7a00 	vstr	s15, [r0]
 801e2a8:	e742      	b.n	801e130 <__ieee754_rem_pio2f+0x1c>
 801e2aa:	15ea      	asrs	r2, r5, #23
 801e2ac:	3a86      	subs	r2, #134	; 0x86
 801e2ae:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801e2b2:	ee07 3a90 	vmov	s15, r3
 801e2b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e2ba:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801e364 <__ieee754_rem_pio2f+0x250>
 801e2be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e2c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e2c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 801e2ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e2ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e2d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e2d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e2da:	ed8d 7a04 	vstr	s14, [sp, #16]
 801e2de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e2e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 801e2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2ea:	edcd 7a05 	vstr	s15, [sp, #20]
 801e2ee:	d11e      	bne.n	801e32e <__ieee754_rem_pio2f+0x21a>
 801e2f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801e2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2f8:	bf14      	ite	ne
 801e2fa:	2302      	movne	r3, #2
 801e2fc:	2301      	moveq	r3, #1
 801e2fe:	491a      	ldr	r1, [pc, #104]	; (801e368 <__ieee754_rem_pio2f+0x254>)
 801e300:	9101      	str	r1, [sp, #4]
 801e302:	2102      	movs	r1, #2
 801e304:	9100      	str	r1, [sp, #0]
 801e306:	a803      	add	r0, sp, #12
 801e308:	4621      	mov	r1, r4
 801e30a:	f000 f907 	bl	801e51c <__kernel_rem_pio2f>
 801e30e:	2e00      	cmp	r6, #0
 801e310:	f6bf af31 	bge.w	801e176 <__ieee754_rem_pio2f+0x62>
 801e314:	edd4 7a00 	vldr	s15, [r4]
 801e318:	eef1 7a67 	vneg.f32	s15, s15
 801e31c:	edc4 7a00 	vstr	s15, [r4]
 801e320:	edd4 7a01 	vldr	s15, [r4, #4]
 801e324:	eef1 7a67 	vneg.f32	s15, s15
 801e328:	edc4 7a01 	vstr	s15, [r4, #4]
 801e32c:	e77a      	b.n	801e224 <__ieee754_rem_pio2f+0x110>
 801e32e:	2303      	movs	r3, #3
 801e330:	e7e5      	b.n	801e2fe <__ieee754_rem_pio2f+0x1ea>
 801e332:	bf00      	nop
 801e334:	3f490fd8 	.word	0x3f490fd8
 801e338:	4016cbe3 	.word	0x4016cbe3
 801e33c:	3fc90f80 	.word	0x3fc90f80
 801e340:	3fc90fd0 	.word	0x3fc90fd0
 801e344:	37354400 	.word	0x37354400
 801e348:	37354443 	.word	0x37354443
 801e34c:	2e85a308 	.word	0x2e85a308
 801e350:	43490f80 	.word	0x43490f80
 801e354:	3f22f984 	.word	0x3f22f984
 801e358:	0801f038 	.word	0x0801f038
 801e35c:	2e85a300 	.word	0x2e85a300
 801e360:	248d3132 	.word	0x248d3132
 801e364:	43800000 	.word	0x43800000
 801e368:	0801f0b8 	.word	0x0801f0b8

0801e36c <atanf>:
 801e36c:	b538      	push	{r3, r4, r5, lr}
 801e36e:	ee10 5a10 	vmov	r5, s0
 801e372:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801e376:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801e37a:	eef0 7a40 	vmov.f32	s15, s0
 801e37e:	db10      	blt.n	801e3a2 <atanf+0x36>
 801e380:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801e384:	dd04      	ble.n	801e390 <atanf+0x24>
 801e386:	ee70 7a00 	vadd.f32	s15, s0, s0
 801e38a:	eeb0 0a67 	vmov.f32	s0, s15
 801e38e:	bd38      	pop	{r3, r4, r5, pc}
 801e390:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801e4c8 <atanf+0x15c>
 801e394:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801e4cc <atanf+0x160>
 801e398:	2d00      	cmp	r5, #0
 801e39a:	bfd8      	it	le
 801e39c:	eef0 7a47 	vmovle.f32	s15, s14
 801e3a0:	e7f3      	b.n	801e38a <atanf+0x1e>
 801e3a2:	4b4b      	ldr	r3, [pc, #300]	; (801e4d0 <atanf+0x164>)
 801e3a4:	429c      	cmp	r4, r3
 801e3a6:	dc10      	bgt.n	801e3ca <atanf+0x5e>
 801e3a8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801e3ac:	da0a      	bge.n	801e3c4 <atanf+0x58>
 801e3ae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801e4d4 <atanf+0x168>
 801e3b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 801e3b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e3ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801e3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3c2:	dce2      	bgt.n	801e38a <atanf+0x1e>
 801e3c4:	f04f 33ff 	mov.w	r3, #4294967295
 801e3c8:	e013      	b.n	801e3f2 <atanf+0x86>
 801e3ca:	f7fe fdad 	bl	801cf28 <fabsf>
 801e3ce:	4b42      	ldr	r3, [pc, #264]	; (801e4d8 <atanf+0x16c>)
 801e3d0:	429c      	cmp	r4, r3
 801e3d2:	dc4f      	bgt.n	801e474 <atanf+0x108>
 801e3d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801e3d8:	429c      	cmp	r4, r3
 801e3da:	dc41      	bgt.n	801e460 <atanf+0xf4>
 801e3dc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801e3e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e3e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e3e8:	2300      	movs	r3, #0
 801e3ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e3ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e3f2:	1c5a      	adds	r2, r3, #1
 801e3f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801e3f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801e4dc <atanf+0x170>
 801e3fc:	eddf 5a38 	vldr	s11, [pc, #224]	; 801e4e0 <atanf+0x174>
 801e400:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801e4e4 <atanf+0x178>
 801e404:	ee66 6a06 	vmul.f32	s13, s12, s12
 801e408:	eee6 5a87 	vfma.f32	s11, s13, s14
 801e40c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801e4e8 <atanf+0x17c>
 801e410:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e414:	eddf 5a35 	vldr	s11, [pc, #212]	; 801e4ec <atanf+0x180>
 801e418:	eee7 5a26 	vfma.f32	s11, s14, s13
 801e41c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801e4f0 <atanf+0x184>
 801e420:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e424:	eddf 5a33 	vldr	s11, [pc, #204]	; 801e4f4 <atanf+0x188>
 801e428:	eee7 5a26 	vfma.f32	s11, s14, s13
 801e42c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801e4f8 <atanf+0x18c>
 801e430:	eea6 5a87 	vfma.f32	s10, s13, s14
 801e434:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801e4fc <atanf+0x190>
 801e438:	eea5 7a26 	vfma.f32	s14, s10, s13
 801e43c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801e500 <atanf+0x194>
 801e440:	eea7 5a26 	vfma.f32	s10, s14, s13
 801e444:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801e504 <atanf+0x198>
 801e448:	eea5 7a26 	vfma.f32	s14, s10, s13
 801e44c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e450:	eea5 7a86 	vfma.f32	s14, s11, s12
 801e454:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e458:	d121      	bne.n	801e49e <atanf+0x132>
 801e45a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e45e:	e794      	b.n	801e38a <atanf+0x1e>
 801e460:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e464:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e468:	ee30 0a27 	vadd.f32	s0, s0, s15
 801e46c:	2301      	movs	r3, #1
 801e46e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e472:	e7be      	b.n	801e3f2 <atanf+0x86>
 801e474:	4b24      	ldr	r3, [pc, #144]	; (801e508 <atanf+0x19c>)
 801e476:	429c      	cmp	r4, r3
 801e478:	dc0b      	bgt.n	801e492 <atanf+0x126>
 801e47a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801e47e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e482:	eea0 7a27 	vfma.f32	s14, s0, s15
 801e486:	2302      	movs	r3, #2
 801e488:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e48c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e490:	e7af      	b.n	801e3f2 <atanf+0x86>
 801e492:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e496:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e49a:	2303      	movs	r3, #3
 801e49c:	e7a9      	b.n	801e3f2 <atanf+0x86>
 801e49e:	4a1b      	ldr	r2, [pc, #108]	; (801e50c <atanf+0x1a0>)
 801e4a0:	491b      	ldr	r1, [pc, #108]	; (801e510 <atanf+0x1a4>)
 801e4a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e4a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e4aa:	edd3 6a00 	vldr	s13, [r3]
 801e4ae:	ee37 7a66 	vsub.f32	s14, s14, s13
 801e4b2:	2d00      	cmp	r5, #0
 801e4b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e4b8:	edd2 7a00 	vldr	s15, [r2]
 801e4bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e4c0:	bfb8      	it	lt
 801e4c2:	eef1 7a67 	vneglt.f32	s15, s15
 801e4c6:	e760      	b.n	801e38a <atanf+0x1e>
 801e4c8:	3fc90fdb 	.word	0x3fc90fdb
 801e4cc:	bfc90fdb 	.word	0xbfc90fdb
 801e4d0:	3edfffff 	.word	0x3edfffff
 801e4d4:	7149f2ca 	.word	0x7149f2ca
 801e4d8:	3f97ffff 	.word	0x3f97ffff
 801e4dc:	3c8569d7 	.word	0x3c8569d7
 801e4e0:	3d4bda59 	.word	0x3d4bda59
 801e4e4:	bd6ef16b 	.word	0xbd6ef16b
 801e4e8:	3d886b35 	.word	0x3d886b35
 801e4ec:	3dba2e6e 	.word	0x3dba2e6e
 801e4f0:	3e124925 	.word	0x3e124925
 801e4f4:	3eaaaaab 	.word	0x3eaaaaab
 801e4f8:	bd15a221 	.word	0xbd15a221
 801e4fc:	bd9d8795 	.word	0xbd9d8795
 801e500:	bde38e38 	.word	0xbde38e38
 801e504:	be4ccccd 	.word	0xbe4ccccd
 801e508:	401bffff 	.word	0x401bffff
 801e50c:	0801f3d0 	.word	0x0801f3d0
 801e510:	0801f3e0 	.word	0x0801f3e0

0801e514 <__ieee754_sqrtf>:
 801e514:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801e518:	4770      	bx	lr
	...

0801e51c <__kernel_rem_pio2f>:
 801e51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e520:	ed2d 8b04 	vpush	{d8-d9}
 801e524:	b0d9      	sub	sp, #356	; 0x164
 801e526:	4688      	mov	r8, r1
 801e528:	9002      	str	r0, [sp, #8]
 801e52a:	49b8      	ldr	r1, [pc, #736]	; (801e80c <__kernel_rem_pio2f+0x2f0>)
 801e52c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801e52e:	9301      	str	r3, [sp, #4]
 801e530:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801e534:	9901      	ldr	r1, [sp, #4]
 801e536:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801e538:	f101 3bff 	add.w	fp, r1, #4294967295
 801e53c:	1d11      	adds	r1, r2, #4
 801e53e:	db25      	blt.n	801e58c <__kernel_rem_pio2f+0x70>
 801e540:	1ed0      	subs	r0, r2, #3
 801e542:	bf48      	it	mi
 801e544:	1d10      	addmi	r0, r2, #4
 801e546:	10c0      	asrs	r0, r0, #3
 801e548:	1c45      	adds	r5, r0, #1
 801e54a:	00e9      	lsls	r1, r5, #3
 801e54c:	eba0 070b 	sub.w	r7, r0, fp
 801e550:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801e81c <__kernel_rem_pio2f+0x300>
 801e554:	9103      	str	r1, [sp, #12]
 801e556:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801e55a:	eb0a 0c0b 	add.w	ip, sl, fp
 801e55e:	ae1c      	add	r6, sp, #112	; 0x70
 801e560:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801e564:	2400      	movs	r4, #0
 801e566:	4564      	cmp	r4, ip
 801e568:	dd12      	ble.n	801e590 <__kernel_rem_pio2f+0x74>
 801e56a:	9901      	ldr	r1, [sp, #4]
 801e56c:	ac1c      	add	r4, sp, #112	; 0x70
 801e56e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e572:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801e576:	f04f 0c00 	mov.w	ip, #0
 801e57a:	45d4      	cmp	ip, sl
 801e57c:	dc27      	bgt.n	801e5ce <__kernel_rem_pio2f+0xb2>
 801e57e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e582:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801e81c <__kernel_rem_pio2f+0x300>
 801e586:	4627      	mov	r7, r4
 801e588:	2600      	movs	r6, #0
 801e58a:	e016      	b.n	801e5ba <__kernel_rem_pio2f+0x9e>
 801e58c:	2000      	movs	r0, #0
 801e58e:	e7db      	b.n	801e548 <__kernel_rem_pio2f+0x2c>
 801e590:	42e7      	cmn	r7, r4
 801e592:	bf5d      	ittte	pl
 801e594:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801e598:	ee07 1a90 	vmovpl	s15, r1
 801e59c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801e5a0:	eef0 7a47 	vmovmi.f32	s15, s14
 801e5a4:	ece6 7a01 	vstmia	r6!, {s15}
 801e5a8:	3401      	adds	r4, #1
 801e5aa:	e7dc      	b.n	801e566 <__kernel_rem_pio2f+0x4a>
 801e5ac:	ecfe 6a01 	vldmia	lr!, {s13}
 801e5b0:	ed97 7a00 	vldr	s14, [r7]
 801e5b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e5b8:	3601      	adds	r6, #1
 801e5ba:	455e      	cmp	r6, fp
 801e5bc:	f1a7 0704 	sub.w	r7, r7, #4
 801e5c0:	ddf4      	ble.n	801e5ac <__kernel_rem_pio2f+0x90>
 801e5c2:	ece9 7a01 	vstmia	r9!, {s15}
 801e5c6:	f10c 0c01 	add.w	ip, ip, #1
 801e5ca:	3404      	adds	r4, #4
 801e5cc:	e7d5      	b.n	801e57a <__kernel_rem_pio2f+0x5e>
 801e5ce:	a908      	add	r1, sp, #32
 801e5d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e5d4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801e5d8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801e818 <__kernel_rem_pio2f+0x2fc>
 801e5dc:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801e814 <__kernel_rem_pio2f+0x2f8>
 801e5e0:	9105      	str	r1, [sp, #20]
 801e5e2:	9304      	str	r3, [sp, #16]
 801e5e4:	4656      	mov	r6, sl
 801e5e6:	00b3      	lsls	r3, r6, #2
 801e5e8:	9306      	str	r3, [sp, #24]
 801e5ea:	ab58      	add	r3, sp, #352	; 0x160
 801e5ec:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801e5f0:	ac08      	add	r4, sp, #32
 801e5f2:	ab44      	add	r3, sp, #272	; 0x110
 801e5f4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801e5f8:	46a4      	mov	ip, r4
 801e5fa:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801e5fe:	4637      	mov	r7, r6
 801e600:	2f00      	cmp	r7, #0
 801e602:	f1a0 0004 	sub.w	r0, r0, #4
 801e606:	dc4a      	bgt.n	801e69e <__kernel_rem_pio2f+0x182>
 801e608:	4628      	mov	r0, r5
 801e60a:	9207      	str	r2, [sp, #28]
 801e60c:	f000 f9f8 	bl	801ea00 <scalbnf>
 801e610:	eeb0 8a40 	vmov.f32	s16, s0
 801e614:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801e618:	ee28 0a00 	vmul.f32	s0, s16, s0
 801e61c:	f000 fa56 	bl	801eacc <floorf>
 801e620:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801e624:	eea0 8a67 	vfms.f32	s16, s0, s15
 801e628:	2d00      	cmp	r5, #0
 801e62a:	9a07      	ldr	r2, [sp, #28]
 801e62c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801e630:	ee17 9a90 	vmov	r9, s15
 801e634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e638:	ee38 8a67 	vsub.f32	s16, s16, s15
 801e63c:	dd41      	ble.n	801e6c2 <__kernel_rem_pio2f+0x1a6>
 801e63e:	f106 3cff 	add.w	ip, r6, #4294967295
 801e642:	ab08      	add	r3, sp, #32
 801e644:	f1c5 0e08 	rsb	lr, r5, #8
 801e648:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801e64c:	fa47 f00e 	asr.w	r0, r7, lr
 801e650:	4481      	add	r9, r0
 801e652:	fa00 f00e 	lsl.w	r0, r0, lr
 801e656:	1a3f      	subs	r7, r7, r0
 801e658:	f1c5 0007 	rsb	r0, r5, #7
 801e65c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801e660:	4107      	asrs	r7, r0
 801e662:	2f00      	cmp	r7, #0
 801e664:	dd3c      	ble.n	801e6e0 <__kernel_rem_pio2f+0x1c4>
 801e666:	f04f 0e00 	mov.w	lr, #0
 801e66a:	f109 0901 	add.w	r9, r9, #1
 801e66e:	4671      	mov	r1, lr
 801e670:	4576      	cmp	r6, lr
 801e672:	dc67      	bgt.n	801e744 <__kernel_rem_pio2f+0x228>
 801e674:	2d00      	cmp	r5, #0
 801e676:	dd03      	ble.n	801e680 <__kernel_rem_pio2f+0x164>
 801e678:	2d01      	cmp	r5, #1
 801e67a:	d074      	beq.n	801e766 <__kernel_rem_pio2f+0x24a>
 801e67c:	2d02      	cmp	r5, #2
 801e67e:	d07b      	beq.n	801e778 <__kernel_rem_pio2f+0x25c>
 801e680:	2f02      	cmp	r7, #2
 801e682:	d12d      	bne.n	801e6e0 <__kernel_rem_pio2f+0x1c4>
 801e684:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e688:	ee30 8a48 	vsub.f32	s16, s0, s16
 801e68c:	b341      	cbz	r1, 801e6e0 <__kernel_rem_pio2f+0x1c4>
 801e68e:	4628      	mov	r0, r5
 801e690:	9207      	str	r2, [sp, #28]
 801e692:	f000 f9b5 	bl	801ea00 <scalbnf>
 801e696:	9a07      	ldr	r2, [sp, #28]
 801e698:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e69c:	e020      	b.n	801e6e0 <__kernel_rem_pio2f+0x1c4>
 801e69e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801e6a2:	3f01      	subs	r7, #1
 801e6a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e6a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e6ac:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801e6b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e6b4:	ecac 0a01 	vstmia	ip!, {s0}
 801e6b8:	ed90 0a00 	vldr	s0, [r0]
 801e6bc:	ee37 0a80 	vadd.f32	s0, s15, s0
 801e6c0:	e79e      	b.n	801e600 <__kernel_rem_pio2f+0xe4>
 801e6c2:	d105      	bne.n	801e6d0 <__kernel_rem_pio2f+0x1b4>
 801e6c4:	1e70      	subs	r0, r6, #1
 801e6c6:	ab08      	add	r3, sp, #32
 801e6c8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801e6cc:	11ff      	asrs	r7, r7, #7
 801e6ce:	e7c8      	b.n	801e662 <__kernel_rem_pio2f+0x146>
 801e6d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e6d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6dc:	da30      	bge.n	801e740 <__kernel_rem_pio2f+0x224>
 801e6de:	2700      	movs	r7, #0
 801e6e0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6e8:	f040 809a 	bne.w	801e820 <__kernel_rem_pio2f+0x304>
 801e6ec:	1e74      	subs	r4, r6, #1
 801e6ee:	46a4      	mov	ip, r4
 801e6f0:	2100      	movs	r1, #0
 801e6f2:	45d4      	cmp	ip, sl
 801e6f4:	da47      	bge.n	801e786 <__kernel_rem_pio2f+0x26a>
 801e6f6:	2900      	cmp	r1, #0
 801e6f8:	d063      	beq.n	801e7c2 <__kernel_rem_pio2f+0x2a6>
 801e6fa:	ab08      	add	r3, sp, #32
 801e6fc:	3d08      	subs	r5, #8
 801e6fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801e702:	2b00      	cmp	r3, #0
 801e704:	d07f      	beq.n	801e806 <__kernel_rem_pio2f+0x2ea>
 801e706:	4628      	mov	r0, r5
 801e708:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e70c:	f000 f978 	bl	801ea00 <scalbnf>
 801e710:	1c63      	adds	r3, r4, #1
 801e712:	aa44      	add	r2, sp, #272	; 0x110
 801e714:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801e818 <__kernel_rem_pio2f+0x2fc>
 801e718:	0099      	lsls	r1, r3, #2
 801e71a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801e71e:	4623      	mov	r3, r4
 801e720:	2b00      	cmp	r3, #0
 801e722:	f280 80ad 	bge.w	801e880 <__kernel_rem_pio2f+0x364>
 801e726:	4623      	mov	r3, r4
 801e728:	2b00      	cmp	r3, #0
 801e72a:	f2c0 80cb 	blt.w	801e8c4 <__kernel_rem_pio2f+0x3a8>
 801e72e:	aa44      	add	r2, sp, #272	; 0x110
 801e730:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801e734:	4e36      	ldr	r6, [pc, #216]	; (801e810 <__kernel_rem_pio2f+0x2f4>)
 801e736:	eddf 7a39 	vldr	s15, [pc, #228]	; 801e81c <__kernel_rem_pio2f+0x300>
 801e73a:	2000      	movs	r0, #0
 801e73c:	1ae2      	subs	r2, r4, r3
 801e73e:	e0b6      	b.n	801e8ae <__kernel_rem_pio2f+0x392>
 801e740:	2702      	movs	r7, #2
 801e742:	e790      	b.n	801e666 <__kernel_rem_pio2f+0x14a>
 801e744:	6820      	ldr	r0, [r4, #0]
 801e746:	b949      	cbnz	r1, 801e75c <__kernel_rem_pio2f+0x240>
 801e748:	b118      	cbz	r0, 801e752 <__kernel_rem_pio2f+0x236>
 801e74a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801e74e:	6020      	str	r0, [r4, #0]
 801e750:	2001      	movs	r0, #1
 801e752:	f10e 0e01 	add.w	lr, lr, #1
 801e756:	3404      	adds	r4, #4
 801e758:	4601      	mov	r1, r0
 801e75a:	e789      	b.n	801e670 <__kernel_rem_pio2f+0x154>
 801e75c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801e760:	6020      	str	r0, [r4, #0]
 801e762:	4608      	mov	r0, r1
 801e764:	e7f5      	b.n	801e752 <__kernel_rem_pio2f+0x236>
 801e766:	1e74      	subs	r4, r6, #1
 801e768:	ab08      	add	r3, sp, #32
 801e76a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e76e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801e772:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801e776:	e783      	b.n	801e680 <__kernel_rem_pio2f+0x164>
 801e778:	1e74      	subs	r4, r6, #1
 801e77a:	ab08      	add	r3, sp, #32
 801e77c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e780:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801e784:	e7f5      	b.n	801e772 <__kernel_rem_pio2f+0x256>
 801e786:	ab08      	add	r3, sp, #32
 801e788:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801e78c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e790:	4301      	orrs	r1, r0
 801e792:	e7ae      	b.n	801e6f2 <__kernel_rem_pio2f+0x1d6>
 801e794:	3001      	adds	r0, #1
 801e796:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801e79a:	2f00      	cmp	r7, #0
 801e79c:	d0fa      	beq.n	801e794 <__kernel_rem_pio2f+0x278>
 801e79e:	9b06      	ldr	r3, [sp, #24]
 801e7a0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801e7a4:	eb0d 0403 	add.w	r4, sp, r3
 801e7a8:	9b01      	ldr	r3, [sp, #4]
 801e7aa:	18f7      	adds	r7, r6, r3
 801e7ac:	ab1c      	add	r3, sp, #112	; 0x70
 801e7ae:	f106 0c01 	add.w	ip, r6, #1
 801e7b2:	3c4c      	subs	r4, #76	; 0x4c
 801e7b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e7b8:	4430      	add	r0, r6
 801e7ba:	4560      	cmp	r0, ip
 801e7bc:	da04      	bge.n	801e7c8 <__kernel_rem_pio2f+0x2ac>
 801e7be:	4606      	mov	r6, r0
 801e7c0:	e711      	b.n	801e5e6 <__kernel_rem_pio2f+0xca>
 801e7c2:	9c05      	ldr	r4, [sp, #20]
 801e7c4:	2001      	movs	r0, #1
 801e7c6:	e7e6      	b.n	801e796 <__kernel_rem_pio2f+0x27a>
 801e7c8:	9b04      	ldr	r3, [sp, #16]
 801e7ca:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e7ce:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e7d2:	9306      	str	r3, [sp, #24]
 801e7d4:	ee07 3a90 	vmov	s15, r3
 801e7d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e7dc:	2600      	movs	r6, #0
 801e7de:	ece7 7a01 	vstmia	r7!, {s15}
 801e7e2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801e81c <__kernel_rem_pio2f+0x300>
 801e7e6:	46b9      	mov	r9, r7
 801e7e8:	455e      	cmp	r6, fp
 801e7ea:	dd04      	ble.n	801e7f6 <__kernel_rem_pio2f+0x2da>
 801e7ec:	ece4 7a01 	vstmia	r4!, {s15}
 801e7f0:	f10c 0c01 	add.w	ip, ip, #1
 801e7f4:	e7e1      	b.n	801e7ba <__kernel_rem_pio2f+0x29e>
 801e7f6:	ecfe 6a01 	vldmia	lr!, {s13}
 801e7fa:	ed39 7a01 	vldmdb	r9!, {s14}
 801e7fe:	3601      	adds	r6, #1
 801e800:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e804:	e7f0      	b.n	801e7e8 <__kernel_rem_pio2f+0x2cc>
 801e806:	3c01      	subs	r4, #1
 801e808:	e777      	b.n	801e6fa <__kernel_rem_pio2f+0x1de>
 801e80a:	bf00      	nop
 801e80c:	0801f41c 	.word	0x0801f41c
 801e810:	0801f3f0 	.word	0x0801f3f0
 801e814:	43800000 	.word	0x43800000
 801e818:	3b800000 	.word	0x3b800000
 801e81c:	00000000 	.word	0x00000000
 801e820:	9b03      	ldr	r3, [sp, #12]
 801e822:	eeb0 0a48 	vmov.f32	s0, s16
 801e826:	1a98      	subs	r0, r3, r2
 801e828:	f000 f8ea 	bl	801ea00 <scalbnf>
 801e82c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801e814 <__kernel_rem_pio2f+0x2f8>
 801e830:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801e834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e838:	db19      	blt.n	801e86e <__kernel_rem_pio2f+0x352>
 801e83a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801e818 <__kernel_rem_pio2f+0x2fc>
 801e83e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e842:	aa08      	add	r2, sp, #32
 801e844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e848:	1c74      	adds	r4, r6, #1
 801e84a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e84e:	3508      	adds	r5, #8
 801e850:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801e854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e858:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e85c:	ee10 3a10 	vmov	r3, s0
 801e860:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801e864:	ee17 3a90 	vmov	r3, s15
 801e868:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801e86c:	e74b      	b.n	801e706 <__kernel_rem_pio2f+0x1ea>
 801e86e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e872:	aa08      	add	r2, sp, #32
 801e874:	ee10 3a10 	vmov	r3, s0
 801e878:	4634      	mov	r4, r6
 801e87a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801e87e:	e742      	b.n	801e706 <__kernel_rem_pio2f+0x1ea>
 801e880:	a808      	add	r0, sp, #32
 801e882:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801e886:	9001      	str	r0, [sp, #4]
 801e888:	ee07 0a90 	vmov	s15, r0
 801e88c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e890:	3b01      	subs	r3, #1
 801e892:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e896:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e89a:	ed62 7a01 	vstmdb	r2!, {s15}
 801e89e:	e73f      	b.n	801e720 <__kernel_rem_pio2f+0x204>
 801e8a0:	ecf6 6a01 	vldmia	r6!, {s13}
 801e8a4:	ecb5 7a01 	vldmia	r5!, {s14}
 801e8a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e8ac:	3001      	adds	r0, #1
 801e8ae:	4550      	cmp	r0, sl
 801e8b0:	dc01      	bgt.n	801e8b6 <__kernel_rem_pio2f+0x39a>
 801e8b2:	4290      	cmp	r0, r2
 801e8b4:	ddf4      	ble.n	801e8a0 <__kernel_rem_pio2f+0x384>
 801e8b6:	a858      	add	r0, sp, #352	; 0x160
 801e8b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801e8bc:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801e8c0:	3b01      	subs	r3, #1
 801e8c2:	e731      	b.n	801e728 <__kernel_rem_pio2f+0x20c>
 801e8c4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801e8c6:	2b02      	cmp	r3, #2
 801e8c8:	dc09      	bgt.n	801e8de <__kernel_rem_pio2f+0x3c2>
 801e8ca:	2b00      	cmp	r3, #0
 801e8cc:	dc2b      	bgt.n	801e926 <__kernel_rem_pio2f+0x40a>
 801e8ce:	d044      	beq.n	801e95a <__kernel_rem_pio2f+0x43e>
 801e8d0:	f009 0007 	and.w	r0, r9, #7
 801e8d4:	b059      	add	sp, #356	; 0x164
 801e8d6:	ecbd 8b04 	vpop	{d8-d9}
 801e8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8de:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801e8e0:	2b03      	cmp	r3, #3
 801e8e2:	d1f5      	bne.n	801e8d0 <__kernel_rem_pio2f+0x3b4>
 801e8e4:	aa30      	add	r2, sp, #192	; 0xc0
 801e8e6:	1f0b      	subs	r3, r1, #4
 801e8e8:	4413      	add	r3, r2
 801e8ea:	461a      	mov	r2, r3
 801e8ec:	4620      	mov	r0, r4
 801e8ee:	2800      	cmp	r0, #0
 801e8f0:	f1a2 0204 	sub.w	r2, r2, #4
 801e8f4:	dc52      	bgt.n	801e99c <__kernel_rem_pio2f+0x480>
 801e8f6:	4622      	mov	r2, r4
 801e8f8:	2a01      	cmp	r2, #1
 801e8fa:	f1a3 0304 	sub.w	r3, r3, #4
 801e8fe:	dc5d      	bgt.n	801e9bc <__kernel_rem_pio2f+0x4a0>
 801e900:	ab30      	add	r3, sp, #192	; 0xc0
 801e902:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801e81c <__kernel_rem_pio2f+0x300>
 801e906:	440b      	add	r3, r1
 801e908:	2c01      	cmp	r4, #1
 801e90a:	dc67      	bgt.n	801e9dc <__kernel_rem_pio2f+0x4c0>
 801e90c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801e910:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801e914:	2f00      	cmp	r7, #0
 801e916:	d167      	bne.n	801e9e8 <__kernel_rem_pio2f+0x4cc>
 801e918:	edc8 6a00 	vstr	s13, [r8]
 801e91c:	ed88 7a01 	vstr	s14, [r8, #4]
 801e920:	edc8 7a02 	vstr	s15, [r8, #8]
 801e924:	e7d4      	b.n	801e8d0 <__kernel_rem_pio2f+0x3b4>
 801e926:	ab30      	add	r3, sp, #192	; 0xc0
 801e928:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801e81c <__kernel_rem_pio2f+0x300>
 801e92c:	440b      	add	r3, r1
 801e92e:	4622      	mov	r2, r4
 801e930:	2a00      	cmp	r2, #0
 801e932:	da24      	bge.n	801e97e <__kernel_rem_pio2f+0x462>
 801e934:	b34f      	cbz	r7, 801e98a <__kernel_rem_pio2f+0x46e>
 801e936:	eef1 7a47 	vneg.f32	s15, s14
 801e93a:	edc8 7a00 	vstr	s15, [r8]
 801e93e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801e942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e946:	aa31      	add	r2, sp, #196	; 0xc4
 801e948:	2301      	movs	r3, #1
 801e94a:	429c      	cmp	r4, r3
 801e94c:	da20      	bge.n	801e990 <__kernel_rem_pio2f+0x474>
 801e94e:	b10f      	cbz	r7, 801e954 <__kernel_rem_pio2f+0x438>
 801e950:	eef1 7a67 	vneg.f32	s15, s15
 801e954:	edc8 7a01 	vstr	s15, [r8, #4]
 801e958:	e7ba      	b.n	801e8d0 <__kernel_rem_pio2f+0x3b4>
 801e95a:	ab30      	add	r3, sp, #192	; 0xc0
 801e95c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801e81c <__kernel_rem_pio2f+0x300>
 801e960:	440b      	add	r3, r1
 801e962:	2c00      	cmp	r4, #0
 801e964:	da05      	bge.n	801e972 <__kernel_rem_pio2f+0x456>
 801e966:	b10f      	cbz	r7, 801e96c <__kernel_rem_pio2f+0x450>
 801e968:	eef1 7a67 	vneg.f32	s15, s15
 801e96c:	edc8 7a00 	vstr	s15, [r8]
 801e970:	e7ae      	b.n	801e8d0 <__kernel_rem_pio2f+0x3b4>
 801e972:	ed33 7a01 	vldmdb	r3!, {s14}
 801e976:	3c01      	subs	r4, #1
 801e978:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e97c:	e7f1      	b.n	801e962 <__kernel_rem_pio2f+0x446>
 801e97e:	ed73 7a01 	vldmdb	r3!, {s15}
 801e982:	3a01      	subs	r2, #1
 801e984:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e988:	e7d2      	b.n	801e930 <__kernel_rem_pio2f+0x414>
 801e98a:	eef0 7a47 	vmov.f32	s15, s14
 801e98e:	e7d4      	b.n	801e93a <__kernel_rem_pio2f+0x41e>
 801e990:	ecb2 7a01 	vldmia	r2!, {s14}
 801e994:	3301      	adds	r3, #1
 801e996:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e99a:	e7d6      	b.n	801e94a <__kernel_rem_pio2f+0x42e>
 801e99c:	edd2 7a00 	vldr	s15, [r2]
 801e9a0:	edd2 6a01 	vldr	s13, [r2, #4]
 801e9a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e9a8:	3801      	subs	r0, #1
 801e9aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e9ae:	ed82 7a00 	vstr	s14, [r2]
 801e9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e9b6:	edc2 7a01 	vstr	s15, [r2, #4]
 801e9ba:	e798      	b.n	801e8ee <__kernel_rem_pio2f+0x3d2>
 801e9bc:	edd3 7a00 	vldr	s15, [r3]
 801e9c0:	edd3 6a01 	vldr	s13, [r3, #4]
 801e9c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e9c8:	3a01      	subs	r2, #1
 801e9ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e9ce:	ed83 7a00 	vstr	s14, [r3]
 801e9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e9d6:	edc3 7a01 	vstr	s15, [r3, #4]
 801e9da:	e78d      	b.n	801e8f8 <__kernel_rem_pio2f+0x3dc>
 801e9dc:	ed33 7a01 	vldmdb	r3!, {s14}
 801e9e0:	3c01      	subs	r4, #1
 801e9e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e9e6:	e78f      	b.n	801e908 <__kernel_rem_pio2f+0x3ec>
 801e9e8:	eef1 6a66 	vneg.f32	s13, s13
 801e9ec:	eeb1 7a47 	vneg.f32	s14, s14
 801e9f0:	edc8 6a00 	vstr	s13, [r8]
 801e9f4:	ed88 7a01 	vstr	s14, [r8, #4]
 801e9f8:	eef1 7a67 	vneg.f32	s15, s15
 801e9fc:	e790      	b.n	801e920 <__kernel_rem_pio2f+0x404>
 801e9fe:	bf00      	nop

0801ea00 <scalbnf>:
 801ea00:	ee10 3a10 	vmov	r3, s0
 801ea04:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801ea08:	d02b      	beq.n	801ea62 <scalbnf+0x62>
 801ea0a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801ea0e:	d302      	bcc.n	801ea16 <scalbnf+0x16>
 801ea10:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ea14:	4770      	bx	lr
 801ea16:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801ea1a:	d123      	bne.n	801ea64 <scalbnf+0x64>
 801ea1c:	4b24      	ldr	r3, [pc, #144]	; (801eab0 <scalbnf+0xb0>)
 801ea1e:	eddf 7a25 	vldr	s15, [pc, #148]	; 801eab4 <scalbnf+0xb4>
 801ea22:	4298      	cmp	r0, r3
 801ea24:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ea28:	db17      	blt.n	801ea5a <scalbnf+0x5a>
 801ea2a:	ee10 3a10 	vmov	r3, s0
 801ea2e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ea32:	3a19      	subs	r2, #25
 801ea34:	f24c 3150 	movw	r1, #50000	; 0xc350
 801ea38:	4288      	cmp	r0, r1
 801ea3a:	dd15      	ble.n	801ea68 <scalbnf+0x68>
 801ea3c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801eab8 <scalbnf+0xb8>
 801ea40:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801eabc <scalbnf+0xbc>
 801ea44:	ee10 3a10 	vmov	r3, s0
 801ea48:	eeb0 7a67 	vmov.f32	s14, s15
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	bfb8      	it	lt
 801ea50:	eef0 7a66 	vmovlt.f32	s15, s13
 801ea54:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ea58:	4770      	bx	lr
 801ea5a:	eddf 7a19 	vldr	s15, [pc, #100]	; 801eac0 <scalbnf+0xc0>
 801ea5e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ea62:	4770      	bx	lr
 801ea64:	0dd2      	lsrs	r2, r2, #23
 801ea66:	e7e5      	b.n	801ea34 <scalbnf+0x34>
 801ea68:	4410      	add	r0, r2
 801ea6a:	28fe      	cmp	r0, #254	; 0xfe
 801ea6c:	dce6      	bgt.n	801ea3c <scalbnf+0x3c>
 801ea6e:	2800      	cmp	r0, #0
 801ea70:	dd06      	ble.n	801ea80 <scalbnf+0x80>
 801ea72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ea76:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ea7a:	ee00 3a10 	vmov	s0, r3
 801ea7e:	4770      	bx	lr
 801ea80:	f110 0f16 	cmn.w	r0, #22
 801ea84:	da09      	bge.n	801ea9a <scalbnf+0x9a>
 801ea86:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801eac0 <scalbnf+0xc0>
 801ea8a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801eac4 <scalbnf+0xc4>
 801ea8e:	ee10 3a10 	vmov	r3, s0
 801ea92:	eeb0 7a67 	vmov.f32	s14, s15
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	e7d9      	b.n	801ea4e <scalbnf+0x4e>
 801ea9a:	3019      	adds	r0, #25
 801ea9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801eaa0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801eaa4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801eac8 <scalbnf+0xc8>
 801eaa8:	ee07 3a90 	vmov	s15, r3
 801eaac:	e7d7      	b.n	801ea5e <scalbnf+0x5e>
 801eaae:	bf00      	nop
 801eab0:	ffff3cb0 	.word	0xffff3cb0
 801eab4:	4c000000 	.word	0x4c000000
 801eab8:	7149f2ca 	.word	0x7149f2ca
 801eabc:	f149f2ca 	.word	0xf149f2ca
 801eac0:	0da24260 	.word	0x0da24260
 801eac4:	8da24260 	.word	0x8da24260
 801eac8:	33000000 	.word	0x33000000

0801eacc <floorf>:
 801eacc:	ee10 3a10 	vmov	r3, s0
 801ead0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ead4:	3a7f      	subs	r2, #127	; 0x7f
 801ead6:	2a16      	cmp	r2, #22
 801ead8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801eadc:	dc2a      	bgt.n	801eb34 <floorf+0x68>
 801eade:	2a00      	cmp	r2, #0
 801eae0:	da11      	bge.n	801eb06 <floorf+0x3a>
 801eae2:	eddf 7a18 	vldr	s15, [pc, #96]	; 801eb44 <floorf+0x78>
 801eae6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801eaea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801eaee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eaf2:	dd05      	ble.n	801eb00 <floorf+0x34>
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	da23      	bge.n	801eb40 <floorf+0x74>
 801eaf8:	4a13      	ldr	r2, [pc, #76]	; (801eb48 <floorf+0x7c>)
 801eafa:	2900      	cmp	r1, #0
 801eafc:	bf18      	it	ne
 801eafe:	4613      	movne	r3, r2
 801eb00:	ee00 3a10 	vmov	s0, r3
 801eb04:	4770      	bx	lr
 801eb06:	4911      	ldr	r1, [pc, #68]	; (801eb4c <floorf+0x80>)
 801eb08:	4111      	asrs	r1, r2
 801eb0a:	420b      	tst	r3, r1
 801eb0c:	d0fa      	beq.n	801eb04 <floorf+0x38>
 801eb0e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801eb44 <floorf+0x78>
 801eb12:	ee30 0a27 	vadd.f32	s0, s0, s15
 801eb16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801eb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb1e:	ddef      	ble.n	801eb00 <floorf+0x34>
 801eb20:	2b00      	cmp	r3, #0
 801eb22:	bfbe      	ittt	lt
 801eb24:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801eb28:	fa40 f202 	asrlt.w	r2, r0, r2
 801eb2c:	189b      	addlt	r3, r3, r2
 801eb2e:	ea23 0301 	bic.w	r3, r3, r1
 801eb32:	e7e5      	b.n	801eb00 <floorf+0x34>
 801eb34:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801eb38:	d3e4      	bcc.n	801eb04 <floorf+0x38>
 801eb3a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801eb3e:	4770      	bx	lr
 801eb40:	2300      	movs	r3, #0
 801eb42:	e7dd      	b.n	801eb00 <floorf+0x34>
 801eb44:	7149f2ca 	.word	0x7149f2ca
 801eb48:	bf800000 	.word	0xbf800000
 801eb4c:	007fffff 	.word	0x007fffff

0801eb50 <_init>:
 801eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb52:	bf00      	nop
 801eb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb56:	bc08      	pop	{r3}
 801eb58:	469e      	mov	lr, r3
 801eb5a:	4770      	bx	lr

0801eb5c <_fini>:
 801eb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb5e:	bf00      	nop
 801eb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb62:	bc08      	pop	{r3}
 801eb64:	469e      	mov	lr, r3
 801eb66:	4770      	bx	lr
